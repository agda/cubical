{-# OPTIONS --cubical --no-import-sorts --allow-unsolved-metas #-}

module SyntheticReals.Test.Number where

open import Agda.Primitive renaming (_‚äî_ to ‚Ñì-max; lsuc to ‚Ñì-suc; lzero to ‚Ñì-zero)

private
  variable
    ‚Ñì ‚Ñì' ‚Ñì'' : Level

open import Cubical.Foundations.Everything renaming (_‚Åª¬π to _‚Åª¬π·µñ; assoc to ‚àô-assoc)
open import Cubical.Relation.Nullary.Base -- ¬¨_
open import Cubical.Relation.Binary.Base -- Rel
open import Cubical.Data.Unit.Base -- Unit
open import Cubical.Data.Empty -- ‚ä•
open import Cubical.Data.Sum.Base renaming (_‚äé_ to infixr 4 _‚äé_)
open import Cubical.Data.Sigma.Base renaming (_√ó_ to infixr 4 _√ó_)
open import Cubical.Data.Empty renaming (elim to ‚ä•-elim) -- `‚ä•` and `elim`
open import Function.Base using (it; _‚àã_; _$_)

-- open import Data.Nat.Base using (‚Ñï) renaming (_‚â§_ to _‚â§‚Çô_)
-- open import Cubical.Data.Nat using (‚Ñï; zero; suc) renaming (_+_ to _+‚Çô_)
-- open import Cubical.Data.Nat.Order renaming (zero-‚â§ to z‚â§n; suc-‚â§-suc to s‚â§s; _‚â§_ to _‚â§‚Çô_; _<_ to _<‚Çô_)
-- open import Cubical.Data.Fin.Base
-- import Cubical.Data.Fin.Properties
-- open import Cubical.Data.Nat using (‚Ñï; zero; suc) renaming (_+_ to _+‚Çô_)
-- open import Cubical.Data.Nat.Properties using (+-suc; injSuc; snotz; +-comm; +-assoc; +-zero; inj-m+)
-- open import Cubical.Data.Nat.Order renaming (zero-‚â§ to z‚â§n; suc-‚â§-suc to s‚â§s; _‚â§_ to _‚â§‚Çô_; _<_ to _<‚Çô_; _‚âü_ to _‚âü‚Çô_)
-- open import Data.Nat.Base using (‚Ñï; z‚â§n; s‚â§s; zero; suc) renaming (_‚â§_ to _‚â§‚Çô_; _<_ to _<‚Çô_; _+_ to _+‚Çô_)
-- open import Agda.Builtin.Bool renaming (true to TT; false to FF)
-- import Cubical.Data.Fin.Properties
-- open import Data.Nat.Properties using (+-mono-<)

-- open import Bundles

open import SyntheticReals.Number.Postulates
open import SyntheticReals.Number.Structures
open import SyntheticReals.Number.Bundles
open import SyntheticReals.Number.Inclusions
open import SyntheticReals.Number.Base
open import SyntheticReals.Number.Coercions
open import SyntheticReals.Number.Operations

open ‚Ñï‚Åø
open ‚Ñ§·∂ª
open ‚Ñö·∂†
open ‚Ñù ≥
open ‚ÑÇ·∂ú

import Data.Nat.Properties


-- NOTE: well, for 15 allowed coercions, we might just enumerate them
--   unfortunately with overlapping patterns a style as in `Cl` is not possible
--   we need to explicitly write out all the 5√ó5 combinations
--   or, we implement a min operator which might work even with overlapping patterns

-- num {isNat     ,, p} (x ,, q) = x
-- num {isInt     ,, p} (x ,, q) = x
-- num {isRat     ,, p} (x ,, q) = x
-- num {isReal    ,, p} (x ,, q) = x
-- num {isComplex ,, p} (x ,, q) = x


-- TODO: name this "inject" instead of "coerce"
-- TODO: make the module ‚Ñ§ and the Carrier ‚Ñ§.‚Ñ§
-- TODO: for a binary relation `a # b` it would be nice to have a way to compose ‚â°-pathes to the left and the right
--       similar to how ‚àô can be used for pathes
--       this reasoning might extend to transitive relations
--       `cong‚ÇÇ _#_ refl x` and `cong‚ÇÇ _#_ x refl` to this (together with `transport`)
-- NOTE: maybe ‚Ñï‚Ü™‚Ñ§ should be a postfix operation

-- module _ where
-- module ‚Ñï' = ROrderedCommSemiring ‚Ñï.Bundle
-- module ‚Ñ§' = ROrderedCommRing     ‚Ñ§.Bundle
-- module ‚Ñö' = ROrderedField        ‚Ñö.Bundle
-- module ‚Ñù' = ROrderedField        ‚Ñù.Bundle
-- module ‚ÑÇ' = RField               ‚ÑÇ.Bundle--



-- coerce-OCSR : ‚àÄ{l p} {ll : NumberKind} {ùïèOCSR ùïêOCSR : ROrderedCommSemiring {‚Ñù‚Ñì} {‚Ñù‚Ñì'}}
--             ‚Üí (x : Number (l ,, p))
--             ‚Üí {f : Il l ‚Üí Il ll}
--             ‚Üí IsROrderedCommSemiringInclusion ùïèOCSR ùïêOCSR f
--             ‚Üí Ip ll p (f (num x))
-- coerce-OCSR {l} {ll} {p} {ùïèOCSR} {ùïêOCSR} {f} (x ,, q) = ?

{-
private
  instance
    z‚â§n' : ‚àÄ {n}                 ‚Üí zero  ‚â§‚Çô n
    z‚â§n' {n} = z‚â§n
    s‚â§s' : ‚àÄ {m n} {{m‚â§n : m ‚â§‚Çô n}} ‚Üí suc m ‚â§‚Çô suc n
    s‚â§s' {m} {n} {{m‚â§n}} = s‚â§s m‚â§n
-}

{-
-- TODO: why does `it` not work here?
‚Åª¬π-Levels : (a : NumberKind) ‚Üí Œ£[ b ‚àà NumberKind ] a ‚â§‚Çô‚Çó b
‚Åª¬π-Levels isNat     = isRat     , z‚â§n -- it
‚Åª¬π-Levels isInt     = isRat     , s‚â§s z‚â§n -- s‚â§s' {{z‚â§n'}}
‚Åª¬π-Levels isRat     = isRat     , s‚â§s (s‚â§s z‚â§n)
‚Åª¬π-Levels isReal    = isReal    , s‚â§s (s‚â§s (s‚â§s z‚â§n)) -- it
‚Åª¬π-Levels isComplex = isComplex , s‚â§s (s‚â§s (s‚â§s (s‚â§s z‚â§n)))

‚Åª¬π-Levels' : (a : NumberKind) ‚Üí NumberKind
‚Åª¬π-Levels' x = max‚Çô‚Çó x isRat
-}

open PatternsType

{-
private
  pattern X   = anyPositivity
  pattern X‚Å∫‚Åª = isNonzero
  pattern X‚ÇÄ‚Å∫ = isNonnegative
  pattern X‚Å∫  = isPositive
  pattern X‚Åª  = isNegative
  pattern X‚ÇÄ‚Åª = isNonpositive
-}

{-
‚Åª¬π-Types : NumberProp ‚Üí Maybe NumberProp
‚Åª¬π-Types (level ,, X  ) = nothing
‚Åª¬π-Types (level ,, X‚ÇÄ‚Å∫) = nothing
‚Åª¬π-Types (level ,, X‚ÇÄ‚Åª) = nothing
‚Åª¬π-Types (level ,, p  ) = just (fst (‚Åª¬π-Levels level) ,, p)
-}

-- ‚àÄ{{ q : Unit }} ‚Üí Number (level ,, X‚Å∫‚Åª)
-- ‚àÄ{{ q : Unit }} ‚Üí Number (level ,, X‚Å∫ )
-- ‚àÄ{{ q : Unit }} ‚Üí Number (level ,, X‚Åª )

-- pattern [‚Ñù‚ÇÄ‚Å∫] = (isReal , X‚ÇÄ‚Å∫)
-- [‚Ñù‚ÇÄ‚Å∫] = Number (isReal , isNonnegative·µí ≥)
-- [‚Ñù‚Å∫]  = Number (isReal , isPositive·µí ≥)
-- [‚Ñï‚Å∫]  = Number (isNat  , isPositive·µí ≥)
-- [‚Ñù]   = Number (isReal , anyPositivity·µí ≥)

open import SyntheticReals.Number.Prettyprint

-- {-# DISPLAY max‚Çô‚Çó' isReal isReal = isReal #-}
-- {-# DISPLAY Number (isReal , isNonnegative) = [‚Ñù‚ÇÄ‚Å∫] #-}
-- {-# DISPLAY Number (isReal , isPositive)    = [‚Ñù‚Å∫]  #-}


[1 ≥] : [‚Ñù‚Å∫]
[1 ≥] = 1 ≥ ,, ‚Ñù.0<1

[1]-Type : (l : NumberKind) ‚Üí Type (NumberLevel l)
[1]-Type isNat     = [‚Ñï‚Å∫]
[1]-Type isInt     = [‚Ñ§‚Å∫]
[1]-Type isRat     = [‚Ñö‚Å∫]
[1]-Type isReal    = [‚Ñù‚Å∫]
[1]-Type isComplex = [‚ÑÇ‚Å∫‚Åª]

-- NOTE: this is ambiguous with generic operations such as _+_
[1] : ‚àÄ{l} ‚Üí [1]-Type l
[1] {isNat}     = 1‚Åø ,, ‚Ñï.0<1
[1] {isInt}     = 1·∂ª ,, ‚Ñ§.0<1
[1] {isRat}     = 1·∂† ,, ‚Ñö.0<1
[1] {isReal}    = 1 ≥ ,, ‚Ñù.0<1
[1] {isComplex} = 1·∂ú ,, ‚ÑÇ.1#0


-- test101 : Number (isNat , isPositive·µí ≥) ‚Üí Number (isReal ,  isNonnegative·µí ≥) ‚Üí {!!}

open import Function.Base using (typeOf)


test201 : [‚Ñï‚Å∫] ‚Üí [‚Ñù‚ÇÄ‚Å∫] ‚Üí [‚Ñù]
-- As-patterns (or @-patterns) go well with resolving things in our approach
test201 n@(nn ,, np) r@(rn ,, rp) = let
-- generic operations are provided
-- q : [‚Ñï‚Å∫]
-- z : [‚Ñù‚ÇÄ‚Å∫]
   q = n + n
   z = r + r

-- we can project-out the underlying number of a `Number` with `num`
-- z ≥ : ‚Ñù
   z ≥ = num z

-- and we can project-out the property of a `Number` with `prp`
-- zp : 0 ≥ ‚â§ ≥ (rn + ≥ rn)
   zp = prp z

-- since the generic `_+_` makes use of `_+ ≥_` on ‚Ñù, we get definitional equality
   _ : z ≥ ‚â° rn + ≥ rn
   _ = refl

-- we can turn a generic number into a Œ£ pair with `pop`
-- q ≥   : ‚Ñï‚ÇÄ
-- q ≥   = nn +‚Åø nn
-- qp   : 0‚Åø <‚Åø (nn +‚Åø nn)
-- qp   = +-<-<-implies-< ≥ nn nn np np
   (q ≥ , qp) = pop q

-- and we can create a number with `_,,_`
-- this needs some type annotation for help
   q' : typeOf q
   q' = q ≥ ,, qp

-- if the two parts of q and q' are in scope, then we get definitional equality
   _ : q ‚â° q'
   _ = refl

-- r is nonnegative from [‚Ñù‚ÇÄ‚Å∫], [1 ≥] is positive from [‚Ñù‚Å∫]
-- and _+_ makes use of the fact that "positive + nonnegative = positive"
-- y : [‚Ñù‚Å∫]
-- y = (rn + ≥ 1 ≥) ,, +-‚â§-<-implies-< ≥ rn 1 ≥ rp 0<1
   y =  r + [1 ≥]

-- _+_ automatically coerces n from ‚Ñï‚Å∫ to ‚Ñù‚Å∫
-- and uses the fact that "positive + nonnegative = positive"
-- n+r : [‚Ñù‚Å∫]
-- n+r = (‚Ñï‚Ü™‚Ñù nn + ≥ rn) ,, +-<-‚â§-implies-< ≥ (‚Ñï‚Ü™‚Ñù nn) rn (coerce-‚Ñï‚Ü™‚Ñù (nn ,, np)) rp
   n+r = n + r

-- generic relations like _<_ also make use of their underlying relations
-- and therefore we also get definitional equality, no matter how the relation is stated
   pp   : [1 ≥] <      (r  + [1 ≥])
   pp   = {!!}
   pp'  :  1 ≥  < ≥ num (r  + [1 ≥])
   pp'  = {!!}
   pp'' :  1 ≥  < ≥     (rn + ≥ 1 ≥ )
   pp'' = {!!}
   _ : (pp ‚â° pp') √ó (pp ‚â° pp'')
   _ = refl , refl
   in {! - [1 ≥]!}


_ = {! ‚Ñï!}


{-

distance : ‚àÄ(x y : [‚Ñù]) ‚Üí [‚Ñù]
distance x y = max (x + (- y)) (- (x + (- y)))

IsCauchy : (x : ‚Ñï ‚Üí ‚Ñù) ‚Üí Type (‚Ñì-max ‚Ñì' ‚Ñö‚Ñì)
IsCauchy x = ‚àÄ(Œµ : [‚Ñö‚Å∫]) ‚Üí ‚àÉ[ N ‚àà ‚Ñï ] ‚àÄ(m n : ‚Ñï) ‚Üí N ‚â§‚Åø m ‚Üí N ‚â§‚Åø n ‚Üí distance (x m) (x n) < Œµ

-}

test : [‚Ñï‚Å∫] ‚Üí [‚Ñù‚ÇÄ‚Å∫] ‚Üí [‚Ñù]
test n@(nn ,, np) r@(rn ,, rp) = let
  q : [‚Ñï‚Å∫]
  q = n + n
  z : [‚Ñù‚ÇÄ‚Å∫]
  z = r + r
  k : [‚Ñù‚Å∫]
  k = n + r
  in {!!}
