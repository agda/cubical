{-# OPTIONS --safe --lossy-unification #-}
module Cubical.Data.Rationals.Order.Properties where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Equiv.Properties
open import Cubical.Foundations.Function
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Univalence
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.Path

open import Cubical.Functions.FunExtEquiv
open import Cubical.Functions.Involution

open import Cubical.Functions.Logic using (_‚äî‚Ä≤_; ‚áîtoPath)

open import Cubical.Data.Empty as ‚ä•
open import Cubical.Data.Int.Base as ‚Ñ§ using (‚Ñ§;pos;negsuc)
import Cubical.Data.Bool as ùüö
open import Cubical.Data.Int.Properties as ‚Ñ§ using ()
open import Cubical.Data.Int.Order as ‚Ñ§ using ()
open import Cubical.Data.Int.Divisibility as ‚Ñ§
open import Cubical.Data.Rationals.Base as ‚Ñö
open import Cubical.Data.Rationals.Properties as ‚Ñö
open import Cubical.Data.Nat as ‚Ñï using (‚Ñï; suc; zero;znots)
open import Cubical.Data.Nat.Mod as ‚Ñï
import Cubical.Data.Nat.Order as ‚Ñï
open import Cubical.Data.NatPlusOne
open import Cubical.Data.Sigma
open import Cubical.Data.Sum as ‚äé using (_‚äé_; inl; inr; isProp‚äé)

open import Cubical.HITs.PropositionalTruncation as ‚à•‚ÇÅ using (isPropPropTrunc; ‚à£_‚à£‚ÇÅ)
open import Cubical.HITs.SetQuotients as SQ hiding (_/_)

open import Cubical.Relation.Nullary
open import Cubical.Relation.Binary.Base

open import Cubical.Data.Rationals.Order

open import Cubical.HITs.CauchyReals.Lems

open import Cubical.Algebra.CommRing.Instances.Int



dec‚Ñö? : ‚àÄ {x y} ‚Üí {ùüö.True (discrete‚Ñö x y)} ‚Üí  (x ‚â° y)
dec‚Ñö? {_} {_} {p} = ùüö.toWitness p

dec‚Ñö<? : ‚àÄ {x y} ‚Üí {ùüö.True (<Dec x y)} ‚Üí  (x < y)
dec‚Ñö<? {_} {_} {p} = ùüö.toWitness p

dec‚Ñö‚â§? : ‚àÄ {x y} ‚Üí {ùüö.True (‚â§Dec x y)} ‚Üí  (x ‚â§ y)
dec‚Ñö‚â§? {_} {_} {p} = ùüö.toWitness p

0<sucN : ‚àÄ n ‚Üí 0 < fromNat (suc n)
0<sucN n = <‚Ñ§‚Üí<‚Ñö _ _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _ (‚Ñï.suc-‚â§-suc ‚Ñï.zero-‚â§))

0<pos : ‚àÄ n m ‚Üí 0 < [ pos (suc n) / m ]
0<pos n m = 0<‚Üí< [ pos (suc n) / m ] tt

0‚â§pos : ‚àÄ n m ‚Üí 0 ‚â§ [ pos n / m ]
0‚â§pos n m = subst (0 ‚Ñ§.‚â§_)
   (sym (‚Ñ§.¬∑IdR _))
  (‚Ñ§.zero-‚â§pos {n})


-fromNat : ‚àÄ n ‚Üí fromNeg n ‚â° - fromNat n
-fromNat zero = refl
-fromNat (suc n) = refl

neg‚â§pos : ‚àÄ n m ‚Üí fromNeg n ‚â§ fromNat m
neg‚â§pos n m =
 subst (_‚â§ fromNat m) (sym (-fromNat n))
  (isTrans‚â§ _ 0 (fromNat m) ((minus-‚â§ 0 (fromNat n) (0‚â§pos n 1))) (0‚â§pos m 1))

floor-lemma : ‚àÄ p q ‚Üí fromNat (‚Ñï.quotient p / (suc q))
                   ‚Ñö.+ [ ‚Ñ§.pos (‚Ñï.remainder p / (suc q)) / 1+ q ]
                   ‚â° [ ‚Ñ§.pos p / 1+ q ]
floor-lemma p q = eq/ _ _
     (cong (‚Ñ§._¬∑ q') w ‚àô cong (‚Ñ§.pos p ‚Ñ§.¬∑_)
     (cong ‚Ñö.‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (sym (¬∑‚Çä‚ÇÅ-identityÀ° (1+ q)))))

 where
  q' = ‚Ñö.‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (1+ q)
  w : (‚Ñ§.pos (‚Ñï.quotient p / (suc q)) ‚Ñ§.¬∑ q'
        ‚Ñ§.+ ‚Ñ§.pos (‚Ñï.remainder p / (suc q)) ‚Ñ§.¬∑ ‚Ñ§.pos 1)
           ‚â° ‚Ñ§.pos p
  w = cong‚ÇÇ (‚Ñ§._+_) (‚Ñ§.¬∑Comm _ _ ‚àô sym (‚Ñ§.pos¬∑pos _ _)) (‚Ñ§.¬∑IdR _)
       ‚àô sym (‚Ñ§.pos+ _ _) ‚àô cong ‚Ñ§.pos
          (‚Ñï.+-comm _ _  ‚àô ‚Ñï.‚â°remainder+quotient (suc q) p)





floor-frac‚Ñö‚Çä : ‚àÄ (x : ‚Ñö‚Çä) ‚Üí Œ£ (‚Ñï √ó ‚Ñö) Œª (k , q) ‚Üí
                       (fromNat k + q ‚â° fst x ) √ó ((0 ‚â§ q)  √ó (q < 1))
floor-frac‚Ñö‚Çä = uncurry (SQ.Elim.go w)
 where


 ww : ‚àÄ p p' q q' ‚Üí p ‚Ñï.¬∑ (suc q') ‚â° p' ‚Ñï.¬∑ (suc q) ‚Üí
         ‚Ñ§.pos (‚Ñï.remainder p / (suc q)) ‚Ñ§.¬∑
           (‚Ñ§.pos (2 ‚Ñï.¬∑ ((suc q) ‚Ñï.¬∑ (suc q')) ))
           ‚â° ‚Ñ§.pos (‚Ñï.remainder (p ‚Ñï.¬∑ (suc q') ‚Ñï.+ p' ‚Ñï.¬∑ (suc q))
                / ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï (2 ¬∑‚Çä‚ÇÅ ((1+ q) ¬∑‚Çä‚ÇÅ (1+ q')))) ‚Ñ§.¬∑ ‚Ñ§.pos (suc q)
 ww p p' q q' e =
    sym (‚Ñ§.pos¬∑pos _ _)
   ‚àô (cong ‚Ñ§.pos ((cong ((p ‚Ñï.mod suc q) ‚Ñï.¬∑_)
         (cong (2 ‚Ñï.¬∑_) (‚Ñï.¬∑-comm _ _) ‚àô  ‚Ñï.¬∑-assoc _ _ _)
     ‚àô ‚Ñï.¬∑-assoc _ _ _ ) ‚àô
     cong (‚Ñï._¬∑ (suc q))
       ((‚Ñï.¬∑-comm _ _)
         ‚àô sym (‚Ñï.¬∑mod (2 ‚Ñï.¬∑ (suc q')) _ _) ‚àô cong‚ÇÇ ‚Ñï.remainder_/_
                 ((sym (‚Ñï.¬∑-assoc 2 (suc q') p)
                   ‚àô cong (2 ‚Ñï.¬∑_) (‚Ñï.¬∑-comm (suc q') p))
                     ‚àô (cong (p ‚Ñï.¬∑ (suc q') ‚Ñï.+_) (‚Ñï.+-zero _ ‚àô e)))
              (sym (‚Ñï.¬∑-assoc 2 (suc q') (suc q)) ‚àô
                cong (2 ‚Ñï.¬∑_) (‚Ñï.¬∑-comm (suc q') (suc q))))))
     ‚àô ‚Ñ§.pos¬∑pos _ _

 w : Elim _
 w .Elim.isSetB _ = isSetŒ† Œª _ ‚Üí
   isSetŒ£ (isSet√ó ‚Ñï.isSet‚Ñï isSet‚Ñö)
    (isProp‚ÜíisSet ‚àò Œª _ ‚Üí isProp√ó (isSet‚Ñö _ _)
      (isProp√ó (isProp‚â§ _ _) (isProp< _ _)))
 w .Elim.f‚àº (‚Ñ§.negsuc n , (1+ n‚ÇÅ)) (‚Ñ§.pos n‚ÇÇ , (1+ n‚ÇÉ)) r =
   funExtDep Œª {x‚ÇÄ} ‚Üí ‚ä•.rec x‚ÇÄ
 w .Elim.f‚àº (_ , (1+ n)) (‚Ñ§.negsuc n‚ÇÅ , (1+ n‚ÇÇ)) r =
   funExtDep Œª {_} {x‚ÇÅ} ‚Üí ‚ä•.rec x‚ÇÅ
 w .Elim.f (‚Ñ§.pos p , 1+ q) _ =
   ((‚Ñï.quotient p / (suc q)) ,
     [ ‚Ñ§.pos (‚Ñï.remainder p / (suc q)) / 1+ q ]) ,
      floor-lemma p q , (
        subst (0 ‚Ñ§.‚â§_) (sym (‚Ñ§.¬∑IdR _)) ‚Ñ§.zero-‚â§pos , f<1)
  where

  f<1 : ‚Ñ§.pos (‚Ñï.remainder p / suc q) ‚Ñ§.¬∑ 1 ‚Ñ§.< ‚Ñ§.pos 1 ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (1+ q)
  f<1 = subst2 ‚Ñ§._<_
     (sym (‚Ñ§.¬∑IdR _)) (sym (‚Ñ§.¬∑IdL _))
     (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _ (‚Ñï.mod< _ _))

 w .Elim.f‚àº (‚Ñ§.pos p , 1+ q) (‚Ñ§.pos p' , 1+ q') e‚ÇÄ =
  toPathP (funExt Œª x ‚Üí Œ£‚â°Prop
    (Œª _ ‚Üí isProp√ó (isSet‚Ñö _ _)
      (isProp√ó (isProp‚â§ _ _) (isProp< _ _)))
    (cong‚ÇÇ _,_ z z'))
  where

  e : p ‚Ñï.¬∑ (suc q') ‚â° p' ‚Ñï.¬∑ (suc q)
  e = ‚Ñ§.injPos (‚Ñ§.pos¬∑pos _ _ ‚àô‚àô e‚ÇÄ ‚àô‚àô sym (‚Ñ§.pos¬∑pos _ _))


  z' : [ ‚Ñ§.pos (‚Ñï.remainder p / (suc q)) / 1+ q ]
        ‚â° [ ‚Ñ§.pos (‚Ñï.remainder p' / (suc q')) / 1+ q' ]
  z' = eq/ _ ((‚Ñ§.pos (‚Ñï.remainder (p ‚Ñï.¬∑ (suc q') ‚Ñï.+ p' ‚Ñï.¬∑ (suc q))
                / (2 ‚Ñï.¬∑ ((suc q) ‚Ñï.¬∑ (suc q'))))) ,
                 (2 ¬∑‚Çä‚ÇÅ ((1+ q) ¬∑‚Çä‚ÇÅ (1+ q'))))
     (ww _ _ _ _ e) ‚àô‚àô
      cong‚ÇÇ [_/_] (cong ‚Ñ§.pos
          (cong‚ÇÇ ‚Ñï.remainder_/_
             (‚Ñï.+-comm _ _) (cong (2 ‚Ñï.¬∑_) (‚Ñï.¬∑-comm _ _))))
        (cong (2 ¬∑‚Çä‚ÇÅ_) (¬∑‚Çä‚ÇÅ-comm _ _))
      ‚àô‚àô sym (eq/ _
        ((‚Ñ§.pos (‚Ñï.remainder (p' ‚Ñï.¬∑ (suc q) ‚Ñï.+ p ‚Ñï.¬∑ (suc q'))
                / (2 ‚Ñï.¬∑ ((suc q') ‚Ñï.¬∑ (suc q))))) ,
                 (2 ¬∑‚Çä‚ÇÅ ((1+ q') ¬∑‚Çä‚ÇÅ (1+ q))))
                 (ww _ _ _ _ (sym e)))


  z'' : (‚Ñï.remainder p / suc q) ‚Ñï.¬∑ (suc q') ‚â°
          (‚Ñï.remainder p' / suc q') ‚Ñï.¬∑ (suc q)
  z'' = ‚Ñ§.injPos (‚Ñ§.pos¬∑pos _ _ ‚àô‚àô eq/‚Åª¬π _ _ z' ‚àô‚àô sym (‚Ñ§.pos¬∑pos _ _))

  z : (‚Ñï.quotient p / suc q)
        ‚â°
        (‚Ñï.quotient p' / suc q')
  z = ‚Ñï.inj-¬∑sm (‚Ñï.inj-sm¬∑ (‚Ñï.¬∑-assoc _ _ _
     ‚àô‚àô ‚Ñï.inj-m+ ((cong (‚Ñï._+ (suc q ‚Ñï.¬∑ (‚Ñï.quotient p / suc q) ‚Ñï.¬∑ suc q'))
      (sym z''))
     ‚àô (‚Ñï.¬∑-distrib ≥ _ _ _) ‚àô‚àô cong (‚Ñï._¬∑ (suc q'))
         (‚Ñï.‚â°remainder+quotient (suc q) p) ‚àô‚àô e ‚àô‚àô
       sym (cong (‚Ñï._¬∑ (suc q)) (‚Ñï.‚â°remainder+quotient (suc q') p'))
         ‚àô‚àô sym (‚Ñï.¬∑-distrib ≥ _ _ _))
        ‚àô‚àô (Œª i ‚Üí ‚Ñï.¬∑-comm (‚Ñï.¬∑-comm (suc q') (‚Ñï.quotient p' / suc q') i) (suc q) i)))

floor-frac‚Ñö‚Çä‚â§ : (x : ‚Ñö‚Çä) ‚Üí fromNat (fst (fst (floor-frac‚Ñö‚Çä x))) ‚â§ fst x
floor-frac‚Ñö‚Çä‚â§ x =
  let ((N , q) , (e , (0‚â§q , _))) = floor-frac‚Ñö‚Çä x
      zz = ‚â°Weaken‚â§ _ _ e
      uu = subst (_‚â§ (fst x + q))
                (+IdR _) $ ‚â§Monotone+ _ _ 0 _ zz 0‚â§q
  in ‚â§-+o-cancel (fromNat N) _ _ uu

‚â§floor-frac‚Ñö‚Çä : (x : ‚Ñö‚Çä) ‚Üí fst x < fromNat (suc (fst (fst (floor-frac‚Ñö‚Çä x))))
‚â§floor-frac‚Ñö‚Çä x =
  let ((N , q) , (e , (_ , q<1))) = floor-frac‚Ñö‚Çä x
  in subst (fst x <_) (‚Ñï+‚Üí‚Ñö+ _ _ ‚àô cong (Œª x ‚Üí [ pos x / 1 ])
             (‚Ñï.+-comm N 1))
           $ isTrans‚â§< _ _ ((fromNat N) + 1)
              (‚â°Weaken‚â§ _ _ (sym e))
                 (<-o+ q 1 (fromNat N) q<1)


ceil-[1-frac]‚Ñö‚Çä : ‚àÄ (x : ‚Ñö‚Çä) ‚Üí Œ£ (‚Ñï √ó ‚Ñö) Œª (k , q) ‚Üí
                       (fst x + q ‚â° fromNat k) √ó ((0 ‚â§ q)  √ó (q < 1))
ceil-[1-frac]‚Ñö‚Çä x =
 let ((fl , fr) , e , (e' , e'')) = floor-frac‚Ñö‚Çä x

 in decRec
      (Œª p ‚Üí (fl , 0) ,
        (+IdR _ ‚àô sym e ‚àô cong  ((fromNat fl) +_) (sym p) ‚àô (+IdR _)) ,
          (isRefl‚â§ 0 , dec‚Ñö<?))
      (Œª p ‚Üí (suc fl , (1 ‚Ñö.- fr)) ,
          (cong‚ÇÇ (_+_) (sym e) (‚Ñö.+Comm [ ‚Ñ§.pos 1 / 1+ 0 ] (- fr)) ‚àô
            sym (‚Ñö.+Assoc _ _ _) ‚àô
              cong  ((fromNat fl) +_)
                (‚Ñö.+Assoc _ _ _
                  ‚àô‚àô cong (_+ 1) (+InvR _) ‚àô‚àô +IdL 1)
               ‚àô ‚Ñö.+Comm (fromNat fl) 1 ‚àô ‚Ñï+‚Üí‚Ñö+ _ _) ,
               <Weaken‚â§ 0 _ (-< fr 1 e'') ,
                 (<-o+ _ _ 1 (
                   (‚äé.rec (‚ä•.rec ‚àò p) (minus-< 0 fr) (‚â§‚Üí‚â°‚äé< 0 fr e')))))
     (discrete‚Ñö 0 fr)



floor-frac : ‚àÄ (x : ‚Ñö) ‚Üí Œ£ (‚Ñ§ √ó ‚Ñö) Œª (k , q) ‚Üí
                       ([ k , 1 ] + q ‚â° x) √ó ((0 ‚â§ q)  √ó (q < 1))
floor-frac x with 0 ‚âü x
... | lt x‚ÇÅ =
  let ((c , fr') , e ) = floor-frac‚Ñö‚Çä (x , <‚Üí0< _ x‚ÇÅ)
  in (‚Ñ§.pos c , fr') , e

... | eq x‚ÇÅ = (0 , 0) , (x‚ÇÅ , isRefl‚â§ 0 , dec‚Ñö<? )
... | gt x‚ÇÅ =
  let ((c , fr') , e , e') = ceil-[1-frac]‚Ñö‚Çä
          (- x , <‚Üí0< (- x) (minus-< x 0 x‚ÇÅ))
      fl = (‚Ñ§.- ‚Ñ§.pos c)
      p : [ fl , 1 ] + fr' ‚â° x
      p = (sym (-Invol _)
             ‚àô cong (-_) (-Distr _ _
                 ‚àô cong (_- fr')
                    (cong [_/ 1 ] (‚Ñ§.-Involutive _) )))
              ‚àô sym (cong -_ (+CancelL- _ _ _ e)) ‚àô -Invol _
  in (fl , fr') ,
        p , e'


ceil‚Ñö‚Çä : (q : ‚Ñö‚Çä) ‚Üí Œ£[ k ‚àà ‚Ñï‚Çä‚ÇÅ ] (fst q) < fromNat (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï k)
ceil‚Ñö‚Çä q = 1+ (fst (fst (floor-frac‚Ñö‚Çä q))) ,
   subst2 (_<_) --  (fromNat (suc (fst (fst (floor-frac‚Ñö‚Çä q)))))
      (‚Ñö.+Comm _ _ ‚àô fst (snd (floor-frac‚Ñö‚Çä q)))
      (‚Ñö.‚Ñï+‚Üí‚Ñö+ _ _)
       (<-+o _ _ (fromNat (fst (fst (floor-frac‚Ñö‚Çä q))))
         (snd (snd (snd (floor-frac‚Ñö‚Çä q)))))





sign : ‚Ñö ‚Üí ‚Ñö
sign = Rec.go w
 where
 w : Rec _
 w .Rec.isSetB = isSet‚Ñö
 w .Rec.f (‚Ñ§.pos zero , snd‚ÇÅ) = 0
 w .Rec.f (‚Ñ§.pos (suc n) , snd‚ÇÅ) = 1
 w .Rec.f (‚Ñ§.negsuc n , snd‚ÇÅ) = [ ‚Ñ§.‚Ñ§.negsuc 0 , 1 ]
 w .Rec.f‚àº (‚Ñ§.pos zero , (1+ nn)) (‚Ñ§.pos zero , snd‚ÇÇ) x = refl
 w .Rec.f‚àº (‚Ñ§.pos zero , (1+ nn)) (‚Ñ§.pos (suc n‚ÇÅ) , snd‚ÇÇ) x =
    ‚ä•.rec $ znots $
     ‚Ñ§.injPos (x ‚àô sym (‚Ñ§.pos¬∑pos (suc n‚ÇÅ) (suc nn)))
 w .Rec.f‚àº (‚Ñ§.pos (suc n‚ÇÅ) , snd‚ÇÅ) (‚Ñ§.pos zero , (1+ nn)) x =
   ‚ä•.rec $ znots $
     ‚Ñ§.injPos (sym x ‚àô sym (‚Ñ§.pos¬∑pos (suc n‚ÇÅ) (suc nn)))
 w .Rec.f‚àº (‚Ñ§.pos (suc n) , snd‚ÇÅ) (‚Ñ§.pos (suc n‚ÇÅ) , snd‚ÇÇ) x = refl
 w .Rec.f‚àº (‚Ñ§.pos n‚ÇÅ , snd‚ÇÇ) (‚Ñ§.negsuc n , snd‚ÇÅ) x =
    ‚ä•.rec (
     ùüö.toWitnessFalse
      {Q = (‚Ñ§.discrete‚Ñ§ _ _)}
       _ ((cong (‚Ñ§.-_) (‚Ñ§.pos¬∑pos (suc n) _)
        ‚àô sym (‚Ñ§.negsuc¬∑pos n _)) ‚àô‚àô (sym x) ‚àô‚àô sym (‚Ñ§.pos¬∑pos n‚ÇÅ _) ))
 w .Rec.f‚àº (‚Ñ§.negsuc n , snd‚ÇÅ) (‚Ñ§.pos n‚ÇÅ , snd‚ÇÇ) x =
   ‚ä•.rec (
     ùüö.toWitnessFalse
      {Q = (‚Ñ§.discrete‚Ñ§ _ _)}
       _ ((cong (‚Ñ§.-_) (‚Ñ§.pos¬∑pos (suc n) _)
        ‚àô sym (‚Ñ§.negsuc¬∑pos n _)) ‚àô‚àô x ‚àô‚àô sym (‚Ñ§.pos¬∑pos n‚ÇÅ _) ))
 w .Rec.f‚àº (‚Ñ§.negsuc n , snd‚ÇÅ) (‚Ñ§.negsuc n‚ÇÅ , snd‚ÇÇ) x = refl

<‚âÉsign : ‚àÄ x ‚Üí ((0 < x) ‚âÉ (sign x ‚â° 1))
               √ó ((0 ‚â° x) ‚âÉ (sign x ‚â° 0))
                 √ó ((x < 0) ‚âÉ (sign x ‚â° -1))
<‚âÉsign = ElimProp.go w
 where
 w : ElimProp _
 w .ElimProp.isPropB _ =
  isProp√ó (isOfHLevel‚âÉ 1 (isProp< _ _) (isSet‚Ñö _ _))
     (isProp√ó (isOfHLevel‚âÉ 1 (isSet‚Ñö _ _) (isSet‚Ñö _ _))
         (isOfHLevel‚âÉ 1 (isProp< _ _) (isSet‚Ñö _ _))
       )
 w .ElimProp.f (‚Ñ§.pos zero , (1+ n)) =
  propBiimpl‚ÜíEquiv (isProp< _ _) (isSet‚Ñö _ _)
    ((Œª x‚ÇÅ ‚Üí ‚ä•.rec $ ‚Ñ§.isIrrefl< x‚ÇÅ))
      (Œª x ‚Üí ‚ä•.rec $ ‚Ñï.znots (‚Ñ§.injPos (eq/‚Åª¬π _ _ x))) ,
   (propBiimpl‚ÜíEquiv (isSet‚Ñö _ _) (isSet‚Ñö _ _)
     (Œª _ ‚Üí refl) (Œª _ ‚Üí eq/ _ _ refl) ,
      propBiimpl‚ÜíEquiv (isProp< _ _) (isSet‚Ñö _ _)
        (Œª x ‚Üí ‚ä•.rec (‚Ñ§.¬¨-pos<-zero x))
          (Œª x ‚Üí ‚ä•.rec $ ‚Ñ§.posNotnegsuc _ _ ((eq/‚Åª¬π _ _ x))))

 w .ElimProp.f (‚Ñ§.pos (suc n) , snd‚ÇÅ) =
   propBiimpl‚ÜíEquiv (isProp< _ _) (isSet‚Ñö _ _)
    (Œª _ ‚Üí refl) (Œª _ ‚Üí 0<‚Üí< [ ‚Ñ§.pos (suc n) , snd‚ÇÅ ] _) ,
   (propBiimpl‚ÜíEquiv (isSet‚Ñö _ _) (isSet‚Ñö _ _)
     ((Œª b ‚Üí ‚ä•.rec
      (znots $ ‚Ñ§.injPos (b ‚àô ‚Ñ§.¬∑IdR (‚Ñ§.pos (suc n))))) ‚àòS eq/‚Åª¬π _ _)
     (Œª x ‚Üí ‚ä•.rec (‚Ñï.snotz $ ‚Ñ§.injPos (eq/‚Åª¬π _ _ x)))  ,
      propBiimpl‚ÜíEquiv (isProp< _ _) (isSet‚Ñö _ _)
        (Œª x ‚Üí ‚ä•.rec (‚Ñ§.¬¨-pos<-zero (subst (‚Ñ§._< 0)
         (sym (‚Ñ§.pos¬∑pos (suc n) 1)) x)))
          Œª x ‚Üí ‚ä•.rec (‚Ñ§.posNotnegsuc _ _ (eq/‚Åª¬π _ _ x)))

 w .ElimProp.f (‚Ñ§.negsuc n , snd‚ÇÅ) =
   propBiimpl‚ÜíEquiv (isProp< _ _) (isSet‚Ñö _ _)
    ((Œª x‚ÇÅ ‚Üí ‚ä•.rec $
   ‚Ñ§.¬¨pos‚â§negsuc (subst ((‚Ñ§.pos _) ‚Ñ§.‚â§_) (‚Ñ§.negsuc¬∑pos n 1 ‚àô
    cong ‚Ñ§.-_ (sym (‚Ñ§.pos¬∑pos (suc n) 1)) ) x‚ÇÅ)))
     ((Œª x ‚Üí ‚ä•.rec (‚Ñ§.posNotnegsuc 1 0 (sym x))) ‚àòS eq/‚Åª¬π _ _) ,
   (propBiimpl‚ÜíEquiv (isSet‚Ñö _ _) (isSet‚Ñö _ _)
     ((Œª x ‚Üí ‚ä•.rec (‚Ñ§.posNotnegsuc _ _
     (eq/‚Åª¬π _ _ x ‚àô ‚Ñ§.¬∑IdR (‚Ñ§.negsuc n)))))
     ((‚ä•.rec ‚àò ‚Ñ§.posNotnegsuc _ _ ‚àò sym ) ‚àòS eq/‚Åª¬π _ _ )  ,
      propBiimpl‚ÜíEquiv (isProp< _ _) (isSet‚Ñö _ _)
        (Œª _ ‚Üí refl)
         Œª _ ‚Üí minus-<' _ _ (0<‚Üí< (- [ ‚Ñ§.negsuc n , snd‚ÇÅ ]) _))


<‚Üísign : ‚àÄ x ‚Üí (0 < x ‚Üí sign x ‚â° 1)
               √ó (0 ‚â° x ‚Üí sign x ‚â° 0)
                 √ó (x < 0 ‚Üí sign x ‚â° -1)
<‚Üísign x =
 let ((y , _) , (y' , _) , (y'' , _)) = <‚âÉsign x
 in (y , y' , y'')

abs‚â°sign¬∑ : ‚àÄ x ‚Üí ‚Ñö.abs x ‚â° x ‚Ñö.¬∑ (sign x)
abs‚â°sign¬∑ x = abs'‚â°abs x ‚àô ElimProp.go w x
 where
 w : ElimProp (Œª z ‚Üí abs' z ‚â° z ‚Ñö.¬∑ sign z)
 w .ElimProp.isPropB _ = isSet‚Ñö _ _
 w .ElimProp.f x@(‚Ñ§.pos zero , snd‚ÇÅ) = dec‚Ñö?
 w .ElimProp.f x@(‚Ñ§.pos (suc n) , snd‚ÇÅ) =
  eq/ _ _ $
    cong‚ÇÇ ‚Ñ§._¬∑_ (sym (‚Ñ§.¬∑IdR _)) (cong ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (¬∑‚Çä‚ÇÅ-identity ≥ (snd‚ÇÅ)))

 w .ElimProp.f x@(‚Ñ§.negsuc n , snd‚ÇÅ) = eq/ _ _
   $ cong‚ÇÇ ‚Ñ§._¬∑_ (‚Ñ§.¬∑Comm (‚Ñ§.negsuc 0) (‚Ñ§.negsuc n) )
      (cong ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (¬∑‚Çä‚ÇÅ-identity ≥ (snd‚ÇÅ)))

absPos : ‚àÄ x ‚Üí 0 < x ‚Üí abs x ‚â° x
absPos x 0<x = abs‚â°sign¬∑ x ‚àô‚àô cong (x ‚Ñö.¬∑_) (fst (<‚Üísign x) 0<x)  ‚àô‚àô (‚Ñö.¬∑IdR x)

absNonNeg : ‚àÄ x ‚Üí 0 ‚â§ x ‚Üí abs x ‚â° x
absNonNeg x 0<x with x ‚âü 0
... | lt x‚ÇÅ = ‚ä•.rec $ ‚â§‚Üí‚âØ 0 x 0<x x‚ÇÅ
... | eq x‚ÇÅ = cong abs x‚ÇÅ ‚àô sym x‚ÇÅ
... | gt x‚ÇÅ = absPos x x‚ÇÅ



absNeg : ‚àÄ x ‚Üí x < 0 ‚Üí abs x ‚â° - x
absNeg x x<0 = abs‚â°sign¬∑ x ‚àô‚àô cong (x ‚Ñö.¬∑_) (snd (snd (<‚Üísign x)) x<0)
                 ‚àô‚àô ‚Ñö.¬∑Comm x -1



0‚â§abs : ‚àÄ x ‚Üí 0 ‚â§ abs x
0‚â§abs x with x ‚âü 0
... | lt x‚ÇÅ = subst (0 ‚â§_) (sym (absNeg x x‚ÇÅ)) ((<Weaken‚â§ 0 (- x) (minus-< x 0 x‚ÇÅ) ))
... | eq x‚ÇÅ = subst ((0 ‚â§_) ‚àò abs) (sym x‚ÇÅ) (isRefl‚â§ 0)
... | gt x‚ÇÅ = subst (0 ‚â§_) (sym (absPos x x‚ÇÅ)) (<Weaken‚â§ 0 x x‚ÇÅ)


abs+pos : ‚àÄ x y ‚Üí 0 < x ‚Üí abs (x ‚Ñö.+ y) ‚â§ x ‚Ñö.+ abs y
abs+pos x y x‚ÇÅ with y ‚âü 0
... | lt x‚ÇÇ =
 let xx = (‚â§-o+ y (- y) x
            (<Weaken‚â§ y (- y) $ isTrans< y 0 (- y) x‚ÇÇ ((minus-< y 0 x‚ÇÇ))))
 in subst (Œª yy ‚Üí abs (x ‚Ñö.+ y) ‚â§ x ‚Ñö.+ yy)
        (sym (absNeg y x‚ÇÇ)) (absFrom‚â§√ó‚â§ (x ‚Ñö.- y) _
          (subst (_‚â§ x ‚Ñö.+ y)
            (sym (-Distr' x y)) (‚â§-+o (- x) x y
             (<Weaken‚â§ (- x) x $ isTrans< (- x) 0 x (minus-< 0 x x‚ÇÅ) x‚ÇÅ))) xx)
... | eq x‚ÇÇ = subst2 _‚â§_ (sym (absPos x x‚ÇÅ)
        ‚àô cong abs (sym (‚Ñö.+IdR x) ‚àô cong (x ‚Ñö.+_) ( (sym x‚ÇÇ))))
   (sym (‚Ñö.+IdR x) ‚àô cong (x ‚Ñö.+_) (cong abs (sym x‚ÇÇ))  ) (isRefl‚â§ x)
... | gt x‚ÇÇ = subst2 _‚â§_ (sym (absPos _ (<Monotone+ 0 x 0 y x‚ÇÅ x‚ÇÇ)))
    (cong (x ‚Ñö.+_) (sym (absPos y x‚ÇÇ)))
   $ isRefl‚â§ (x ‚Ñö.+ y)

abs+‚â§abs+abs : ‚àÄ x y ‚Üí ‚Ñö.abs (x ‚Ñö.+ y) ‚â§ ‚Ñö.abs x ‚Ñö.+ ‚Ñö.abs y
abs+‚â§abs+abs x y with (x ‚âü 0) | (y ‚âü 0)
... | _ | gt x‚ÇÅ = subst2 (_‚â§_)
                   (cong ‚Ñö.abs (‚Ñö.+Comm y x))
            ((‚Ñö.+Comm y (‚Ñö.abs x)) ‚àô cong ((‚Ñö.abs x) ‚Ñö.+_ ) (sym (absPos y x‚ÇÅ)))
             (abs+pos y x x‚ÇÅ)
... | eq x‚ÇÅ | _ = subst2 _‚â§_ (cong ‚Ñö.abs (sym (‚Ñö.+IdL y) ‚àô
    cong (‚Ñö._+ y) (sym x‚ÇÅ) ))
                    (sym (‚Ñö.+IdL (‚Ñö.abs y)) ‚àô
                     cong (‚Ñö._+ (‚Ñö.abs y)) (cong ‚Ñö.abs (sym x‚ÇÅ)))
                      (isRefl‚â§ (‚Ñö.abs y))
... | gt x‚ÇÅ | _ = subst (‚Ñö.abs (x ‚Ñö.+ y) ‚â§_)
            (cong (‚Ñö._+ (‚Ñö.abs y)) (sym (absPos x x‚ÇÅ)))
              (abs+pos x y x‚ÇÅ)
... | lt x‚ÇÅ | lt x‚ÇÇ =
  subst2 _‚â§_ (sym (-Distr x y) ‚àô sym (absNeg (x ‚Ñö.+ y)
    (<Monotone+ x 0 y 0 x‚ÇÅ x‚ÇÇ)))
     (cong‚ÇÇ ‚Ñö._+_ (sym (absNeg x x‚ÇÅ)) (sym (absNeg y x‚ÇÇ))) (isRefl‚â§ ((- x) - y) )
... | lt x‚ÇÅ | eq x‚ÇÇ =
  subst2 _‚â§_ ((cong ‚Ñö.abs (sym (‚Ñö.+IdR x) ‚àô
    cong (x ‚Ñö.+_) (sym x‚ÇÇ))))
     (sym (‚Ñö.+IdR (‚Ñö.abs x)) ‚àô
                     cong ((‚Ñö.abs x) ‚Ñö.+_ ) (cong ‚Ñö.abs (sym x‚ÇÇ)))
    ((isRefl‚â§ (‚Ñö.abs x)))

data Trichotomy0¬∑ (m n : ‚Ñö) : Type‚ÇÄ where
  eq‚Çò‚Çå‚ÇÄ : m ‚â° 0 ‚Üí m ‚Ñö.¬∑ n ‚â° 0  ‚Üí Trichotomy0¬∑ m n
  eq‚Çô‚Çå‚ÇÄ : n ‚â° 0 ‚Üí m ‚Ñö.¬∑ n ‚â° 0 ‚Üí Trichotomy0¬∑ m n
  lt-lt : m < 0 ‚Üí n < 0 ‚Üí 0 < m ‚Ñö.¬∑ n  ‚Üí Trichotomy0¬∑ m n
  lt-gt : m < 0 ‚Üí 0 < n ‚Üí m ‚Ñö.¬∑ n < 0  ‚Üí Trichotomy0¬∑ m n
  gt-lt : 0 < m ‚Üí n < 0 ‚Üí m ‚Ñö.¬∑ n < 0  ‚Üí Trichotomy0¬∑ m n
  gt-gt : 0 < m ‚Üí 0 < n ‚Üí 0 < m ‚Ñö.¬∑ n  ‚Üí Trichotomy0¬∑ m n

trichotomy0¬∑ : ‚àÄ m n ‚Üí Trichotomy0¬∑ m n
trichotomy0¬∑ m n with m ‚âü 0 | n ‚âü 0
... | eq p | _    = eq‚Çò‚Çå‚ÇÄ p (cong (‚Ñö._¬∑ n) p ‚àô ‚Ñö.¬∑AnnihilL n)
... | _    | eq p = eq‚Çô‚Çå‚ÇÄ p (cong (m ‚Ñö.¬∑_) p ‚àô ‚Ñö.¬∑AnnihilR m)
... | lt x‚ÇÅ | lt x‚ÇÇ = lt-lt x‚ÇÅ x‚ÇÇ
  (subst (0 <_) (-¬∑- m n)
    (0<-m¬∑n (- m) (- n) (minus-< m 0 x‚ÇÅ) (minus-< n 0 x‚ÇÇ)))
... | lt x‚ÇÅ | gt x‚ÇÇ = lt-gt x‚ÇÅ x‚ÇÇ
 ((subst (m ‚Ñö.¬∑ n <_) (‚Ñö.¬∑AnnihilL n) $ <-¬∑o m 0 n x‚ÇÇ x‚ÇÅ ))
... | gt x‚ÇÅ | lt x‚ÇÇ = gt-lt x‚ÇÅ x‚ÇÇ
 (subst (m ‚Ñö.¬∑ n <_) (‚Ñö.¬∑AnnihilR m) $ <-o¬∑ n 0 m x‚ÇÅ x‚ÇÇ )
... | gt x‚ÇÅ | gt x‚ÇÇ = gt-gt x‚ÇÅ x‚ÇÇ (0<-m¬∑n m n x‚ÇÅ x‚ÇÇ)

sign¬∑sign : ‚àÄ x y ‚Üí sign x ‚Ñö.¬∑ sign y ‚â° sign (x ‚Ñö.¬∑ y)
sign¬∑sign x y = h $ trichotomy0¬∑ x y

 where

 x' = <‚Üísign x
 y' = <‚Üísign y
 x¬∑y' = <‚Üísign (x ‚Ñö.¬∑ y)

 h : Trichotomy0¬∑ x y ‚Üí _ -- ‚Ñö.¬∑AnnihilL
 h (eq‚Çò‚Çå‚ÇÄ p p‚ÇÅ) =
  cong (‚Ñö._¬∑ sign y) (fst (snd x') (sym p))
   ‚àô‚àô ‚Ñö.¬∑AnnihilL _ ‚àô‚àô sym (fst (snd x¬∑y') (sym p‚ÇÅ))
 h (eq‚Çô‚Çå‚ÇÄ p p‚ÇÅ) =   cong (sign x ‚Ñö.¬∑_) (fst (snd y') (sym p))
   ‚àô‚àô ‚Ñö.¬∑AnnihilR _ ‚àô‚àô sym (fst (snd x¬∑y') (sym p‚ÇÅ))
 h (lt-lt p p‚ÇÅ p‚ÇÇ) = cong‚ÇÇ ‚Ñö._¬∑_ (snd (snd x') p) (snd (snd y') p‚ÇÅ)
  ‚àô (sym $ fst x¬∑y' p‚ÇÇ)
 h (lt-gt p p‚ÇÅ p‚ÇÇ) = cong‚ÇÇ ‚Ñö._¬∑_  (snd (snd x') p) (fst y' p‚ÇÅ)
          ‚àô sym (snd (snd x¬∑y') p‚ÇÇ)
 h (gt-lt p p‚ÇÅ p‚ÇÇ) = cong‚ÇÇ ‚Ñö._¬∑_ (fst x' p) (snd (snd y') p‚ÇÅ)
          ‚àô sym (snd (snd x¬∑y') p‚ÇÇ)
 h (gt-gt p p‚ÇÅ p‚ÇÇ) = cong‚ÇÇ ‚Ñö._¬∑_ (fst x' p) (fst y' p‚ÇÅ)
  ‚àô (sym $ fst x¬∑y' p‚ÇÇ)

0‚â§x¬≤ : ‚àÄ x ‚Üí 0 ‚â§ x ‚Ñö.¬∑ x
0‚â§x¬≤ = ElimProp.go w
 where
 w : ElimProp (Œª z ‚Üí 0 ‚â§ z ‚Ñö.¬∑ z)
 w .ElimProp.isPropB _ = isProp‚â§ _ _
 w .ElimProp.f (p , q) = subst (0 ‚Ñ§.‚â§_) (sym (‚Ñ§.¬∑IdR _)) (‚Ñ§.0‚â§x¬≤ p)

signX¬∑signX : ‚àÄ x ‚Üí 0 # x ‚Üí sign x ‚Ñö.¬∑ sign x ‚â° 1
signX¬∑signX x y = sign¬∑sign x x ‚àô
   fst (fst (<‚âÉsign (x ‚Ñö.¬∑ x)))
    (‚äé.rec (Œª z ‚Üí 0<-m¬∑n _ _ z z)
      ((Œª z ‚Üí subst (0 <_) (-¬∑- _ _) (0<-m¬∑n _ _ z z)) ‚àòS minus-< x 0) y)

abs¬∑abs : ‚àÄ x y ‚Üí abs x ‚Ñö.¬∑ abs y ‚â° abs (x ‚Ñö.¬∑ y)
abs¬∑abs x y = cong‚ÇÇ ‚Ñö._¬∑_ (abs‚â°sign¬∑ x) (abs‚â°sign¬∑ y)
 ‚àô‚àô (sym (‚Ñö.¬∑Assoc _ _ _)) ‚àô‚àô
  cong (x ‚Ñö.¬∑_) (( (‚Ñö.¬∑Assoc _ _ _)) ‚àô‚àô
  cong (‚Ñö._¬∑ sign y) (‚Ñö.¬∑Comm (sign x) y) ‚àô‚àô (sym (‚Ñö.¬∑Assoc _ _ _))) ‚àô‚àô (‚Ñö.¬∑Assoc _ _ _)
 ‚àô‚àô (Œª i ‚Üí x ‚Ñö.¬∑ y ‚Ñö.¬∑ sign¬∑sign x y i) ‚àô sym (abs‚â°sign¬∑ (x ‚Ñö.¬∑ y))

abs'¬∑abs' : ‚àÄ x y ‚Üí abs' x ‚Ñö.¬∑ abs' y ‚â° abs' (x ‚Ñö.¬∑ y)
abs'¬∑abs' x y = cong‚ÇÇ ‚Ñö._¬∑_ (sym (abs'‚â°abs _)) (sym (abs'‚â°abs _))
  ‚àô‚àô abs¬∑abs x y ‚àô‚àô abs'‚â°abs _

pos¬∑abs : ‚àÄ x y ‚Üí 0 ‚â§ x ‚Üí  abs (x ‚Ñö.¬∑ y) ‚â° x ‚Ñö.¬∑ (abs y)
pos¬∑abs x y 0‚â§x = sym (abs¬∑abs x y) ‚àô cong (‚Ñö._¬∑ (abs y))
  (absNonNeg x 0‚â§x)

clamp‚â§ : ‚àÄ L L' x ‚Üí clamp L L' x ‚â§ L'
clamp‚â§ L L' x = min‚â§' _ L'


‚â§cases : ‚àÄ x y ‚Üí (x ‚â§ y) ‚äé (y ‚â§ x)
‚â§cases x y with x ‚âü y
... | lt x‚ÇÅ = inl (<Weaken‚â§ _ _ x‚ÇÅ)
... | eq x‚ÇÅ = inl (‚â°Weaken‚â§ _ _ x‚ÇÅ)
... | gt x‚ÇÅ = inr (<Weaken‚â§ _ _ x‚ÇÅ)

elimBy‚â§ : ‚àÄ {‚Ñì} {A : ‚Ñö ‚Üí ‚Ñö ‚Üí Type ‚Ñì}
  ‚Üí (‚àÄ x y ‚Üí A x y ‚Üí A y x)
  ‚Üí (‚àÄ x y ‚Üí x ‚â§ y ‚Üí A x y)
  ‚Üí ‚àÄ x y ‚Üí A x y
elimBy‚â§ s f x y = ‚äé.rec
  (f _ _ ) (s _ _ ‚àò f _ _ ) (‚â§cases x y)

elim‚â§By‚â°‚äé< : ‚àÄ {‚Ñì} (a : ‚Ñö) {A : ‚àÄ x ‚Üí a ‚â§ x ‚Üí Type ‚Ñì}
  ‚Üí (A a (isRefl‚â§ a))
  ‚Üí (‚àÄ x a<x ‚Üí A x (<Weaken‚â§ _ _ a<x)  )
  ‚Üí ‚àÄ x a<x ‚Üí A x a<x
elim‚â§By‚â°‚äé< a {A = A} r f x =
  ‚äé.rec
    (Œª a=x ‚Üí subst (uncurry A) (Œ£‚â°Prop (isProp‚â§ a) a=x) r)
    (subst (A x) (isProp‚â§ a x _ _) ‚àò f x)
    ‚àò (‚â§‚Üí‚â°‚äé< a x)

elimBy‚â°‚äé< : ‚àÄ {‚Ñì} {A : ‚Ñö ‚Üí ‚Ñö ‚Üí Type ‚Ñì}
  ‚Üí (‚àÄ x y ‚Üí A x y ‚Üí A y x)
  ‚Üí (‚àÄ x ‚Üí A x x)
  ‚Üí (‚àÄ x y ‚Üí x < y ‚Üí A x y)
  ‚Üí ‚àÄ x y ‚Üí A x y
elimBy‚â°‚äé< {A = A} s r f =
 elimBy‚â§ s (Œª x y ‚Üí ‚äé.rec (Œª p ‚Üí subst (A x) p (r x)) (f x y) ‚àò ‚â§‚Üí‚â°‚äé< x y)


max< : ‚àÄ x y z ‚Üí x < z ‚Üí y < z ‚Üí max x y < z
max< = elimBy‚â§
  (Œª x y X z y<z x<z ‚Üí subst (_< z) (maxComm _ _) (X z x<z y<z) )
  Œª x y x‚â§y z x<z y<z ‚Üí
    subst (_< z) (sym (‚â§‚Üímax x y x‚â§y)) y<z

maxDistMin : ‚àÄ x y z ‚Üí ‚Ñö.min (‚Ñö.max x y) z ‚â° ‚Ñö.max (‚Ñö.min x z) (‚Ñö.min y z)
maxDistMin = elimBy‚â§
 (Œª x y p z ‚Üí cong (flip ‚Ñö.min z) (‚Ñö.maxComm y x)  ‚àô‚àô p z ‚àô‚àô
                ‚Ñö.maxComm _ _ )
 Œª x y p z ‚Üí cong (flip ‚Ñö.min z) (‚â§‚Üímax x y p) ‚àô
   sym (‚â§‚Üímax (‚Ñö.min x z) (‚Ñö.min y z) (‚â§MonotoneMin x y z z p (isRefl‚â§ z) ))



minDistMax : ‚àÄ x y y' ‚Üí ‚Ñö.max x (‚Ñö.min y y') ‚â° ‚Ñö.min (‚Ñö.max x y) (‚Ñö.max x y')
minDistMax x = elimBy‚â§
  (Œª y y' X ‚Üí cong (‚Ñö.max x) (‚Ñö.minComm _ _) ‚àô‚àô X ‚àô‚àô ‚Ñö.minComm _ _)
  Œª y y' y‚â§y' ‚Üí cong (‚Ñö.max x) (‚â§‚Üímin _ _ y‚â§y') ‚àô
    sym (‚â§‚Üímin (‚Ñö.max x y) (‚Ñö.max x y')
      (‚â§MonotoneMax x x y y' (isRefl‚â§ x) y‚â§y'))

‚â§clamp : ‚àÄ L L' x ‚Üí L ‚â§ L' ‚Üí  L ‚â§ clamp L L' x
‚â§clamp L L' x y =
 subst (L ‚â§_) (cong (Œª y ‚Üí ‚Ñö.max y _) (sym $ ‚â§‚Üímin L L' y)
      ‚àô sym (maxDistMin L x L')) (‚â§max L (‚Ñö.min x L'))

clamped‚â§ : ‚àÄ L L' x ‚Üí L ‚â§ x ‚Üí clamp L L' x ‚â§ x
clamped‚â§ L L' x L‚â§x = subst (_‚â§ x)
  (cong (flip min L') (sym (‚â§‚Üímax L x L‚â§x))) (min‚â§ x L')

absComm- : ‚àÄ x y ‚Üí ‚Ñö.abs (x ‚Ñö.- y) ‚â° ‚Ñö.abs (y ‚Ñö.- x)
absComm- x y i = ‚Ñö.maxComm (-[x-y]‚â°y-x y x (~ i)) (-[x-y]‚â°y-x x y i) i

abs'Comm- : ‚àÄ x y ‚Üí ‚Ñö.abs' (x ‚Ñö.- y) ‚â° ‚Ñö.abs' (y ‚Ñö.- x)
abs'Comm- x y = sym (abs'‚â°abs _) ‚àô‚àô absComm- x y ‚àô‚àô abs'‚â°abs _

‚â§MonotoneClamp : ‚àÄ L L' x y ‚Üí x ‚â§ y ‚Üí clamp L L' x ‚â§ clamp L L' y
‚â§MonotoneClamp L L' x y p =
 ‚â§MonotoneMin
  (‚Ñö.max L x) (‚Ñö.max L y) L'
   L' (‚â§MonotoneMax L L x y (isRefl‚â§ L) p) (isRefl‚â§ L')



inClamps : ‚àÄ L L' x ‚Üí L ‚â§ x ‚Üí x ‚â§ L' ‚Üí clamp L L' x ‚â° x
inClamps L L' x u v =
  cong (Œª y ‚Üí ‚Ñö.min y L') (‚â§‚Üímax L x u)
    ‚àô ‚â§‚Üímin x L' v

‚â§abs : ‚àÄ x ‚Üí x ‚â§ abs x
‚â§abs x = ‚â§max x (‚Ñö.- x)

‚â§abs' : ‚àÄ x ‚Üí x ‚â§ abs' x
‚â§abs' x = subst (x ‚â§_) (abs'‚â°abs x) (‚â§abs x)


-abs : ‚àÄ x ‚Üí ‚Ñö.abs x ‚â° ‚Ñö.abs (‚Ñö.- x)
-abs x = ‚Ñö.maxComm _ _
  ‚àô cong (‚Ñö.max (‚Ñö.- x)) (sym (‚Ñö.-Invol x))

-abs' : ‚àÄ x ‚Üí ‚Ñö.abs' x ‚â° ‚Ñö.abs' (‚Ñö.- x)
-abs' x = sym (‚Ñö.abs'‚â°abs x) ‚àô‚àô -abs x ‚àô‚àô ‚Ñö.abs'‚â°abs (‚Ñö.- x)


-‚â§abs' : ‚àÄ x ‚Üí ‚Ñö.- x ‚â§ abs' x
-‚â§abs' x = subst (- x ‚â§_) (sym (-abs' x)) (‚â§abs' (‚Ñö.- x))

-‚â§abs : ‚àÄ x ‚Üí ‚Ñö.- x ‚â§ abs x
-‚â§abs x = subst (- x ‚â§_) (sym (-abs x)) (‚â§abs (‚Ñö.- x))


absTo‚â§√ó‚â§ : ‚àÄ Œµ q
                ‚Üí abs q ‚â§ Œµ
                ‚Üí (- Œµ ‚â§ q) √ó (q ‚â§ Œµ)

absTo‚â§√ó‚â§ Œµ q abs[q]‚â§Œµ .fst =
 subst (- Œµ ‚â§_) (-Invol q) (minus-‚â§ _ _ (isTrans‚â§ _ _ _ (-‚â§abs q) abs[q]‚â§Œµ))
absTo‚â§√ó‚â§ Œµ q abs[q]‚â§Œµ .snd = isTrans‚â§ _ _ _ (‚â§abs q) abs[q]‚â§Œµ


Dichotomy‚Ñö : ‚àÄ (n m : ‚Ñö) ‚Üí (n ‚â§ m) ‚äé (m < n)
Dichotomy‚Ñö n m = decRec inr (inl ‚àò ‚âÆ‚Üí‚â• _ _) (<Dec m n)

sign¬∑abs : ‚àÄ x ‚Üí abs x ‚Ñö.¬∑ (sign x) ‚â° x
sign¬∑abs x with 0 ‚âü x
... | lt x‚ÇÅ =
 cong‚ÇÇ ‚Ñö._¬∑_ (absPos x x‚ÇÅ) (fst (<‚Üísign x) x‚ÇÅ)
    ‚àô ‚Ñö.¬∑IdR x
... | eq x‚ÇÅ = cong (abs x ‚Ñö.¬∑_) ( (fst (snd (<‚Üísign x)) x‚ÇÅ))
 ‚àô ¬∑AnnihilR (abs x) ‚àô x‚ÇÅ
... | gt x‚ÇÅ =
  cong‚ÇÇ ‚Ñö._¬∑_ (absNeg x x‚ÇÅ) (snd (snd (<‚Üísign x)) x‚ÇÅ)
    ‚àô -¬∑- _ _ ‚àô ‚Ñö.¬∑IdR x


0#‚Üí0<abs' : ‚àÄ q ‚Üí 0 # q ‚Üí 0 < abs' q
0#‚Üí0<abs' q (inl x) =
  subst (0 <_) (sym (absPos q x) ‚àô (abs'‚â°abs q)) x
0#‚Üí0<abs' q (inr y) =
  subst (0 <_) (sym (absNeg q y) ‚àô (abs'‚â°abs q)) (minus-< q 0 y)

0#‚Üí‚Ñö‚Çä : ‚àÄ q ‚Üí 0 # q ‚Üí ‚Ñö‚Çä
0#‚Üí‚Ñö‚Çä q x = abs' q , <‚Üí0< _ (0#‚Üí0<abs' q x)

¬∑Monotone0# : ‚àÄ q q' ‚Üí 0 # q ‚Üí 0 # q' ‚Üí 0 # (q ‚Ñö.¬∑ q')
¬∑Monotone0# q q' (inl x) (inl x‚ÇÅ) =
 inl (0<‚Üí< _ (¬∑0< q q' (<‚Üí0< q x) (<‚Üí0< q' x‚ÇÅ)))
¬∑Monotone0# q q' (inl x) (inr x‚ÇÅ) =
  inr (minus-<' 0 (q ‚Ñö.¬∑ q')
        (subst (0 <_) (((‚Ñö.¬∑Comm  q (- q')) ‚àô sym (‚Ñö.¬∑Assoc -1 q' q))
         ‚àô cong (-_) (‚Ñö.¬∑Comm _ _))
         (0<‚Üí< _ (¬∑0< q (- q') (<‚Üí0< q x) (<‚Üí0< _ (minus-< q' 0 x‚ÇÅ)))) ))
¬∑Monotone0# q q' (inr x) (inl x‚ÇÅ) =
  inr (minus-<' 0 (q ‚Ñö.¬∑ q')
     (subst (0 <_) (sym (‚Ñö.¬∑Assoc -1 q q'))
       ((0<‚Üí< _ (¬∑0< (- q) q' (<‚Üí0< _ (minus-< q 0 x)) (<‚Üí0< q' x‚ÇÅ))))))
¬∑Monotone0# q q' (inr x) (inr x‚ÇÅ) =
 inl (subst (0 <_) (-¬∑- _ _) (0<‚Üí< _
     (¬∑0< (- q) (- q') (<‚Üí0< _ (minus-< q 0 x)) (<‚Üí0< _ (minus-< q' 0 x‚ÇÅ)))) )



0#sign : ‚àÄ q ‚Üí 0 # q ‚âÉ 0 # (sign q)
0#sign q =
 propBiimpl‚ÜíEquiv (isProp# _ _) (isProp# _ _)
   (‚äé.map (((flip (subst (0 <_))
     (ùüö.toWitness {Q = <Dec 0 1} _)) ‚àò sym) ‚àòS fst (<‚Üísign q))
     ((((flip (subst (_< 0))
     (ùüö.toWitness {Q = <Dec -1 0} _)) ‚àò sym) ‚àòS snd (snd (<‚Üísign q)))))
     (‚äé.rec (‚äé.rec ((Œª y z ‚Üí ‚ä•.rec (isIrrefl# (sign q) (subst (_# (sign q))
        (sym y) z))) ‚àòS fst (snd (<‚Üísign q))) (const ‚àò inl) ‚àò ‚â§‚Üí‚â°‚äé< _ _ ) (Œª x _ ‚Üí inr x)
      (Dichotomy‚Ñö 0 q))



-- floor-frac‚Ñö‚Çä : ‚àÄ (x : ‚Ñö‚Çä) ‚Üí Œ£ (‚Ñï √ó ‚Ñö) Œª (k , q) ‚Üí
--                        (fromNat k + q ‚â° fst x ) √ó (q < 1)
-- floor-frac‚Ñö‚Çä = uncurry (SQ.Elim.go w)

-- ceil-frac‚Ñö‚Çä : ‚àÄ (x : ‚Ñö‚Çä) ‚Üí Œ£ (‚Ñï √ó ‚Ñö) Œª (k , q) ‚Üí
--                        (fromNat k + q ‚â° fst x ) √ó (q < 1)
-- ceil-frac‚Ñö‚Çä = uncurry (SQ.Elim.go w)

bound‚Ñï : ‚àÄ q ‚Üí Œ£[ k ‚àà ‚Ñï‚Çä‚ÇÅ ] (abs q < ([ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ k , 1 ]))
bound‚Ñï q with ‚â§‚Üí‚â°‚äé< 0 (abs q) (0‚â§abs q)
... | inl x = 1 , subst (_< 1) x (dec‚Ñö<? {0} {1})
... | inr x =
 let ((k , f) , e , e' , e'') = floor-frac‚Ñö‚Çä (abs q , <‚Üí0< _ x)
 in (1+ k , subst2 (_<_)
          (+Comm f _ ‚àô e)
           (‚Ñï+‚Üí‚Ñö+ 1 k) ((<-+o f 1 [ pos k / 1+ 0 ] e'')))


isSet‚Ñö‚Çä : isSet ‚Ñö‚Çä
isSet‚Ñö‚Çä = isSetŒ£ isSet‚Ñö Œª q ‚Üí isProp‚ÜíisSet (snd (0<‚Çö q))

inv‚Ñö‚Çä : ‚Ñö‚Çä ‚Üí ‚Ñö‚Çä
inv‚Ñö‚Çä = uncurry (Elim.go w)
 where

 w : Elim (Œª z ‚Üí (y : 0< z) ‚Üí ‚Ñö‚Çä)
 w .Elim.isSetB _ = isSetŒ† Œª _ ‚Üí isSet‚Ñö‚Çä
 w .Elim.f ( x , y ) z = [ (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ y) , (fst (‚Ñ§.0<‚Üí‚Ñï‚Çä‚ÇÅ x z)) ] , _
 w .Elim.f‚àº r@( x , y ) r'@( x' , y' ) p = ua‚Üí (‚Ñö‚Çä‚â° ‚àò eq/ _ _ ‚àò
    h x y x' y' p )
  where
  h : ‚àÄ x y x' y' ‚Üí (p : (x , y) ‚àº (x' , y')) ‚Üí (a : ‚Ñ§.0< x) ‚Üí
           ( ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ y , fst (‚Ñ§.0<‚Üí‚Ñï‚Çä‚ÇÅ x a) ) ‚àº
           ( ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ y' , fst (‚Ñ§.0<‚Üí‚Ñï‚Çä‚ÇÅ x'
             (‚Ñ§.0<¬∑‚Ñï‚Çä‚ÇÅ x' y (subst ‚Ñ§.0<_ p (‚Ñ§.¬∑0< x (pos (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï y')) a tt))) ) )

  h x y x' y' p a with (‚Ñ§.0<¬∑‚Ñï‚Çä‚ÇÅ x' y (subst ‚Ñ§.0<_ p (‚Ñ§.¬∑0< x (pos (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï y')) a tt)))
  h (pos (suc n)) (1+ y) (pos (suc n‚ÇÅ)) (1+ y') p a | w =
     ‚Ñ§.¬∑Comm (pos (suc y)) (pos (suc n‚ÇÅ))
       ‚àô‚àô (sym p) ‚àô‚àô
        sym (‚Ñ§.¬∑Comm (pos (suc y')) (pos (suc n)))

inv‚Ñö‚Çä-invol : ‚àÄ x ‚Üí fst (inv‚Ñö‚Çä (inv‚Ñö‚Çä x)) ‚â° fst  x
inv‚Ñö‚Çä-invol = uncurry (ElimProp.go w)
 where
 w : ElimProp _
 w .ElimProp.isPropB _ = isPropŒ† Œª _ ‚Üí SQ.squash/ _ _
 w .ElimProp.f x y = eq/ _ _ (ww x y)
  where
  ww : ‚àÄ x x‚ÇÅ ‚Üí (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (fst (‚Ñ§.0<‚Üí‚Ñï‚Çä‚ÇÅ (x .fst) x‚ÇÅ)) , (1+ x .snd .‚Ñï‚Çä‚ÇÅ.n)) ‚àº x
  ww (pos (suc n) , snd‚ÇÅ) x‚ÇÅ = refl

equivInv‚Ñö‚Çä : ‚Ñö‚Çä ‚âÉ ‚Ñö‚Çä
equivInv‚Ñö‚Çä = involEquiv {f = inv‚Ñö‚Çä} Œª x ‚Üí ‚Ñö‚Çä‚â° (inv‚Ñö‚Çä-invol x)

x¬∑inv‚Ñö‚Çä[x] : ‚àÄ x ‚Üí fst x ¬∑ fst (inv‚Ñö‚Çä x) ‚â° 1
x¬∑inv‚Ñö‚Çä[x] = uncurry (ElimProp.go w)
 where
 w : ElimProp _
 w .ElimProp.isPropB _ = isPropŒ† Œª _ ‚Üí isSet‚Ñö _ _
 w .ElimProp.f (pos (suc n) , 1+ y) u =
   eq/ _ _ (‚Ñ§.¬∑IdR
    (pos (suc (y)) ‚Ñ§.+ pos n ‚Ñ§.¬∑ pos (suc (y)))
         ‚àô cong (pos (suc y) ‚Ñ§.+_) (sym (‚Ñ§.pos¬∑pos n (suc y)))
          ‚àô (Œª i ‚Üí (‚Ñ§.pos+ (suc y) (‚Ñï.¬∑-comm n (suc y) i)) (~ i)) ‚àô
           cong (pos ‚àò suc) ((Œª i ‚Üí ‚Ñï.+-assoc y n (‚Ñï.¬∑-comm y n i) i)
             ‚àô (cong (‚Ñï._+ n ‚Ñï.¬∑ y) (‚Ñï.+-comm y n) ‚àô
               (sym (‚Ñï.+-assoc n y _)))
               ‚àô cong (n ‚Ñï.+_) (sym (‚Ñï.¬∑-comm y (suc n)))))

inv‚Ñö‚Çä[x]¬∑x : ‚àÄ x ‚Üí  fst (inv‚Ñö‚Çä x) ¬∑ fst x ‚â° 1
inv‚Ñö‚Çä[x]¬∑x x = cong (fst (inv‚Ñö‚Çä x) ¬∑_) (sym $ inv‚Ñö‚Çä-invol x)
  ‚àô x¬∑inv‚Ñö‚Çä[x] (inv‚Ñö‚Çä x)

[y¬∑x]/y : ‚àÄ y x ‚Üí fst (inv‚Ñö‚Çä y) ¬∑ (fst y ¬∑ x) ‚â° x
[y¬∑x]/y y x = ¬∑Assoc (fst (inv‚Ñö‚Çä y)) (fst y) x
     ‚àô‚àô cong (_¬∑ x) (¬∑Comm (fst (inv‚Ñö‚Çä y)) (fst y) ‚àô x¬∑inv‚Ñö‚Çä[x] y)
     ‚àô‚àô ¬∑IdL x

y¬∑[x/y] : ‚àÄ y x ‚Üí  fst y ¬∑ (fst (inv‚Ñö‚Çä y) ¬∑ x) ‚â° x
y¬∑[x/y] y x = cong (_¬∑ (fst (inv‚Ñö‚Çä y) ¬∑ x)) (sym (inv‚Ñö‚Çä-invol y))
 ‚àô [y¬∑x]/y (inv‚Ñö‚Çä y) x

inv‚Ñö‚ÇäDist¬∑ : ‚àÄ x y ‚Üí (inv‚Ñö‚Çä x) ‚Ñö‚Çä¬∑ (inv‚Ñö‚Çä y) ‚â° (inv‚Ñö‚Çä (x ‚Ñö‚Çä¬∑ y))
inv‚Ñö‚ÇäDist¬∑ = uncurry (flip ‚àò uncurry ‚àò ElimProp2.go w)
 where
 w : ElimProp2
       (Œª z z‚ÇÅ ‚Üí
          (y : 0< z‚ÇÅ) (y‚ÇÅ : 0< z) ‚Üí
          (inv‚Ñö‚Çä (z , y‚ÇÅ) ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä (z‚ÇÅ , y)) ‚â°
          inv‚Ñö‚Çä ((z , y‚ÇÅ) ‚Ñö‚Çä¬∑ (z‚ÇÅ , y)))
 w .ElimProp2.isPropB _ _ = isPropŒ†2 Œª _ _ ‚Üí isSet‚Ñö‚Çä _ _
 w .ElimProp2.f x y y‚ÇÅ y‚ÇÇ =
  let qq : ((x .fst) ‚Ñ§.¬∑ (y .fst)) ‚â°
            (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (fst (‚Ñ§.0<‚Üí‚Ñï‚Çä‚ÇÅ (x .fst) y‚ÇÇ) ¬∑‚Çä‚ÇÅ fst (‚Ñ§.0<‚Üí‚Ñï‚Çä‚ÇÅ (y .fst) y‚ÇÅ)))
      qq = cong‚ÇÇ ‚Ñ§._¬∑_ (snd (‚Ñ§.0<‚Üí‚Ñï‚Çä‚ÇÅ (x .fst) y‚ÇÇ))
                (snd (‚Ñ§.0<‚Üí‚Ñï‚Çä‚ÇÅ (y .fst) y‚ÇÅ))
          ‚àô sym (‚Ñ§.pos¬∑pos (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï (fst (‚Ñ§.0<‚Üí‚Ñï‚Çä‚ÇÅ (x .fst) y‚ÇÇ)))
                        (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï (fst (‚Ñ§.0<‚Üí‚Ñï‚Çä‚ÇÅ (y .fst) y‚ÇÅ))))
      zz : ((‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (y .snd) ‚Ñ§.+ pos (x .snd .‚Ñï‚Çä‚ÇÅ.n) ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (y .snd)))
             ‚Ñ§.¬∑ (x .fst ‚Ñ§.¬∑ y .fst)
             ‚â°
           ( 1 ‚Ñ§.¬∑  ((x .fst) ‚Ñ§.¬∑ (y .fst)))
               ‚Ñ§.+
                pos (y .snd .‚Ñï‚Çä‚ÇÅ.n ‚Ñï.+ x .snd .‚Ñï‚Çä‚ÇÅ.n ‚Ñï.¬∑ suc (y .snd .‚Ñï‚Çä‚ÇÅ.n))
             ‚Ñ§.¬∑ (((x .fst) ‚Ñ§.¬∑ (y .fst)))
      zz = congS
           {x = ((‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (y .snd) ‚Ñ§.+ pos (x .snd .‚Ñï‚Çä‚ÇÅ.n) ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (y .snd)))}
           {1 ‚Ñ§.+ pos (y .snd .‚Ñï‚Çä‚ÇÅ.n ‚Ñï.+ x .snd .‚Ñï‚Çä‚ÇÅ.n ‚Ñï.¬∑ suc (y .snd .‚Ñï‚Çä‚ÇÅ.n))}
           (‚Ñ§._¬∑ (x .fst ‚Ñ§.¬∑ y .fst))
             (cong‚ÇÇ (‚Ñ§._+_)
                 (‚Ñ§.pos+ 1 (y .snd .‚Ñï‚Çä‚ÇÅ.n))
                 (sym (‚Ñ§.pos¬∑pos (x .snd .‚Ñï‚Çä‚ÇÅ.n) _))
               ‚àô sym (‚Ñ§.+Assoc 1 (pos (y .snd .‚Ñï‚Çä‚ÇÅ.n))
                     (pos ((x .snd .‚Ñï‚Çä‚ÇÅ.n) ‚Ñï.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï (y .snd))))
                      ‚àô cong (1 ‚Ñ§.+_)
                        (sym (‚Ñ§.pos+ (y .snd .‚Ñï‚Çä‚ÇÅ.n) _)))
         ‚àô ‚Ñ§.¬∑DistL+ 1
       (pos (y .snd .‚Ñï‚Çä‚ÇÅ.n ‚Ñï.+ x .snd .‚Ñï‚Çä‚ÇÅ.n ‚Ñï.¬∑ suc (y .snd .‚Ñï‚Çä‚ÇÅ.n)))
          ((x .fst) ‚Ñ§.¬∑ (y .fst))

  in ‚Ñö‚Çä‚â° (eq/ _ _
             ((Œª i ‚Üí
                ((‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (y .snd) ‚Ñ§.+ pos (x .snd .‚Ñï‚Çä‚ÇÅ.n) ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (y .snd)))
             ‚Ñ§.¬∑
              ((snd
                (‚Ñ§.0<‚Üí‚Ñï‚Çä‚ÇÅ (x .fst ‚Ñ§.¬∑ y .fst) (¬∑0< _//_.[ x ] _//_.[ y ] y‚ÇÇ y‚ÇÅ))
                 (~ i))))
              ‚àô zz ‚àô

                Œª i ‚Üí ((‚Ñ§.¬∑IdL (qq i) i))
               ‚Ñ§.+
                pos (y .snd .‚Ñï‚Çä‚ÇÅ.n ‚Ñï.+ x .snd .‚Ñï‚Çä‚ÇÅ.n ‚Ñï.¬∑ suc (y .snd .‚Ñï‚Çä‚ÇÅ.n))
             ‚Ñ§.¬∑ qq i))






/2‚Çä : ‚Ñö‚Çä ‚Üí ‚Ñö‚Çä
/2‚Çä = _‚Ñö‚Çä¬∑ ([ 1 / 2 ] , tt)

/3‚Çä : ‚Ñö‚Çä ‚Üí ‚Ñö‚Çä
/3‚Çä = _‚Ñö‚Çä¬∑ ([ 1 / 3 ] , tt)

/4‚Çä : ‚Ñö‚Çä ‚Üí ‚Ñö‚Çä
/4‚Çä = _‚Ñö‚Çä¬∑ ([ 1 / 4 ] , tt)


/4‚Çä+/4‚Çä‚â°/2‚Çä : ‚àÄ Œµ ‚Üí (/4‚Çä Œµ) ‚Ñö‚Çä+ (/4‚Çä Œµ) ‚â° /2‚Çä Œµ
/4‚Çä+/4‚Çä‚â°/2‚Çä Œµ = ‚Ñö‚Çä‚â° (sym (¬∑DistL+ (fst Œµ) [ 1 / 4 ] [ 1 / 4 ])
   ‚àô cong (fst Œµ ¬∑_) dec‚Ñö?)

/4‚Çä‚â°/2‚Çä/2‚Çä : ‚àÄ Œµ ‚Üí fst (/4‚Çä Œµ) ‚â° fst (/2‚Çä (/2‚Çä Œµ))
/4‚Çä‚â°/2‚Çä/2‚Çä Œµ = cong (fst Œµ ¬∑_) dec‚Ñö? ‚àô ¬∑Assoc _ _ _

weak0< : ‚àÄ q (Œµ Œ¥ : ‚Ñö‚Çä)
             ‚Üí  q < (fst Œµ - fst Œ¥)
             ‚Üí q < fst Œµ
weak0< q Œµ Œ¥ x =
  let z = <Monotone+ q (fst Œµ - fst Œ¥) 0 (fst Œ¥) x (0<‚Üí< (fst Œ¥) (snd Œ¥))
   in subst2 _<_
       (+IdR q) (lem--00 {fst Œµ} {fst Œ¥}) z



weak0<' : ‚àÄ q (Œµ Œ¥ : ‚Ñö‚Çä)
             ‚Üí - (fst Œµ - fst Œ¥) < q
             ‚Üí - (fst Œµ) < q
weak0<' q Œµ Œ¥ x =
  let z = <Monotone+ (- (fst Œµ - fst Œ¥)) q (- fst Œ¥) 0 x
           (minus-< 0 (fst Œ¥) ((0<‚Üí< (fst Œ¥) (snd Œ¥))))
  in subst2 {x = (- (fst Œµ - fst Œ¥)) + (- fst Œ¥)}
         {y = - (fst Œµ)} _<_  (lem--01 {fst Œµ} {fst Œ¥}) (+IdR q) z

n/k+m/k : ‚àÄ n m k ‚Üí [ n / k ] + [ m / k ] ‚â° [ n ‚Ñ§.+ m / k ]
n/k+m/k n m k = let k' = pos (suc (k .‚Ñï‚Çä‚ÇÅ.n)) in
  eq/ _ _
  (cong (‚Ñ§._¬∑ k') (sym (‚Ñ§.¬∑DistL+ n m k') ) ‚àô‚àô
    sym (‚Ñ§.¬∑Assoc (n ‚Ñ§.+ m) k' k') ‚àô‚àô
     cong ((n ‚Ñ§.+ m) ‚Ñ§.¬∑_) (sym (‚Ñ§.pos¬∑pos (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï k) (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï k))))


n/k-m/k : ‚àÄ n m k ‚Üí [ n / k ] - [ m / k ] ‚â° [ n ‚Ñ§.- m / k ]
n/k-m/k n m k = let k' = pos (suc (k .‚Ñï‚Çä‚ÇÅ.n)) in
  eq/ _ _
  (cong (‚Ñ§._¬∑ k') (cong‚ÇÇ ‚Ñ§._+_ (cong (n ‚Ñ§.¬∑_) (cong ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (¬∑‚Çä‚ÇÅ-identityÀ° _))) refl
   ‚àô sym (‚Ñ§.¬∑DistL+ _ _ _) ) ‚àô‚àô
    sym (‚Ñ§.¬∑Assoc (n ‚Ñ§.- m) k' k') ‚àô‚àô

     cong {x = k' ‚Ñ§.¬∑ k'}
       {y = ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (k ¬∑‚Çä‚ÇÅ ((1+ 0) ¬∑‚Çä‚ÇÅ k))} ((n ‚Ñ§.- m) ‚Ñ§.¬∑_) (sym (‚Ñ§.pos¬∑pos _ _) ‚àô
         cong (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ ‚àò (k ¬∑‚Çä‚ÇÅ_)) (sym (¬∑‚Çä‚ÇÅ-identityÀ° _)))
     )


k/k : ‚àÄ k ‚Üí [ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ k / k ] ‚â° 1
k/k (1+ k) = eq/ _ _ (‚Ñ§.¬∑IdR (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (1+ k)))

1/[k+1]+k/[k+1] : (k : ‚Ñï‚Çä‚ÇÅ) ‚Üí
                    [ 1 / suc‚Çä‚ÇÅ k ] + [ pos (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï k) / suc‚Çä‚ÇÅ k ] ‚â° 1
1/[k+1]+k/[k+1] k =
  n/k+m/k 1 (pos (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï k)) (suc‚Çä‚ÇÅ k)  ‚àô‚àô
   cong [_/ (suc‚Çä‚ÇÅ k) ]
    (‚Ñ§.+Comm 1 (pos (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï k))) ‚àô‚àô k/k (suc‚Çä‚ÇÅ k)


0</k : ‚àÄ (q q' : ‚Ñö‚Çä) (k : ‚Ñï‚Çä‚ÇÅ) ‚Üí
          0< ((fst q - fst q') )
           ‚Üí 0< ((fst q - fst (q' ‚Ñö‚Çä¬∑ ([ 1 / (suc‚Çä‚ÇÅ k) ] , tt))) )
0</k q q' (1+ k) x =
   subst {x = (fst q - fst q') +
     (fst (([ pos (suc k)  / (1+ (suc k)) ] , tt) ‚Ñö‚Çä¬∑ q'))}
       {y = ((fst q - fst (q' ‚Ñö‚Çä¬∑ ([ 1 / 1+ (suc k) ] , tt))) )}  0<_
     ( sym (+Assoc (fst q) (- fst q') (fst (([ pos (suc k) / 2+ k ] , tt) ‚Ñö‚Çä¬∑ q'))) ‚àô cong (fst q +_)
     (sym (¬∑DistR+ (-1) [ pos (suc k) / 1+ (suc k) ] (fst q')) ‚àô
        (cong (_¬∑ (fst q'))
           (sym (-Distr' 1 ([ pos (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï (1+ k)) / suc‚Çä‚ÇÅ (1+ k) ]))
              ‚àô sym (cong (-_) $ +CancelL- [ 1 / suc‚Çä‚ÇÅ (1+ k) ] [ pos (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï (1+ k)) / suc‚Çä‚ÇÅ (1+ k) ] _ (1/[k+1]+k/[k+1] (1+ k))))
          ‚àô‚àô sym (¬∑Assoc -1 [ pos 1 / 2+ k ] (fst q') )
         ‚àô‚àô (cong (-_) (¬∑Comm  [ pos 1 / 2+ k ]  (fst q')) ) ))
       ) (+0< (fst q - fst q')
    (fst (([ pos (suc k)  / (1+ (suc k)) ] , tt) ‚Ñö‚Çä¬∑ q')) x
     ((snd (([ pos (suc k)  / (1+ (suc k)) ] , tt) ‚Ñö‚Çä¬∑ q'))) )

-- x/k<x : ‚àÄ x k ‚Üí fst (x ‚Ñö‚Çä¬∑ ([ 1 / (1+ (suc k)) ] , tt)) < fst x
-- x/k<x x k =
--   let z = {!0</k k !}
--   in {!!}


Œµ/2+Œµ/2‚â°Œµ : ‚àÄ Œµ ‚Üí (Œµ ¬∑ [ 1 / 2 ]) + (Œµ ¬∑ [ 1 / 2 ]) ‚â° Œµ
Œµ/2+Œµ/2‚â°Œµ Œµ =
 sym (¬∑DistL+ Œµ [ pos 1 / 1+ 1 ] [ pos 1 / 1+ 1 ]) ‚àô‚àô
   cong (Œµ ¬∑_) (1/[k+1]+k/[k+1] 1) ‚àô‚àô ¬∑IdR Œµ

Œµ/3+Œµ/3+Œµ/3‚â°Œµ : ‚àÄ Œµ ‚Üí (Œµ ¬∑ [ 1 / 3 ]) +
                ((Œµ ¬∑ [ 1 / 3 ]) + (Œµ ¬∑ [ 1 / 3 ])) ‚â° Œµ
Œµ/3+Œµ/3+Œµ/3‚â°Œµ Œµ =
 (cong (Œµ ¬∑ [ pos 1 / 1+ 2 ] +_)
    (sym (¬∑DistL+ Œµ [ pos 1 / 1+ 2 ] [ pos 1 / 1+ 2 ])
      ‚àô cong (Œµ ¬∑_) dec‚Ñö?)
   ‚àô sym (¬∑DistL+ Œµ [ pos 1 / 1+ 2 ] [ pos 2 / 1+ 2 ]))
   ‚àô‚àô cong (Œµ ¬∑_) (dec‚Ñö?) ‚àô‚àô ¬∑IdR Œµ

Œµ/6+Œµ/6‚â°Œµ/3 : ‚àÄ Œµ ‚Üí (Œµ ¬∑ [ 1 / 6 ]) + (Œµ ¬∑ [ 1 / 6 ]) ‚â°
               (Œµ ¬∑ [ 1 / 3 ])
Œµ/6+Œµ/6‚â°Œµ/3 Œµ = sym (¬∑DistL+ Œµ _ _)
  ‚àô cong (Œµ ¬∑_) dec‚Ñö?


x/2<x : (Œµ : ‚Ñö‚Çä)
           ‚Üí (fst Œµ) ¬∑ [ pos 1 / 1+ 1 ] < fst Œµ
x/2<x Œµ =
 let Œµ/2 = /2‚Çä Œµ
     z = <-+o 0 (fst Œµ/2) ((fst Œµ/2)) $ 0<‚Üí< (fst Œµ/2) (snd Œµ/2)
 in subst2 (_<_) (+IdL (fst Œµ/2))
      (Œµ/2+Œµ/2‚â°Œµ (fst Œµ)) z


getŒ∏ : ‚àÄ (Œµ : ‚Ñö‚Çä) q ‚Üí (((- fst Œµ) < q) √ó (q < fst Œµ)) ‚Üí
   Œ£ ‚Ñö‚Çä Œª Œ∏ ‚Üí (0< (fst Œµ - fst Œ∏))
     √ó ((- (fst Œµ - fst Œ∏) < q) √ó (q < (fst Œµ - fst Œ∏)))
getŒ∏ Œµ q (x , x') =
 let m1< = <‚Üí0< (fst Œµ + q)
            (subst (_< fst Œµ + q) (+InvR (fst Œµ))
                   (<-o+  (- fst Œµ) q  (fst Œµ) x)
                    )
     m1 = (/2‚Çä (fst Œµ + q ,
                   m1<))
     m2< = <‚Üí0< (fst Œµ - q) $ subst (_< fst Œµ + (- q))
              ((+InvR q)) (<-+o q (fst Œµ) (- q) x')
     m2 = (/2‚Çä (fst Œµ - q , m2<))
     mm = (min‚Çä m1 m2)
     z'1 : fst mm < (fst Œµ + q)

     z'1 = isTrans‚â§<
            (fst mm)
            ((fst Œµ + q) ¬∑ [ 1 / 2 ])
            (fst Œµ + q)
             (min‚â§ ((fst Œµ + q) ¬∑ [ 1 / 2 ])
                  ((fst Œµ - q) ¬∑ [ 1 / 2 ]))
                  (x/2<x ((fst Œµ + q) , m1<))
     z'2 : fst mm < (fst Œµ - q)

     z'2 =
        isTrans‚â§< (fst mm)
            _
            (fst Œµ - q)
            (isTrans‚â§ (fst mm)
                        _
                        _
               (‚â°Weaken‚â§ _ _
                 (minComm (((fst Œµ + q) ¬∑ [ 1 / 2 ]))
                    (((fst Œµ - q) ¬∑ [ 1 / 2 ]))))
               (min‚â§ ((fst Œµ - q) ¬∑ [ 1 / 2 ])
                 ((fst Œµ + q) ¬∑ [ 1 / 2 ])))
            (x/2<x ((fst Œµ - q) , m2<))
 in  mm ,
             <‚Üí0< (fst Œµ - fst mm)
               ( let zz = (<-¬∑o ((fst mm) + (fst mm))
                                 ((fst Œµ + q) + (fst Œµ - q))
                               [ pos 1 / 1+ 1 ]
                                 (0<‚Üí< [ pos 1 / 1+ 1 ] tt )
                          (<Monotone+ (fst mm) (fst Œµ + q)
                             (fst mm) (fst Œµ - q)
                             z'1 z'2))
                     zz' = subst2 _<_
                             (¬∑DistR+ (fst mm) (fst mm) [ pos 1 / 1+ 1 ]
                                ‚àô Œµ/2+Œµ/2‚â°Œµ (fst mm))
                              (cong
                                {x = ((fst Œµ + q) + (fst Œµ - q))}
                                {y = (fst Œµ + fst Œµ)}
                                (_¬∑ [ pos 1 / 1+ 1 ])
                                (lem--02 {fst Œµ} {q})
                                ‚àô‚àô ¬∑DistR+ (fst Œµ) (fst Œµ) [ pos 1 / 1+ 1 ]
                                ‚àô‚àô Œµ/2+Œµ/2‚â°Œµ (fst Œµ))
                              zz
                 in -< (fst mm) (fst Œµ)  zz')
           , (subst2 _<_ (lem--03 {fst Œµ} {fst mm})
                                 (lem--04 {fst Œµ} {q})
                      (<-o+ (fst mm)
                              (fst Œµ + q) (- fst Œµ) z'1)
           , subst2 _<_ (lem--05 {fst mm} {q})
                             (lem--06 {fst Œµ} {q} {fst mm})
                       (<-+o (fst mm)
                              (fst Œµ - q)
                               (q - fst mm)
                               z'2))


strength-lem-01 : (Œµ q' a'' : ‚Ñö‚Çä) ‚Üí
                    0< (fst Œµ + (- fst q') + (- fst a''))
                    ‚Üí 0< (fst Œµ - fst a'')
strength-lem-01 Œµ q' a'' x =
   let z = +0< ((fst Œµ + (- fst q') + (- fst a'')))
                (fst q') x (snd q')
    in subst  {x = ((fst Œµ + (- fst q') + (- fst a''))) +
                fst q' }
        {y = (fst Œµ - fst a'')} 0<_ (lem--07 {fst Œµ} {fst q'} {fst a''}) z


x/2+[y-x]=y-x/2 : ‚àÄ (x y : ‚Ñö‚Çä) ‚Üí
   fst (/2‚Çä x) + (fst y - fst x) ‚â°
     fst y - fst (/2‚Çä x)
x/2+[y-x]=y-x/2 x y =
  cong (Œª xx ‚Üí fst (/2‚Çä x) + (fst y - xx)) (sym (Œµ/2+Œµ/2‚â°Œµ (fst x)))
    ‚àô lem-05 (fst (/2‚Çä x)) (fst y)



elimBy‚â°‚äé<' : ‚àÄ {‚Ñì} {A : ‚Ñö ‚Üí ‚Ñö ‚Üí Type ‚Ñì}
  ‚Üí (‚àÄ x y ‚Üí A x y ‚Üí A y x)
  ‚Üí (‚àÄ x ‚Üí A x x)
  ‚Üí (‚àÄ x (Œµ : ‚Ñö‚Çä) ‚Üí A x (x + fst Œµ))
  ‚Üí ‚àÄ x y ‚Üí A x y
elimBy‚â°‚äé<' {A = A} s r f' =
 elimBy‚â§ s (Œª x y ‚Üí ‚äé.rec (Œª p ‚Üí subst (A x) p (r x)) (f x y) ‚àò ‚â§‚Üí‚â°‚äé< x y)

 where
 f : ‚àÄ x y ‚Üí x < y ‚Üí A x y
 f x y v = subst (A x) lem--05 $ f' x (<‚Üí‚Ñö‚Çä x y v)

elim‚â§By+ : ‚àÄ {‚Ñì} {A : ‚àÄ x y ‚Üí x < y ‚Üí  Type ‚Ñì}
  ‚Üí (‚àÄ x (Œµ : ‚Ñö‚Çä) x< ‚Üí A x (x + fst Œµ) x<)
  ‚Üí ‚àÄ x y x<y ‚Üí A x y x<y
elim‚â§By+ {A = A} X x y v =
  subst (uncurry (A x)) (Œ£‚â°Prop (isProp< x) lem--05) $
   X x (<‚Üí‚Ñö‚Çä x y v) (<+‚Ñö‚Çä' x x ((<‚Üí‚Ñö‚Çä x y v)) (isRefl‚â§ x))


module HLP where



 data GExpr : Type where
  ge[_] : ‚Ñö ‚Üí GExpr
  neg-ge_ : GExpr ‚Üí GExpr
  _+ge_ : GExpr ‚Üí GExpr ‚Üí GExpr
  _¬∑ge_ : GExpr ‚Üí GExpr ‚Üí GExpr
  ge1 : GExpr

 infixl 6 _+ge_
 infixl 7 _¬∑ge_


 ¬∑GE : ‚Ñö ‚Üí GExpr ‚Üí GExpr
 ¬∑GE Œµ ge[ x ] = ge[ Œµ ¬∑ x ]
 ¬∑GE Œµ (neg-ge x) = (neg-ge (¬∑GE Œµ x))
 ¬∑GE Œµ (x +ge x‚ÇÅ) = ¬∑GE Œµ x +ge ¬∑GE Œµ x‚ÇÅ
 ¬∑GE Œµ (x ¬∑ge x‚ÇÅ) = (¬∑GE Œµ x) ¬∑ge x‚ÇÅ
 ¬∑GE Œµ ge1 = ge[ Œµ ]

 evGE : GExpr ‚Üí ‚Ñö
 evGE ge[ x ] = x
 evGE (neg-ge x) = - evGE x
 evGE (x +ge x‚ÇÅ) = evGE x + evGE x‚ÇÅ
 evGE (x ¬∑ge x‚ÇÅ) = evGE x ¬∑ evGE x‚ÇÅ
 evGE ge1 = 1

 ¬∑mapGE : ‚àÄ Œµ e ‚Üí Œµ ¬∑ evGE e ‚â° evGE (¬∑GE Œµ e)
 ¬∑mapGE Œµ ge[ x ] = refl
 ¬∑mapGE Œµ (neg-ge e) = ¬∑Assoc _ _ _ ‚àô‚àô
   cong (_¬∑ evGE e) (¬∑Comm Œµ -1) ‚àô
    sym (¬∑Assoc _ _ _) ‚àô‚àô cong (-_) (¬∑mapGE Œµ e)
 ¬∑mapGE Œµ (e +ge e‚ÇÅ) =
   ¬∑DistL+ Œµ _ _ ‚àô Œª i ‚Üí (¬∑mapGE Œµ e i) + (¬∑mapGE Œµ e‚ÇÅ i)
 ¬∑mapGE Œµ (e ¬∑ge e‚ÇÅ) = ¬∑Assoc _ _ _ ‚àô cong (_¬∑ evGE e‚ÇÅ) (¬∑mapGE Œµ e)
 ¬∑mapGE Œµ (ge1) = ¬∑IdR Œµ


 infixl 20 dist‚Ñö!_¬∑[_‚â°_]


 dist‚Ñö!_¬∑[_‚â°_] : (Œµ : ‚Ñö) ‚Üí (lhs rhs : GExpr)
    ‚Üí {ùüö.True (discrete‚Ñö (evGE lhs) (evGE rhs))}
     ‚Üí (evGE (¬∑GE Œµ lhs)) ‚â° (evGE (¬∑GE Œµ rhs))
 dist‚Ñö! Œµ ¬∑[ lhs ‚â° rhs ] {p} =
   sym (¬∑mapGE Œµ lhs) ‚àô‚àô cong (Œµ ¬∑_) (ùüö.toWitness p)  ‚àô‚àô
    ¬∑mapGE Œµ rhs

 infixl 20 dist‚Ñö<!_[_<_]

 dist‚Ñö<!_[_<_] : (Œµ : ‚Ñö‚Çä) ‚Üí (lhs rhs : GExpr)
    ‚Üí {ùüö.True (<Dec (evGE lhs) (evGE rhs))}
     ‚Üí (evGE (¬∑GE (fst Œµ) lhs)) < (evGE (¬∑GE (fst Œµ) rhs))
 dist‚Ñö<! Œµ [ lhs < rhs ] {p} =
   subst2 _<_ (¬∑mapGE (fst Œµ) lhs) (¬∑mapGE (fst Œµ) rhs)
     (<-o¬∑ _ _ (fst Œµ) (0<‚Ñö‚Çä Œµ) (ùüö.toWitness p))


 dist‚Ñö‚â§!_[_‚â§_] : (Œµ : ‚Ñö‚Çä) ‚Üí (lhs rhs : GExpr)
    ‚Üí {ùüö.True (‚â§Dec (evGE lhs) (evGE rhs))}
     ‚Üí (evGE (¬∑GE (fst Œµ) lhs)) ‚â§ (evGE (¬∑GE (fst Œµ) rhs))
 dist‚Ñö‚â§! Œµ [ lhs ‚â§ rhs ] {p} =
   subst2 _‚â§_ (¬∑mapGE (fst Œµ) lhs) (¬∑mapGE (fst Œµ) rhs)
     (‚â§-o¬∑ _ _ (fst Œµ) (0‚â§‚Ñö‚Çä Œµ) (ùüö.toWitness p))

 dist‚Ñö0<! : (Œµ : ‚Ñö‚Çä) ‚Üí (rhs : GExpr)
    ‚Üí {ùüö.True (<Dec 0 (evGE rhs))}
     ‚Üí  0< (evGE (¬∑GE (fst Œµ) rhs))
 dist‚Ñö0<! Œµ rhs {p} =
  <‚Üí0< _
   (subst2 _<_ (¬∑mapGE (fst Œµ) ge[ 0 ] ‚àô ¬∑AnnihilR (fst Œµ))
    (¬∑mapGE (fst Œµ) rhs)
     (<-o¬∑ _ _ (fst Œµ) (0<‚Ñö‚Çä Œµ) (ùüö.toWitness p)))


open HLP public


-<‚Åª¬π : ‚àÄ q r ‚Üí 0 < r - q ‚Üí q < r
-<‚Åª¬π q r x = subst2 (_<_)
 (+IdL q) ((sym (lem--035 {r} {q}))) (<-+o 0 (r - q) q x)


riseQandD : ‚àÄ p q r ‚Üí Path ‚Ñö ([ p / q ]) ([ p ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ r / (q ¬∑‚Çä‚ÇÅ r) ])
riseQandD p q r =
 let z = _
 in sym (¬∑IdR z) ‚àô cong (z ¬∑_) (eq/ _ ( ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ r , r ) (‚Ñ§.¬∑Comm _ _))


+MaxDistr‚Ñö : ‚àÄ x y z ‚Üí (max x y) + z ‚â° max (x + z) (y + z)
+MaxDistr‚Ñö = SQ.elimProp3 (Œª _ _ _ ‚Üí isSet‚Ñö _ _)
  Œª (a , a') (b , b') (c , c') ‚Üí
   let zzz' : ‚àÄ a' b' c' ‚Üí
            (‚Ñ§.max (a ‚Ñ§.¬∑ b') (b ‚Ñ§.¬∑ a') ‚Ñ§.¬∑ (pos c') ‚Ñ§.+ c ‚Ñ§.¬∑ (a' ‚Ñ§.¬∑ b'))
                 ‚â°
            (‚Ñ§.max ((a ‚Ñ§.¬∑ (pos c') ‚Ñ§.+ c ‚Ñ§.¬∑ a') ‚Ñ§.¬∑ b')
                   ((b ‚Ñ§.¬∑ (pos c') ‚Ñ§.+ c ‚Ñ§.¬∑ b') ‚Ñ§.¬∑ a'))
       zzz' a' b' c' =
            cong (‚Ñ§._+ _) (‚Ñ§.¬∑DistPosLMax _ _ _ ‚àô
              cong‚ÇÇ ‚Ñ§.max (sym (‚Ñ§.¬∑Assoc _ _ _) ‚àô‚àô
                  cong (a ‚Ñ§.¬∑_) (‚Ñ§.¬∑Comm _ _) ‚àô‚àô (‚Ñ§.¬∑Assoc _ _ _))
                  ((sym (‚Ñ§.¬∑Assoc _ _ _) ‚àô‚àô
                  cong (b ‚Ñ§.¬∑_) (‚Ñ§.¬∑Comm _ _) ‚àô‚àô (‚Ñ§.¬∑Assoc _ _ _))))
          ‚àô‚àô ‚Ñ§.+DistLMax _ _ _
          ‚àô‚àô cong‚ÇÇ ‚Ñ§.max
               (cong (_ ‚Ñ§.+_) (‚Ñ§.¬∑Assoc _ _ _) ‚àô sym (‚Ñ§.¬∑DistL+ _ _ _))
               ((cong (((_ ‚Ñ§.¬∑ _) ‚Ñ§.¬∑ _)
                      ‚Ñ§.+_) (cong (_ ‚Ñ§.¬∑_) (‚Ñ§.¬∑Comm _ _)
                        ‚àô ‚Ñ§.¬∑Assoc _ _ _) ‚àô sym (‚Ñ§.¬∑DistL+ _ _ _)))
       z* = _

   in congS (SQ.[_] ‚àòS (_, a' ¬∑‚Çä‚ÇÅ b' ¬∑‚Çä‚ÇÅ c'))
        (  congS ((Œª ab ‚Üí ‚Ñ§.max (a ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ b') (b ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ a')
             ‚Ñ§.¬∑ pos (suc (‚Ñï‚Çä‚ÇÅ.n c')) ‚Ñ§.+
             ab) ‚àò (c ‚Ñ§.¬∑_)) (‚Ñ§.pos¬∑pos _ _)
              ‚àô zzz' (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ a') (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ b') (suc (‚Ñï‚Çä‚ÇÅ.n c')))
        ‚àô‚àô (sym (¬∑IdR z*) ‚àô cong (z* ¬∑_)
            (eq/ _ ( ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ c' , c' )
          (‚Ñ§.¬∑Comm _ _)) ) ‚àô‚àô
         congS (SQ.[_])
          (cong‚ÇÇ _,_
          ((‚Ñ§.¬∑DistPosLMax
                 ((a ‚Ñ§.¬∑ pos (suc (‚Ñï‚Çä‚ÇÅ.n c')) ‚Ñ§.+ c ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ a') ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ b')
                 ((b ‚Ñ§.¬∑ pos (suc (‚Ñï‚Çä‚ÇÅ.n c')) ‚Ñ§.+ c ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ b') ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ a')
             (suc (‚Ñï‚Çä‚ÇÅ.n c'))) ‚àô cong‚ÇÇ
            ‚Ñ§.max
              (sym (‚Ñ§.¬∑Assoc _ _ _) ‚àô
                  cong ((a ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ c' ‚Ñ§.+ c ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ a') ‚Ñ§.¬∑_)
                   ((sym (‚Ñ§.pos¬∑pos (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï b') (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï c')))) )
               ((sym (‚Ñ§.¬∑Assoc _ _ _)) ‚àô
                cong ((b ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ c' ‚Ñ§.+ c ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ b') ‚Ñ§.¬∑_)
                              (sym (‚Ñ§.pos¬∑pos (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï a') (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï c')))))

          (cong (_¬∑‚Çä‚ÇÅ c')
            (sym (¬∑‚Çä‚ÇÅ-assoc _ _ _) ‚àô‚àô
              ((Œª i ‚Üí a' ¬∑‚Çä‚ÇÅ (¬∑‚Çä‚ÇÅ-comm b' c' i)))
               ‚àô‚àô ¬∑‚Çä‚ÇÅ-assoc _ _ _) ‚àô sym (¬∑‚Çä‚ÇÅ-assoc _ _ _))
             )

+MinDistr‚Ñö : ‚àÄ x y z ‚Üí (min x y) + z ‚â° min (x + z) (y + z)
+MinDistr‚Ñö = SQ.elimProp3 (Œª _ _ _ ‚Üí isSet‚Ñö _ _)
  Œª (a , a') (b , b') (c , c') ‚Üí
   let z : ‚àÄ a' b' c' ‚Üí
              (‚Ñ§.min (a ‚Ñ§.¬∑ pos b') (b ‚Ñ§.¬∑ pos a') ‚Ñ§.¬∑ pos c'
                 ‚Ñ§.+ c ‚Ñ§.¬∑ (pos a' ‚Ñ§.¬∑ pos b')) ‚Ñ§.¬∑ pos c'
               ‚â°
               ‚Ñ§.min
                ((a ‚Ñ§.¬∑ pos c' ‚Ñ§.+ c ‚Ñ§.¬∑ pos a') ‚Ñ§.¬∑ (pos b' ‚Ñ§.¬∑ pos c'))
                ((b ‚Ñ§.¬∑ pos c' ‚Ñ§.+ c ‚Ñ§.¬∑ pos b') ‚Ñ§.¬∑ (pos a' ‚Ñ§.¬∑ pos c'))

       z a' b' c' =  cong (‚Ñ§._¬∑ pos c') (
         cong (‚Ñ§._+ c ‚Ñ§.¬∑ (pos a' ‚Ñ§.¬∑ pos b')) (
          ‚Ñ§.¬∑DistPosLMin _ _ _)
            ‚àô ‚Ñ§.+DistLMin _ _ _ ) ‚àô
            ‚Ñ§.¬∑DistPosLMin _ _ _ ‚àô cong‚ÇÇ ‚Ñ§.min
              (Lems.lem--042 ‚Ñ§CommRing )
              (Lems.lem--043 ‚Ñ§CommRing)
   in riseQandD
         (‚Ñ§.min (a ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ b') (b ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ a') ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ c' ‚Ñ§.+
               c ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (a' ¬∑‚Çä‚ÇÅ b')) ( a' ¬∑‚Çä‚ÇÅ b' ¬∑‚Çä‚ÇÅ c') c'
            ‚àô congS (SQ.[_])
              (cong‚ÇÇ _,_
                 ((Œª i ‚Üí
                      (‚Ñ§.min (a ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ b') (b ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ a') ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ c' ‚Ñ§.+
                         c ‚Ñ§.¬∑ ‚Ñ§.pos¬∑pos (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï a') (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï b') (i))
                        ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ c' )
                   ‚àô‚àô z (suc (‚Ñï‚Çä‚ÇÅ.n a')) (suc (‚Ñï‚Çä‚ÇÅ.n b')) (suc (‚Ñï‚Çä‚ÇÅ.n c'))
                   ‚àô‚àô Œª i ‚Üí ‚Ñ§.min ((a ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ c' ‚Ñ§.+ c ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ a')
                    ‚Ñ§.¬∑ ‚Ñ§.pos¬∑pos (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï b') (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï c') (~ i))
                     ((b ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ c' ‚Ñ§.+ c ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ b')
                       ‚Ñ§.¬∑ ‚Ñ§.pos¬∑pos (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï a') (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï c') (~ i)))
                 (cong (_¬∑‚Çä‚ÇÅ c') (sym (¬∑‚Çä‚ÇÅ-assoc _ _ _)
                     ‚àô‚àô cong (a' ¬∑‚Çä‚ÇÅ_) (¬∑‚Çä‚ÇÅ-comm _ _) ‚àô‚àô (¬∑‚Çä‚ÇÅ-assoc _ _ _))
                    ‚àô sym (¬∑‚Çä‚ÇÅ-assoc _ _ _)))



<MonotoneMax : ‚àÄ m o n s ‚Üí m < n ‚Üí o < s ‚Üí max m o < max n s
<MonotoneMax =
  elimBy‚â§ (Œª x y X o s u v ‚Üí subst2 _<_ (maxComm _ _) (maxComm _ _)
                 ((X s o) v u))
   Œª x y x‚â§y n s _ y<s ‚Üí
     subst (_< max n s) (sym (‚â§‚Üímax x y x‚â§y))
      (isTrans<‚â§ _ _ _ y<s (‚â§max' n s))

<MonotoneMin : ‚àÄ n s m o  ‚Üí m < n ‚Üí o < s ‚Üí min m o < min n s
<MonotoneMin =
  elimBy‚â§ (Œª x y X o s u v ‚Üí subst2 _<_ (minComm _ _) (minComm _ _)
                 ((X s o) v u))
   Œª x y x‚â§y n s n<x _ ‚Üí
     subst (min n s <_) (sym (‚â§‚Üímin x y x‚â§y))
       (isTrans‚â§< _ _ _ (min‚â§ n s) n<x)


clampDelta : ‚àÄ L L' x ‚Üí clamp L L' x ‚â°
               (x + clamp (L - x) (L' - x) 0)
clampDelta L L' x =
     cong‚ÇÇ min
       (cong‚ÇÇ max (lem--035 {L} {x})
         (sym $ +IdL x) ‚àô sym (+MaxDistr‚Ñö _ _ x))
       (lem--035 {L'} {x})
  ‚àô‚àô sym (+MinDistr‚Ñö (max (L - x) 0) (L' - x) x)
  ‚àô‚àô +Comm (min (max (L - x) 0) (L' - x)) x



clampDiff : ‚àÄ L L' x y ‚Üí x ‚â§ y ‚Üí
    clamp L L' y - clamp L L' x ‚â§ y - x
clampDiff L L' x y z =
  (subst2 _‚â§_
     ((sym (lem--041 {y} {a'} {x} {a})) ‚àô
       cong‚ÇÇ _-_ (sym $ clampDelta L L' y)
                   (sym $ clampDelta L L' x))
     (+IdR (y - x))
     (‚â§-o+ ((a' - a)) 0 (y - x)
      (subst (_‚â§ 0) (-[x-y]‚â°y-x a a')
       $ minus-‚â§ 0 (a - a') (-‚â§ a' a zz'))  ))

 where

 a = clamp (L - x) (L' - x) 0
 a' = clamp (L - y) (L' - y) 0
 zz' : a' ‚â§ a
 zz' = ‚â§MonotoneMin _ _ _ _
          (‚â§MonotoneMax _ _ _ _
           (‚â§-o+ (- y) (- x) L (minus-‚â§ x y z)) (isRefl‚â§ 0)
            ) (‚â§-o+ (- y) (- x) L' $ minus-‚â§ x y z)


minDiff : ‚àÄ L' x y ‚Üí x ‚â§ y ‚Üí
    min y L' - min x L' ‚â§ y - x
minDiff L' x y x‚â§y =
 subst (_‚â§ (y - x))
    (cong‚ÇÇ _-_
     (cong (flip min L') (‚â§‚Üímax x y x‚â§y ))
     (cong (flip min L') (maxIdem x)))
     (clampDiff x L' x y x‚â§y)


clampDist' : ‚àÄ L L' x y ‚Üí x ‚â§ y ‚Üí
    abs (clamp L L' y - clamp L L' x) ‚â§ abs (y - x)
clampDist' L L' x y z =
 subst2 _‚â§_
  (sym (absNonNeg (clamp L L' y - clamp L L' x)
          (-‚â§ (clamp L L' x) (clamp L L' y)  (‚â§MonotoneClamp L L' x y z))))
  (sym (absNonNeg (y - x) (-‚â§ x y z)))
  (clampDiff L L' x y z)

clampDist : ‚àÄ L L' x y ‚Üí
    abs (clamp L L' y - clamp L L' x) ‚â§ abs (y - x)
clampDist L L' =
 elimBy‚â§ (Œª x y ‚Üí subst2 _‚â§_ (absComm- (clamp L L' y) (clamp L L' x))
    (absComm- y x)) (clampDist' L L')

maxDist : ‚àÄ M x y ‚Üí
    abs (max M y - max M x) ‚â§ abs (y - x)
maxDist M x y =
  subst2 {x = min (max M y) (max M (max x y))}
          {(max M y)}
    {z = min (max M x) (max M (max x y))} {(max M x)}
    (Œª a b ‚Üí abs (a - b) ‚â§ abs (y - x))
    (‚â§‚Üímin _ _ (subst (max M y ‚â§_)
      (sym (maxAssoc _ _ _) ‚àô cong (max M) (maxComm _ _))
      (‚â§max _ _)))
    (‚â§‚Üímin _ _
      ((subst (max M x ‚â§_)
      (sym (maxAssoc _ _ _))
      (‚â§max _ _))))
    (clampDist M (max M (max x y)) x y)


‚â§‚Üí<‚äé‚â° : ‚àÄ p q ‚Üí p ‚â§ q ‚Üí (p ‚â° q) ‚äé (p < q)
‚â§‚Üí<‚äé‚â° p q x with p ‚âü q
... | lt x‚ÇÅ = inr x‚ÇÅ
... | eq x‚ÇÅ = inl x‚ÇÅ
... | gt x‚ÇÅ = ‚ä•.rec $ ‚â§‚Üí‚âØ p q x x‚ÇÅ


getPosRatio : (L‚ÇÅ L‚ÇÇ : ‚Ñö‚Çä) ‚Üí (fst ((inv‚Ñö‚Çä L‚ÇÅ) ‚Ñö‚Çä¬∑  L‚ÇÇ) ‚â§ 1)
                           ‚äé (fst ((inv‚Ñö‚Çä L‚ÇÇ) ‚Ñö‚Çä¬∑  L‚ÇÅ) ‚â§ 1)
getPosRatio L‚ÇÅ L‚ÇÇ =
  elimBy‚â§ {A = Œª (L‚ÇÅ L‚ÇÇ : ‚Ñö) ‚Üí (<L‚ÇÅ : 0< L‚ÇÅ) ‚Üí (<L‚ÇÇ : 0< L‚ÇÇ)
                      ‚Üí  (((fst (inv‚Ñö‚Çä (L‚ÇÅ , <L‚ÇÅ) ‚Ñö‚Çä¬∑  (L‚ÇÇ , <L‚ÇÇ))) ‚â§ 1)
                           ‚äé ((fst ((inv‚Ñö‚Çä (L‚ÇÇ , <L‚ÇÇ)) ‚Ñö‚Çä¬∑
                            (L‚ÇÅ , <L‚ÇÅ))) ‚â§ 1))}
    (Œª x y x‚ÇÅ <L‚ÇÅ <L‚ÇÇ ‚Üí
      Iso.fun (‚äé.‚äé-swap-Iso) (x‚ÇÅ <L‚ÇÇ <L‚ÇÅ) )
     (Œª L‚ÇÅ L‚ÇÇ x‚ÇÅ <L‚ÇÅ <L‚ÇÇ ‚Üí
             inr (
               subst (fst (inv‚Ñö‚Çä (L‚ÇÇ , <L‚ÇÇ)) ¬∑ L‚ÇÅ ‚â§_)
                  (inv‚Ñö‚Çä[x]¬∑x (L‚ÇÇ , <L‚ÇÇ))
                  (‚â§-o¬∑ L‚ÇÅ L‚ÇÇ (fst (inv‚Ñö‚Çä (L‚ÇÇ , <L‚ÇÇ)))
                    (0‚â§‚Ñö‚Çä (inv‚Ñö‚Çä (L‚ÇÇ , <L‚ÇÇ))) x‚ÇÅ)))
     (fst L‚ÇÅ) (fst L‚ÇÇ) (snd L‚ÇÅ) (snd L‚ÇÇ)


¬∑MaxDistr‚Ñö : ‚àÄ x y z ‚Üí 0< z ‚Üí (max x y) ¬∑ z ‚â° max (x ¬∑ z) (y ¬∑ z)
¬∑MaxDistr‚Ñö = SQ.elimProp3 (Œª _ _ _ ‚Üí isPropŒ† Œª _ ‚Üí isSet‚Ñö _ _)
  www

 where
 www : (a b c : ‚Ñ§.‚Ñ§ √ó ‚Ñï‚Çä‚ÇÅ) ‚Üí
         0< _//_.[ c ] ‚Üí
         max _//_.[ a ] _//_.[ b ] ¬∑ _//_.[ c ] ‚â°
         max (_//_.[ a ] ¬∑ _//_.[ c ]) (_//_.[ b ] ¬∑ _//_.[ c ])
 www (a , a') (b , b') (c@(pos (suc n)) , c') x = eq/ _ _
    wwww
  where

   wwww' : ‚àÄ a b' ‚Üí  a ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ b' ‚Ñ§.¬∑ pos (suc n) ‚Ñ§.¬∑ pos (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï c')
              ‚â° ((a ‚Ñ§.¬∑ c) ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (b' ¬∑‚Çä‚ÇÅ c'))
   wwww' a b' =
      cong (‚Ñ§._¬∑ pos (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï c')) (sym (‚Ñ§.¬∑Assoc _ _ _) ‚àô
            (cong (a ‚Ñ§.¬∑_) (‚Ñ§.¬∑Comm _ _)) ‚àô ‚Ñ§.¬∑Assoc _ _ _) ‚àô
         sym (‚Ñ§.¬∑Assoc _ _ _) ‚àô
         cong ((a ‚Ñ§.¬∑ pos (suc n)) ‚Ñ§.¬∑_) (sym (‚Ñ§.pos¬∑pos _ _))


   wwww : ‚Ñ§.max (a ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ b') (b ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ a') ‚Ñ§.¬∑ c
            ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (a' ¬∑‚Çä‚ÇÅ c' ¬∑‚Çä‚ÇÅ (b' ¬∑‚Çä‚ÇÅ c'))
          ‚â° ‚Ñ§.max ((a ‚Ñ§.¬∑ c) ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (b' ¬∑‚Çä‚ÇÅ c'))
                    ((b ‚Ñ§.¬∑ c) ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (a' ¬∑‚Çä‚ÇÅ c'))  ‚Ñ§.¬∑
              ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (a' ¬∑‚Çä‚ÇÅ b' ¬∑‚Çä‚ÇÅ c')
   wwww =
    cong (‚Ñ§.max (a ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ b') (b ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ a') ‚Ñ§.¬∑ pos (suc n) ‚Ñ§.¬∑_)
      (cong (Œª ac ‚Üí ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (ac ¬∑‚Çä‚ÇÅ (b' ¬∑‚Çä‚ÇÅ c'))) (¬∑‚Çä‚ÇÅ-comm a'  c')
       ‚àô‚àô cong ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (sym (¬∑‚Çä‚ÇÅ-assoc  _ _ _)) ‚àô‚àô
         ‚Ñ§.pos¬∑pos _ _)
      ‚àô‚àô ‚Ñ§.¬∑Assoc _ _ _ ‚àô‚àô
    cong‚ÇÇ (‚Ñ§._¬∑_)
       (cong (‚Ñ§._¬∑ (pos (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï c')))
         (‚Ñ§.¬∑DistPosLMax (a ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ b') (b ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ a') (suc n))
         ‚àô ‚Ñ§.¬∑DistPosLMax
              ((a ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ b') ‚Ñ§.¬∑ pos (suc n))
              ((b ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ a') ‚Ñ§.¬∑ pos (suc n)) (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï c')
          ‚àô cong‚ÇÇ ‚Ñ§.max
          (wwww' a b') (wwww' b a'))
           (cong ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (¬∑‚Çä‚ÇÅ-assoc a' b' c'))


¬∑MaxDistr‚Ñö' : ‚àÄ x y z ‚Üí 0 ‚â§ z ‚Üí (max x y) ¬∑ z ‚â° max (x ¬∑ z) (y ¬∑ z)
¬∑MaxDistr‚Ñö' x y z =
  ‚äé.rec (Œª p ‚Üí cong ((max x y) ¬∑_) (sym p) ‚àô
        ¬∑AnnihilR (max x y)  ‚àô cong‚ÇÇ max (sym (¬∑AnnihilR x) ‚àô cong (x ¬∑_) p)
            (sym (¬∑AnnihilR y) ‚àô cong (y ¬∑_) p))
    (¬∑MaxDistr‚Ñö x y z ‚àò <‚Üí0< z) ‚àò (‚â§‚Üí‚â°‚äé< 0 z)

‚â§Monotone¬∑-onNonNeg : ‚àÄ x x' y y' ‚Üí
  x ‚â§ x' ‚Üí
  y ‚â§ y' ‚Üí
  0 ‚â§ x ‚Üí
  0 ‚â§ y ‚Üí
   x ¬∑ y ‚â§ x' ¬∑ y'
‚â§Monotone¬∑-onNonNeg x x' y y' x‚â§x' y‚â§y' 0‚â§x 0‚â§y =
  isTrans‚â§ _ _ _ (‚â§-¬∑o x x' y 0‚â§y x‚â§x')
   (‚â§-o¬∑ y y' x' (isTrans‚â§ 0 _ _ 0‚â§x x‚â§x') y‚â§y')

<Monotone¬∑-onPos : ‚àÄ x x' y y' ‚Üí
  x < x' ‚Üí
  y < y' ‚Üí
  0 ‚â§ x ‚Üí
  0 ‚â§ y ‚Üí
   x ¬∑ y < x' ¬∑ y'
<Monotone¬∑-onPos x x' y y' x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ =
   let zz = 0<-m¬∑n (x' - x) (y' - y) (-< x x' x‚ÇÅ) (-< y y' x‚ÇÇ)
   in subst2 _<_ (+IdL _ ‚àô +IdR _)
          (lem--039 {x'} {x} {y'} {y})
        (<‚â§Monotone+ 0 ((x' - x) ¬∑ (y' - y)) (x ¬∑ y + 0)
             (x' ¬∑ y + ((x ¬∑ (y' - y)))) zz
               (‚â§Monotone+ (x ¬∑ y) (x' ¬∑ y) 0  (x ¬∑ (y' - y))
                (‚â§-¬∑o x x' y x‚ÇÑ (<Weaken‚â§ x x' x‚ÇÅ))
                (subst (_‚â§ x ¬∑ (y' - y))
                  (¬∑AnnihilL _) $ ‚â§-¬∑o 0 x (y' - y)
                  (<Weaken‚â§ 0 (y' - y) (-< y y' x‚ÇÇ) ) x‚ÇÉ)))


‚â§<Monotone¬∑-onPos : ‚àÄ x x' y y' ‚Üí
  x ‚â§ x' ‚Üí
  y < y' ‚Üí
  0 < x ‚Üí
  0 ‚â§ y ‚Üí
   x ¬∑ y < x' ¬∑ y'
‚â§<Monotone¬∑-onPos x x' y y' x‚â§x' y<y' 0<x 0‚â§y =
  isTrans‚â§< _ _ _
    (‚â§-¬∑o x x' y 0‚â§y x‚â§x')
    (<-o¬∑ y y' x' (isTrans<‚â§ 0 _ _ 0<x x‚â§x') y<y')

inv‚Ñö : ‚àÄ q ‚Üí 0 # q ‚Üí ‚Ñö
inv‚Ñö q p = sign q ¬∑ fst (inv‚Ñö‚Çä (0#‚Üí‚Ñö‚Çä q p))

inv‚Ñö‚Çä‚â°inv‚Ñö : ‚àÄ q p ‚Üí inv‚Ñö (fst q) p ‚â° fst (inv‚Ñö‚Çä q)
inv‚Ñö‚Çä‚â°inv‚Ñö q p = cong‚ÇÇ _¬∑_ (fst (<‚Üísign (fst q)) (0<‚Ñö‚Çä q)
    ) (cong (fst ‚àò inv‚Ñö‚Çä) (‚Ñö‚Çä‚â° (sym (abs'‚â°abs (fst q)) ‚àô
     absPos (fst q) ((0<‚Ñö‚Çä q))))) ‚àô ¬∑IdL (fst (inv‚Ñö‚Çä q))

fromNat-inv‚Ñö : ‚àÄ n p ‚Üí inv‚Ñö [ pos (suc n) / 1 ] p ‚â° [ 1 / 1+ n ]
fromNat-inv‚Ñö n p = inv‚Ñö‚Çä‚â°inv‚Ñö _ _


inv‚Ñö-pos : ‚àÄ x y ‚Üí 0 < x ‚Üí 0 < inv‚Ñö x y
inv‚Ñö-pos x y z =
  subst (0 <_)
    (sym (inv‚Ñö‚Çä‚â°inv‚Ñö (x , <‚Üí0< _ z) y))
      (0<‚Ñö‚Çä (inv‚Ñö‚Çä (x , <‚Üí0< _ z)))


0#inv‚Ñö : ‚àÄ q 0#q ‚Üí 0 # (inv‚Ñö q 0#q)
0#inv‚Ñö q 0#q = ¬∑Monotone0# _ _  (fst (0#sign q) 0#q)
  (inl (0<‚Ñö‚Çä (inv‚Ñö‚Çä (0#‚Üí‚Ñö‚Çä q 0#q))))




¬∑DistInv‚Ñö : ‚àÄ x y 0#x 0#y 0#xy ‚Üí
  (inv‚Ñö x 0#x) ¬∑ (inv‚Ñö y 0#y) ‚â° inv‚Ñö (x ¬∑ y) 0#xy
¬∑DistInv‚Ñö x y 0#x 0#y 0#xy =
  (sym (¬∑Assoc _ _ _) ‚àô
    cong ((sign x) ¬∑_)
      (¬∑Assoc _ _ _
       ‚àô‚àô cong (_¬∑ fst (inv‚Ñö‚Çä (0#‚Üí‚Ñö‚Çä y 0#y)))
         (¬∑Comm _ _) ‚àô‚àô
       sym (¬∑Assoc _ _ _))
   ‚àô (¬∑Assoc _ _ _)) ‚àô
   cong‚ÇÇ _¬∑_
     (sign¬∑sign x y)
     (cong fst (inv‚Ñö‚ÇäDist¬∑ (0#‚Üí‚Ñö‚Çä x 0#x) (0#‚Üí‚Ñö‚Çä y 0#y))
       ‚àô cong (fst ‚àò inv‚Ñö‚Çä) (‚Ñö‚Çä‚â° (abs'¬∑abs' _ _)) )

inv‚Ñö-sign : ‚àÄ q 0#q ‚Üí sign q ‚â° (inv‚Ñö (sign q) 0#q)
inv‚Ñö-sign q =
  ‚äé.rec (Œª p ‚Üí p ‚àô cong (uncurry inv‚Ñö)
    (Œ£‚â°Prop  (Œª _ ‚Üí isProp# _ _)
     {u = 1 , inl (ùüö.toWitness {Q = <Dec 0 1} _)} (sym p) ))
     ((Œª p ‚Üí p ‚àô cong (uncurry inv‚Ñö)
    (Œ£‚â°Prop  (Œª _ ‚Üí isProp# _ _)
     {u = -1 , inr (ùüö.toWitness {Q = <Dec -1 0} _)} (sym p) )))
 ‚àò ‚äé.map (fst (fst (<‚âÉsign q)))
   (fst (snd (snd (<‚âÉsign q)))) ‚àò invEq (0#sign q)


inv‚ÑöInvol : ‚àÄ q 0#q 0#invQ ‚Üí inv‚Ñö (inv‚Ñö q 0#q) 0#invQ ‚â° q
inv‚ÑöInvol q 0#q 0#invQ =
  sym (¬∑DistInv‚Ñö (sign q) _ (fst (0#sign q) 0#q)
    (inl (0<‚Ñö‚Çä (inv‚Ñö‚Çä ((0#‚Üí‚Ñö‚Çä q 0#q)) )))
    0#invQ )
    ‚àô‚àô cong‚ÇÇ _¬∑_ (sym (inv‚Ñö-sign _ _))
     ((inv‚Ñö‚Çä‚â°inv‚Ñö _ _ ‚àô inv‚Ñö‚Çä-invol (0#‚Üí‚Ñö‚Çä q 0#q)) ‚àô  sym (abs'‚â°abs q))  ‚àô‚àô
     (¬∑Comm _ _ ‚àô (sign¬∑abs q))


_Ôºè‚Ñö[_,_] : ‚Ñö ‚Üí ‚àÄ r ‚Üí 0 # r  ‚Üí ‚Ñö
q Ôºè‚Ñö[ r , 0ÔºÉr ] = q ¬∑ (inv‚Ñö r 0ÔºÉr)


‚Ñö-y/y : ‚àÄ r ‚Üí (0ÔºÉr : 0 # r) ‚Üí (r Ôºè‚Ñö[ r , 0ÔºÉr ]) ‚â° 1
‚Ñö-y/y r y = cong (_¬∑ (inv‚Ñö r y)) (sym (sign¬∑abs r))
  ‚àô sym (¬∑Assoc _ _ _)
  ‚àô cong (abs r ¬∑_) (¬∑Assoc _ _ _ ‚àô‚àô
    cong (_¬∑ fst (inv‚Ñö‚Çä (0#‚Üí‚Ñö‚Çä r y))) (signX¬∑signX r y) ‚àô‚àô
      ¬∑IdL _)
  ‚àô cong (_¬∑ fst (inv‚Ñö‚Çä (0#‚Üí‚Ñö‚Çä r y))) (abs'‚â°abs _)
   ‚àô x¬∑inv‚Ñö‚Çä[x] (0#‚Üí‚Ñö‚Çä r y)

‚Ñö-[x¬∑y]/y : ‚àÄ x r ‚Üí (0ÔºÉr : 0 # r) ‚Üí ((x ¬∑ r) Ôºè‚Ñö[ r , 0ÔºÉr ]) ‚â° x
‚Ñö-[x¬∑y]/y x r 0#r = sym (¬∑Assoc _ _ _) ‚àô‚àô
  cong (x ¬∑_) (‚Ñö-y/y r 0#r) ‚àô‚àô ¬∑IdR x

‚Ñö-[x/y]¬∑y : ‚àÄ x r ‚Üí (0ÔºÉr : 0 # r) ‚Üí ((x Ôºè‚Ñö[ r , 0ÔºÉr ]) ¬∑ r) ‚â° x
‚Ñö-[x/y]¬∑y x r 0#r = sym (¬∑Assoc _ _ _) ‚àô‚àô
  cong (x ¬∑_) (¬∑Comm _ _ ‚àô ‚Ñö-y/y r 0#r) ‚àô‚àô ¬∑IdR x


‚Ñö-x¬∑y‚â°z‚Üíx‚â°z/y : ‚àÄ x q r ‚Üí (0ÔºÉr : 0 # r)
               ‚Üí (x ¬∑ r) ‚â° q
               ‚Üí x ‚â° q Ôºè‚Ñö[ r , 0ÔºÉr ]
‚Ñö-x¬∑y‚â°z‚Üíx‚â°z/y x q r 0ÔºÉr p =
    sym (‚Ñö-[x¬∑y]/y x r 0ÔºÉr ) ‚àô cong (_Ôºè‚Ñö[ r , 0ÔºÉr ]) p

x‚â§z/y‚Üíx¬∑y‚â§z : ‚àÄ x q r 0#r ‚Üí (0<r : 0 < r)
               ‚Üí x ‚â§ q Ôºè‚Ñö[ r , 0#r  ]
               ‚Üí (x ¬∑ r) ‚â§ q
x‚â§z/y‚Üíx¬∑y‚â§z x q r 0ÔºÉr 0<r  p =
   subst ((x ¬∑ r) ‚â§_) (‚Ñö-[x/y]¬∑y q r 0ÔºÉr) (‚â§-¬∑o _ _ r (<Weaken‚â§ 0 r 0<r ) p)


x/y‚â§z‚Üíx‚â§z¬∑y : ‚àÄ x q r 0#r ‚Üí (0<r : 0 < r)
               ‚Üí x Ôºè‚Ñö[ r , 0#r  ] ‚â§ q
               ‚Üí x ‚â§ q ¬∑ r
x/y‚â§z‚Üíx‚â§z¬∑y x q r 0ÔºÉr 0<r  p =
   subst (_‚â§ (q ¬∑ r)) (‚Ñö-[x/y]¬∑y x r 0ÔºÉr) (‚â§-¬∑o _ _ r (<Weaken‚â§ 0 r 0<r ) p)

x¬∑inv‚Ñö‚Çäy‚â§z‚Üíx‚â§y¬∑z : ‚àÄ x q r
               ‚Üí x ¬∑ fst (inv‚Ñö‚Çä r) ‚â§ q
               ‚Üí x ‚â§ (fst r) ¬∑ q
x¬∑inv‚Ñö‚Çäy‚â§z‚Üíx‚â§y¬∑z x q r  p =
   subst (_‚â§ ((fst r) ¬∑ q)) (cong ((fst r) ¬∑_) (¬∑Comm _ _) ‚àô y¬∑[x/y] r x)
      (‚â§-o¬∑ _ _ (fst r) (0‚â§‚Ñö‚Çä r ) p)


x¬∑inv‚Ñö‚Çäy<z‚Üíx<y¬∑z : ‚àÄ x q r
               ‚Üí x ¬∑ fst (inv‚Ñö‚Çä r) < q
               ‚Üí x < (fst r) ¬∑ q
x¬∑inv‚Ñö‚Çäy<z‚Üíx<y¬∑z x q r  p =
   subst (_< ((fst r) ¬∑ q)) (cong ((fst r) ¬∑_) (¬∑Comm _ _) ‚àô y¬∑[x/y] r x)
      (<-o¬∑ _ _ (fst r) (0<‚Ñö‚Çä r ) p)


y¬∑x<z‚Üíx<z¬∑inv‚Ñö‚Çäy : ‚àÄ x z r
               ‚Üí (fst r) ¬∑ x < z
               ‚Üí x < z ¬∑ fst (inv‚Ñö‚Çä r)
y¬∑x<z‚Üíx<z¬∑inv‚Ñö‚Çäy x z r p =
   subst (_< z ¬∑ fst (inv‚Ñö‚Çä r))
    (¬∑Comm _ _ ‚àô [y¬∑x]/y _ _)
    (<-¬∑o _ _ (fst (inv‚Ñö‚Çä r)) (0<‚Ñö‚Çä (inv‚Ñö‚Çä r) ) p)

x‚â§y¬∑z‚Üíx¬∑inv‚Ñö‚Çäy‚â§z : ‚àÄ x q r
               ‚Üí x ‚â§ (fst r) ¬∑ q
               ‚Üí x ¬∑ fst (inv‚Ñö‚Çä r) ‚â§ q

x‚â§y¬∑z‚Üíx¬∑inv‚Ñö‚Çäy‚â§z x q r  p =
  subst (x ¬∑ fst (inv‚Ñö‚Çä r) ‚â§_)
   (¬∑Comm _ _ ‚àô [y¬∑x]/y _ _)
   (‚â§-¬∑o x _ (fst (inv‚Ñö‚Çä r)) ((0‚â§‚Ñö‚Çä ( inv‚Ñö‚Çä r) )) p)


x<y¬∑z‚Üíx¬∑inv‚Ñö‚Çäy<z : ‚àÄ x q r
               ‚Üí x < (fst r) ¬∑ q
               ‚Üí x ¬∑ fst (inv‚Ñö‚Çä r) < q

x<y¬∑z‚Üíx¬∑inv‚Ñö‚Çäy<z x q r  p =
  subst (x ¬∑ fst (inv‚Ñö‚Çä r) <_)
   (¬∑Comm _ _ ‚àô [y¬∑x]/y _ _)
   (<-¬∑o x _ (fst (inv‚Ñö‚Çä r)) ((0<‚Ñö‚Çä ( inv‚Ñö‚Çä r) )) p)




‚Ñö-x/y<z‚Üíx/z<y : ‚àÄ x q r  ‚Üí (0<x : 0 < x) ‚Üí (0<q : 0 < q) ‚Üí (0<r : 0 < r)
               ‚Üí (x Ôºè‚Ñö[ r , inl 0<r ]) < q
               ‚Üí (x Ôºè‚Ñö[ q , inl 0<q ]) < r
‚Ñö-x/y<z‚Üíx/z<y x q r 0<x 0<q 0<r p =
 subst2 _<_ (sym (¬∑Assoc _ _ _)
   ‚àô  cong (x ¬∑_) ((¬∑Comm _ _) ‚àô
     cong (_¬∑ inv‚Ñö r (inl 0<r)) (¬∑Comm _ _) ‚àô
      ‚Ñö-[x¬∑y]/y _ _ _ ) )
   ((¬∑Comm _ _) ‚àô ‚Ñö-[x/y]¬∑y _ _ _)
   (<-¬∑o (x Ôºè‚Ñö[ r , (inl 0<r) ]) q (r Ôºè‚Ñö[ q , (inl 0<q) ])
     (0<-m¬∑n _ _ 0<r (inv‚Ñö-pos q (inl 0<q)  0<q)) p)

inv‚Ñö‚â§inv‚Ñö : ‚àÄ (p q : ‚Ñö‚Çä) ‚Üí fst q ‚â§ fst p ‚Üí fst (inv‚Ñö‚Çä p) ‚â§ fst (inv‚Ñö‚Çä q)
inv‚Ñö‚â§inv‚Ñö p q x =
 subst2 _‚â§_
   (cong ((fst q) ¬∑_) (¬∑Comm _ _) ‚àô
    (y¬∑[x/y] q (fst (inv‚Ñö‚Çä p)))) (y¬∑[x/y] p (fst (inv‚Ñö‚Çä q)))
    (‚â§-¬∑o _ _ (fst ((inv‚Ñö‚Çä p) ‚Ñö‚Çä¬∑ (inv‚Ñö‚Çä q)))
     (0‚â§‚Ñö‚Çä ((inv‚Ñö‚Çä p) ‚Ñö‚Çä¬∑ (inv‚Ñö‚Çä q))) x)

maxWithPos : ‚Ñö‚Çä ‚Üí ‚Ñö ‚Üí ‚Ñö‚Çä
maxWithPos Œµ q .fst = max (fst Œµ) q
maxWithPos Œµ q .snd = <‚Üí0< (max (fst Œµ) q)
 (isTrans<‚â§ 0 (fst Œµ) _ (0<‚Ñö‚Çä Œµ) (‚â§max (fst Œµ) q))


1/p+1/q : (p q : ‚Ñö‚Çä) ‚Üí fst (inv‚Ñö‚Çä p) - fst (inv‚Ñö‚Çä q) ‚â°
                       fst (inv‚Ñö‚Çä (p ‚Ñö‚Çä¬∑ q))
                        ¬∑ (fst q - fst p)
1/p+1/q (p , p') (q , q') =
  ElimProp2.go w p q p' q'
 where
  w : ElimProp2 Œª p q ‚Üí ‚àÄ p' q'
           ‚Üí fst (inv‚Ñö‚Çä (p , p')) - fst (inv‚Ñö‚Çä (q , q')) ‚â°
                       fst (inv‚Ñö‚Çä ((p , p') ‚Ñö‚Çä¬∑ (q , q')))
                        ¬∑ (q - p)
  w .ElimProp2.isPropB _ _ = isPropŒ†2 Œª _ _ ‚Üí isSet‚Ñö _ _
  w .ElimProp2.f (pos (suc x) , 1+ x') (pos (suc y) , 1+ y') p' q' =
    eq/ _ _
      (cong‚ÇÇ ‚Ñ§._¬∑_
           (Œª i ‚Üí ((pos (suc x') ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (¬∑‚Çä‚ÇÅ-identityÀ° (1+ y) i))
           ‚Ñ§.+ (‚Ñ§.negsuc¬∑pos y' ( (suc x)) i)))
           (((Œª i ‚Üí ‚Ñ§.pos¬∑pos
            (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï $ fst
           (‚Ñ§.0<‚Üí‚Ñï‚Çä‚ÇÅ (pos (suc x) ‚Ñ§.¬∑ pos (suc y))
            (¬∑0< _//_.[ pos (suc x) , (1+ x') ]
             _//_.[ pos (suc y) , (1+ y') ] p' q')))
             (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï ((1+ y') ¬∑‚Çä‚ÇÅ (¬∑‚Çä‚ÇÅ-identityÀ° (1+ x') i))) i) ‚àô
               Œª i ‚Üí snd
               (‚Ñ§.0<‚Üí‚Ñï‚Çä‚ÇÅ (pos (suc x) ‚Ñ§.¬∑ pos (suc y))
                (¬∑0< _//_.[ pos (suc x) , (1+ x') ]
                _//_.[ pos (suc y) , (1+ y') ] p' q')) (~ i)
                 ‚Ñ§.¬∑ (pos (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï ((1+ y') ¬∑‚Çä‚ÇÅ (1+ x'))))) ‚àô
                  ‚Ñ§.¬∑Comm _ _) ‚àô ‚Ñ§.¬∑Assoc _ _ _  ‚àô‚àô
              cong (‚Ñ§._¬∑ _) (cong‚ÇÇ ‚Ñ§._¬∑_
                (cong‚ÇÇ ‚Ñ§._+_ (‚Ñ§.¬∑Comm _ _) (cong ‚Ñ§.-_ (‚Ñ§.¬∑Comm _ _)))
                (cong (pos ‚àò ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï)
                  (¬∑‚Çä‚ÇÅ-comm (1+ y') (1+ x')))
                 ‚àô ‚Ñ§.¬∑Comm _ _) ‚àô cong ((‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§
               (fst (‚Ñ§.0<‚Üí‚Ñï‚Çä‚ÇÅ (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ ((1+ x') ¬∑‚Çä‚ÇÅ (1+ y'))) tt))
            ‚Ñ§.¬∑ ((pos (suc y) ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ ((1+ x')))
                 ‚Ñ§.+ (‚Ñ§.- (‚Ñ§.pos (suc x) ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (1+ y')))))
          ‚Ñ§.¬∑_) (sym (‚Ñ§.pos¬∑pos (suc x) _))
               ‚àô‚àô Œª i ‚Üí (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (fst (‚Ñ§.0<‚Üí‚Ñï‚Çä‚ÇÅ
                (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ ((1+ x') ¬∑‚Çä‚ÇÅ (1+ y'))) tt))
            ‚Ñ§.¬∑ ((pos (suc y) ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (¬∑‚Çä‚ÇÅ-identityÀ° (1+ x') (~ i)))
                 ‚Ñ§.+ (‚Ñ§.negsuc¬∑pos x (suc y') (~ i))))
          ‚Ñ§.¬∑ ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ ((1+ x) ¬∑‚Çä‚ÇÅ (¬∑‚Çä‚ÇÅ-identityÀ° (1+ y) (~ i))))

inv‚Ñö‚Çä‚â§inv‚Ñö‚Çä : ‚àÄ x y
      ‚Üí fst y ‚â§ fst x
      ‚Üí fst (inv‚Ñö‚Çä x) ‚â§ fst (inv‚Ñö‚Çä y)
inv‚Ñö‚Çä‚â§inv‚Ñö‚Çä x y p =
  subst2 _‚â§_
    ((sym (¬∑Assoc _ _ _) ‚àô‚àô
     cong (fst (inv‚Ñö‚Çä x) ¬∑_) (inv‚Ñö‚Çä[x]¬∑x y)
     ‚àô‚àô ¬∑IdR (fst (inv‚Ñö‚Çä x))))
    (sym (¬∑Assoc _ _ _) ‚àô‚àô
     cong (fst (inv‚Ñö‚Çä y) ¬∑_) (inv‚Ñö‚Çä[x]¬∑x x)
     ‚àô‚àô ¬∑IdR (fst (inv‚Ñö‚Çä y)))
     (‚â§Monotone¬∑-onNonNeg _ _ _ _
        (‚â°Weaken‚â§ _ _ (¬∑Comm (fst (inv‚Ñö‚Çä x)) (fst (inv‚Ñö‚Çä y)) ))
        p
        ((0‚â§‚Ñö‚Çä ((inv‚Ñö‚Çä x) ‚Ñö‚Çä¬∑ (inv‚Ñö‚Çä y))))
        ((0‚â§‚Ñö‚Çä y)))




_‚Ñö^‚Åø_ : ‚Ñö ‚Üí ‚Ñï ‚Üí ‚Ñö
x ‚Ñö^‚Åø zero = 1
x ‚Ñö^‚Åø suc n = (x ‚Ñö^‚Åø n) ¬∑ x

0<‚Ñö^‚Åø : ‚àÄ q (0<q : 0< q) n ‚Üí 0< (q ‚Ñö^‚Åø n)
0<‚Ñö^‚Åø q 0<q zero = tt
0<‚Ñö^‚Åø q 0<q (suc n) = snd ((_ , 0<‚Ñö^‚Åø q 0<q n) ‚Ñö‚Çä¬∑ (q , 0<q))

0‚â§‚Ñö^‚Åø : ‚àÄ q (0‚â§q : 0 ‚â§ q) n ‚Üí 0 ‚â§ (q ‚Ñö^‚Åø n)
0‚â§‚Ñö^‚Åø q 0‚â§q zero = ùüö.toWitness {Q = ‚â§Dec 0 1} tt
0‚â§‚Ñö^‚Åø q 0‚â§q (suc n) = ‚â§Monotone¬∑-onNonNeg
 0 _ 0 _
  (0‚â§‚Ñö^‚Åø q 0‚â§q n)
   0‚â§q (isRefl‚â§ 0) (isRefl‚â§ 0)


x^‚Åø‚â§1 : ‚àÄ x n ‚Üí 0 ‚â§ x ‚Üí x ‚â§ 1 ‚Üí  (x ‚Ñö^‚Åø n) ‚â§ 1
x^‚Åø‚â§1 x zero 0‚â§x x‚â§1 = isRefl‚â§ 1
x^‚Åø‚â§1 x (suc n) 0‚â§x x‚â§1 =
 ‚â§Monotone¬∑-onNonNeg _ 1 _ 1
   (x^‚Åø‚â§1 x n 0‚â§x x‚â§1) x‚â§1 (0‚â§‚Ñö^‚Åø x 0‚â§x n) 0‚â§x

1‚â§x^‚Åø : ‚àÄ x n ‚Üí 1 ‚â§ x ‚Üí  1 ‚â§ (x ‚Ñö^‚Åø n)
1‚â§x^‚Åø x zero 1‚â§x = isRefl‚â§ 1
1‚â§x^‚Åø x (suc n) 1‚â§x =
 ‚â§Monotone¬∑-onNonNeg 1 _ 1 _
   (1‚â§x^‚Åø x n 1‚â§x) 1‚â§x (dec‚Ñö‚â§? {0} {1})
     (dec‚Ñö‚â§? {0} {1})

1<x^‚Åø : ‚àÄ x n ‚Üí 1 < x ‚Üí  1 < (x ‚Ñö^‚Åø (suc n))
1<x^‚Åø x zero 1<x = subst (1 <_) (sym (¬∑IdL _)) 1<x
1<x^‚Åø x (suc n) 1<x =
 <Monotone¬∑-onPos 1 _ 1 _
   (1<x^‚Åø x n 1<x) 1<x (dec‚Ñö‚â§? {0} {1})
     (dec‚Ñö‚â§? {0} {1})


¬∑-‚Ñö^‚Åø : ‚àÄ n m x ‚Üí (x ‚Ñö^‚Åø n) ¬∑ (x ‚Ñö^‚Åø m) ‚â° (x ‚Ñö^‚Åø (n ‚Ñï.+ m))
¬∑-‚Ñö^‚Åø zero m x = ¬∑IdL _
¬∑-‚Ñö^‚Åø (suc n) m x = (sym (¬∑Assoc _ _ _)
   ‚àô cong ((x ‚Ñö^‚Åø n) ¬∑_) (¬∑Comm _ _))
  ‚àô‚àô ¬∑Assoc _ _ _
  ‚àô‚àô cong (_¬∑ x) (¬∑-‚Ñö^‚Åø n m x)

_‚Ñö‚Çä^‚Åø_ : ‚Ñö‚Çä ‚Üí ‚Ñï ‚Üí ‚Ñö‚Çä
(q , 0<q) ‚Ñö‚Çä^‚Åø n = (q ‚Ñö^‚Åø n) , 0<‚Ñö^‚Åø q 0<q n


fromNat-^ : ‚àÄ m n ‚Üí ((fromNat m) ‚Ñö^‚Åø n ) ‚â° fromNat (m ‚Ñï.^ n)
fromNat-^ m zero = refl
fromNat-^ m (suc n) =
 cong (_¬∑ (fromNat m)) (fromNat-^ m n) ‚àô
   (‚Ñï¬∑‚Üí‚Ñö¬∑ _ _) ‚àô cong [_/ 1 ] (cong ‚Ñ§.pos (‚Ñï.¬∑-comm _ _))

inv‚Ñö‚Çä-‚Ñö^‚Åø : ‚àÄ q n ‚Üí fst (inv‚Ñö‚Çä (q ‚Ñö‚Çä^‚Åø n)) ‚â° (fst (inv‚Ñö‚Çä q)) ‚Ñö^‚Åø n
inv‚Ñö‚Çä-‚Ñö^‚Åø q zero = refl
inv‚Ñö‚Çä-‚Ñö^‚Åø q (suc n) =
  cong fst (sym (inv‚Ñö‚ÇäDist¬∑ _ _))
    ‚àô cong (fst ‚àò (_‚Ñö‚Çä¬∑ (inv‚Ñö‚Çä q)))
     (‚Ñö‚Çä‚â° {y = _ , snd ((inv‚Ñö‚Çä q) ‚Ñö‚Çä^‚Åø n)} (inv‚Ñö‚Çä-‚Ñö^‚Åø q n))


inv‚Ñö‚Çä-<-inv‚Ñö‚Çä : ‚àÄ q r ‚Üí ((fst q) < (fst r))
             ‚âÉ (fst (inv‚Ñö‚Çä r) < fst (inv‚Ñö‚Çä q))
inv‚Ñö‚Çä-<-inv‚Ñö‚Çä (q , 0<q) (r , 0<r) = ElimProp2.go w q r 0<q 0<r
 where
 w : ElimProp2 Œª q r ‚Üí ‚àÄ 0<q 0<r ‚Üí (q < r) ‚âÉ
         (fst (inv‚Ñö‚Çä (r , 0<r)) < fst (inv‚Ñö‚Çä (q , 0<q)))
 w .ElimProp2.isPropB _ _ =
   isPropŒ†2 Œª _ _ ‚Üí isOfHLevel‚âÉ 1 (isProp< _ _) (isProp< _ _)
 w .ElimProp2.f (‚Ñ§.pos (suc _) , _) (‚Ñ§.pos (suc _) , _) _ _ =
   propBiimpl‚ÜíEquiv ‚Ñ§.isProp<  ‚Ñ§.isProp<
    (subst2 ‚Ñ§._<_ (‚Ñ§.¬∑Comm _ _) (‚Ñ§.¬∑Comm _ _))
    (subst2 ‚Ñ§._<_ (‚Ñ§.¬∑Comm _ _) (‚Ñ§.¬∑Comm _ _))

inv‚Ñö‚Çä-‚â§-inv‚Ñö‚Çä : ‚àÄ q r ‚Üí ((fst q) ‚â§ (fst r))
             ‚âÉ (fst (inv‚Ñö‚Çä r) ‚â§ fst (inv‚Ñö‚Çä q))
inv‚Ñö‚Çä-‚â§-inv‚Ñö‚Çä q r =
    (‚â§‚âÉ‚â°‚äé< _ _)
   ‚àô‚Çë ‚äé.‚äé-equiv (Œ£‚â°PropEquiv (snd ‚àò 0<‚Çö_) {u = q} {v = r}
    ‚àô‚Çë congEquiv equivInv‚Ñö‚Çä ‚àô‚Çë
     invEquiv (Œ£‚â°PropEquiv (snd ‚àò 0<‚Çö_) {u = inv‚Ñö‚Çä r} {v = inv‚Ñö‚Çä q}
        ‚àô‚Çë isoToEquiv symIso )) (inv‚Ñö‚Çä-<-inv‚Ñö‚Çä q r)
   ‚àô‚Çë (invEquiv (‚â§‚âÉ‚â°‚äé< _ _))
