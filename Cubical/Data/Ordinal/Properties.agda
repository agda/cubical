{-

This file contains:

- Properties of ordinals

-}
{-# OPTIONS --safe #-}
module Cubical.Data.Ordinal.Properties where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Structure
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Function
open import Cubical.Foundations.Isomorphism

open import Cubical.Functions.Embedding

open import Cubical.Data.Ordinal.Base
open import Cubical.Data.Empty as ‚ä• using (‚ä• ; ‚ä•* ; isProp‚ä•*)
open import Cubical.Data.Sigma
open import Cubical.Data.Sum as ‚äé hiding (rec ; elim ; map)
open import Cubical.Data.Unit

open import Cubical.Induction.WellFounded

open import Cubical.Relation.Binary.Base
open import Cubical.Relation.Binary.Extensionality
open import Cubical.Relation.Binary.Order.Woset
open import Cubical.Relation.Binary.Order.Woset.Simulation
open import Cubical.Relation.Binary.Order

private
  variable
    ‚Ñì : Level

propOrd : (P : Type ‚Ñì) ‚Üí isProp P ‚Üí Ord {‚Ñì}
propOrd {‚Ñì} P prop = P , (wosetstr _<_ (iswoset set prp well weak trans))
  where
    open BinaryRelation
    _<_ : P ‚Üí P ‚Üí Type ‚Ñì
    a < b = ‚ä•*{‚Ñì}

    set : isSet P
    set = isProp‚ÜíisSet prop

    prp : isPropValued _<_
    prp _ _ = isProp‚ä•*

    well : WellFounded _<_
    well _ = acc (Œª _ ‚Üí ‚ä•.elim*)

    weak : isWeaklyExtensional _<_
    weak = ‚â∫√ó‚Üí‚â°‚ÜíisWeaklyExtensional _<_ set prp Œª x y _ ‚Üí prop x y

    trans : isTrans _<_
    trans _ _ _ = ‚ä•.elim*

ùüò ùüô : Ord {‚Ñì}
ùüò {‚Ñì} = propOrd (‚ä•* {‚Ñì}) (isProp‚ä•*)
ùüô {‚Ñì} = propOrd (Unit* {‚Ñì}) (isPropUnit*)

isLeastùüò : ‚àÄ{‚Ñì} ‚Üí isLeast (isPoset‚ÜíisPreorder isPoset‚âº) ((Ord {‚Ñì}) , (id‚Ü™ (Ord {‚Ñì}))) (ùüò {‚Ñì})
isLeastùüò _ = ‚ä•.elim* , (‚ä•.elim* , ‚ä•.elim*)

-- The successor of ùüò is ùüô
sucùüò : suc (ùüò {‚Ñì}) ‚â° ùüô {‚Ñì}
sucùüò = equivFun (WosetPath _ _) (eq , makeIsWosetEquiv eq eqsuc Œª _ _ ‚Üí ‚ä•.elim*)
  where
    eq : ‚ü® ùüò ‚ü© ‚äé Unit* ‚âÉ ‚ü® ùüô ‚ü©
    eq = ‚äé-IdL-‚ä•*-‚âÉ

    eqsuc : _
    eqsuc (inr x) (inr y) = ‚ä•.elim*

+IdR : (Œ± : Ord {‚Ñì}) ‚Üí Œ± + ùüò {‚Ñì} ‚â° Œ±
+IdR Œ± = equivFun (WosetPath _ _) (eq , (makeIsWosetEquiv eq eqŒ± Œª _ _ x‚â∫y ‚Üí x‚â∫y))
  where
    eq : ‚ü® Œ± ‚ü© ‚äé ‚ü® ùüò ‚ü© ‚âÉ ‚ü® Œ± ‚ü©
    eq = ‚äé-IdR-‚ä•*-‚âÉ

    eqŒ± : _
    eqŒ± (inl x) (inl y) x‚â∫y = x‚â∫y

+IdL : (Œ± : Ord {‚Ñì}) ‚Üí ùüò {‚Ñì} + Œ± ‚â° Œ±
+IdL Œ± = equivFun (WosetPath _ _) (eq , (makeIsWosetEquiv eq eqŒ± Œª _ _ x‚â∫y ‚Üí x‚â∫y))
  where
    eq : ‚ü® ùüò ‚ü© ‚äé ‚ü® Œ± ‚ü© ‚âÉ ‚ü® Œ± ‚ü©
    eq = ‚äé-IdL-‚ä•*-‚âÉ

    eqŒ± : (x y : ‚ü® ùüò ‚ü© ‚äé ‚ü® Œ± ‚ü©)
        ‚Üí ((ùüò + Œ±) .snd WosetStr.‚â∫ x) y
        ‚Üí (Œ± .snd WosetStr.‚â∫ equivFun eq x) (equivFun eq y)
    eqŒ± (inr x) (inr y) x‚â∫y = x‚â∫y

-- The successor is just addition by ùüô
suc‚â°+ùüô : (Œ± : Ord {‚Ñì}) ‚Üí suc Œ± ‚â° Œ± + ùüô {‚Ñì}
suc‚â°+ùüô Œ± = equivFun (WosetPath _ _) (eq , (makeIsWosetEquiv eq eqsucŒ± eqŒ±+ùüô))
  where
    eq : ‚ü® suc Œ± ‚ü© ‚âÉ ‚ü® Œ± ‚ü© ‚äé ‚ü® ùüô ‚ü©
    eq = idEquiv ‚ü® suc Œ± ‚ü©

    eqsucŒ± : _
    eqsucŒ± (inl x) (inl y) x‚â∫y = x‚â∫y
    eqsucŒ± (inl x) (inr y) _ = tt*
    eqsucŒ± (inr x) (inl y) = ‚ä•.elim*
    eqsucŒ± (inr x) (inr y) = ‚ä•.elim*

    eqŒ±+ùüô : _
    eqŒ±+ùüô (inl x) (inl y) x‚â∫y = x‚â∫y
    eqŒ±+ùüô (inl x) (inr y) _ = tt*
    eqŒ±+ùüô (inr x) (inl y) = ‚ä•.elim*
    eqŒ±+ùüô (inr x) (inr y) = ‚ä•.elim*

-- Successor is strictly increasing, though we can't prove it's the smallest ordinal greater than its predecessor
suc‚â∫ : (Œ± : Ord {‚Ñì}) ‚Üí Œ± ‚â∫ suc Œ±
suc‚â∫ Œ± = (inr tt*) , (eq , makeIsWosetEquiv eq eqsucŒ± eqŒ±suc)
  where
    fun : ‚ü® suc Œ± ‚Üì inr tt* ‚ü© ‚Üí ‚ü® Œ± ‚ü©
    fun (inl a , _) = a

    iseq : isEquiv fun
    fst (fst (equiv-proof iseq a)) = (inl a) , tt*
    snd (fst (equiv-proof iseq a)) = refl
    snd (equiv-proof iseq a) ((inl x , _) , x‚â°a)
      = Œ£‚â°Prop (Œª _ ‚Üí IsWoset.is-set (WosetStr.isWoset (str Œ±)) _ _)
                (Œ£‚â°Prop lem (cong inl (sym x‚â°a)))
      where lem : (y : ‚ü® suc Œ± ‚ü©) ‚Üí isProp _
            lem (inl y) = isPropUnit*
            lem (inr _) = ‚ä•.elim*
    eq : ‚ü® suc Œ± ‚Üì inr tt* ‚ü© ‚âÉ ‚ü® Œ± ‚ü©
    eq = fun , iseq

    eqsucŒ± : _
    eqsucŒ± (inl x , _) (inl y , _) x<y = x<y

    eqŒ±suc : _
    eqŒ±suc x y x‚â∫y = x‚â∫y

¬∑IdR : (Œ± : Ord {‚Ñì}) ‚Üí Œ± ¬∑ ùüô {‚Ñì} ‚â° Œ±
¬∑IdR Œ± = equivFun (WosetPath _ _) (eq , makeIsWosetEquiv eq eqŒ±ùüô eqŒ±)
  where
    eq : ‚ü® Œ± ‚ü© √ó ‚ü® ùüô ‚ü© ‚âÉ ‚ü® Œ± ‚ü©
    eq = isoToEquiv rUnit*√óIso

    eqŒ±ùüô : _
    eqŒ±ùüô (x , _) (y , _) (inl tt‚â∫tt) = ‚ä•.rec (IsStrictPoset.is-irrefl
                                                (isWoset‚ÜíisStrictPoset
                                                   (WosetStr.isWoset (str ùüô)))
                                               tt* tt‚â∫tt)
    eqŒ±ùüô (x , _) (y , _) (inr (_ , x‚â∫y)) = x‚â∫y

    eqŒ± : _
    eqŒ± x y x‚â∫y = inr ((isPropUnit* _ _) , x‚â∫y)

¬∑IdL : (Œ± : Ord {‚Ñì}) ‚Üí ùüô {‚Ñì} ¬∑ Œ± ‚â° Œ±
¬∑IdL Œ± = equivFun (WosetPath _ _) (eq , makeIsWosetEquiv eq eqùüôŒ± eqŒ±)
  where
    eq : ‚ü® ùüô ‚ü© √ó ‚ü® Œ± ‚ü© ‚âÉ ‚ü® Œ± ‚ü©
    eq = isoToEquiv lUnit*√óIso

    eqùüôŒ± : _
    eqùüôŒ± (_ , x) (_ , y) (inr (_ , tt‚â∫tt)) = ‚ä•.rec
                                               (IsStrictPoset.is-irrefl
                                                (isWoset‚ÜíisStrictPoset
                                                  (WosetStr.isWoset (str ùüô)))
                                                tt* tt‚â∫tt)
    eqùüôŒ± (_ , x) (_ , y) (inl x‚â∫y) = x‚â∫y

    eqŒ± : _
    eqŒ± x y x‚â∫y = inl x‚â∫y

¬∑AnnihilR : (Œ± : Ord {‚Ñì}) ‚Üí Œ± ¬∑ ùüò {‚Ñì} ‚â° ùüò {‚Ñì}
¬∑AnnihilR Œ± = equivFun (WosetPath _ _)
                       (eq , makeIsWosetEquiv eq (Œª b _ _ ‚Üí ‚ä•.elim* (b .snd)) ‚ä•.elim*)
  where
    eq : ‚ü® Œ± ‚ü© √ó ‚ü® ùüò ‚ü© ‚âÉ ‚ü® ùüò ‚ü©
    eq = (‚ä•.elim* ‚àò snd) , (record { equiv-proof = ‚ä•.elim* })

¬∑AnnihilL : (Œ± : Ord {‚Ñì}) ‚Üí ùüò {‚Ñì} ¬∑ Œ± ‚â° ùüò {‚Ñì}
¬∑AnnihilL Œ± = equivFun (WosetPath _ _)
                       (eq , makeIsWosetEquiv eq (Œª b _ _ ‚Üí ‚ä•.elim* (b .fst)) ‚ä•.elim*)
  where
    eq : ‚ü® ùüò ‚ü© √ó ‚ü® Œ± ‚ü© ‚âÉ ‚ü® ùüò ‚ü©
    eq = (‚ä•.elim* ‚àò fst) , (record { equiv-proof = ‚ä•.elim*  })

+Assoc : (Œ± Œ≤ Œ≥ : Ord {‚Ñì}) ‚Üí (Œ± + Œ≤) + Œ≥ ‚â° Œ± + (Œ≤ + Œ≥)
+Assoc Œ± Œ≤ Œ≥ = equivFun (WosetPath _ _) (eq , makeIsWosetEquiv eq eq‚Üí eq‚Üê)
  where
    eq : (‚ü® Œ± ‚ü© ‚äé ‚ü® Œ≤ ‚ü©) ‚äé ‚ü® Œ≥ ‚ü© ‚âÉ ‚ü® Œ± ‚ü© ‚äé (‚ü® Œ≤ ‚ü© ‚äé ‚ü® Œ≥ ‚ü©)
    eq = ‚äé-assoc-‚âÉ

    eq‚Üí : _
    eq‚Üí (inl (inl x)) (inl (inl y)) x‚â∫y = x‚â∫y
    eq‚Üí (inl (inl x)) (inl (inr y)) x‚â∫y = tt*
    eq‚Üí (inl (inr x)) (inl (inl y)) = ‚ä•.elim*
    eq‚Üí (inl (inr x)) (inl (inr y)) x‚â∫y = x‚â∫y
    eq‚Üí (inl (inl x)) (inr y) x‚â∫y = tt*
    eq‚Üí (inl (inr x)) (inr y) x‚â∫y = tt*
    eq‚Üí (inr x) (inl (inl y)) = ‚ä•.elim*
    eq‚Üí (inr x) (inl (inr y)) = ‚ä•.elim*
    eq‚Üí (inr x) (inr y) x‚â∫y = x‚â∫y

    eq‚Üê : _
    eq‚Üê (inl x) (inl y) x‚â∫y = x‚â∫y
    eq‚Üê (inl x) (inr (inl y)) x‚â∫y = tt*
    eq‚Üê (inl x) (inr (inr y)) x‚â∫y = tt*
    eq‚Üê (inr (inl x)) (inl y) = ‚ä•.elim*
    eq‚Üê (inr (inr x)) (inl y) = ‚ä•.elim*
    eq‚Üê (inr (inl x)) (inr (inl y)) x‚â∫y = x‚â∫y
    eq‚Üê (inr (inl x)) (inr (inr y)) x‚â∫y = tt*
    eq‚Üê (inr (inr x)) (inr (inl y)) = ‚ä•.elim*
    eq‚Üê (inr (inr x)) (inr (inr y)) x‚â∫y = x‚â∫y

¬∑Assoc : (Œ± Œ≤ Œ≥ : Ord {‚Ñì}) ‚Üí (Œ± ¬∑ Œ≤) ¬∑ Œ≥ ‚â° Œ± ¬∑ (Œ≤ ¬∑ Œ≥)
¬∑Assoc Œ± Œ≤ Œ≥ = equivFun (WosetPath _ _) (eq , makeIsWosetEquiv eq eq‚Üí eq‚Üê)
  where
    eq : (‚ü® Œ± ‚ü© √ó ‚ü® Œ≤ ‚ü©) √ó ‚ü® Œ≥ ‚ü© ‚âÉ ‚ü® Œ± ‚ü© √ó (‚ü® Œ≤ ‚ü© √ó ‚ü® Œ≥ ‚ü©)
    eq = Œ£-assoc-‚âÉ

    eq‚Üí : _
    eq‚Üí ((xa , xb) , xc) ((ya , yb) , yc) (inl xc‚â∫yc)
      = inl (inl xc‚â∫yc)
    eq‚Üí ((xa , xb) , xc) ((ya , yb) , yc) (inr (xc‚â°yc , inl xb‚â∫yb))
      = inl (inr (xc‚â°yc , xb‚â∫yb))
    eq‚Üí ((xa , xb) , xc) ((ya , yb) , yc) (inr (xc‚â°yc , inr (xb‚â°yb , xa‚â∫ya)))
      = inr ((‚â°-√ó xb‚â°yb xc‚â°yc) , xa‚â∫ya)

    eq‚Üê : _
    eq‚Üê (xa , xb , xc) (ya , yb , yc) (inl (inl xc‚â∫yc))
      = inl xc‚â∫yc
    eq‚Üê (xa , xb , xc) (ya , yb , yc) (inl (inr (xc‚â°yc , xb‚â∫yb)))
      = inr (xc‚â°yc , (inl xb‚â∫yb))
    eq‚Üê (xa , xb , xc) (ya , yb , yc) (inr (xbxc‚â°ybyc , xa‚â∫ya))
      = inr ((PathPŒ£ xbxc‚â°ybyc .snd) , (inr ((PathPŒ£ xbxc‚â°ybyc .fst) , xa‚â∫ya)))

‚â∫-o+ : {Œ≤ Œ≥ : Ord {‚Ñì}} ‚Üí (Œ± : Ord {‚Ñì}) ‚Üí Œ≤ ‚â∫ Œ≥ ‚Üí (Œ± + Œ≤) ‚â∫ (Œ± + Œ≥)
‚â∫-o+ {‚Ñì} {Œ≤} {Œ≥} Œ± (g , Œ≥‚Üìg‚âÉŒ≤ , wEq) = inr g , eq , makeIsWosetEquiv eq eq‚Üí eq‚Üê
  where
    fun : ‚ü® (Œ± + Œ≥) ‚Üì inr g ‚ü© ‚Üí ‚ü® Œ± + Œ≤ ‚ü©
    fun (inl x , _) = inl x
    fun (inr x , p) = inr (equivFun Œ≥‚Üìg‚âÉŒ≤ (x , p))

    inv : ‚ü® Œ± + Œ≤ ‚ü© ‚Üí ‚ü® (Œ± + Œ≥) ‚Üì inr g ‚ü©
    inv (inl x) = inl x , tt*
    inv (inr x) = inr (invEq Œ≥‚Üìg‚âÉŒ≤ x .fst) , invEq Œ≥‚Üìg‚âÉŒ≤ x .snd

    is : Iso ‚ü® (Œ± + Œ≥) ‚Üì inr g ‚ü© ‚ü® Œ± + Œ≤ ‚ü©
    Iso.fun is = fun
    Iso.inv is = inv
    Iso.rightInv is (inl x) = refl
    Iso.rightInv is (inr x) = cong inr (secEq Œ≥‚Üìg‚âÉŒ≤ x)
    Iso.leftInv  is (inl x , _) = Œ£PathP (refl , (isPropUnit* _ _))
    Iso.leftInv  is (inr x , x‚â∫g)
      = Œ£PathP (cong inr (PathPŒ£ (retEq Œ≥‚Üìg‚âÉŒ≤ (x , x‚â∫g)) .fst)
                        , PathPŒ£ (retEq Œ≥‚Üìg‚âÉŒ≤ (x , x‚â∫g)) .snd)

    eq : _
    eq = isoToEquiv is

    eq‚Üí : _
    eq‚Üí (inl x , _) (inl y , _) x‚â∫y = x‚â∫y
    eq‚Üí (inl x , _) (inr y , _) _ = tt*
    eq‚Üí (inr x , x‚â∫g) (inl y , y‚â∫g) = ‚ä•.elim*
    eq‚Üí (inr x , x‚â∫g) (inr y , y‚â∫g) x‚â∫y
      = equivFun (IsWosetEquiv.pres‚â∫ wEq (x , x‚â∫g) (y , y‚â∫g)) x‚â∫y

    eq‚Üê : _
    eq‚Üê (inl x) (inl y) x‚â∫y = x‚â∫y
    eq‚Üê (inl x) (inr y) _ = tt*
    eq‚Üê (inr x) (inl y) = ‚ä•.elim*
    eq‚Üê (inr x) (inr y) x‚â∫y = equivFun (IsWosetEquiv.pres‚â∫‚Åª wEq x y) x‚â∫y

¬∑DistR+ : (Œ± Œ≤ Œ≥ : Ord {‚Ñì}) ‚Üí Œ± ¬∑ (Œ≤ + Œ≥) ‚â° (Œ± ¬∑ Œ≤) + (Œ± ¬∑ Œ≥)
¬∑DistR+ Œ± Œ≤ Œ≥ = equivFun (WosetPath _ _) (eq , makeIsWosetEquiv eq eq‚Üí eq‚Üê)
  where
    eq : ‚ü® Œ± ‚ü© √ó (‚ü® Œ≤ ‚ü© ‚äé ‚ü® Œ≥ ‚ü©) ‚âÉ (‚ü® Œ± ‚ü© √ó ‚ü® Œ≤ ‚ü©) ‚äé (‚ü® Œ± ‚ü© √ó ‚ü® Œ≥ ‚ü©)
    eq = isoToEquiv √óDistR‚äéIso

    eq‚Üí : _
    eq‚Üí (xa , inl xb) (ya , inl yb) (inl xg‚â∫yg) = inl xg‚â∫yg
    eq‚Üí (xa , inl xb) (ya , inl yb) (inr (xb‚â°yb , xa‚â∫ya))
      = inr (isEmbedding‚ÜíInj isEmbedding-inl xb yb xb‚â°yb , xa‚â∫ya)
    eq‚Üí (xa , inl xb) (ya , inr yg) (inl x‚â∫y) = x‚â∫y
    eq‚Üí (xa , inl xb) (ya , inr yg) (inr (xb‚â°yg , _)) = ‚ä•.rec* (‚äéPath.encode _ _ xb‚â°yg)
    eq‚Üí (xa , inr xg) (ya , inl yb) (inr (xg‚â°yb , _)) = ‚ä•.rec* (‚äéPath.encode _ _ xg‚â°yb)
    eq‚Üí (xa , inr xg) (ya , inr yg) (inl xg‚â∫yg) = inl xg‚â∫yg
    eq‚Üí (xa , inr xg) (ya , inr yg) (inr (xg‚â°yg , xa‚â∫ya))
      = inr (isEmbedding‚ÜíInj isEmbedding-inr xg yg xg‚â°yg , xa‚â∫ya)

    eq‚Üê : _
    eq‚Üê (inl (xa , xb)) (inl (ya , yb)) (inl xb‚â∫yb) = inl xb‚â∫yb
    eq‚Üê (inl (xa , xb)) (inl (ya , yb)) (inr (xb‚â°yb , xa‚â∫ya))
      = inr (cong inl xb‚â°yb , xa‚â∫ya)
    eq‚Üê (inl (xa , xb)) (inr (ya , yg)) _ = inl tt*
    eq‚Üê (inr x) (inl (ya , yb)) = ‚ä•.elim*
    eq‚Üê (inr xg) (inr yg) (inl xg‚â∫yg) = inl xg‚â∫yg
    eq‚Üê (inr (xa , xg)) (inr (ya , yg)) (inr (xg‚â°yg , xa‚â∫ya))
      = inr (cong inr xg‚â°yg , xa‚â∫ya)
