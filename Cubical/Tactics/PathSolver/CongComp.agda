{-

This module provides utilities for generalizing the `cong-‚àô` lemma from `GroupoidLaws.agda`.
The utilities handle multiple arguments (implicit and explicit) and multiple dimensions, applying lemma recursively to subterms at all depths.


- **`appCongs` Module**: Applies a function recursively over composition terms.
- **`fillCongs` Module**: Computes fillers between terms when the function is applied at various levels of the term structure.

-}

{-# OPTIONS --safe #-}
module Cubical.Tactics.PathSolver.CongComp where


open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Function

open import Cubical.Data.Bool
open import Cubical.Data.Empty
open import Cubical.Data.Maybe as Mb
open import Cubical.Data.List as L
open import Cubical.Data.Nat as ‚Ñï
open import Cubical.Data.Sigma


import Agda.Builtin.Reflection as R
open import Agda.Builtin.String

open import Cubical.Tactics.Reflection.Utilities
open import Cubical.Tactics.Reflection.Dimensions
open import Cubical.Tactics.Reflection.CuTerm
open import Cubical.Tactics.Reflection.Variables


getSide : ‚àÄ {A} ‚Üí SubFace ‚Üí Hco A Unit ‚Üí CuTerm' A Unit
getSide {A = A}  sf (hcodata l y) =
 Mb.rec
   ((let msf : SubFace √ó CuTerm' A Unit ‚Üí Maybe (SubFace √ó CuTerm' A Unit)
         msf = Œª (sf' , t) ‚Üí
                map-Maybe
                 (Œª sf'' ‚Üí (injSF sf sf'') , cuEval (nothing  ‚à∑ (injSF sf' sf'')) t)
                 (sf' sf‚à© sf)
         l' = L.catMaybes (L.map msf l)
         y' = (cuEval sf y)
     in cell (R.lit (R.string "todo in getSide")) )
       )
   ((Œª (sf' , f) ‚Üí f))
  (findBy (‚äÇ‚äÉ? ‚àòS (sf <sf>_) ‚àòS fst) l)



module appCongs where

 appCongs : ‚Ñï ‚Üí ‚Ñï ‚Üí CuTerm ‚Üí CuTermNC
 cuCong1 : R.Term ‚Üí CuTermNC ‚Üí CuTermNC
 cuCong1L : R.Term ‚Üí List (SubFace √ó CuTermNC) ‚Üí List (SubFace √ó CuTermNC)
 cuCong1L t [] = []
 cuCong1L t ((sf , x) ‚à∑ xs) =
  (sf , cuCong1 (liftVarsFrom 1 1 (subfaceCell (nothing ‚à∑ sf) t)) x) ‚à∑ cuCong1L t xs

 cuCong1 t (hco x x‚ÇÅ) = hco (cuCong1L t x) (cuCong1 t x‚ÇÅ)
 cuCong1 t (cell x‚ÇÅ) = cell (substTms [ x‚ÇÅ ] t)

 congCus : ‚Ñï ‚Üí ‚Ñï ‚Üí R.Term ‚Üí List (Hco ‚ä• Unit) ‚Üí CuTermNC
 congCus zero _ _ _ = cell (R.lit (R.string "out of fuel in congCus"))
 congCus (suc fuel) dim t ((hcodata x y) ‚à∑ []) = cuCong1 t (hco x y)
 congCus (suc fuel) dim t xs @(_ ‚à∑ _ ‚à∑ _) = --cell (R.lit (R.string "todo"))
   let lid = appCongs fuel dim (ùíÑongF t  (L.map (CuTermNC‚ÜíCuTerm  ‚àòS Hco.bottom) xs))

   in hco (L.map ff sfUnion)  lid
  where
  sfUnion = foldr (_++fe_ ‚àòS L.map fst ‚àòS Hco.sides) [] xs

  ff : SubFace ‚Üí SubFace √ó CuTerm' ‚ä• Unit
  ff sf = sf ,
   let ts = L.map (getSide sf) xs
   in appCongs fuel (suc (sfDim sf))
        (ùíÑongF
        (liftVarsFrom 1 (length xs)
        (subfaceCell ((repeat (length xs) nothing) ++ sf) t)) (L.map CuTermNC‚ÜíCuTerm ts))

 congCus _ _ t [] = cell t



 appCongsS : ‚Ñï ‚Üí List (SubFace √ó CuTerm) ‚Üí List (SubFace √ó CuTermNC)
 appCongsS zero _ = []
 appCongsS _ [] = []
 appCongsS (suc fuel) ((sf , x) ‚à∑ xs) =
  (sf , appCongs fuel (suc (sfDim sf)) x) ‚à∑ appCongsS fuel xs

 appCongs zero _ _ = cell (R.lit (R.string "out of fuel in normalùë™ong"))
 appCongs (suc fuel) dim (hco x x‚ÇÅ) =
   hco (appCongsS fuel x) (appCongs fuel dim x‚ÇÅ)
 appCongs _ dim  (cell' x x‚ÇÅ) = cell' x x‚ÇÅ
 appCongs (suc fuel) dim  (ùíÑong' x x‚ÇÅ) =
   congCus fuel dim x
     (L.map (Œª (hcodata sides bottom) ‚Üí
        hcodata (appCongsS fuel sides) (appCongs fuel dim bottom)) x‚ÇÅ)

appCongs : ‚Ñï ‚Üí CuTerm ‚Üí CuTermNC
appCongs = appCongs.appCongs 100


module fillCongs where


 fillCongs : ‚Ñï ‚Üí ‚Ñï ‚Üí CuTerm ‚Üí CuTermNC
 congFill : ‚Ñï ‚Üí ‚Ñï ‚Üí R.Term ‚Üí List (Hco Unit Unit) ‚Üí CuTermNC
 congFill fuel dim t xs =
   let lid = fillCongs fuel dim $ ùíÑongF t (L.map (Hco.bottom) xs)
   in hco (((repeat dim nothing ‚à∑ ≥ just false)  , f0) ‚à∑
      L.map ff sfUnion)  lid
  where
  sfUnion = foldr (_++fe_ ‚àòS L.map fst ‚àòS Hco.sides) [] xs

  ff : SubFace ‚Üí SubFace √ó CuTermNC
  ff sf = sf ,
   let ts : List (CuTerm)
       ts = L.map ((getSide sf)) xs
   in fillCongs fuel (suc (sfDim sf)) $
           ùíÑongF  ((liftVarsFrom 1 (length xs)
                (subfaceCell ((repeat (length xs) nothing) ++ sf) t))) ts

  f0 : CuTermNC
  f0 = cell' _ (substTms (
        L.map ((ToTerm.toTermFill {Unit} {Unit} (defaultCtx dim)))
           xs --xs
           ) (liftVarsFrom 1 (length xs) t))

 fillCongsS : ‚Ñï ‚Üí List (SubFace √ó CuTerm) ‚Üí List (SubFace √ó CuTermNC)

 fillCongs fuel dim (hco x cu) =
   hco (fillCongsS fuel x) (fillCongs fuel dim cu)
 fillCongs fuel dim (cell x‚ÇÅ) = cell (liftVarsFrom 1 dim x‚ÇÅ)
 fillCongs zero dim (ùíÑong' x x‚ÇÅ) = cell (R.lit (R.string "out of fuel in fillCongs"))
 fillCongs (suc fuel) dim (ùíÑong' t []) = cell (liftVarsFrom 1 dim t)
 fillCongs (suc fuel) dim (ùíÑong' t xs) = uncurry (congFill fuel dim) (t , xs)


 fillCongsS fuel [] = []
 fillCongsS fuel ((sf , x) ‚à∑ xs) =
   (sf ‚à∑ ≥ nothing , fillCongs fuel (suc (sfDim sf)) x) ‚à∑ fillCongsS fuel xs


open fillCongs using (fillCongs) public
