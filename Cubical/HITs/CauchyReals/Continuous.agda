{-# OPTIONS --safe --lossy-unification #-}

module Cubical.HITs.CauchyReals.Continuous where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Structure
open import Cubical.Foundations.Function
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Powerset
open import Cubical.Foundations.Isomorphism

open import Cubical.Data.Bool as ùüö hiding (_‚â§_)
open import Cubical.Data.Nat as ‚Ñï hiding (_¬∑_;_+_)
open import Cubical.Data.Int as ‚Ñ§ using (pos)
import Cubical.Data.Int.Order as ‚Ñ§
open import Cubical.Data.Sigma
open import Cubical.Data.Unit

open import Cubical.HITs.PropositionalTruncation as PT
open import Cubical.HITs.SetQuotients as SQ renaming (_/_ to _//_)


open import Cubical.Data.Rationals as ‚Ñö using (‚Ñö ; [_/_])
open import Cubical.Data.Rationals.Order as ‚Ñö using
  ( _‚Ñö‚Çä+_ ; 0<_ ; ‚Ñö‚Çä ; _‚Ñö‚Çä¬∑_ ; ‚Ñö‚Çä‚â°)
open import Cubical.Data.Rationals.Order.Properties as ‚Ñö
 using (inv‚Ñö‚Çä;/2‚Çä;/3‚Çä;/4‚Çä)

open import Cubical.Data.NatPlusOne

open import Cubical.HITs.CauchyReals.Base
open import Cubical.HITs.CauchyReals.Lems
open import Cubical.HITs.CauchyReals.Closeness
open import Cubical.HITs.CauchyReals.Lipschitz
open import Cubical.HITs.CauchyReals.Order



open ‚Ñö.HLP

 -- HoTT Lemma (11.3.41)


-- -- 11.3.42



‚ä§Pred : ‚Ñù ‚Üí hProp ‚Ñì-zero
‚ä§Pred = (Œª _ ‚Üí Unit , isPropUnit )


‚àº‚Üí‚â§ : ‚àÄ u q ‚Üí u ‚â§·µ£ (rat q) ‚Üí ‚àÄ v Œµ ‚Üí u ‚àº'[ Œµ ] v ‚Üí v ‚â§·µ£ rat (q ‚Ñö.+ fst Œµ)
‚àº‚Üí‚â§ u q u‚â§q v Œµ u‚àºv = xxx

 where

 opaque
  unfolding _‚â§·µ£_
  ‚àº‚Üí‚â§-rat-u : ‚àÄ u q ‚Üí rat u ‚â§·µ£ (rat q) ‚Üí ‚àÄ  v Œµ
              ‚Üí rat u ‚àº'[ Œµ ] v ‚Üí v ‚â§·µ£ rat (q ‚Ñö.+ fst Œµ)
  ‚àº‚Üí‚â§-rat-u r q u‚â§q = Elim‚Ñù-Prop.go w
   where
   w : Elim‚Ñù-Prop Œª v ‚Üí ‚àÄ Œµ
              ‚Üí rat r ‚àº'[ Œµ ] v ‚Üí v ‚â§·µ£ rat (q ‚Ñö.+ fst Œµ)
   w .Elim‚Ñù-Prop.ratA x Œµ (u , v) = ‚â§‚Ñö‚Üí‚â§·µ£ _ _
     (subst (‚Ñö._‚â§ q ‚Ñö.+ fst Œµ) lem--05 $ ‚Ñö.‚â§Monotone+ r q (x ‚Ñö.- r) (fst Œµ)
       (‚â§·µ£‚Üí‚â§‚Ñö r q u‚â§q)
       (‚Ñö.<Weaken‚â§ _ _ (‚Ñö.minus-<'  (fst Œµ) (x ‚Ñö.- r)
       $ subst ((‚Ñö.- fst Œµ) ‚Ñö.<_) (sym (‚Ñö.-[x-y]‚â°y-x x r)) u)))
   w .Elim‚Ñù-Prop.limA x y x‚ÇÅ Œµ =
        PT.rec (isProp‚â§·µ£ _ _)
      (uncurry Œª Œ∏ ‚Üí
        PT.rec (isProp‚â§·µ£ _ _)
         (uncurry Œª Œ∏<Œµ ‚Üí
           PT.rec (isProp‚â§·µ£ _ _)
             Œª (Œ∑ , xx , xx') ‚Üí
               let xx'* : rat r
                        ‚àº'[ (((Œµ .fst ‚Ñö.- fst Œ∏) ‚Ñö.- fst Œ∑) , xx) ] x Œ∑
                   xx'* = xx'

                   yy : (Œ¥ : ‚Ñö‚Çä) ‚Üí fst Œ¥ ‚Ñö.< fst Œ∏ ‚Üí
                           rat r ‚àº[ Œµ ] x Œ¥
                   yy Œ¥ Œ¥<Œ∏ =
                     let z = triangle‚àº {rat r}
                               {x Œ∑} {x Œ¥}
                                 {(((Œµ .fst ‚Ñö.- fst Œ∏) ‚Ñö.- fst Œ∑) , xx)}
                                    { Œ∏ ‚Ñö‚Çä+  Œ∑  }
                              (‚àº'‚Üí‚àº _ _
                               ((((Œµ .fst ‚Ñö.- fst Œ∏) ‚Ñö.- fst Œ∑) , xx))
                                xx')
                                 let uu = (y Œ∑ Œ¥)
                                  in ‚àº-monotone<
                                        (subst (‚Ñö._< fst (Œ∏ ‚Ñö‚Çä+ Œ∑))
                                           (‚Ñö.+Comm (fst Œ¥) (fst Œ∑))
                                           (‚Ñö.<-+o
                                             (fst Œ¥)
                                             (fst Œ∏) (fst Œ∑)
                                             Œ¥<Œ∏)) uu
                     in subst‚àº lem--054 z

               in sym (eq‚Ñù _ _ Œª Œµ' ‚Üí
                     let Œµ* = ‚Ñö.min‚Çä (‚Ñö./2‚Çä Œµ') (‚Ñö./2‚Çä Œ∏)
                         Œµ*<Œµ' = snd
                           (‚Ñö.<‚Üí‚Ñö‚Çä  (fst Œµ*) (fst Œµ')
                              (
                              ‚Ñö.isTrans‚â§< (fst Œµ*) (fst (‚Ñö./2‚Çä Œµ')) (fst Œµ')
                               (‚Ñö.min‚â§ (fst (‚Ñö./2‚Çä Œµ')) (fst (‚Ñö./2‚Çä Œ∏)))
                                (‚Ñö.x/2<x Œµ') ))

                         Œµ*<Œ∏ = ‚Ñö.isTrans‚â§< (fst Œµ*) (fst (‚Ñö./2‚Çä Œ∏)) (fst Œ∏)
                               (‚Ñö.min‚â§' (fst (‚Ñö./2‚Çä Œµ')) (fst (‚Ñö./2‚Çä Œ∏)))
                                (‚Ñö.x/2<x Œ∏)

                         zzz = x‚ÇÅ Œµ* Œµ  (‚àº‚Üí‚àº' _ _ _ (yy Œµ* Œµ*<Œ∏))
                     in rat-lim (q ‚Ñö.+ fst Œµ) _ _ Œµ* _ Œµ*<Œµ'
                            (subst (rat (q ‚Ñö.+ fst Œµ)
                              ‚àº[ (fst Œµ' ‚Ñö.- fst Œµ*) , Œµ*<Œµ' ]_)
                               (sym zzz) (refl‚àº (rat (q ‚Ñö.+ fst Œµ))
                              ((fst Œµ' ‚Ñö.- fst Œµ*) , Œµ*<Œµ'))) )))
     ‚àò fst (rounded‚àº' (rat r) (lim x y) Œµ)

   w .Elim‚Ñù-Prop.isPropA _ = isPropŒ†2 Œª _ _ ‚Üí isProp‚â§·µ£ _ _

  maxLip : ((rat q)) ‚àº[ Œµ ] max·µ£ v ((rat q))
  maxLip =
         subst (_‚àº[ Œµ ] max·µ£ v ((rat q)))
           u‚â§q $ NonExpanding‚ÇÇ.go‚àºL maxR ((rat q)) u v Œµ (‚àº'‚Üí‚àº _ _ _ u‚àºv)

  -- zzz =
  xxx : v ‚â§·µ£ rat (q ‚Ñö.+ fst Œµ)
  xxx = cong (max·µ£ v ‚àò rat) (sym (‚Ñö.‚â§‚Üímax q (q ‚Ñö.+ fst Œµ)
          (‚Ñö.‚â§+‚Ñö‚Çä q q Œµ (‚Ñö.isRefl‚â§ q )))) ‚àô‚àô
            (max·µ£Assoc v (rat q) (rat (q ‚Ñö.+ fst Œµ)))  ‚àô‚àô
              ‚àº‚Üí‚â§-rat-u q q (‚â§·µ£-refl (rat q)) (max·µ£ v ((rat q))) Œµ (‚àº‚Üí‚àº' _ _ _ maxLip)

-- 11.3.43-i

‚àº‚Üí< : ‚àÄ u q ‚Üí u <·µ£ (rat q) ‚Üí ‚àÄ v Œµ ‚Üí u ‚àº'[ Œµ ] v ‚Üí v <·µ£ rat (q ‚Ñö.+ fst Œµ)
‚àº‚Üí< u q u<q v Œµ x = invEq (<·µ£-impl _ _)
   (PT.map (Œª ((q' , r') , z , z' , z'') ‚Üí
            ((q' ‚Ñö.+ fst Œµ) , (r' ‚Ñö.+ fst Œµ)) ,
               (‚àº‚Üí‚â§ u q' z v Œµ x  , ((‚Ñö.<-+o q' r' (fst Œµ) z') ,
                 ‚â§‚Ñö‚Üí‚â§·µ£ (r' ‚Ñö.+ fst Œµ) (q ‚Ñö.+ fst Œµ)
                   (‚Ñö.‚â§-+o r' q (fst Œµ) (‚â§·µ£‚Üí‚â§‚Ñö r' q z'')))))
            (fst (<·µ£-impl _ _) u<q))

  -- PT.map (Œª ((q' , r') , z , z' , z'') ‚Üí
  --           ((q' ‚Ñö.+ fst Œµ) , (r' ‚Ñö.+ fst Œµ)) ,
  --              (‚àº‚Üí‚â§ u q' z v Œµ x  , ((‚Ñö.<-+o q' r' (fst Œµ) z') ,
  --                ‚â§‚Ñö‚Üí‚â§·µ£ (r' ‚Ñö.+ fst Œµ) (q ‚Ñö.+ fst Œµ)
  --                  (‚Ñö.‚â§-+o r' q (fst Œµ) (‚â§·µ£‚Üí‚â§‚Ñö r' q z'')))))
  --           u<q




x+[y-x]/2‚â°y-[y-x]/2 : ‚àÄ x y ‚Üí
  x ‚Ñö.+ (y ‚Ñö.- x) ‚Ñö.¬∑ [ 1 / 2 ]
   ‚â° y ‚Ñö.- ((y ‚Ñö.- x) ‚Ñö.¬∑ [ 1 / 2 ])
x+[y-x]/2‚â°y-[y-x]/2 u v =
  ((cong (u ‚Ñö.+_) (‚Ñö.¬∑DistR+ _ _ _ ‚àô ‚Ñö.+Comm _ _)
        ‚àô ‚Ñö.+Assoc _ _ _) ‚àô‚àô
          cong‚ÇÇ ‚Ñö._+_
            dist‚Ñö! u ¬∑[
             (ge1 +ge ((neg-ge ge1) ¬∑ge
                      ge[ [ pos 1 / 1+ 1 ] ]))
                   ‚â° (neg-ge ((neg-ge ge1) ¬∑ge
                      ge[ [ pos 1 / 1+ 1 ] ]))   ]
           dist‚Ñö! v ¬∑[ (( ge[ [ pos 1 / 1+ 1 ] ]))
                   ‚â° (ge1 +ge neg-ge (
                      ge[ [ pos 1 / 1+ 1 ] ]))   ]
          ‚àô‚àô (‚Ñö.+Comm _ _ ‚àô sym (‚Ñö.+Assoc v
                 (‚Ñö.- (v ‚Ñö.¬∑ [ 1 / 2 ]))
                  (‚Ñö.- ((‚Ñö.- u) ‚Ñö.¬∑ [ 1 / 2 ])))
            ‚àô cong (‚Ñö._+_ v)
                (sym (‚Ñö.¬∑DistL+ -1 _ _)) ‚àô cong (‚Ñö._-_ v)
           (sym (‚Ñö.¬∑DistR+ v (‚Ñö.- u) [ 1 / 2 ])) ))


-- -- 11.3.43-ii

‚àº‚Üí<' : ‚àÄ u q ‚Üí u <·µ£ (rat q) ‚Üí ‚àÄ v
   ‚Üí ‚àÉ[ Œµ ‚àà ‚Ñö‚Çä ] (u ‚àº'[ Œµ ] v ‚Üí v <·µ£ rat q)
‚àº‚Üí<' u q u<q v =
  PT.map
      (Œª ((u' , q') , z , z' , z'') ‚Üí
            ‚Ñö./2‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä u' q' z')  ,
              (Œª xx ‚Üí
                let zwz = ‚àº‚Üí‚â§  u u'  z v _ xx
                in invEq (<·µ£-impl _ _) ‚à£ (_ , q') , (zwz ,
                  (subst2
                      {x = q' ‚Ñö.- (fst (‚Ñö./2‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä u' q' z')))}
                      {u' ‚Ñö.+ fst (‚Ñö./2‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä u' q' z'))}
                      ‚Ñö._<_
                     (sym (x+[y-x]/2‚â°y-[y-x]/2 u' q'))
                     (‚Ñö.+IdR q')
                     (‚Ñö.<-o+ (‚Ñö.- fst (‚Ñö./2‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä u' q' z'))) 0 q'
                          (‚Ñö.-‚Ñö‚Çä<0 (‚Ñö./2‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä u' q' z'))))
                     , z'')) ‚à£‚ÇÅ ))
      (fst (<·µ£-impl _ _) u<q)


-- 11.3.44

lem-11-3-44 : ‚àÄ u Œµ ‚Üí u ‚àº'[ Œµ ] 0 ‚Üí abs·µ£ u <·µ£ rat (fst Œµ)
lem-11-3-44 = Elim‚Ñù-Prop.go w
 where
 opaque
  unfolding _<·µ£_ abs·µ£
  w : Elim‚Ñù-Prop (Œª z ‚Üí (Œµ : ‚Ñö‚Çä) ‚Üí z ‚àº'[ Œµ ] 0 ‚Üí abs·µ£ z <·µ£ rat (fst Œµ))
  w .Elim‚Ñù-Prop.ratA x Œµ (x‚ÇÅ , x‚ÇÇ) =
     <‚Ñö‚Üí<·µ£ (‚Ñö.abs' x) (fst Œµ)
       (subst (‚Ñö._< fst Œµ) (‚Ñö.abs'‚â°abs x)
         (‚Ñö.absFrom<√ó< (fst Œµ) x
           (subst ((‚Ñö.- fst Œµ) ‚Ñö.<_) (‚Ñö.+IdR x) x‚ÇÅ)
            (subst (‚Ñö._< (fst Œµ)) ((‚Ñö.+IdR x)) x‚ÇÇ)))
  w .Elim‚Ñù-Prop.limA x p x‚ÇÅ Œµ =
    (PT.rec squash‚ÇÅ
      $ uncurry Œª Œ∏ ‚Üí PT.rec squash‚ÇÅ Œª (xx , xx') ‚Üí
        let zqz = ((subst‚àº {Œµ' = (Œ∏ ‚Ñö‚Çä¬∑ ([ pos 1 / 1+ 2 ] , _))}
                               (‚Ñö.Œµ/6+Œµ/6‚â°Œµ/3 (fst Œ∏))
                             (ùï£-lim-self
                               x p (Œ∏ ‚Ñö‚Çä¬∑ ([ pos 1 / 6 ] , _))
                                  (Œ∏ ‚Ñö‚Çä¬∑ ([ pos 1 / 6 ] , _)))))
            by‚ñµ : Œ£ (‚Ñö.0< (fst Œµ ‚Ñö.- (fst Œ∏ ‚Ñö.¬∑ ‚Ñö.[ 2 / 3 ] )))
                    (Œª z ‚Üí x (Œ∏ ‚Ñö‚Çä¬∑ (‚Ñö.[ pos 1 / 6 ] , _))
                     ‚àº'[ (fst Œµ ‚Ñö.- (fst Œ∏ ‚Ñö.¬∑ ‚Ñö.[ 2 / 3 ] )) , z ]
                       0)
            by‚ñµ =
              let zz = triangle‚àº' (x ( Œ∏  ‚Ñö‚Çä¬∑(‚Ñö.[ 1 / 6 ] , _)))
                          (lim x p) 0 (( Œ∏  ‚Ñö‚Çä¬∑(‚Ñö.[ 1 / 3 ] , _)))
                           ((fst Œµ ‚Ñö.- fst Œ∏) , xx)
                          zqz xx'
                  zz' : ((fst Œ∏) ‚Ñö.¬∑ [ 1 / 3 ])
                          ‚Ñö.+ (fst Œµ ‚Ñö.- fst Œ∏) ‚â°
                          (fst Œµ ‚Ñö.- (fst Œ∏ ‚Ñö.¬∑ [ 2 / 3 ]))
                  zz' = (Œª i ‚Üí ((fst Œ∏) ‚Ñö.¬∑ [ 1 / 3 ])
                          ‚Ñö.+ (fst Œµ ‚Ñö.-
                            dist‚Ñö! (fst Œ∏) ¬∑[
                              (ge1) ‚â° (ge[ ‚Ñö.[ pos 1 / 1+ 2 ] ]
                                +ge  ge[ ‚Ñö.[ pos 1 / 1+ 2 ] ]
                                +ge  ge[ ‚Ñö.[ pos 1 / 1+ 2 ] ] ) ] i ))
                      ‚àô‚àô lem--055 ‚àô‚àô
                        Œª i ‚Üí fst Œµ ‚Ñö.-
                            dist‚Ñö! (fst Œ∏) ¬∑[
                              (ge[ ‚Ñö.[ pos 1 / 1+ 2 ] ]
                                +ge  ge[ ‚Ñö.[ pos 1 / 1+ 2 ] ])
                                ‚â° (ge[ ‚Ñö.[ pos 2 / 1+ 2 ] ] ) ] i
              in sŒ£‚Ñö<' zz' zz
            xxx : abs·µ£ (x (Œ∏ ‚Ñö‚Çä¬∑ ([ pos 1 / 6 ] , tt))) <·µ£
                   rat (fst Œµ ‚Ñö.- (fst Œ∏  ‚Ñö.¬∑ [ pos 2 / 1+ 2 ]))
            xxx = x‚ÇÅ _ _  (snd (by‚ñµ))

            ggg' : abs·µ£ (lim x p) <·µ£ _
            ggg' = ‚àº‚Üí< _ _ xxx (abs·µ£ (lim x p))
                    ((Œ∏  ‚Ñö‚Çä¬∑ ([ pos 1 / 1+ 2 ] , _))) $
                      ‚àº‚Üí‚àº' _ _ _ $
                              abs·µ£-nonExpanding _ _ _ zqz

            ggg : abs·µ£ (lim x p) <·µ£ rat (fst Œµ)
            ggg = isTrans<·µ£ (abs·µ£ (lim x p))
                    _ (rat (fst Œµ)) ggg'
                      (<‚Ñö‚Üí<·µ£ _ _ (subst2 ‚Ñö._<_
                           (lem--056 ‚àô
                             (Œª i ‚Üí (fst Œµ ‚Ñö.-
                              ((dist‚Ñö! (fst Œ∏) ¬∑[
                              (ge[ ‚Ñö.[ pos 1 / 1+ 2 ] ]
                                +ge  ge[ ‚Ñö.[ pos 1 / 1+ 2 ] ])
                                ‚â° (ge[ ‚Ñö.[ pos 2 / 1+ 2 ] ] ) ]) i))
                                 ‚Ñö.+
                                (fst (Œ∏ ‚Ñö‚Çä¬∑ ([ pos 1 / 1+ 2 ] , tt)))))
                                (‚Ñö.+IdR (fst Œµ))
                            (‚Ñö.<-o+ (‚Ñö.- (fst Œ∏ ‚Ñö.¬∑ [ pos 1 / 1+ 2 ])) 0 (fst Œµ)
                           (‚Ñö.-‚Ñö‚Çä<0 (Œ∏ ‚Ñö‚Çä¬∑ ([ pos 1 / 1+ 2 ] , tt))))))


        in ggg) ‚àòS fst (rounded‚àº' (lim x p) 0 Œµ)
  w .Elim‚Ñù-Prop.isPropA _ = isPropŒ†2 Œª _ _ ‚Üí squash‚ÇÅ


‚àº‚âÉabs<Œµ‚áê : ‚àÄ u v  Œµ ‚Üí
  (abs·µ£ (u +·µ£ (-·µ£  v)) <·µ£ rat (fst Œµ)) ‚Üí (u ‚àº[ Œµ ] v)

‚àº‚âÉabs<Œµ‚áê u v Œµ = Elim‚Ñù-Prop2Sym.go w u v Œµ
 where

 opaque
  unfolding _<·µ£_ abs·µ£

  w : Elim‚Ñù-Prop2Sym Œª u v ‚Üí ‚àÄ Œµ ‚Üí
          (abs·µ£ (u +·µ£ (-·µ£  v)) <·µ£ rat (fst Œµ))
            ‚Üí u ‚àº[ Œµ ] v
  w .Elim‚Ñù-Prop2Sym.rat-ratA r q Œµ z =
    rat-rat-fromAbs r q Œµ
     (subst (‚Ñö._< fst Œµ) (sym (‚Ñö.abs'‚â°abs _)) (<·µ£‚Üí<‚Ñö _ _ z))
  w .Elim‚Ñù-Prop2Sym.rat-limA q x y R Œµ =
    PT.rec (isProp‚àº _ _ _) ( Œª (Œ∏ , (xx , xx')) ‚Üí
          let 0<Œ∏ = ‚Ñö.<‚Üí0< _ (<·µ£‚Üí<‚Ñö 0 Œ∏
                       (isTrans‚â§<·µ£ 0 _ (rat Œ∏)
                         (0‚â§abs·µ£ _) xx))
              ww : ‚àÄ Œ¥ Œ∑ ‚Üí abs·µ£ (rat q +·µ£ (-·µ£ lim x y))
                          ‚àº[ Œ¥ ‚Ñö‚Çä+ Œ∑ ] abs·µ£ (rat q +·µ£ (-·µ£ (x Œ¥)))
              ww Œ¥ Œ∑ =
                let uu : ‚ü® NonExpanding‚Çö (abs·µ£ ‚àòS (rat q +·µ£_) ‚àòS -·µ£_) ‚ü©
                    uu = NonExpanding‚Çö‚àò abs·µ£ ((rat q +·µ£_) ‚àòS -·µ£_)
                              abs·µ£-nonExpanding
                               (NonExpanding‚Çö‚àò (rat q +·µ£_) -·µ£_
                                      (NonExpanding‚ÇÇ.go‚àºR sumR (rat q))
                                       (Lipschitz-‚Ñù‚Üí‚Ñù-1‚ÜíNonExpanding
                                         _ (snd -·µ£R)))
                in uu (lim x y) (x Œ¥) (Œ¥ ‚Ñö‚Çä+ Œ∑) (
                           sym‚àº _ _ _ (ùï£-lim-self x y Œ¥ Œ∑))
              Œ¥ = ‚Ñö./4‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä Œ∏ (fst Œµ) (<·µ£‚Üí<‚Ñö _ _ xx'))
              www = ‚àº‚Üí< (abs·µ£ (rat q +·µ£ (-·µ£ lim x y)))
                      Œ∏
                      xx ((abs·µ£ (rat q +·µ£ (-·µ£ (x Œ¥)))))
                         (Œ¥ ‚Ñö‚Çä+ Œ¥)
                      (‚àº‚Üí‚àº' _ _ (Œ¥ ‚Ñö‚Çä+ Œ¥) (ww Œ¥ Œ¥))

              wwwR = R Œ¥ ((Œ∏ , 0<Œ∏) ‚Ñö‚Çä+ (Œ¥ ‚Ñö‚Çä+ Œ¥)) www
              zz : fst (Œ¥ ‚Ñö‚Çä+ Œ¥) ‚Ñö.+ (fst Œ¥ ‚Ñö.+ fst Œ¥) ‚â°
                     fst Œµ ‚Ñö.- Œ∏
              zz = dist‚Ñö! (fst Œµ ‚Ñö.- Œ∏)
                     ¬∑[ (ge[ [ 1 / 4 ] ] +ge ge[ [ 1 / 4 ] ]) +ge
                        (ge[ [ 1 / 4 ] ] +ge ge[ [ 1 / 4 ] ]) ‚â° ge1 ]
          in subst‚àº ( sym (‚Ñö.+Assoc _ _ _) ‚àô‚àô
                    cong (Œ∏ ‚Ñö.+_) zz ‚àô‚àô lem--05 {Œ∏} {fst Œµ} )
               (triangle‚àº wwwR (ùï£-lim-self x y Œ¥ Œ¥))) ‚àòS
          (dense‚Ñöin‚Ñù (abs·µ£ (rat q +·µ£ (-·µ£ lim x y))) (rat (fst Œµ)))
  w .Elim‚Ñù-Prop2Sym.lim-limA x y x' y' R Œµ =
      PT.rec (isProp‚àº _ _ _) ( Œª (Œ∏ , (xx , xx')) ‚Üí
        let 0<Œ∏ = ‚Ñö.<‚Üí0< _ (<·µ£‚Üí<‚Ñö 0 Œ∏
                       (isTrans‚â§<·µ£ 0 _ (rat Œ∏)
                         (0‚â§abs·µ£ _) xx))
            ww : ‚àÄ Œ¥ Œ∑ ‚Üí abs·µ£ (lim x y +·µ£ (-·µ£ lim x' y'))
                        ‚àº[ (Œ¥ ‚Ñö‚Çä+ Œ∑) ‚Ñö‚Çä+ (Œ¥ ‚Ñö‚Çä+ Œ∑) ]
                         abs·µ£ ((x Œ¥) +·µ£ (-·µ£ (x' Œ¥)))
            ww Œ¥ Œ∑ =
              let uu = abs·µ£-nonExpanding
                    ((lim x y +·µ£ (-·µ£ lim x' y')))
                    (x Œ¥ +·µ£ (-·µ£ x' Œ¥))
                        _
                         (NonExpanding‚ÇÇ.go‚àº‚ÇÇ sumR
                          _ _
                          (sym‚àº _ _ _ (ùï£-lim-self x y Œ¥ Œ∑))
                          (Lipschitz-‚Ñù‚Üí‚Ñù-1‚ÜíNonExpanding
                                         _ (snd -·µ£R) _ _ _
                                          (sym‚àº _ _ _ (ùï£-lim-self x' y' Œ¥ Œ∑))))
              in uu
            Œ¥ = (‚Ñö.<‚Üí‚Ñö‚Çä Œ∏ (fst Œµ) (<·µ£‚Üí<‚Ñö _ _ xx')) ‚Ñö‚Çä¬∑ ([ 1 / 6 ] , _)
            www = ‚àº‚Üí< (abs·µ£ (lim x y +·µ£ (-·µ£ lim x' y')))
                      Œ∏
                      xx ((abs·µ£ (x Œ¥ +·µ£ (-·µ£ (x' Œ¥)))))
                         ((Œ¥ ‚Ñö‚Çä+ Œ¥) ‚Ñö‚Çä+ (Œ¥ ‚Ñö‚Çä+ Œ¥))
                      (‚àº‚Üí‚àº' _ _ ((Œ¥ ‚Ñö‚Çä+ Œ¥) ‚Ñö‚Çä+ (Œ¥ ‚Ñö‚Çä+ Œ¥)) (ww Œ¥ Œ¥))
            wwwR = R Œ¥ Œ¥
                       ((Œ∏ , 0<Œ∏) ‚Ñö‚Çä+ ((Œ¥ ‚Ñö‚Çä+ Œ¥) ‚Ñö‚Çä+ (Œ¥ ‚Ñö‚Çä+ Œ¥)))
                         www

            zz = cong (Œª x ‚Üí (x ‚Ñö.+ x) ‚Ñö.+ x)
                  (‚Ñö.Œµ/6+Œµ/6‚â°Œµ/3 (fst Œµ ‚Ñö.- Œ∏))
                   ‚àô sym (‚Ñö.+Assoc _ _ _) ‚àô ‚Ñö.Œµ/3+Œµ/3+Œµ/3‚â°Œµ (fst Œµ ‚Ñö.- Œ∏)
         in uncurry (lim-lim _ _ _ Œ¥ Œ¥ _ _)
              (sŒ£‚Ñö< (‚Ñö.+CancelL- _ _ _
                        (sym (‚Ñö.+Assoc _ _ _) ‚àô‚àô
                    cong (Œ∏ ‚Ñö.+_) zz ‚àô‚àô lem--05 {Œ∏} {fst Œµ} )) wwwR)
       ) ‚àòS (dense‚Ñöin‚Ñù (abs·µ£ ((lim x y) +·µ£ (-·µ£ lim x' y'))) (rat (fst Œµ)))
  w .Elim‚Ñù-Prop2Sym.isSymA x y u Œµ =
    sym‚àº _ _ _ ‚àòS u Œµ ‚àòS subst (_<·µ£ rat (fst Œµ))
     (minusComm-abs·µ£ y x)
  w .Elim‚Ñù-Prop2Sym.isPropA _ _ = isPropŒ†2 Œª _ _ ‚Üí isProp‚àº _ _ _



‚àº‚âÉabs<Œµ : ‚àÄ u v  Œµ ‚Üí
  (u ‚àº[ Œµ ] v) ‚âÉ
    (abs·µ£ (u +·µ£ (-·µ£  v)) <·µ£ rat (fst Œµ))
‚àº‚âÉabs<Œµ u v Œµ =
  propBiimpl‚ÜíEquiv (isProp‚àº _ _ _) (isProp<·µ£ _ _)

   ((Œª x ‚Üí
    lem-11-3-44 ((u +·µ£ (-·µ£ v))) Œµ
      (‚àº‚Üí‚àº' _ _ _ $  (subst ((u +·µ£ (-·µ£ v)) ‚àº[ Œµ ]_) (+-·µ£ v)
       (+·µ£-‚àº u v (-·µ£ v) Œµ x)))))
   (‚àº‚âÉabs<Œµ‚áê u v Œµ)

getClampsOnQ : (a : ‚Ñö) ‚Üí
      Œ£ ‚Ñï‚Çä‚ÇÅ (Œª n ‚Üí abs·µ£ (rat a) <·µ£ rat [ pos (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï n) / 1+ 0 ])
getClampsOnQ = (map-snd (Œª {a} ‚Üí subst (_<·µ£ rat [ pos (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï a) / 1+ 0 ])
      (cong rat (‚Ñö.abs'‚â°abs _ ) ‚àô sym (abs·µ£-rat' _))
      ‚àòS (<‚Ñö‚Üí<·µ£ _ _))) ‚àò ‚Ñö.bound‚Ñï

getClamps : ‚àÄ u ‚Üí
   ‚àÉ[ n ‚àà ‚Ñï‚Çä‚ÇÅ ] abs·µ£ u <·µ£ fromNat (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï n)
getClamps = Elim‚Ñù-Prop.go w
 where
  w : Elim‚Ñù-Prop _
  w .Elim‚Ñù-Prop.ratA =
    ‚à£_‚à£‚ÇÅ ‚àò getClampsOnQ
  w .Elim‚Ñù-Prop.limA x p x‚ÇÅ =
   PT.map (Œª (1+ n , v) ‚Üí
   let z' = (subst‚àº {Œµ' = ‚Ñö./2‚Çä 1} ‚Ñö.dec‚Ñö? $ ùï£-lim-self x p (‚Ñö./4‚Çä 1) (‚Ñö./4‚Çä 1))
       z = ‚àº‚Üí< (abs·µ£ (x (‚Ñö./4‚Çä 1))) _ v (abs·µ£ (lim x p)) 1
              (‚àº‚Üí‚àº' _ _ _
               (‚àº-monotone< (‚Ñö.x/2<x 1) (abs·µ£-nonExpanding _ _ _ z')) )

       uu = ‚Ñ§.¬∑IdR _ ‚àô (sym $ ‚Ñ§.+Comm 1 (pos 1 ‚Ñ§.+ pos n ‚Ñ§.¬∑ pos 1))

   in (suc‚Çä‚ÇÅ (1+ n)) , subst ((abs·µ£ (lim x p) <·µ£_) ‚àò rat) (eq/ _ _ uu) z) $ x‚ÇÅ (‚Ñö./4‚Çä 1)
  w .Elim‚Ñù-Prop.isPropA _ = squash‚ÇÅ



lim‚â°‚âÉ‚àº : ‚àÄ x y a ‚Üí (lim x y ‚â° a)
                    ‚âÉ (‚àÄ Œµ ‚Üí abs·µ£ (lim x y -·µ£ a) <·µ£ rat (fst Œµ) )
lim‚â°‚âÉ‚àº x y r =
  invEquiv (‚àº‚âÉ‚â° _ _ ) ‚àô‚Çë
    equivŒ†Cod Œª Œµ ‚Üí
      ‚àº‚âÉabs<Œµ _ _ _


restrSq : ‚àÄ n ‚Üí Lipschitz-‚Ñö‚Üí‚Ñö-restr (fromNat (suc n))
                  ((2 ‚Ñö‚Çä¬∑ fromNat (suc n)))
                  Œª x ‚Üí x ‚Ñö.¬∑ x

restrSq n q r x x‚ÇÅ Œµ x‚ÇÇ =

  subst (‚Ñö._< 2 ‚Ñö.¬∑ fst (fromNat (suc n)) ‚Ñö.¬∑ fst Œµ)
    (‚Ñö.abs¬∑abs (q ‚Ñö.+ r) (q ‚Ñö.- r) ‚àô cong ‚Ñö.abs (lem--040 {q} {r})) z

 where
  zz : ‚Ñö.abs (q ‚Ñö.+ r) ‚Ñö.< 2 ‚Ñö.¬∑ fst (fromNat (suc n))
  zz = subst (‚Ñö.abs (q ‚Ñö.+ r) ‚Ñö.<_)
           (sym (‚Ñö.¬∑DistR+ 1 1 (fst (fromNat (suc n)))))
          (‚Ñö.isTrans‚â§< (‚Ñö.abs (q ‚Ñö.+ r)) (‚Ñö.abs q ‚Ñö.+ ‚Ñö.abs r)
            _ (‚Ñö.abs+‚â§abs+abs q r)
              (‚Ñö.<Monotone+ (‚Ñö.abs q) _ (‚Ñö.abs r) _ x x‚ÇÅ ))

  z : ‚Ñö.abs (q ‚Ñö.+ r) ‚Ñö.¬∑ ‚Ñö.abs (q ‚Ñö.- r) ‚Ñö.<
        2 ‚Ñö.¬∑ fst (fromNat (suc n)) ‚Ñö.¬∑ fst Œµ
  z = ‚Ñö.<Monotone¬∑-onPos _ _ _ _
      zz x‚ÇÇ (‚Ñö.0‚â§abs (q ‚Ñö.+ r)) ((‚Ñö.0‚â§abs (q ‚Ñö.- r)))


0<‚Ñï‚Çä‚ÇÅ : ‚àÄ n m ‚Üí 0 ‚Ñö.< ([ ‚Ñö.‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ n / m ])
0<‚Ñï‚Çä‚ÇÅ n m = ‚Ñö.0<‚Üí< ([ ‚Ñö.‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ n / m ]) tt

1/n<sucK : ‚àÄ m n ‚Üí ‚Ñö.[ 1 / (suc‚Çä‚ÇÅ m) ] ‚Ñö.< ([ ‚Ñö.‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ n / 1 ])
1/n<sucK m n =
 subst (1 ‚Ñ§.<_) (‚Ñ§.pos¬∑pos _ _) (‚Ñ§.suc-‚â§-suc (‚Ñ§.suc-‚â§-suc ‚Ñ§.zero-‚â§pos ))

<Œî : ‚àÄ n ‚Üí [ 1 / 4 ] ‚Ñö.< ([ pos (suc n) / 1 ])
<Œî n = 1/n<sucK 3 (1+ n)


clampedSq : ‚àÄ (n : ‚Ñï) ‚Üí Œ£ (‚Ñù ‚Üí ‚Ñù) (Lipschitz-‚Ñù‚Üí‚Ñù (2 ‚Ñö‚Çä¬∑ fromNat (suc n)))
clampedSq n =
  let ex = Lipschitz-‚Ñö‚Üí‚Ñö-extend _
             _ _ (‚Ñö.[ (1 , 4) ] , _) (<Œî n) (restrSq n)
  in fromLipschitz _ (_ , Lipschitz-rat‚àò _ _ ex)

IsContinuous : (‚Ñù ‚Üí ‚Ñù) ‚Üí Type
IsContinuous f =
 ‚àÄ u Œµ ‚Üí ‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ] (‚àÄ v ‚Üí u ‚àº[ Œ¥ ] v ‚Üí f u ‚àº[ Œµ ] f v)

IsContinuousWithPred : (P : ‚Ñù ‚Üí hProp ‚Ñì-zero) ‚Üí
                        (‚àÄ r ‚Üí ‚ü® P r ‚ü© ‚Üí ‚Ñù) ‚Üí Type
IsContinuousWithPred P f =
  ‚àÄ u Œµ u‚ààP  ‚Üí ‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ] (‚àÄ v v‚ààP ‚Üí u ‚àº[ Œ¥ ] v ‚Üí  f u u‚ààP ‚àº[ Œµ ] f v v‚ààP)

Lipschitz‚ÜíIsContinuous : ‚àÄ L f ‚Üí Lipschitz-‚Ñù‚Üí‚Ñù L f ‚Üí  IsContinuous f
Lipschitz‚ÜíIsContinuous L f p u Œµ =
 ‚à£ (‚Ñö.inv‚Ñö‚Çä L) ‚Ñö‚Çä¬∑ Œµ ,
   (Œª v ‚Üí subst‚àº (‚Ñö.y¬∑[x/y] L (fst Œµ))
      ‚àòS p u v ((inv‚Ñö‚Çä L) ‚Ñö‚Çä¬∑ Œµ)) ‚à£‚ÇÅ

AsContinuousWithPred : (P : ‚Ñù ‚Üí hProp ‚Ñì-zero) ‚Üí (f : ‚Ñù ‚Üí ‚Ñù)
                      ‚Üí IsContinuous f
                      ‚Üí IsContinuousWithPred P (Œª x _ ‚Üí f x)
AsContinuousWithPred P f x u Œµ _ =
  PT.map (map-snd (Œª y z _ ‚Üí y z)) (x u Œµ)

IsContinuousWP‚àò : ‚àÄ P P' f g ‚Üí (h : ‚àÄ r x ‚Üí ‚ü® P (g r x) ‚ü©)
   ‚Üí (IsContinuousWithPred P f)
   ‚Üí (IsContinuousWithPred P' g )
   ‚Üí IsContinuousWithPred P'
     (Œª r x ‚Üí f (g r x) (h r x))
IsContinuousWP‚àò P P' f g h fC gC u Œµ u‚ààP =
  PT.rec squash‚ÇÅ
    (Œª (Œ¥ , Œ¥‚àº) ‚Üí
      PT.map (map-snd Œª x v v‚ààP ‚Üí
          Œ¥‚àº (g v v‚ààP) (h v v‚ààP) ‚àò (x _ v‚ààP)) (gC u Œ¥ u‚ààP))
    ((fC (g u u‚ààP) Œµ (h _ u‚ààP)))

IsContinuous‚àò : ‚àÄ f g ‚Üí (IsContinuous f) ‚Üí (IsContinuous g)
                    ‚Üí IsContinuous (f ‚àò g)
IsContinuous‚àò f g fC gC u Œµ =
  PT.rec squash‚ÇÅ
    (Œª (Œ¥ , Œ¥‚àº) ‚Üí
      PT.map (map-snd Œª x v ‚Üí Œ¥‚àº (g v) ‚àò  (x _)  ) (gC u Œ¥))
    (fC (g u) Œµ)

isPropIsContinuous : ‚àÄ f ‚Üí isProp (IsContinuous f)
isPropIsContinuous f = isPropŒ†2 Œª _ _ ‚Üí squash‚ÇÅ

-- HoTT Lemma 11.3.39
‚â°Continuous : ‚àÄ f g ‚Üí IsContinuous f ‚Üí IsContinuous g
                ‚Üí (‚àÄ r ‚Üí f (rat r) ‚â° g (rat r))
                ‚Üí ‚àÄ u ‚Üí f u ‚â° g u
‚â°Continuous f g fC gC p = Elim‚Ñù-Prop.go w
 where
 w : Elim‚Ñù-Prop (Œª z ‚Üí f z ‚â° g z)
 w .Elim‚Ñù-Prop.ratA = p
 w .Elim‚Ñù-Prop.limA x p R = eq‚Ñù _ _ Œª Œµ ‚Üí
   let f' = fC (lim x p) (‚Ñö./2‚Çä Œµ)
       g' = gC (lim x p) (‚Ñö./2‚Çä Œµ)
   in PT.rec2
       (isProp‚àº _ _ _)
        (Œª (Œ∏ , Œ∏‚àº) (Œ∑ , Œ∑‚àº) ‚Üí
         let Œ¥ = ‚Ñö./2‚Çä (‚Ñö.min‚Çä Œ∏ Œ∑)
             zF : f (lim x p) ‚àº[ ‚Ñö./2‚Çä Œµ ] g (x Œ¥)
             zF = subst (f (lim x p) ‚àº[ ‚Ñö./2‚Çä Œµ ]_)
                  (R _)
                 (Œ∏‚àº _ (‚àº-monotone‚â§ (
                     subst (‚Ñö._‚â§ fst Œ∏)
                      (sym (‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst (‚Ñö.min‚Çä Œ∏ Œ∑))))
                       (‚Ñö.min‚â§ (fst Œ∏) (fst Œ∑)))
                  (sym‚àº _ _ _ ((ùï£-lim-self x p Œ¥ Œ¥)))))
             zG : g (lim x p) ‚àº[ ‚Ñö./2‚Çä Œµ ] g (x Œ¥)
             zG = Œ∑‚àº _ (‚àº-monotone‚â§ (subst (‚Ñö._‚â§ fst Œ∑)
                      (sym (‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst (‚Ñö.min‚Çä Œ∏ Œ∑))))
                       (‚Ñö.min‚â§' (fst Œ∏) (fst Œ∑)))
                  (sym‚àº _ _ _ ((ùï£-lim-self x p Œ¥ Œ¥))))
         in subst‚àº (‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst Œµ)) (triangle‚àº zF (sym‚àº _ _ _ zG)))
        f' g'
 w .Elim‚Ñù-Prop.isPropA _ = isSet‚Ñù _ _



fromLipschitz' : ‚àÄ f ‚Üí ‚àÉ[ L ‚àà ‚Ñö‚Çä ] (Lipschitz-‚Ñö‚Üí‚Ñù L f)
                     ‚Üí Œ£[ f' ‚àà (‚Ñù ‚Üí ‚Ñù) ] ‚àÉ[ L ‚àà ‚Ñö‚Çä ] (Lipschitz-‚Ñù‚Üí‚Ñù L f')
fromLipschitz' f = PT.elim‚ÜíSet
  (Œª _ ‚Üí isSetŒ£ (isSet‚Üí isSet‚Ñù)
   Œª _ ‚Üí isProp‚ÜíisSet squash‚ÇÅ)
   (Œª (L , lip) ‚Üí map-snd (‚à£_‚à£‚ÇÅ ‚àò (L ,_)) $ fromLipschitz L (f , lip))
   Œª (L , lip) (L' , lip') ‚Üí
    Œ£‚â°Prop (Œª _ ‚Üí squash‚ÇÅ)
          (funExt (‚â°Continuous _ _
            (Lipschitz‚ÜíIsContinuous L _
              (snd (fromLipschitz L (f , lip))))
            (Lipschitz‚ÜíIsContinuous L' _
              ((snd (fromLipschitz L' (f , lip')))) )
            Œª _ ‚Üí refl))


openPred : (P : ‚Ñù ‚Üí hProp ‚Ñì-zero) ‚Üí hProp ‚Ñì-zero
openPred P = (‚àÄ x ‚Üí ‚ü® P x ‚ü© ‚Üí ‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ] (‚àÄ y ‚Üí x ‚àº[ Œ¥ ] y ‚Üí ‚ü® P y ‚ü© ) )
   , isPropŒ†2 Œª _ _ ‚Üí squash‚ÇÅ


<min-rr : ‚àÄ p q r ‚Üí p <·µ£ (rat q) ‚Üí p <·µ£ (rat r) ‚Üí p <·µ£ min·µ£ (rat q) (rat r)
<min-rr p =
 ‚Ñö.elimBy‚â§ (Œª x y R a b ‚Üí subst (p <·µ£_) (min·µ£Comm (rat x) (rat y)) (R b a))
   Œª x y x‚â§y p<x _ ‚Üí subst ((p <·µ£_) ‚àò rat)
    (sym (‚Ñö.‚â§‚Üímin _ _ x‚â§y) ) (p<x)


m¬∑n/m : ‚àÄ m n ‚Üí [ pos (suc m) / 1 ] ‚Ñö.¬∑ [ pos n / 1+ m ] ‚â° [ pos n / 1 ]
m¬∑n/m m n =
  eq/ _ _ ((Œª i ‚Üí ‚Ñ§.¬∑IdR (‚Ñ§.¬∑Comm (pos (suc m)) (pos n) i) i)
       ‚àô cong ((pos n ‚Ñ§.¬∑_) ‚àò ‚Ñö.‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§) (sym (¬∑‚Çä‚ÇÅ-identityÀ° (1+ m))))

3¬∑x‚â°x+[x+x] : ‚àÄ x ‚Üí 3 ‚Ñö.¬∑ x ‚â° x ‚Ñö.+ (x ‚Ñö.+ x)
3¬∑x‚â°x+[x+x] x = ‚Ñö.¬∑Comm _ _ ‚àô
  dist‚Ñö! x ¬∑[ ge[ 3 ] ‚â° ge1 +ge (ge1 +ge ge1) ]


opaque
 unfolding abs·µ£ _<·µ£_
 abs'q‚â§Œî‚ÇÅ : ‚àÄ q n ‚Üí abs·µ£ (rat q) <·µ£ rat [ pos (suc n) / 1+ 0 ]
      ‚Üí  ‚Ñö.abs' q ‚Ñö.‚â§ ([ pos (suc (suc (n))) / 1 ] ‚Ñö.- [ 1 / 4 ])
 abs'q‚â§Œî‚ÇÅ q n n< = (‚Ñö.isTrans‚â§ (‚Ñö.abs' q) (fromNat (suc n)) _
           (‚Ñö.<Weaken‚â§ _ _ ((<·µ£‚Üí<‚Ñö _ _ n<)))
            (subst2 ‚Ñö._‚â§_
              ((‚Ñö.+IdR _))
                ((cong {x = [ 3 / 4 ]} {y = 1 ‚Ñö.- [ 1 / 4 ]}
                          ([ pos (suc n) / 1 ] ‚Ñö.+_)
                          (ùüö.toWitness
                           {Q = ‚Ñö.discrete‚Ñö [ 3 / 4 ] (1 ‚Ñö.- [ 1 / 4 ])}
                            _ ))
                           ‚àô‚àô ‚Ñö.+Assoc _ _ _ ‚àô‚àô
                             cong (‚Ñö._- [ pos 1 / 1+ 3 ])
                              (‚Ñö.+Comm [ pos (suc n) / 1 ]
                                1 ‚àô
                                 ‚Ñö.‚Ñ§+‚Üí‚Ñö+ 1 (pos (suc n)) ‚àô
                                   cong [_/ 1 ]
                                    (sym (‚Ñ§.pos+ 1 (suc n)))))
              (‚Ñö.‚â§-o+ 0 [ 3 / 4 ] (fromNat (suc n))
                (ùüö.toWitness {Q = ‚Ñö.‚â§Dec 0 [ 3 / 4 ]} _ ))))

abs'q‚â§Œî‚ÇÅ' : ‚àÄ q n ‚Üí ‚Ñö.abs' q ‚Ñö.‚â§ [ pos (suc n) / 1+ 0 ]
     ‚Üí  ‚Ñö.abs' q ‚Ñö.‚â§ ([ pos (suc (suc (n))) / 1 ] ‚Ñö.- [ 1 / 4 ])
abs'q‚â§Œî‚ÇÅ' q n n< = (‚Ñö.isTrans‚â§ (‚Ñö.abs' q) (fromNat (suc n)) _
          (n<)
           (subst2 ‚Ñö._‚â§_
             ((‚Ñö.+IdR _))
               ((cong {x = [ 3 / 4 ]} {y = 1 ‚Ñö.- [ 1 / 4 ]}
                         ([ pos (suc n) / 1 ] ‚Ñö.+_)
                         (ùüö.toWitness
                          {Q = ‚Ñö.discrete‚Ñö [ 3 / 4 ] (1 ‚Ñö.- [ 1 / 4 ])}
                           _ ))
                          ‚àô‚àô ‚Ñö.+Assoc _ _ _ ‚àô‚àô
                            cong (‚Ñö._- [ pos 1 / 1+ 3 ])
                             (‚Ñö.+Comm [ pos (suc n) / 1 ]
                               1 ‚àô
                                ‚Ñö.‚Ñ§+‚Üí‚Ñö+ 1 (pos (suc n)) ‚àô
                                  cong [_/ 1 ]
                                   (sym (‚Ñ§.pos+ 1 (suc n)))))
             (‚Ñö.‚â§-o+ 0 [ 3 / 4 ] (fromNat (suc n))
               (ùüö.toWitness {Q = ‚Ñö.‚â§Dec 0 [ 3 / 4 ]} _ ))))


‚Ñöabs-abs‚â§abs- : (x y : ‚Ñö) ‚Üí (‚Ñö.abs x ‚Ñö.- ‚Ñö.abs y) ‚Ñö.‚â§ ‚Ñö.abs (x ‚Ñö.- y)
‚Ñöabs-abs‚â§abs- x y =
 subst2 ‚Ñö._‚â§_
   (cong ((‚Ñö._+ (‚Ñö.- (‚Ñö.abs y))) ‚àò ‚Ñö.abs) lem--00 )
   (sym lem--034)
  (‚Ñö.‚â§-+o
   (‚Ñö.abs ((x ‚Ñö.- y) ‚Ñö.+ y))
   (‚Ñö.abs (x ‚Ñö.- y) ‚Ñö.+ ‚Ñö.abs y) (‚Ñö.- (‚Ñö.abs y)) (‚Ñö.abs+‚â§abs+abs (x ‚Ñö.- y) y))

-- opaque
--  unfolding abs·µ£ _<·µ£_
IsContinuousAbs·µ£ : IsContinuous abs·µ£
IsContinuousAbs·µ£ = Lipschitz‚ÜíIsContinuous _ _ abs·µ£-lip


IsContinuousMaxR : ‚àÄ x ‚Üí IsContinuous (Œª u ‚Üí max·µ£ u x)
IsContinuousMaxR x u Œµ =
 ‚à£ Œµ , (Œª v ‚Üí NonExpanding‚ÇÇ.go‚àºL maxR _ _ _ Œµ) ‚à£‚ÇÅ

IsContinuousMaxL : ‚àÄ x ‚Üí IsContinuous (max·µ£ x)
IsContinuousMaxL x u Œµ =
 ‚à£ Œµ , (Œª v ‚Üí NonExpanding‚ÇÇ.go‚àºR maxR _ _ _ Œµ) ‚à£‚ÇÅ

IsContinuousMinR : ‚àÄ x ‚Üí IsContinuous (Œª u ‚Üí min·µ£ u x)
IsContinuousMinR x u Œµ =
 ‚à£ Œµ , (Œª v ‚Üí NonExpanding‚ÇÇ.go‚àºL minR _ _ _ Œµ) ‚à£‚ÇÅ

IsContinuousMinL : ‚àÄ x ‚Üí IsContinuous (min·µ£ x)
IsContinuousMinL x u Œµ =
 ‚à£ Œµ , (Œª v ‚Üí NonExpanding‚ÇÇ.go‚àºR minR _ _ _ Œµ) ‚à£‚ÇÅ

IsContinuousClamp : ‚àÄ a b ‚Üí IsContinuous (clamp·µ£ a b)
IsContinuousClamp a b =
 IsContinuous‚àò _ _
   (IsContinuousMinR _)
   (IsContinuousMaxL _)

IsContinuous-·µ£ : IsContinuous (-·µ£_)
IsContinuous-·µ£ = Lipschitz‚ÜíIsContinuous _ _ -·µ£-lip


contDiagNE‚ÇÇ : ‚àÄ {h} ‚Üí (ne : NonExpanding‚ÇÇ h)
  ‚Üí ‚àÄ f g ‚Üí (IsContinuous f) ‚Üí (IsContinuous g)
  ‚Üí IsContinuous (Œª x ‚Üí NonExpanding‚ÇÇ.go ne (f x) (g x))
contDiagNE‚ÇÇ ne f g fC gC u Œµ =
  PT.map2
    (Œª (x , x') (y , y') ‚Üí
      ‚Ñö.min‚Çä x y , (Œª v z ‚Üí
          subst‚àº (‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst Œµ))
           (NonExpanding‚ÇÇ.go‚àº‚ÇÇ ne (‚Ñö./2‚Çä Œµ) (‚Ñö./2‚Çä Œµ)
           (x' v (‚àº-monotone‚â§ (‚Ñö.min‚â§ (fst x) (fst y)) z))
           (y' v (‚àº-monotone‚â§ (‚Ñö.min‚â§' (fst x) (fst y)) z)))))
   (fC u (‚Ñö./2‚Çä Œµ)) (gC u (‚Ñö./2‚Çä Œµ))

contDiagNE‚ÇÇWP : ‚àÄ {h} ‚Üí (ne : NonExpanding‚ÇÇ h)
  ‚Üí ‚àÄ P f g
     ‚Üí (IsContinuousWithPred P f)
     ‚Üí (IsContinuousWithPred P  g)
  ‚Üí IsContinuousWithPred P (Œª x x‚àà ‚Üí NonExpanding‚ÇÇ.go ne (f x x‚àà) (g x x‚àà))
contDiagNE‚ÇÇWP ne P f g fC gC u Œµ u‚àà =
    PT.map2
    (Œª (x , x') (y , y') ‚Üí

      ‚Ñö.min‚Çä x y , (Œª v v‚àà z ‚Üí
          subst‚àº (‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst Œµ))
           (NonExpanding‚ÇÇ.go‚àº‚ÇÇ ne (‚Ñö./2‚Çä Œµ) (‚Ñö./2‚Çä Œµ)
           (x' v v‚àà (‚àº-monotone‚â§ (‚Ñö.min‚â§ (fst x) (fst y)) z))
           (y' v v‚àà (‚àº-monotone‚â§ (‚Ñö.min‚â§' (fst x) (fst y)) z))))
           )
   (fC u (‚Ñö./2‚Çä Œµ) u‚àà) (gC u (‚Ñö./2‚Çä Œµ) u‚àà)

opaque
 unfolding _+·µ£_
 cont‚ÇÇ+·µ£ : ‚àÄ f g ‚Üí (IsContinuous f) ‚Üí (IsContinuous g)
   ‚Üí IsContinuous (Œª x ‚Üí f x +·µ£ g x)
 cont‚ÇÇ+·µ£ = contDiagNE‚ÇÇ sumR




 IsContinuous+·µ£R : ‚àÄ x ‚Üí IsContinuous (_+·µ£ x)
 IsContinuous+·µ£R x u Œµ =
  ‚à£ Œµ , (Œª v ‚Üí NonExpanding‚ÇÇ.go‚àºL sumR _ _ _ Œµ) ‚à£‚ÇÅ

 IsContinuous+·µ£L : ‚àÄ x ‚Üí IsContinuous (x +·µ£_)
 IsContinuous+·µ£L x u Œµ =
  ‚à£ Œµ , (Œª v ‚Üí NonExpanding‚ÇÇ.go‚àºR sumR _ _ _ Œµ) ‚à£‚ÇÅ


cont‚ÇÇmax·µ£ : ‚àÄ f g ‚Üí (IsContinuous f) ‚Üí (IsContinuous g)
  ‚Üí IsContinuous (Œª x ‚Üí max·µ£ (f x) (g x))
cont‚ÇÇmax·µ£ = contDiagNE‚ÇÇ maxR

cont‚ÇÇmin·µ£ : ‚àÄ f g ‚Üí (IsContinuous f) ‚Üí (IsContinuous g)
  ‚Üí IsContinuous (Œª x ‚Üí min·µ£ (f x) (g x))
cont‚ÇÇmin·µ£ = contDiagNE‚ÇÇ minR




opaque
 unfolding _‚â§·µ£_ abs·µ£
 abs·µ£-triangle : (x y : ‚Ñù) ‚Üí abs·µ£ (x +·µ£ y) ‚â§·µ£ (abs·µ£ x +·µ£ abs·µ£ y)
 abs·µ£-triangle x y =
  let z = IsContinuous‚àò _ _ (IsContinuous+·µ£R (abs·µ£ y)) IsContinuousAbs·µ£

  in ‚â°Continuous
     (Œª x ‚Üí max·µ£ (abs·µ£ (x +·µ£ y)) ((abs·µ£ x +·µ£ abs·µ£ y)))
     (Œª x ‚Üí (abs·µ£ x +·µ£ abs·µ£ y))
     (cont‚ÇÇmax·µ£ _ _
       (IsContinuous‚àò _ _ IsContinuousAbs·µ£ (IsContinuous+·µ£R y)) z)
     z
     (Œª r ‚Üí let z' = IsContinuous‚àò _ _ (IsContinuous+·µ£L (abs·µ£ (rat r)))
                 IsContinuousAbs·µ£
      in ‚â°Continuous
     (Œª y ‚Üí max·µ£ (abs·µ£ ((rat r) +·µ£ y)) ((abs·µ£ (rat r) +·µ£ abs·µ£ y)))
     (Œª y ‚Üí (abs·µ£ (rat r) +·µ£ abs·µ£ y))
     (cont‚ÇÇmax·µ£ _ _
         ((IsContinuous‚àò _ _ IsContinuousAbs·µ£ (IsContinuous+·µ£L (rat r))))
           z' ) z'
     (Œª r' ‚Üí cong rat (‚Ñö.‚â§‚Üímax _ _
               (subst2 ‚Ñö._‚â§_ (‚Ñö.abs'‚â°abs _)
                 (cong‚ÇÇ ‚Ñö._+_ (‚Ñö.abs'‚â°abs _) (‚Ñö.abs'‚â°abs _))
                (‚Ñö.abs+‚â§abs+abs r r') ) )) y) x



IsContinuousId : IsContinuous (Œª x ‚Üí x)
IsContinuousId u Œµ = ‚à£ Œµ , (Œª _ x ‚Üí x) ‚à£‚ÇÅ

IsContinuousConst : ‚àÄ x ‚Üí IsContinuous (Œª _ ‚Üí x)
IsContinuousConst x u Œµ = ‚à£ Œµ , (Œª _ _ ‚Üí refl‚àº _ _ ) ‚à£‚ÇÅ


opaque
 unfolding _+·µ£_
 +IdL : ‚àÄ x ‚Üí 0 +·µ£ x ‚â° x
 +IdL = ‚â°Continuous _ _ (IsContinuous+·µ£L 0) IsContinuousId
   (cong rat ‚àò ‚Ñö.+IdL)

 +IdR : ‚àÄ x ‚Üí x +·µ£ 0 ‚â° x
 +IdR = ‚â°Continuous _ _ (IsContinuous+·µ£R 0) IsContinuousId
   (cong rat ‚àò ‚Ñö.+IdR)


 +·µ£MaxDistr : ‚àÄ x y z ‚Üí (max·µ£ x y) +·µ£ z ‚â° max·µ£ (x +·µ£ z) (y +·µ£ z)
 +·µ£MaxDistr x y z =
   ‚â°Continuous _ _
      (IsContinuous‚àò _ _ (IsContinuous+·µ£R z) (IsContinuousMaxR y))
      (IsContinuous‚àò _ _ (IsContinuousMaxR (y +·µ£ z)) (IsContinuous+·µ£R z))
      (Œª x' ‚Üí
        ‚â°Continuous _ _
          (IsContinuous‚àò _ _ (IsContinuous+·µ£R z) (IsContinuousMaxL (rat x')))
          ((IsContinuous‚àò _ _ (IsContinuousMaxL (rat x' +·µ£ z))
                                 (IsContinuous+·µ£R z)))
          (Œª y' ‚Üí ‚â°Continuous _ _
            (IsContinuous+·µ£L (max·µ£ (rat x') ( rat y')))
            (cont‚ÇÇmax·µ£ _ _ (IsContinuous+·µ£L (rat x'))
                           (IsContinuous+·µ£L (rat y')))
            (Œª z' ‚Üí cong rat $ ‚Ñö.+MaxDistr‚Ñö x' y' z')
            z)
          y)
      x

opaque
 unfolding _‚â§·µ£_ abs·µ£

 ‚â§·µ£-+o : ‚àÄ m n o ‚Üí  m ‚â§·µ£ n ‚Üí (m +·µ£ o) ‚â§·µ£ (n +·µ£ o)
 ‚â§·µ£-+o m n o p = sym (+·µ£MaxDistr m n o) ‚àô cong (_+·µ£ o) p

 ‚â§·µ£-o+ : ‚àÄ m n o ‚Üí  m ‚â§·µ£ n ‚Üí (o +·µ£ m) ‚â§·µ£ (o +·µ£ n)
 ‚â§·µ£-o+ m n o = subst2 _‚â§·µ£_ (+·µ£Comm _ _) (+·µ£Comm _ _)  ‚àò ‚â§·µ£-+o m n o


 ‚â§·µ£Monotone+·µ£ : ‚àÄ m n o s ‚Üí m ‚â§·µ£ n ‚Üí o ‚â§·µ£ s ‚Üí (m +·µ£ o) ‚â§·µ£ (n +·µ£ s)
 ‚â§·µ£Monotone+·µ£ m n o s m‚â§n o‚â§s =
   isTrans‚â§·µ£ _ _ _ (‚â§·µ£-+o m n o m‚â§n) (‚â§·µ£-o+ o s n o‚â§s)




 lem--05·µ£ : ‚àÄ Œ¥ q ‚Üí  Œ¥ +·µ£ (q +·µ£ (-·µ£ Œ¥)) ‚â° q
 lem--05·µ£ Œ¥ q = cong (Œ¥ +·µ£_) (+·µ£Comm _ _) ‚àô‚àô
    +·µ£Assoc _ _ _  ‚àô‚àô
     (cong (_+·µ£ q) (+-·µ£ Œ¥) ‚àô +IdL q)

 abs-max : ‚àÄ x ‚Üí abs·µ£ x ‚â° max·µ£ x (-·µ£ x)
 abs-max = ‚â°Continuous _ _
   IsContinuousAbs·µ£
    (cont‚ÇÇmax·µ£ _ _ IsContinuousId IsContinuous-·µ£)
     Œª r¬†‚Üí cong rat (sym (‚Ñö.abs'‚â°abs r))


 abs·µ£NonNeg : ‚àÄ x ‚Üí 0 ‚â§·µ£ x ‚Üí abs·µ£ x ‚â° x
 abs·µ£NonNeg x p = abs-max x ‚àô‚àô max·µ£Comm _ _ ‚àô‚àô z
  where
    z : (-·µ£ x) ‚â§·µ£ x
    z = subst2 _‚â§·µ£_
      (+IdL (-·µ£ x))
      (sym (+·µ£Assoc _ _ _) ‚àô‚àô cong (x +·µ£_) (+-·µ£ x) ‚àô‚àô +IdR x)
      (‚â§·µ£-+o 0 (x +·µ£ x) (-·µ£ x)
       (‚â§·µ£Monotone+·µ£ 0 x 0 x p p))


 abs·µ£Pos : ‚àÄ x ‚Üí 0 <·µ£ x ‚Üí abs·µ£ x ‚â° x
 abs·µ£Pos x = abs·µ£NonNeg x ‚àò <·µ£Weaken‚â§·µ£ _ _



 ‚â§lim : ‚àÄ r x y ‚Üí (‚àÄ Œ¥ ‚Üí rat r ‚â§·µ£ x Œ¥) ‚Üí rat r ‚â§·µ£ lim x y
 ‚â§lim r x y p = snd (NonExpanding‚ÇÇ.Œ≤-rat-lim' maxR r x y) ‚àô
        congLim _ _ _ _ p

 limConstRat : ‚àÄ x y ‚Üí lim (Œª _ ‚Üí (rat x)) y ‚â° rat x
 limConstRat x y = eq‚Ñù _ _ Œª Œµ ‚Üí lim-rat _ _ _ (/2‚Çä Œµ) _
   (‚Ñö.<‚Üí0< _ (‚Ñö.<‚Üí<minus _ _ (‚Ñö.x/2<x Œµ))) (refl‚àº  _ _)

 lim‚â§ : ‚àÄ r x y ‚Üí (‚àÄ Œ¥ ‚Üí x Œ¥ ‚â§·µ£ rat r ) ‚Üí lim x y ‚â§·µ£ rat r
 lim‚â§ r x y p = max·µ£Comm _ _ ‚àô snd (NonExpanding‚ÇÇ.Œ≤-rat-lim' maxR r x y) ‚àô
    congLim' _ _ _ (Œª Œ¥ ‚Üí max·µ£Comm _ _ ‚àô p Œ¥)
     ‚àô limConstRat _ _


 IsContinuousWithPred‚àòIsContinuous : ‚àÄ P f g
  ‚Üí (g‚àà : ‚àÄ x ‚Üí g x ‚àà P)
  ‚Üí IsContinuousWithPred P f
  ‚Üí IsContinuous g
  ‚Üí IsContinuous Œª x ‚Üí f (g x) (g‚àà x)
 IsContinuousWithPred‚àòIsContinuous P f g g‚àà fc gc u Œµ =
   PT.rec squash‚ÇÅ
          (Œª (Œ¥ , Œ¥‚àº) ‚Üí
       PT.map (map-snd Œª x v u‚àºv ‚Üí
          Œ¥‚àº (g v) (g‚àà v) (x v u‚àºv)
           ) (gc u Œ¥) )
       (fc (g u) Œµ (g‚àà u))




 IsContinuousWP‚àò' : ‚àÄ P f g
    ‚Üí (IsContinuous f)
    ‚Üí (IsContinuousWithPred P g )
    ‚Üí IsContinuousWithPred P
      (Œª r x ‚Üí f (g r x))
 IsContinuousWP‚àò' P f g fC gC u Œµ u‚ààP =
   PT.rec squash‚ÇÅ
     (Œª (Œ¥ , Œ¥‚àº) ‚Üí
       PT.map (map-snd Œª x v v‚ààP ‚Üí
           Œ¥‚àº (g v v‚ààP) ‚àò (x _ v‚ààP)) (gC u Œ¥ u‚ààP))
     ((fC (g u u‚ààP) Œµ))


 contDropPred : ‚àÄ f ‚Üí IsContinuousWithPred ‚ä§Pred (Œª x _ ‚Üí f x)
                 ‚Üí IsContinuous f
 contDropPred f =
  flip (IsContinuousWithPred‚àòIsContinuous  ‚ä§Pred (Œª x _ ‚Üí f x)
    (idfun _) _) IsContinuousId


 ‚à©-openPred : ‚àÄ P Q ‚Üí ‚ü® openPred P ‚ü© ‚Üí ‚ü® openPred Q ‚ü© ‚Üí
               ‚ü® openPred (Œª x ‚Üí _ , isProp√ó (snd (P x)) (snd (Q x))) ‚ü©
 ‚à©-openPred _ _ oP oQ x (x‚ààP , x‚ààQ) =
   PT.map2 (Œª (Œ¥ , Œî) (Œ¥' , Œî') ‚Üí
      (‚Ñö.min‚Çä Œ¥ Œ¥') , Œª y x‚àºy ‚Üí
        (Œî y (‚àº-monotone‚â§ (‚Ñö.min‚â§ _ _) x‚àºy))
       , Œî' y (‚àº-monotone‚â§ (‚Ñö.min‚â§' _ _) x‚àºy))
    (oP x x‚ààP) (oQ x x‚ààQ)





 max-lem : ‚àÄ x x' y ‚Üí max·µ£ (max·µ£ x y) (max·µ£ x' y) ‚â° (max·µ£ (max·µ£ x x') y)
 max-lem x x' y = max·µ£Assoc _ _ _ ‚àô cong (flip max·µ£ y) (max·µ£Comm _ _)
   ‚àô sym (max·µ£Assoc _ _ _) ‚àô
     cong (max·µ£ x') (sym (max·µ£Assoc _ _ _)¬†‚àô cong (max·µ£ x) (max·µ£Idem y))
      ‚àô max·µ£Assoc _ _ _ ‚àô cong (flip max·µ£ y) (max·µ£Comm _ _)



 min·µ£Idem : ‚àÄ x ‚Üí min·µ£ x x ‚â° x
 min·µ£Idem = ‚â°Continuous _ _
   (cont‚ÇÇmin·µ£ _ _ IsContinuousId IsContinuousId)
   IsContinuousId
   (cong rat ‚àò ‚Ñö.minIdem)


 min-lem : ‚àÄ x x' y ‚Üí min·µ£ (min·µ£ x y) (min·µ£ x' y) ‚â° (min·µ£ (min·µ£ x x') y)
 min-lem x x' y = min·µ£Assoc _ _ _ ‚àô cong (flip min·µ£ y) (min·µ£Comm _ _)
   ‚àô sym (min·µ£Assoc _ _ _) ‚àô
     cong (min·µ£ x') (sym (min·µ£Assoc _ _ _)¬†‚àô cong (min·µ£ x) (min·µ£Idem y))
      ‚àô min·µ£Assoc _ _ _ ‚àô cong (flip min·µ£ y) (min·µ£Comm _ _)


 max‚â§-lem : ‚àÄ x x' y ‚Üí x ‚â§·µ£ y ‚Üí x' ‚â§·µ£ y ‚Üí max·µ£ x x' ‚â§·µ£ y
 max‚â§-lem x x' y p p' =
   sym (max-lem _ _ _)
    ‚àô‚àô cong‚ÇÇ max·µ£ p p' ‚àô‚àô max·µ£Idem y

 max<-lem : ‚àÄ x x' y ‚Üí x <·µ£ y ‚Üí x' <·µ£ y ‚Üí max·µ£ x x' <·µ£ y
 max<-lem x x' y = PT.map2
   Œª ((q , q') , (a , a' , a''))
     ((r , r') , (b , b' , b'')) ‚Üí
      (‚Ñö.max q r , ‚Ñö.max q' r') ,
        (max‚â§-lem _ _ (rat (‚Ñö.max q r))
          (isTrans‚â§·µ£ _ _ _ a (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.‚â§max q r)))
          ((isTrans‚â§·µ£ _ _ _ b (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.‚â§max' q r)))) ,
           (‚Ñö.<MonotoneMax _ _ _ _ a' b' , max‚â§-lem _ _ _ a'' b''))

 minDistMax·µ£ : ‚àÄ x y y' ‚Üí
   max·µ£ x (min·µ£ y y') ‚â° min·µ£ (max·µ£ x y) (max·µ£ x y')
 minDistMax·µ£ x y y' = ‚â°Continuous _ _
    (IsContinuousMaxR _)
    (cont‚ÇÇmin·µ£ _ _ (IsContinuousMaxR _) (IsContinuousMaxR _))
    (Œª xR ‚Üí
      ‚â°Continuous _ _
        (IsContinuous‚àò _ _ (IsContinuousMaxL (rat xR)) ((IsContinuousMinR y')))
        (IsContinuous‚àò _ _ (IsContinuousMinR _) (IsContinuousMaxL (rat xR)))
        (Œª yR ‚Üí
          ‚â°Continuous _ _
            (IsContinuous‚àò _ _ (IsContinuousMaxL (rat xR))
              ((IsContinuousMinL (rat yR))))
            (IsContinuous‚àò _ _ (IsContinuousMinL (max·µ£ (rat xR) (rat yR)))
              (IsContinuousMaxL (rat xR)))
            (cong rat ‚àò ‚Ñö.minDistMax xR yR ) y')
        y)
    x


 ‚â§max·µ£ : ‚àÄ m n ‚Üí  m ‚â§·µ£ max·µ£ m n
 ‚â§max·µ£ m n = max·µ£Assoc _ _ _ ‚àô cong (flip max·µ£ n) (max·µ£Idem m)

 ‚â§min-lem : ‚àÄ x y y' ‚Üí x ‚â§·µ£ y ‚Üí x ‚â§·µ£ y' ‚Üí  x ‚â§·µ£ min·µ£ y y'
 ‚â§min-lem x y y' p p' =
    minDistMax·µ£ x y y' ‚àô cong‚ÇÇ min·µ£ p p'


 <min-lem : ‚àÄ x x' y ‚Üí y <·µ£ x ‚Üí y <·µ£ x' ‚Üí  y <·µ£ min·µ£ x x'
 <min-lem x x' y = PT.map2
   Œª ((q , q') , (a , a' , a''))
     ((r , r') , (b , b' , b'')) ‚Üí
      (‚Ñö.min q r , ‚Ñö.min q' r') , ‚â§min-lem _ _ _ a b
         , ‚Ñö.<MonotoneMin _ _ _ _ a' b' ,
             ‚â§min-lem (rat (‚Ñö.min q' r')) x x'
              (isTrans‚â§·µ£ _ _ _ (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.min‚â§ q' r')) a'')
              (isTrans‚â§·µ£ _ _ _ (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.min‚â§' q' r')) b'')



max·µ£‚Çä : ‚Ñù‚Çä ‚Üí ‚Ñù‚Çä ‚Üí ‚Ñù‚Çä
max·µ£‚Çä (x , 0<x) (y , 0<y) =
 max·µ£ x y , isTrans<‚â§·µ£ _ _ _ 0<x (‚â§max·µ£ _ _)


min·µ£‚Çä : ‚Ñù‚Çä ‚Üí ‚Ñù‚Çä ‚Üí ‚Ñù‚Çä
min·µ£‚Çä (x , 0<x) (y , 0<y) =
  min·µ£ x y , <min-lem _ _ _ 0<x 0<y

opaque
 unfolding _‚â§·µ£_ abs·µ£

 maxAbsorbLMin·µ£ : ‚àÄ x y ‚Üí max·µ£ x (min·µ£ x y) ‚â° x
 maxAbsorbLMin·µ£ x =
   ‚â°Continuous _ _
     (IsContinuous‚àò _ _
       (IsContinuousMaxL _) (IsContinuousMinL x))
       (IsContinuousConst _)
      Œª y' ‚Üí
        ‚â°Continuous _ _
           (cont‚ÇÇmax·µ£ _ _ IsContinuousId (IsContinuousMinR _))
         IsContinuousId
          (Œª x' ‚Üí cong rat (‚Ñö.maxAbsorbLMin x' y')) x

 maxDistMin : ‚àÄ x y z ‚Üí min·µ£ x (max·µ£ y z) ‚â° max·µ£ (min·µ£ x y) (min·µ£ x z)

 maxDistMin x y y' =
   ‚â°Continuous _ _
    (IsContinuousMinR _)
    (cont‚ÇÇmax·µ£ _ _ (IsContinuousMinR _) (IsContinuousMinR _))
    (Œª xR ‚Üí
      ‚â°Continuous _ _
        (IsContinuous‚àò _ _ (IsContinuousMinL (rat xR)) ((IsContinuousMaxR y')))
        (IsContinuous‚àò _ _ (IsContinuousMaxR _) (IsContinuousMinL (rat xR)))
        (Œª yR ‚Üí
          ‚â°Continuous _ _
            (IsContinuous‚àò _ _ (IsContinuousMinL (rat xR))
              ((IsContinuousMaxL (rat yR))))
            (IsContinuous‚àò _ _ (IsContinuousMaxL (min·µ£ (rat xR) (rat yR)))
              (IsContinuousMinL (rat xR)))
            (Œª r ‚Üí
              cong rat (‚Ñö.minComm _ _  ‚àô‚àô
               ‚Ñö.maxDistMin _ _ _ ‚àô‚àô
                cong‚ÇÇ ‚Ñö.max (‚Ñö.minComm _ _) (‚Ñö.minComm _ _))) y')
        y)
    x

 min‚â§·µ£ : ‚àÄ m n ‚Üí min·µ£ m n ‚â§·µ£ m
 min‚â§·µ£ m n = max·µ£Comm _ _ ‚àô maxAbsorbLMin·µ£ _ _

 min‚â§·µ£' : ‚àÄ m n ‚Üí min·µ£ m n ‚â§·µ£ n
 min‚â§·µ£' m n = subst (_‚â§·µ£ n) (min·µ£Comm n m) (min‚â§·µ£ n m)


 ‚â§‚Üímin·µ£ : ‚àÄ m n ‚Üí m ‚â§·µ£ n ‚Üí min·µ£ m n ‚â° m
 ‚â§‚Üímin·µ£ m n p = cong‚ÇÇ min·µ£ (sym (max·µ£Idem m)) (sym p) ‚àô
   sym (minDistMax·µ£ _ _ _) ‚àô maxAbsorbLMin·µ£ _ _


 ‚â§‚Üímax·µ£ : ‚àÄ m n ‚Üí m ‚â§·µ£ n ‚Üí max·µ£ m n ‚â° n
 ‚â§‚Üímax·µ£ m n p = p



IsContinuous‚ÇÇ : (‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù) ‚Üí Type
IsContinuous‚ÇÇ f =
 (‚àÄ x ‚Üí IsContinuous (f x)) √ó (‚àÄ x ‚Üí IsContinuous (flip f x))

cont‚ÇÇ-fst : IsContinuous‚ÇÇ (Œª x _ ‚Üí x)
cont‚ÇÇ-fst = (Œª _ ‚Üí IsContinuousConst _) , (Œª _ ‚Üí IsContinuousId)

cont‚ÇÇ-snd : IsContinuous‚ÇÇ (Œª _ x ‚Üí x)
cont‚ÇÇ-snd = (Œª _ ‚Üí IsContinuousId) , (Œª _ ‚Üí IsContinuousConst _)

cont‚ÇÇ-id : ‚àÄ x ‚Üí IsContinuous‚ÇÇ (Œª _ _ ‚Üí x)
cont‚ÇÇ-id _ = (Œª _ ‚Üí IsContinuousConst _) , (Œª _ ‚Üí IsContinuousConst _)

‚â°Cont‚ÇÇ : {f‚ÇÄ f‚ÇÅ : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù}
         ‚Üí IsContinuous‚ÇÇ f‚ÇÄ
         ‚Üí IsContinuous‚ÇÇ f‚ÇÅ
         ‚Üí (‚àÄ u u' ‚Üí f‚ÇÄ (rat u) (rat u') ‚â° f‚ÇÅ (rat u) (rat u'))
             ‚Üí ‚àÄ x x' ‚Üí f‚ÇÄ x x' ‚â° f‚ÇÅ x x'
‚â°Cont‚ÇÇ {f‚ÇÄ} {f‚ÇÅ} (f‚ÇÄC , f‚ÇÄC') (f‚ÇÅC , f‚ÇÅC') p x =
  ‚â°Continuous _ _ (f‚ÇÄC x) (f‚ÇÅC x)
    (Œª q ‚Üí ‚â°Continuous _ _ (f‚ÇÄC' (rat q)) (f‚ÇÅC' (rat q))
       (Œª r ‚Üí p r q) x)



contNE‚ÇÇ‚àò : ‚àÄ {h} ‚Üí (ne : NonExpanding‚ÇÇ h)
  {f‚ÇÄ f‚ÇÅ : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù}
   ‚Üí IsContinuous‚ÇÇ f‚ÇÄ
   ‚Üí IsContinuous‚ÇÇ f‚ÇÅ
  ‚Üí IsContinuous‚ÇÇ (Œª x x' ‚Üí NonExpanding‚ÇÇ.go ne (f‚ÇÄ x x') (f‚ÇÅ x x'))
contNE‚ÇÇ‚àò ne x x‚ÇÅ =
  (Œª x‚ÇÇ ‚Üí contDiagNE‚ÇÇ ne _ _ (x .fst x‚ÇÇ) (x‚ÇÅ .fst x‚ÇÇ)) ,
   Œª x‚ÇÇ ‚Üí contDiagNE‚ÇÇ ne _ _ (x .snd x‚ÇÇ) (x‚ÇÅ .snd x‚ÇÇ)

cont‚àò‚ÇÇ : ‚àÄ {g}
  {f : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù}
   ‚Üí IsContinuous g
   ‚Üí IsContinuous‚ÇÇ f
  ‚Üí IsContinuous‚ÇÇ (Œª x x' ‚Üí g (f x x'))
cont‚àò‚ÇÇ cG (cF , _) .fst x = IsContinuous‚àò _ _ cG (cF x)
cont‚àò‚ÇÇ cG (_ , cF) .snd x = IsContinuous‚àò _ _ cG (cF x)

cont‚ÇÇ‚àò :
  {g : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù}
  ‚Üí ‚àÄ {f f'}
   ‚Üí IsContinuous‚ÇÇ g
   ‚Üí IsContinuous f
   ‚Üí IsContinuous f'
  ‚Üí IsContinuous‚ÇÇ (Œª x x' ‚Üí g (f x) (f' x'))
cont‚ÇÇ‚àò (cG , _) _ cF .fst x = IsContinuous‚àò _ _ (cG _) cF
cont‚ÇÇ‚àò (_ , cG) cF _ .snd x = IsContinuous‚àò _ _ (cG _) cF


contNE‚ÇÇ : ‚àÄ {h} ‚Üí (ne : NonExpanding‚ÇÇ h)
  ‚Üí IsContinuous‚ÇÇ (NonExpanding‚ÇÇ.go ne)
contNE‚ÇÇ ne =
  contNE‚ÇÇ‚àò ne
   ((Œª _ ‚Üí IsContinuousConst _) , (Œª _ ‚Üí IsContinuousId))
   ((Œª _ ‚Üí IsContinuousId) , (Œª _ ‚Üí IsContinuousConst _))



IsContinuousClamp‚ÇÇ : ‚àÄ x ‚Üí IsContinuous‚ÇÇ Œª a b ‚Üí clamp·µ£ a b x
IsContinuousClamp‚ÇÇ x = (Œª _ ‚Üí IsContinuousMinL _) ,
   Œª _ ‚Üí IsContinuous‚àò _ _ (IsContinuousMinR _) (IsContinuousMaxR _)

IsContinuousClamp‚ÇÇ‚àò : ‚àÄ {f‚ÇÄ} {f‚ÇÅ} x ‚Üí IsContinuous‚ÇÇ f‚ÇÄ ‚Üí IsContinuous‚ÇÇ f‚ÇÅ ‚Üí
         IsContinuous‚ÇÇ Œª a b ‚Üí clamp·µ£ (f‚ÇÄ a b) (f‚ÇÅ a b) x
IsContinuousClamp‚ÇÇ‚àò x =
  contNE‚ÇÇ‚àò minR ‚àò
    (flip (contNE‚ÇÇ‚àò maxR) ((Œª _ ‚Üí IsContinuousConst _) , (Œª _ ‚Üí IsContinuousConst _)))

IsContinuousClamp‚ÇÇ‚àò' : ‚àÄ {f‚ÇÄ} {f‚ÇÅ} {f‚ÇÇ} ‚Üí
         IsContinuous‚ÇÇ f‚ÇÄ ‚Üí IsContinuous‚ÇÇ f‚ÇÅ ‚Üí IsContinuous‚ÇÇ f‚ÇÇ ‚Üí
         IsContinuous‚ÇÇ Œª a b ‚Üí clamp·µ£ (f‚ÇÄ a b) (f‚ÇÅ a b) (f‚ÇÇ a b)
IsContinuousClamp‚ÇÇ‚àò' f‚ÇÄC f‚ÇÅC f‚ÇÇC =
  contNE‚ÇÇ‚àò minR (contNE‚ÇÇ‚àò maxR f‚ÇÄC f‚ÇÇC) f‚ÇÅC


opaque
 unfolding _+·µ£_
 IsContinuous-‚ÇÇ‚àò : ‚àÄ {f‚ÇÄ} {f‚ÇÅ} ‚Üí IsContinuous‚ÇÇ f‚ÇÄ ‚Üí IsContinuous‚ÇÇ f‚ÇÅ ‚Üí
      IsContinuous‚ÇÇ Œª a b ‚Üí (f‚ÇÄ a b) -·µ£ (f‚ÇÅ a b)
 IsContinuous-‚ÇÇ‚àò f‚ÇÄC f‚ÇÅC =
  contNE‚ÇÇ‚àò sumR f‚ÇÄC
    (cont‚àò‚ÇÇ IsContinuous-·µ£ f‚ÇÅC)




opaque
 unfolding _‚â§·µ£_

 ‚â§Cont‚ÇÇ : {f‚ÇÄ f‚ÇÅ : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù}
          ‚Üí IsContinuous‚ÇÇ f‚ÇÄ
          ‚Üí IsContinuous‚ÇÇ f‚ÇÅ
          ‚Üí (‚àÄ u u' ‚Üí f‚ÇÄ (rat u) (rat u') ‚â§·µ£ f‚ÇÅ (rat u) (rat u'))
              ‚Üí ‚àÄ x x' ‚Üí f‚ÇÄ x x' ‚â§·µ£ f‚ÇÅ x x'
 ‚â§Cont‚ÇÇ f‚ÇÄC f‚ÇÅC =
   (‚â°Cont‚ÇÇ (contNE‚ÇÇ‚àò maxR f‚ÇÄC f‚ÇÅC) f‚ÇÅC)




 ‚â§Cont : {f‚ÇÄ f‚ÇÅ : ‚Ñù ‚Üí ‚Ñù}
          ‚Üí IsContinuous f‚ÇÄ
          ‚Üí IsContinuous f‚ÇÅ
          ‚Üí (‚àÄ u ‚Üí f‚ÇÄ (rat u) ‚â§·µ£ f‚ÇÅ (rat u))
              ‚Üí ‚àÄ x ‚Üí f‚ÇÄ x ‚â§·µ£ f‚ÇÅ x
 ‚â§Cont f‚ÇÄC f‚ÇÅC =
   ‚â°Continuous _ _ (contDiagNE‚ÇÇ maxR _ _ f‚ÇÄC f‚ÇÅC ) f‚ÇÅC

 ‚â§Cont‚ÇÇPos : {f‚ÇÄ f‚ÇÅ : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù}
          ‚Üí IsContinuous‚ÇÇ f‚ÇÄ
          ‚Üí IsContinuous‚ÇÇ f‚ÇÅ
          ‚Üí (‚àÄ u u' ‚Üí 0 ‚Ñö.‚â§ u ‚Üí 0 ‚Ñö.‚â§ u' ‚Üí f‚ÇÄ (rat u) (rat u') ‚â§·µ£ f‚ÇÅ (rat u) (rat u'))
              ‚Üí ‚àÄ x x' ‚Üí 0 ‚â§·µ£ x ‚Üí 0 ‚â§·µ£ x' ‚Üí f‚ÇÄ x x' ‚â§·µ£ f‚ÇÅ x x'
 ‚â§Cont‚ÇÇPos {f‚ÇÄ} {f‚ÇÅ} f‚ÇÄC f‚ÇÅC X x x' 0‚â§x 0‚â§x' =
   subst2 (Œª x x' ‚Üí f‚ÇÄ x x' ‚â§·µ£ f‚ÇÅ x x') 0‚â§x 0‚â§x'
     (‚â§Cont‚ÇÇ
       (cont‚ÇÇ‚àò f‚ÇÄC (IsContinuousMaxL 0) (IsContinuousMaxL 0))
       (cont‚ÇÇ‚àò f‚ÇÅC (IsContinuousMaxL 0) (IsContinuousMaxL 0))
         (Œª u u' ‚Üí (X _ _ (‚Ñö.‚â§max 0 u) (‚Ñö.‚â§max 0 u')))
          x x')



 ‚â§ContPos' : {x‚ÇÄ : ‚Ñö} {f‚ÇÄ f‚ÇÅ : ‚Ñù ‚Üí ‚Ñù}
          ‚Üí IsContinuous f‚ÇÄ
          ‚Üí IsContinuous f‚ÇÅ
          ‚Üí (‚àÄ u ‚Üí x‚ÇÄ ‚Ñö.‚â§ u ‚Üí f‚ÇÄ (rat u) ‚â§·µ£ f‚ÇÅ (rat u) )
              ‚Üí ‚àÄ x ‚Üí rat x‚ÇÄ ‚â§·µ£ x ‚Üí f‚ÇÄ x ‚â§·µ£ f‚ÇÅ x
 ‚â§ContPos' {x‚ÇÄ} {f‚ÇÄ} {f‚ÇÅ} f‚ÇÄC f‚ÇÅC X x 0‚â§x =
   subst (Œª x ‚Üí f‚ÇÄ x  ‚â§·µ£ f‚ÇÅ x) 0‚â§x
     (‚â§Cont
       (IsContinuous‚àò _ _  f‚ÇÄC (IsContinuousMaxL (rat x‚ÇÄ)))
       (IsContinuous‚àò _ _ f‚ÇÅC (IsContinuousMaxL (rat x‚ÇÄ)))
         (Œª u  ‚Üí (X _ (‚Ñö.‚â§max x‚ÇÄ u)))
          x)




 ‚â§ContPos'pred : {x‚ÇÄ : ‚Ñö} {f‚ÇÄ f‚ÇÅ : ‚àÄ x ‚Üí (rat x‚ÇÄ ‚â§·µ£ x) ‚Üí ‚Ñù}
          ‚Üí IsContinuousWithPred (Œª _ ‚Üí _ , isProp‚â§·µ£ _ _) f‚ÇÄ
          ‚Üí IsContinuousWithPred (Œª _ ‚Üí _ , isProp‚â§·µ£ _ _) f‚ÇÅ
          ‚Üí (‚àÄ u x‚ÇÄ<u ‚Üí f‚ÇÄ (rat u) (‚â§‚Ñö‚Üí‚â§·µ£ _ _ x‚ÇÄ<u)
                 ‚â§·µ£ f‚ÇÅ (rat u) (‚â§‚Ñö‚Üí‚â§·µ£ _ _ x‚ÇÄ<u) )
              ‚Üí ‚àÄ x x‚ÇÄ‚â§x ‚Üí f‚ÇÄ x x‚ÇÄ‚â§x ‚â§·µ£ f‚ÇÅ x x‚ÇÄ‚â§x
 ‚â§ContPos'pred {x‚ÇÄ} {f‚ÇÄ} {f‚ÇÅ} f‚ÇÄC f‚ÇÅC X x 0‚â§x =
   subst (Œª (x , x‚ÇÄ‚â§x) ‚Üí f‚ÇÄ x x‚ÇÄ‚â§x  ‚â§·µ£ f‚ÇÅ x x‚ÇÄ‚â§x)
      (Œ£‚â°Prop (Œª _ ‚Üí isSet‚Ñù _ _) 0‚â§x)
     (‚â§Cont
       (IsContinuousWithPred‚àòIsContinuous _ _ _
          (Œª _ ‚Üí ‚â§max·µ£ _ _) f‚ÇÄC (IsContinuousMaxL (rat x‚ÇÄ)))
       (IsContinuousWithPred‚àòIsContinuous _ _ _
          (Œª _ ‚Üí ‚â§max·µ£ _ _) f‚ÇÅC (IsContinuousMaxL (rat x‚ÇÄ)))
          (Œª u  ‚Üí
              subst (Œª qq ‚Üí f‚ÇÄ (max·µ£ (rat x‚ÇÄ) (rat u)) qq
                      ‚â§·µ£ f‚ÇÅ (max·µ£ (rat x‚ÇÄ) (rat u)) qq)
                 (isSet‚Ñù _ _ _ _) (X (‚Ñö.max x‚ÇÄ u) (‚Ñö.‚â§max _ _))) x)




 <‚Üí‚â§ContPos' : {x‚ÇÄ : ‚Ñö} {f‚ÇÄ f‚ÇÅ : ‚Ñù ‚Üí ‚Ñù}
          ‚Üí IsContinuous f‚ÇÄ
          ‚Üí IsContinuous f‚ÇÅ
          ‚Üí (‚àÄ u ‚Üí x‚ÇÄ ‚Ñö.< u ‚Üí f‚ÇÄ (rat u) ‚â§·µ£ f‚ÇÅ (rat u) )
              ‚Üí ‚àÄ x ‚Üí rat x‚ÇÄ <·µ£ x ‚Üí f‚ÇÄ x ‚â§·µ£ f‚ÇÅ x
 <‚Üí‚â§ContPos' {x‚ÇÄ} {f‚ÇÄ} {f‚ÇÅ} f‚ÇÄC f‚ÇÅC X x =
    PT.rec (isSet‚Ñù _ _)
      Œª ((q , q') , (x‚ÇÄ‚â§q , q<q' , q'‚â§x)) ‚Üí
        ‚â§ContPos' {q'} f‚ÇÄC f‚ÇÅC
              ((_‚àò ‚Ñö.isTrans<‚â§ _ _ _
                (‚Ñö.isTrans‚â§< _ _ _ (‚â§·µ£‚Üí‚â§‚Ñö _ _ x‚ÇÄ‚â§q) q<q'))
                ‚àò X ) x q'‚â§x



IsContinuousWithPred‚äÜ : ‚àÄ (P P' : ‚Ñù ‚Üí hProp ‚Ñì-zero) f
                       ‚Üí (P'‚äÜP : P' ‚äÜ P)
                       ‚Üí IsContinuousWithPred P f
                       ‚Üí IsContinuousWithPred P' ((_‚àò P'‚äÜP _) ‚àò f )
IsContinuousWithPred‚äÜ P P' f P'‚äÜP X u Œµ u‚ààP =
  PT.map (map-snd ((_‚àò P'‚äÜP _) ‚àò_))
   (X u Œµ (P'‚äÜP _ u‚ààP))

opaque
 unfolding _<·µ£_
 <‚Üí‚â§ContPos'pred : {x‚ÇÄ : ‚Ñö} {f‚ÇÄ f‚ÇÅ : ‚àÄ x ‚Üí (rat x‚ÇÄ <·µ£ x) ‚Üí ‚Ñù}
          ‚Üí IsContinuousWithPred (Œª _ ‚Üí _ , isProp<·µ£ _ _) f‚ÇÄ
          ‚Üí IsContinuousWithPred (Œª _ ‚Üí _ , isProp<·µ£ _ _) f‚ÇÅ
          ‚Üí (‚àÄ u x‚ÇÄ<u ‚Üí f‚ÇÄ (rat u) x‚ÇÄ<u
                     ‚â§·µ£ f‚ÇÅ (rat u) x‚ÇÄ<u )
              ‚Üí ‚àÄ x x‚ÇÄ<x ‚Üí f‚ÇÄ x x‚ÇÄ<x ‚â§·µ£ f‚ÇÅ x x‚ÇÄ<x
 <‚Üí‚â§ContPos'pred {x‚ÇÄ} {f‚ÇÄ} {f‚ÇÅ} f‚ÇÄC f‚ÇÅC X x =
    PT.elim (Œª _ ‚Üí isSet‚Ñù _ _)
      Œª ((q , q') , (x‚ÇÄ‚â§q , q<q' , q'‚â§x)) ‚Üí
       let z = ‚â§ContPos'pred {q'}
                (IsContinuousWithPred‚äÜ _ _ f‚ÇÄ
                   (Œª  _ ‚Üí isTrans<‚â§·µ£ _ _ _
                  ((<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.isTrans‚â§< _ _ _ (‚â§·µ£‚Üí‚â§‚Ñö x‚ÇÄ q x‚ÇÄ‚â§q) q<q'))))
                   f‚ÇÄC)
                 (IsContinuousWithPred‚äÜ _ _ f‚ÇÅ
                   (Œª  _ ‚Üí isTrans<‚â§·µ£ _ _ _
                  ((<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.isTrans‚â§< _ _ _ (‚â§·µ£‚Üí‚â§‚Ñö x‚ÇÄ q x‚ÇÄ‚â§q) q<q'))))
                   f‚ÇÅC)
                 (Œª u _ ‚Üí X u _)
                       x q'‚â§x
      in subst (Œª x‚ÇÄ<x ‚Üí f‚ÇÄ x x‚ÇÄ<x  ‚â§·µ£ f‚ÇÅ x x‚ÇÄ<x)
             (squash‚ÇÅ _ _) z



‚â§ContPos : {f‚ÇÄ f‚ÇÅ : ‚Ñù ‚Üí ‚Ñù}
         ‚Üí IsContinuous f‚ÇÄ
         ‚Üí IsContinuous f‚ÇÅ
         ‚Üí (‚àÄ u ‚Üí 0 ‚Ñö.‚â§ u ‚Üí f‚ÇÄ (rat u) ‚â§·µ£ f‚ÇÅ (rat u) )
             ‚Üí ‚àÄ x ‚Üí 0 ‚â§·µ£ x ‚Üí f‚ÇÄ x ‚â§·µ£ f‚ÇÅ x
‚â§ContPos = ‚â§ContPos' {0}


‚Ñöabs-min-max : ‚àÄ u v ‚Üí
      ‚Ñö.abs (‚Ñö.max u v ‚Ñö.- ‚Ñö.min u v) ‚â° ‚Ñö.abs (u ‚Ñö.- v)
‚Ñöabs-min-max = ‚Ñö.elimBy‚â§
  (Œª x y X ‚Üí
    (cong ‚Ñö.abs (cong‚ÇÇ ‚Ñö._-_ (‚Ñö.maxComm _ _) (‚Ñö.minComm _ _)))
       ‚àô‚àô X ‚àô‚àô
      ‚Ñö.absComm- _ _)
  Œª x y x‚â§y ‚Üí
    cong ‚Ñö.abs
      (cong‚ÇÇ ‚Ñö._-_
        (‚Ñö.‚â§‚Üímax _ _ x‚â§y) (‚Ñö.‚â§‚Üímin _ _ x‚â§y))
     ‚àô ‚Ñö.absComm- _ _

opaque
 unfolding abs·µ£
 abs·µ£-min-max : ‚àÄ u v ‚Üí
       abs·µ£ (max·µ£ u v -·µ£ min·µ£ u v) ‚â° abs·µ£ (u -·µ£ v)
 abs·µ£-min-max =
  ‚â°Cont‚ÇÇ
    (cont‚àò‚ÇÇ IsContinuousAbs·µ£
     (contNE‚ÇÇ‚àò sumR
       (contNE‚ÇÇ maxR)
       (cont‚àò‚ÇÇ IsContinuous-·µ£ (contNE‚ÇÇ minR) )))
    (cont‚àò‚ÇÇ IsContinuousAbs·µ£
     (cont‚ÇÇ‚àò (contNE‚ÇÇ sumR)
       IsContinuousId IsContinuous-·µ£))
    Œª u v ‚Üí
       cong rat (sym (‚Ñö.abs'‚â°abs _) ‚àô‚àô ‚Ñöabs-min-max u v ‚àô‚àô ‚Ñö.abs'‚â°abs _)

maxMonotone·µ£ : ‚àÄ m n o s ‚Üí m ‚â§·µ£ n ‚Üí o ‚â§·µ£ s ‚Üí max·µ£ m o ‚â§·µ£ max·µ£ n s
maxMonotone·µ£ _ _ _ _ m‚â§n o‚â§s =
  max‚â§-lem _ _ _
    (isTrans‚â§·µ£ _ _ _ m‚â§n (‚â§max·µ£ _ _))
    (isTrans‚â§·µ£ _ _ _ o‚â§s
      (isTrans‚â§‚â°·µ£ _ _ _  (‚â§max·µ£ _ _) (max·µ£Comm _ _) ))

minMonotone·µ£ : ‚àÄ m n o s ‚Üí m ‚â§·µ£ n ‚Üí o ‚â§·µ£ s ‚Üí min·µ£ m o ‚â§·µ£ min·µ£ n s
minMonotone·µ£ m n o s m‚â§n o‚â§s =
  ‚â§min-lem _ _ _
    (isTrans‚â§·µ£ _ _ _
     (min‚â§·µ£ _ _) m‚â§n)
    (isTrans‚â§·µ£ _ _ _
     (isTrans‚â°‚â§·µ£ _ _ _ (min·µ£Comm _ _) (min‚â§·µ£ _ _)) o‚â§s)

opaque
 unfolding _‚â§·µ£_ abs·µ£
 incr‚Üímax‚â§ : (f : ‚àÄ x ‚Üí 0 <·µ£ x ‚Üí ‚Ñù)
        ‚Üí (‚àÄ x 0<x y 0<y ‚Üí x ‚â§·µ£ y ‚Üí f x 0<x ‚â§·µ£ f y 0<y)
       ‚Üí ‚àÄ u v 0<u 0<v ‚Üí
          max·µ£ (f u 0<u) (f v 0<v)
            ‚â§·µ£  (f (max·µ£ u v) (snd (max·µ£‚Çä (u , 0<u) (v , 0<v))))
 incr‚Üímax‚â§ f incr u v 0<u 0<v =
   isTrans‚â§‚â°·µ£ _ _ _
     (maxMonotone·µ£ _ _ _ _
       (incr u 0<u (max·µ£ u v) (snd (max·µ£‚Çä (u , 0<u) (v , 0<v)))
        (‚â§max·µ£ _ _))
       (incr v 0<v (max·µ£ u v) (snd (max·µ£‚Çä (u , 0<u) (v , 0<v)))
        (isTrans‚â§‚â°·µ£ _ _ _  (‚â§max·µ£ _ _) (max·µ£Comm _ _))))
     (max·µ£Idem _)

incr‚Üí‚â§min : (f : ‚àÄ x ‚Üí 0 <·µ£ x ‚Üí ‚Ñù)
       ‚Üí (‚àÄ x 0<x y 0<y ‚Üí x ‚â§·µ£ y ‚Üí f x 0<x ‚â§·µ£ f y 0<y)
      ‚Üí ‚àÄ u v 0<u 0<v ‚Üí
           (f (min·µ£ u v) (snd (min·µ£‚Çä (u , 0<u) (v , 0<v))))
            ‚â§·µ£  min·µ£ (f u 0<u) (f v 0<v)
incr‚Üí‚â§min f incr u v 0<u 0<v =
  isTrans‚â°‚â§·µ£ _ _ _
    (sym (min·µ£Idem _))
     (minMonotone·µ£ _ _ _ _
       (incr (min·µ£ u v) (snd (min·µ£‚Çä (u , 0<u) (v , 0<v)))
           u 0<u
          (min‚â§·µ£ _ _))
       (incr (min·µ£ u v) (snd (min·µ£‚Çä (u , 0<u) (v , 0<v)))
           v 0<v
          (isTrans‚â°‚â§·µ£ _ _ _  (min·µ£Comm _ _) (min‚â§·µ£ _ _))))

abs·µ£-monotoneOnNonNeg : (x y : ‚Ñù‚ÇÄ‚Çä) ‚Üí
 fst x ‚â§·µ£ fst y ‚Üí abs·µ£ (fst x) ‚â§·µ£ abs·µ£ (fst y)
abs·µ£-monotoneOnNonNeg x y x‚â§y =
  subst2 _‚â§·µ£_
    (sym (abs·µ£NonNeg (fst x) (snd x)))
    (sym (abs·µ£NonNeg (fst y) (snd y)))
    x‚â§y



‚ÑöApprox‚Ñô : (P : ‚Ñô ‚Ñù) (Q : ‚Ñô ‚Ñù) (f : ‚àÄ x ‚Üí x ‚àà P ‚Üí Œ£ ‚Ñù (_‚àà Q)) ‚Üí Type
‚ÑöApprox‚Ñô P Q f =
   Œ£[ f' ‚àà (‚àÄ q ‚Üí rat q ‚àà P ‚Üí ‚Ñö‚Çä ‚Üí ‚Ñö) ]
    (((‚àÄ q q‚àà Œµ  ‚Üí rat (f' q q‚àà Œµ) ‚àà Q)) √ó (Œ£[ f'-cauchy ‚àà (‚àÄ q q‚ààP ‚Üí _) ]
      (‚àÄ q q‚ààP ‚Üí lim (rat ‚àò f' q q‚ààP) (f'-cauchy q q‚ààP)
                ‚â° fst (f (rat q) q‚ààP))))

‚ÑöApprox : (f : ‚Ñù ‚Üí ‚Ñù) ‚Üí Type
‚ÑöApprox f =
   Œ£[ f' ‚àà (‚Ñö ‚Üí ‚Ñö‚Çä ‚Üí ‚Ñö) ]
    Œ£[ f'-cauchy ‚àà (‚àÄ q ‚Üí _) ]
      (‚àÄ q ‚Üí lim (rat ‚àò f' q) (f'-cauchy q)
                ‚â° f (rat q))


‚ÑöApprox‚Ñô'Num : (P Q : ‚Ñô ‚Ñù) (f : ‚àÄ x ‚Üí x ‚àà P ‚Üí Œ£ ‚Ñù (_‚àà Q)) ‚Üí
   ‚àÄ q ‚Üí (q‚ààP : rat q ‚àà P) ‚Üí Type

‚ÑöApprox‚Ñô'Num P Q f q q‚ààP =
     Œ£[ f' ‚àà (‚Ñö‚Çä ‚Üí ‚Ñö) ]
    ((‚àÄ Œµ  ‚Üí rat (f' Œµ) ‚àà Q) √ó (Œ£[ f'-cauchy ‚àà (_) ]
      (lim (rat ‚àò f') (f'-cauchy) ‚â° fst (f (rat q) q‚ààP))))


‚ÑöApprox‚Ñô' : (P Q : ‚Ñô ‚Ñù) (f : ‚àÄ x ‚Üí x ‚àà P ‚Üí Œ£ ‚Ñù (_‚àà Q)) ‚Üí Type
‚ÑöApprox‚Ñô' P Q f =
 ‚àÄ q ‚Üí (q‚ààP : rat q ‚àà P) ‚Üí
   ‚ÑöApprox‚Ñô'Num P Q f q q‚ààP

Iso-‚ÑöApprox‚Ñô'-‚ÑöApprox‚Ñô : (P Q : ‚Ñô ‚Ñù) ‚Üí ‚àÄ f ‚Üí
  Iso (‚ÑöApprox‚Ñô' P Q f) (‚ÑöApprox‚Ñô P Q f)
Iso-‚ÑöApprox‚Ñô'-‚ÑöApprox‚Ñô P Q f .Iso.fun x =
  (Œª q ‚Üí fst ‚àò x q) ,
   (Œª q ‚Üí fst ‚àò snd ‚àò x q) ,
    ((Œª q ‚Üí fst ‚àò snd ‚àò snd ‚àò x q) ,
    (Œª q ‚Üí snd ‚àò snd ‚àò snd ‚àò x q))
Iso-‚ÑöApprox‚Ñô'-‚ÑöApprox‚Ñô P Q f .Iso.inv = _
Iso-‚ÑöApprox‚Ñô'-‚ÑöApprox‚Ñô P Q f .Iso.rightInv _ = refl
Iso-‚ÑöApprox‚Ñô'-‚ÑöApprox‚Ñô P Q f .Iso.leftInv _ = refl


‚ÑöApprox‚Ñô'‚âÉ‚ÑöApprox‚Ñô : (P Q : ‚Ñô ‚Ñù) ‚Üí ‚àÄ f ‚Üí
  ‚ÑöApprox‚Ñô' P Q f ‚âÉ ‚ÑöApprox‚Ñô P Q f
‚ÑöApprox‚Ñô'‚âÉ‚ÑöApprox‚Ñô P Q f =
 isoToEquiv (Iso-‚ÑöApprox‚Ñô'-‚ÑöApprox‚Ñô P Q f)



IsUContinuous‚Ñö‚Ñô : (P : ‚Ñô ‚Ñù) ‚Üí (‚àÄ q ‚Üí rat q ‚àà P ‚Üí ‚Ñù) ‚Üí Type
IsUContinuous‚Ñö‚Ñô P f =
  ‚àÄ (Œµ : ‚Ñö‚Çä) ‚Üí Œ£[ Œ¥ ‚àà ‚Ñö‚Çä ]
     (‚àÄ u v u‚àà v‚àà ‚Üí ‚Ñö.abs (u ‚Ñö.- v) ‚Ñö.< fst Œ¥  ‚Üí f u u‚àà ‚àº[ Œµ ] f v v‚àà)

IsUContinuous‚Ñô : (P : ‚Ñô ‚Ñù) ‚Üí (‚àÄ x ‚Üí x ‚àà P ‚Üí ‚Ñù) ‚Üí Type
IsUContinuous‚Ñô P f =
  ‚àÄ (Œµ : ‚Ñö‚Çä) ‚Üí Œ£[ Œ¥ ‚àà ‚Ñö‚Çä ]
     (‚àÄ u v u‚àà v‚àà ‚Üí u ‚àº[ Œ¥ ] v  ‚Üí f u u‚àà ‚àº[ Œµ ] f v v‚àà)

‚ÑöApprox‚Ñô'' : (P Q : ‚Ñô ‚Ñù) (f : ‚àÄ x ‚Üí x ‚àà P ‚Üí Œ£ ‚Ñù (_‚àà Q)) ‚Üí Type
‚ÑöApprox‚Ñô'' P Q f =
 ‚àÄ x ‚Üí (x‚ààP : rat x ‚àà P) (Œµ : ‚Ñö‚Çä) ‚Üí
    Œ£[ r ‚àà ‚Ñö ] ((rat r ‚àà Q) √ó (rat r ‚àº[ Œµ ] fst (f (rat x) x‚ààP)))

‚ÑöApprox‚Ñô'‚Üí‚ÑöApprox‚Ñô'' : (P Q : ‚Ñô ‚Ñù) ‚Üí ‚àÄ f ‚Üí
  (‚ÑöApprox‚Ñô' P Q f) ‚Üí (‚ÑöApprox‚Ñô'' P Q f)
‚ÑöApprox‚Ñô'‚Üí‚ÑöApprox‚Ñô'' P Q f X x x‚ààP Œµ =
   fst (X x x‚ààP) (/2‚Çä Œµ) , fst (snd (X x x‚ààP)) (/2‚Çä Œµ) ,
     subst (rat (fst (X x x‚ààP) (/2‚Çä Œµ)) ‚àº[ Œµ ]_)
    (snd (snd (snd ( ((X x x‚ààP))) )))
      ((rat-lim _ _ _ (/2‚Çä Œµ) _ (snd (‚Ñö.<‚Üí‚Ñö‚Çä _ _ (‚Ñö.x/2<x Œµ)))
        (refl‚àº _ _)))


‚ÑöApprox‚Ñô‚àò : ‚àÄ P Q R g f
          ‚Üí IsUContinuous‚Ñô Q ((fst ‚àò_) ‚àò g)
          ‚Üí ‚ÑöApprox‚Ñô'' Q R g
          ‚Üí ‚ÑöApprox‚Ñô'' P Q f
          ‚Üí ‚ÑöApprox‚Ñô'' P R (curry (uncurry g ‚àò uncurry f))
‚ÑöApprox‚Ñô‚àò P Q R  g f gC gA fA q q‚àà Œµ =
  let (Œ¥' , Œî) = gC (/2‚Çä Œµ)
      Œ¥ = ‚Ñö.min‚Çä Œ¥' (/2‚Çä Œµ)

      uu' : rat (fst (fA q q‚àà Œ¥)) ‚àà Q
      uu' = (fst (snd (fA q q‚àà Œ¥)))

      zz : rat (fst (gA (fst (fA q q‚àà Œ¥)) uu' Œ¥))
             ‚àº[ /2‚Çä Œµ ‚Ñö‚Çä+ /2‚Çä Œµ ]
              fst (g (fst (f (rat q) q‚àà)) (snd (f (rat q) q‚àà)))
      zz = triangle‚àº
               ((‚àº-monotone‚â§ (‚Ñö.min‚â§' _ _)
                 ((snd (snd (gA (fst (fA q q‚àà Œ¥)) uu' Œ¥))))))

                   (Œî _ _ uu' _ (
                     ‚àº-monotone‚â§ (‚Ñö.min‚â§ _ _)
                       (snd (snd (fA q q‚àà Œ¥)))))

  in fst (gA (fst (fA q q‚àà Œ¥)) uu' Œ¥)
        , fst (snd (gA (fst (fA q q‚àà Œ¥)) uu' Œ¥))
         , subst‚àº (‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst Œµ)) zz

‚â°ContinuousWithPred : ‚àÄ P P' ‚Üí ‚ü® openPred P ‚ü© ‚Üí ‚ü® openPred P' ‚ü© ‚Üí ‚àÄ f g
  ‚Üí IsContinuousWithPred P  f
  ‚Üí IsContinuousWithPred P' g
  ‚Üí (‚àÄ r r‚àà r‚àà' ‚Üí f (rat r) r‚àà  ‚â° g (rat r) r‚àà')
  ‚Üí ‚àÄ u u‚àà u‚àà' ‚Üí f u u‚àà ‚â° g u u‚àà'
‚â°ContinuousWithPred P P' oP oP' f g fC gC e = Elim‚Ñù-Prop.go w
 where
 w : Elim‚Ñù-Prop
       (Œª z ‚Üí (u‚àà : ‚ü® P z ‚ü©) (u‚àà' : ‚ü® P' z ‚ü©) ‚Üí f z u‚àà ‚â° g z u‚àà')
 w .Elim‚Ñù-Prop.ratA = e
 w .Elim‚Ñù-Prop.limA x p R x‚àà x‚àà' = PT.rec2 (isSet‚Ñù _ _)
  (Œª (Œî , PŒî) (Œî' , PŒî') ‚Üí eq‚Ñù _ _ Œª Œµ‚ÇÄ ‚Üí
   let Œµ = Œµ‚ÇÄ
       f' = fC (lim x p) (‚Ñö./2‚Çä Œµ) x‚àà
       g' = gC (lim x p) (‚Ñö./2‚Çä Œµ) x‚àà'
   in PT.rec2
       (isProp‚àº _ _ _)
        (Œª (Œ∏ , Œ∏‚àº) (Œ∑ , Œ∑‚àº) ‚Üí
         let Œ¥ = ‚Ñö./2‚Çä (‚Ñö.min‚Çä (‚Ñö.min‚Çä Œî Œî') (‚Ñö.min‚Çä Œ∏ Œ∑))
             limX‚àºx = sym‚àº _ _ _ (ùï£-lim-self x p Œ¥ Œ¥)
             xŒ¥‚ààP : ‚ü® P (x Œ¥) ‚ü©
             xŒ¥‚ààP = PŒî (x Œ¥)
                     (‚àº-monotone‚â§
                       (((subst (‚Ñö._‚â§ fst Œî)
                        (sym (‚Ñö.Œµ/2+Œµ/2‚â°Œµ
                          (fst ((‚Ñö.min‚Çä
                           (‚Ñö.min‚Çä (Œî) (Œî')) (‚Ñö.min‚Çä Œ∏ Œ∑))))))
                       (‚Ñö.isTrans‚â§ _ _ _ ((‚Ñö.min‚â§
                          (fst (‚Ñö.min‚Çä (Œî) (Œî'))) (fst (‚Ñö.min‚Çä Œ∏ Œ∑)))
                           ) (‚Ñö.min‚â§ (fst Œî) (fst Œî'))))))
                       limX‚àºx)
             xŒ¥‚ààP' : ‚ü® P' (x Œ¥) ‚ü©
             xŒ¥‚ààP' = PŒî' (x Œ¥)
                     (‚àº-monotone‚â§ ((((subst (‚Ñö._‚â§ fst Œî')
                        (sym (‚Ñö.Œµ/2+Œµ/2‚â°Œµ
                          (fst ((‚Ñö.min‚Çä
                           (‚Ñö.min‚Çä (Œî) (Œî')) (‚Ñö.min‚Çä Œ∏ Œ∑))))))
                       (‚Ñö.isTrans‚â§ _ _ _ ((‚Ñö.min‚â§
                          (fst (‚Ñö.min‚Çä (Œî) (Œî'))) (fst (‚Ñö.min‚Çä Œ∏ Œ∑)))
                           ) (‚Ñö.min‚â§' (fst Œî) (fst Œî'))))))) limX‚àºx)
             zF : f (lim x p) x‚àà ‚àº[ ‚Ñö./2‚Çä Œµ ] g (x Œ¥) xŒ¥‚ààP'
             zF = subst (f (lim x p) x‚àà ‚àº[ ‚Ñö./2‚Çä Œµ ]_)
                  (R _ xŒ¥‚ààP xŒ¥‚ààP')
                 (Œ∏‚àº _ _ (‚àº-monotone‚â§
                    ((subst (‚Ñö._‚â§ fst Œ∏)
                        (sym (‚Ñö.Œµ/2+Œµ/2‚â°Œµ
                          (fst ((‚Ñö.min‚Çä
                           (‚Ñö.min‚Çä (Œî) (Œî')) (‚Ñö.min‚Çä Œ∏ Œ∑))))))
                       (‚Ñö.isTrans‚â§ _ _ _ ((‚Ñö.min‚â§'
                          (fst (‚Ñö.min‚Çä (Œî) (Œî'))) (fst (‚Ñö.min‚Çä Œ∏ Œ∑)))
                           ) (‚Ñö.min‚â§ (fst Œ∏) (fst Œ∑)))))
                  (sym‚àº _ _ _ ((ùï£-lim-self x p Œ¥ Œ¥)))))
             zG : g (lim x p) x‚àà'  ‚àº[ ‚Ñö./2‚Çä Œµ ] g (x Œ¥) xŒ¥‚ààP'
             zG = Œ∑‚àº _ _
                   (‚àº-monotone‚â§
                        ((subst (‚Ñö._‚â§ fst Œ∑)
                        (sym (‚Ñö.Œµ/2+Œµ/2‚â°Œµ
                          (fst ((‚Ñö.min‚Çä
                           (‚Ñö.min‚Çä (Œî) (Œî')) (‚Ñö.min‚Çä Œ∏ Œ∑))))))
                       (‚Ñö.isTrans‚â§ _ _ _ ((‚Ñö.min‚â§'
                          (fst (‚Ñö.min‚Çä (Œî) (Œî'))) (fst (‚Ñö.min‚Çä Œ∏ Œ∑)))
                           ) (‚Ñö.min‚â§' (fst Œ∏) (fst Œ∑)))))

                  (sym‚àº _ _ _ ((ùï£-lim-self x p Œ¥ Œ¥))))
             zz = subst‚àº ((‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst Œµ))) (triangle‚àº zF (sym‚àº _ _ _ zG))
         in  zz)
        f' g') (oP (lim x p) x‚àà) (oP' (lim x p) x‚àà')

 w .Elim‚Ñù-Prop.isPropA _ = isPropŒ†2 Œª _ _ ‚Üí isSet‚Ñù _ _




‚â§clamp·µ£ : ‚àÄ L L' x ‚Üí L ‚â§·µ£ L' ‚Üí  L ‚â§·µ£ clamp·µ£ L L' x
‚â§clamp·µ£ L L' x y =
  isTrans‚â§‚â°·µ£ _ _ _ (‚â§max·µ£ L (min·µ£ x L'))
    (cong‚ÇÇ max·µ£ (sym (‚â§‚Üímin·µ£ _ _ y) ‚àô min·µ£Comm _ _) (min·µ£Comm _ _)
     ‚àô‚àô sym (maxDistMin L' L x) ‚àô‚àô
     min·µ£Comm _ _ )


clamp‚â§·µ£ : ‚àÄ L L' x ‚Üí  clamp·µ£ L L' x ‚â§·µ£ L'
clamp‚â§·µ£ L L' x = min‚â§·µ£' _ _
