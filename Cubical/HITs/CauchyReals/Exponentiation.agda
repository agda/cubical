{-# OPTIONS --safe  --lossy-unification #-} --

module Cubical.HITs.CauchyReals.Exponentiation where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Equiv.Properties
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Function
open import Cubical.Foundations.Powerset
open import Cubical.Foundations.Transport

open import Cubical.Functions.Embedding
open import Cubical.Functions.Surjection

open import Cubical.Data.Bool as ùüö hiding (_‚â§_)
open import Cubical.Data.Nat as ‚Ñï hiding (_¬∑_;_+_)
import Cubical.Data.Nat.Mod as ‚Ñï
import Cubical.Data.Nat.Order as ‚Ñï
open import Cubical.Data.Empty as ‚ä•
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Int as ‚Ñ§ using (pos; ‚Ñ§)
import Cubical.Data.Int.Order as ‚Ñ§
open import Cubical.Data.Sigma
open import Cubical.Data.Unit

open import Cubical.HITs.PropositionalTruncation as PT

open import Cubical.HITs.SetQuotients as SQ hiding (_/_)

open import Cubical.Data.NatPlusOne

open import Cubical.Data.Rationals as ‚Ñö using (‚Ñö ; [_/_])
open import Cubical.Data.Rationals.Order as ‚Ñö using
  ( _‚Ñö‚Çä+_ ; 0<_ ; ‚Ñö‚Çä ; _‚Ñö‚Çä¬∑_ ; ‚Ñö‚Çä‚â°)
open import Cubical.Data.Rationals.Order.Properties as ‚Ñö
 using (inv‚Ñö‚Çä;/2‚Çä;/3‚Çä;/4‚Çä;x/2<x;inv‚Ñö;_‚Ñö^‚Åø_;_‚Ñö‚Çä^‚Åø_)


open import Cubical.HITs.CauchyReals.Base
open import Cubical.HITs.CauchyReals.Lems
open import Cubical.HITs.CauchyReals.Closeness
open import Cubical.HITs.CauchyReals.Lipschitz
open import Cubical.HITs.CauchyReals.Order
open import Cubical.HITs.CauchyReals.Continuous
open import Cubical.HITs.CauchyReals.Multiplication
open import Cubical.HITs.CauchyReals.Inverse
open import Cubical.HITs.CauchyReals.Sequence
open import Cubical.HITs.CauchyReals.Bisect
open import Cubical.HITs.CauchyReals.NthRoot



ointerval‚Ñô‚äÜ-max : ‚àÄ n m ‚Üí
           ointerval‚Ñô
           (rat (‚Ñö.- fromNat (suc n)))
           (rat (fromNat (suc n))) ‚äÜ
           ointerval‚Ñô
           (rat (‚Ñö.- fromNat (suc (max n m))))
           (rat (fromNat (suc (max n m))))
ointerval‚Ñô‚äÜ-max n m x (‚â§x , x‚â§) =
    (isTrans‚â§<·µ£ _ _ _
    (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (‚Ñ§.‚Ñï‚â•‚Üínegsuc-‚â§-negsuc _ _ ‚Ñï.left-‚â§-max)))
    ‚â§x)
  , isTrans<‚â§·µ£ _ _ _ x‚â§
       (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _
         (‚Ñï.left-‚â§-max {suc n} {suc m}))))


ointerval‚Ñô‚äÜ-max' : ‚àÄ n m ‚Üí
           ointerval‚Ñô
           (rat (‚Ñö.- fromNat (suc m)))
           (rat (fromNat (suc m))) ‚äÜ
           ointerval‚Ñô
           (rat (‚Ñö.- fromNat (suc (max n m))))
           (rat (fromNat (suc (max n m))))
ointerval‚Ñô‚äÜ-max' n m x (‚â§x , x‚â§) =
  (isTrans‚â§<·µ£ _ _ _
    (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (‚Ñ§.‚Ñï‚â•‚Üínegsuc-‚â§-negsuc _ _ ‚Ñï.right-‚â§-max)))
    ‚â§x)
  , isTrans<‚â§·µ£ _ _ _ x‚â§
       (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _
         (‚Ñï.right-‚â§-max {suc m} {suc n}))))


module Restr‚ÑùIso (a b fa fb : ‚Ñù)
      (isom :
          Iso (Œ£ ‚Ñù (_‚àà ointerval‚Ñô a b))
              (Œ£ ‚Ñù (_‚àà ointerval‚Ñô fa fb))) where

 open Iso isom

 module _ (monotoneFun : ‚àÄ x y ‚Üí fst x ‚â§·µ£ fst y ‚Üí fst (fun x) ‚â§·µ£ fst (fun y))
          (monotoneInv : ‚àÄ x y ‚Üí fst x ‚â§·µ£ fst y ‚Üí fst (inv x) ‚â§·µ£ fst (inv y))
          (a' b' : ‚Ñù) (a'<b' : a' <·µ£ b')
          (a'‚àà : a' ‚àà ointerval‚Ñô a b)
          (b'‚àà : b' ‚àà ointerval‚Ñô a b) where

  fa' = fun (a' , a'‚àà)
  fb' = fun (b' , b'‚àà)

  restrIso : Iso (Œ£ ‚Ñù (_‚àà interval‚Ñô a' b'))
                 (Œ£ ‚Ñù (_‚àà interval‚Ñô (fst fa') (fst fb')))
  restrIso .Iso.fun (x , ‚â§x , x‚â§) =
    let X = (x ,
             (isTrans<‚â§·µ£ _ _ _ (fst a'‚àà) ‚â§x)
               , isTrans‚â§<·µ£ _ _ _ x‚â§ (snd b'‚àà))
        (fx , fx‚àà) = fun X
    in fx , monotoneFun (a' , a'‚àà) X ‚â§x
          , monotoneFun X (b' , b'‚àà) x‚â§
  restrIso .Iso.inv (x , ‚â§x , x‚â§) =
    let X = (x ,
             (isTrans<‚â§·µ£ _ _ _ (fst (snd fa')) ‚â§x)
               , isTrans‚â§<·µ£ _ _ _ x‚â§ (snd (snd fb')))
        (fx , fx‚àà) = inv X
    in fx , isTrans‚â°‚â§·µ£ _ _ _ (sym (cong fst (leftInv (a' , a'‚àà))))
            (monotoneInv fa' X ‚â§x)
          , isTrans‚â§‚â°·µ£ _ _ _ (monotoneInv X fb' x‚â§)
            (cong fst (leftInv (b' , b'‚àà)))
  restrIso .Iso.rightInv _ =
   Œ£‚â°Prop (‚àà-isProp (interval‚Ñô _ _))
     (cong fst
        ((cong fun (Œ£‚â°Prop (‚àà-isProp (ointerval‚Ñô _ _))
          (refl))) ‚àô rightInv _))

  restrIso .Iso.leftInv _ =
   Œ£‚â°Prop (‚àà-isProp (interval‚Ñô _ _))
     (cong fst
        ((cong inv (Œ£‚â°Prop (‚àà-isProp (ointerval‚Ñô _ _))
          (refl))) ‚àô leftInv _))


module EquivFromRestr
     (f : ‚Ñù ‚Üí ‚Ñù)

     (f‚àà‚Çô : ‚àÄ n x ‚Üí (x ‚àà (ointerval‚Ñô
                      (rat (‚Ñö.- fromNat (suc n)))
                      (rat (fromNat (suc n))))) ‚Üí
                       f x ‚àà (ointerval‚Ñô
                      (f (rat (‚Ñö.- fromNat (suc n))))
                      (f (rat (fromNat (suc n))))))
     (equiv-restr : ‚àÄ n ‚Üí
       isEquiv {A = Œ£ ‚Ñù (_‚àà (ointerval‚Ñô
                      (rat (‚Ñö.- fromNat (suc n)))
                      (rat (fromNat (suc n)))))}
               {B = Œ£ ‚Ñù (_‚àà (ointerval‚Ñô
                      (f (rat (‚Ñö.- fromNat (suc n))))
                      (f (rat (fromNat (suc n))))))}
                Œª (x , x‚àà) ‚Üí f x , f‚àà‚Çô n x x‚àà) where

 clamp' : ‚àÄ x ‚Üí ‚àÉ[ n ‚àà ‚Ñï ] (x ‚àà (ointerval‚Ñô
                  ((rat (‚Ñö.- fromNat (suc n))))
                  ((rat (fromNat (suc n))))))
 clamp' x =
   PT.map (Œª (1+ n , X) ‚Üí
        n
     , isTrans<‚â°·µ£ _ _ _
           (isTrans‚â°<·µ£ _ _ _ (sym (-·µ£-rat  _)) (-·µ£<·µ£ _ _ (isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _)
           (isTrans‚â°<·µ£ _ _ _ (sym (-abs·µ£ _)) X))))

            (-·µ£Invol x)
     , isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _) X)
     (getClamps x)

 B‚Ñô : ‚Ñô ‚Ñù
 B‚Ñô x = (‚àÉ[ n ‚àà ‚Ñï ] (x ‚àà (ointerval‚Ñô
                      (f (rat (‚Ñö.- fromNat (suc n))))
                      (f (rat (fromNat (suc n))))))) , squash‚ÇÅ

 f' : ‚Ñù ‚Üí Œ£ ‚Ñù (_‚àà B‚Ñô)
 f' x = f x , PT.map (map-snd (Œª {n} ‚Üí f‚àà‚Çô n x)) (clamp' x)

 f-inj : ‚àÄ w x ‚Üí f w ‚â° f x ‚Üí w ‚â° x
 f-inj w x =
   PT.rec2 (isProp‚Üí (isSet‚Ñù _ _))
     (Œª (n , N) (m , M) ‚Üí
      Œª fw=fx ‚Üí
         cong fst (invEq (congEquiv
       {x = w , ointerval‚Ñô‚äÜ-max n m w N}
       {y = x , ointerval‚Ñô‚äÜ-max' n m x M} (_ , equiv-restr (‚Ñï.max n m)))
         (Œ£‚â°Prop (‚àà-isProp _) fw=fx)))
    (clamp' w) (clamp' x)

 isEmbedding-f' : isEmbedding f'
 isEmbedding-f' w x =
  snd (propBiimpl‚ÜíEquiv (isSet‚Ñù _ _)
      ((isSetŒ£ isSet‚Ñù (isProp‚ÜíisSet ‚àò ‚àà-isProp B‚Ñô)) _ _)
    (cong f')
    (f-inj w x ‚àò cong fst))

 isSurjection-f' : isSurjection f'
 isSurjection-f' = Œª (x , x‚àà) ‚Üí
   PT.map (Œª (n , N) ‚Üí
    let (y , y‚àà) = invEq (_ , equiv-restr n) (_ , N)
    in y , Œ£‚â°Prop (‚àà-isProp _) (cong fst (secEq (_ , equiv-restr n) (_ , N))))
    x‚àà

 equiv-fromRestr : isEquiv f'
 equiv-fromRestr = isEmbedding√óisSurjection‚ÜíisEquiv
  (isEmbedding-f' , isSurjection-f')


‚ÑöApprox‚Ñô''‚Üí‚ÑöApprox‚Ñô' : ‚àÄ (P Q : ‚Ñô ‚Ñù) f  ‚Üí
  (‚ÑöApprox‚Ñô'' P Q f) ‚Üí (‚ÑöApprox‚Ñô' P Q f)
‚ÑöApprox‚Ñô''‚Üí‚ÑöApprox‚Ñô' P Q f X q q‚ààP =
  fst ‚àò X q q‚ààP ‚àò /2‚Çä
  , fst ‚àò snd ‚àò X q q‚ààP ‚àò /2‚Çä , zz ,

    eq‚Ñù _ _ Œª Œµ ‚Üí
       let z = triangle‚àº {Œµ = (/2‚Çä Œµ ‚Ñö‚Çä+ /2‚Çä (/2‚Çä Œµ)) ‚Ñö‚Çä+ (/2‚Çä (/2‚Çä (/2‚Çä Œµ)))}
                    (lim-rat (rat ‚àò fst ‚àò X q q‚ààP ‚àò /2‚Çä) _ _
                      (/2‚Çä (/2‚Çä Œµ))
                      _ (subst 0<_
                         (sym (ùêê'.plusMinus _ _)
                            ‚àô cong (‚Ñö._- fst (/2‚Çä (/2‚Çä Œµ))) (
                               sym (‚Ñö.+Assoc _ _ _)
                              ‚àô‚àô cong (fst (/2‚Çä Œµ) ‚Ñö.+_) (‚Ñö.+Comm _ _)
                               ‚àô‚àô ‚Ñö.+Assoc _ _ _) )
                         (snd ((/2‚Çä Œµ) ‚Ñö‚Çä+ (/2‚Çä (/2‚Çä (/2‚Çä Œµ))))  )) (refl‚àº _ _))

                  (snd (snd (X q q‚ààP (/2‚Çä (/2‚Çä (/2‚Çä Œµ))))))
       in subst‚àº (sym (‚Ñö.+Assoc _ _ _)
               ‚àô‚àô cong ((fst (/2‚Çä Œµ) ‚Ñö.+ fst (/2‚Çä (/2‚Çä Œµ))) ‚Ñö.+_)
                     (‚Ñö.Œµ/2+Œµ/2‚â°Œµ _)
               ‚àô‚àô (sym (‚Ñö.+Assoc _ _ _)
                ‚àô‚àô cong (fst (/2‚Çä Œµ) ‚Ñö.+_) (‚Ñö.Œµ/2+Œµ/2‚â°Œµ _)
                ‚àô‚àô ‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst Œµ))) z
 where
 zz : (Œ¥ Œµ : ‚Ñö‚Çä) ‚Üí
      rat (fst (X q q‚ààP (/2‚Çä Œ¥))) ‚àº[ Œ¥ ‚Ñö‚Çä+ Œµ ]
      rat (fst (X q q‚ààP (/2‚Çä Œµ)))
 zz Œ¥ Œµ = ‚àº-monotone< (
       subst (‚Ñö._< fst (Œ¥ ‚Ñö‚Çä+ Œµ)) (‚Ñö.¬∑DistR+ _ _ _) (x/2<x (Œ¥ ‚Ñö‚Çä+ Œµ)))
   (triangle‚àº (snd (snd ((X q q‚ààP) (/2‚Çä Œ¥)))) --((snd ((X q q‚ààP) (/2‚Çä Œ¥))))
     (sym‚àº _ _ _ (snd ((snd ((X q q‚ààP) (/2‚Çä Œµ))))) --((snd ((X q q‚ààP) (/2‚Çä Œµ))))
     ))




clamp-abs : ‚àÄ L L' x ‚Üí L ‚Ñö.‚â§ L' ‚Üí
     ‚Ñö.abs (‚Ñö.clamp L L' x) ‚Ñö.‚â§ ‚Ñö.max (‚Ñö.abs L) (‚Ñö.abs L')
clamp-abs L L' x L‚â§L' = ‚äé.rec
  (Œª 0‚â§ ‚Üí subst (‚Ñö._‚â§ ‚Ñö.max (‚Ñö.abs L) (‚Ñö.abs L'))
     (sym (‚Ñö.absNonNeg _ 0‚â§))
       (‚Ñö.isTrans‚â§ _ _ _ (‚Ñö.clamp‚â§ L L' x)
        (‚Ñö.isTrans‚â§ _ _ _
          (‚Ñö.‚â§abs _) (‚Ñö.‚â§max' _ _))))
  (Œª <0 ‚Üí
     subst (‚Ñö._‚â§ ‚Ñö.max (‚Ñö.abs L) (‚Ñö.abs L'))
       (sym (‚Ñö.absNeg _ <0))
       (‚Ñö.isTrans‚â§ _ _ _
         (‚Ñö.isTrans‚â§ _ _ _
          (‚Ñö.minus-‚â§ _ _ (‚Ñö.‚â§clamp L L' x L‚â§L'))
          (subst (‚Ñö.- L ‚Ñö.‚â§_) (sym (‚Ñö.abs'‚â°abs L)) (‚Ñö.-‚â§abs' L)))
         (‚Ñö.‚â§max _ _)))
  (‚Ñö.Dichotomy‚Ñö 0 (‚Ñö.clamp L L' x))

module _ (f : ‚Ñö ‚Üí ‚Ñù) (B : ‚Ñï ‚Üí ‚Ñö‚Çä)  where

 boundedLipschitz : Type
 boundedLipschitz =
   ‚àÄ n x y
       ‚Üí ‚Ñö.abs x ‚Ñö.‚â§ fromNat (suc n)
       ‚Üí ‚Ñö.abs y ‚Ñö.‚â§ fromNat (suc n)
     ‚Üí  abs·µ£ (f y -·µ£ f x) ‚â§·µ£ rat (fst (B n) ‚Ñö.¬∑ ‚Ñö.abs (y ‚Ñö.- x))

 module BoundedLipsch (bl : boundedLipschitz) where


  fl‚Çô : ‚àÄ n ‚Üí Œ£ (Œ£ (‚Ñù ‚Üí ‚Ñù) (Lipschitz-‚Ñù‚Üí‚Ñù (B n))) (IsContinuous ‚àò fst)
  fl‚Çô n = fl , uncurry (Lipschitz‚ÜíIsContinuous _) fl
   where
   fl = fromLipschitz (B n)
     (f ‚àò ‚Ñö.clamp (fromNeg (suc n)) (fromNat (suc n)) ,
         Lipschitz-‚Ñö‚Üí‚Ñù'‚ÜíLipschitz-‚Ñö‚Üí‚Ñù _ _
           Œª q r ‚Üí isTrans‚â§·µ£ _ _ _ (bl n
             (‚Ñö.clamp (fromNeg (suc n)) (fromNat (suc n)) r)
             (‚Ñö.clamp (fromNeg (suc n)) (fromNat (suc n)) q)
              (‚Ñö.isTrans‚â§ _ _ _ (clamp-abs _ _ _
                (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ ‚Ñ§.negsuc<pos))
                ((‚Ñö.‚â°Weaken‚â§ _ _ (((‚Ñö.‚â§‚Üímax (‚Ñö.abs (fromNeg (suc n)))
                    (‚Ñö.abs (fromNat (suc n))
                     ) (‚Ñö.‚â°Weaken‚â§ _ _
                        ((‚Ñö.absNeg _
                         (‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _ ‚Ñ§.negsuc<-zero)
                          ) ‚àô sym (‚Ñö.absPos _ (‚Ñö.0<sucN _))))))
                      ‚àô ‚Ñö.absPos _ (‚Ñö.0<sucN _)))) )
              (‚Ñö.isTrans‚â§ _ _ _ (clamp-abs _ _ _
                (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ ‚Ñ§.negsuc<pos))
                ((‚Ñö.‚â°Weaken‚â§ _ _ (((‚Ñö.‚â§‚Üímax (‚Ñö.abs (fromNeg (suc n)))
                    (‚Ñö.abs (fromNat (suc n))
                     ) (‚Ñö.‚â°Weaken‚â§ _ _
                        ((‚Ñö.absNeg _
                         (‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _ ‚Ñ§.negsuc<-zero)
                          ) ‚àô sym (‚Ñö.absPos _ (‚Ñö.0<sucN _))))))
                      ‚àô ‚Ñö.absPos _ (‚Ñö.0<sucN _)))) ))
              (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.‚â§-o¬∑ _ _ _ (‚Ñö.0‚â§‚Ñö‚Çä (B n))
                (‚Ñö.clampDist _ _ _ _))))


  Seq‚äÜ‚ÜíPower : Seq‚äÜ‚Üí ‚Ñù Seq‚äÜ-abs<N
  Seq‚äÜ‚ÜíPower .Seq‚äÜ‚Üí.fun x n _ = fst (fst (fl‚Çô n)) x
  Seq‚äÜ‚ÜíPower .Seq‚äÜ‚Üí.fun‚äÜ x n m x‚àà@(<x , x<) x'‚àà@(<x' , x'<) n<m =
    (cong (fst (fst (fl‚Çô n))) (‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â° _ _ _
      (<·µ£Weaken‚â§·µ£ _ _ <x , <·µ£Weaken‚â§·µ£ _ _ x<)) ‚àô‚àô
    ‚â°Continuous _ _
       (IsContinuous‚àò _ _ (snd (fl‚Çô n))
         (IsContinuousClamp (fromNeg (suc n)) (fromNat (suc n)) ))
       (IsContinuous‚àò _ _ (snd (fl‚Çô m))
         (IsContinuousClamp (fromNeg (suc n)) (fromNat (suc n)) ))
        (Œª x ‚Üí
         cong f
          (sym (clamp-contained-agree _ _ _ _ _
          (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (‚Ñ§.‚Ñï‚â•‚Üínegsuc-‚â§-negsuc _ _ (‚Ñï.<-weaken n<m)))
           (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _ (‚Ñï.‚â§-suc n<m)))
           (clam‚àà‚Ñöinterval‚Ñô _ _ (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ ‚Ñ§.negsuc<pos) _))))
             x
    ‚àô‚àô cong (fst (fst (fl‚Çô m))) (
       sym (‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â° _ _ _
      (<·µ£Weaken‚â§·µ£ _ _ <x , <·µ£Weaken‚â§·µ£ _ _ x<))))


  open Seq‚äÜ‚Üí.FromIntersection Seq‚äÜ‚ÜíPower
    isSet‚Ñù (Œª _ ‚Üí Unit , isPropUnit) Seq‚äÜ-abs<N-s‚äá-‚ä§Pred public

  ùíá : ‚Ñù ‚Üí ‚Ñù
  ùíá x = ‚à©$ x _



  ùíá-rat : ‚àÄ q ‚Üí ùíá (rat q) ‚â° f q
  ùíá-rat q = PT.rec (isSet‚Ñù _ _) (Œª y ‚Üí snd (snd y) ‚àô cong f
        (sym (‚àà‚Ñöinterval‚Ñô‚Üíclam‚â° _ _ _
          (‚ààinterval‚Ñô‚Üí‚àà‚Ñöinterval‚Ñô _ _ _
             (<·µ£Weaken‚â§·µ£ _ _ (fst (fst (snd y))) ,
              <·µ£Weaken‚â§·µ£ _ _ (snd (fst (snd y))))))))
    (‚à©$-lem (rat q) _)

  ùíá-cont : IsContinuous ùíá
  ùíá-cont = contDropPred ùíá (‚à©$-cont _ _ (Œª _ ‚Üí openIinterval‚Ñô _ _)
     _ _ Œª n ‚Üí AsContinuousWithPred (Œª _ ‚Üí _ ,
         isProp√ó _ _)
                 (fst (fst (fl‚Çô n)))
                  (snd (fl‚Çô n)))
  module Equivùíá‚Çä (f‚àà : ‚àÄ n x x‚àà ‚Üí fst (fst (fl‚Çô n)) x ‚àà
                   ointerval‚Ñô (ùíá (fromNeg (suc n)))
                             (ùíá (fromNat (suc n))))
           (isEquivF‚Çô : ‚àÄ n ‚Üí
           isEquiv
              {A = Œ£ _ (_‚àà ointerval‚Ñô (fromNeg (suc n)) (fromNat (suc n)))}
              {B = Œ£ _ (_‚àà ointerval‚Ñô (ùíá (fromNeg (suc n)))
                                      (ùíá (fromNat (suc n))))}
             Œª (x , x‚àà) ‚Üí
                ((fst (fst (fl‚Çô n))) x) ,
                  f‚àà n x x‚àà)
           (exN' : ‚àÄ b ‚Üí 0 <·µ£ b ‚Üí ‚àÉ[ n ‚àà ‚Ñï ]
                  b ‚àà
                   ointerval‚Ñô (ùíá (fromNeg (suc n)))
                             (ùíá (fromNat (suc n))))
           (ùíá-pos : ‚àÄ x ‚Üí 0 <·µ£ ùíá x)
      where

   ùíá‚Çä : ‚Ñù ‚Üí ‚Ñù‚Çä
   ùíá‚Çä x = ùíá x , ùíá-pos x

   isEmbedding-ùíá : isEmbedding {A = ‚Ñù} {B = ‚Ñù‚Çä} ùíá‚Çä
   isEmbedding-ùíá w x =
    snd
     (propBiimpl‚ÜíEquiv (isSet‚Ñù _ _) (isSet‚Ñù‚Çä _ _)
      (cong ùíá‚Çä)
      ((‚à©$-elimProp2 w _ x _ {Œª u v ‚Üí u ‚â° v ‚Üí w ‚â° x}
       (Œª _ _ ‚Üí isProp‚Üí (isSet‚Ñù _ _))
        Œª n w‚àà x‚àà p ‚Üí cong fst
          (invEq (congEquiv {x = _ , w‚àà} {y = _ , x‚àà}
            (_ , isEquivF‚Çô n))
            (Œ£‚â°Prop (‚àà-isProp
             (ointerval‚Ñô
               (ùíá (fromNeg (suc n)))
               (ùíá (fromNat (suc n))))) p)) ) ‚àò cong fst)
               )

   isSurjection-ùíá : isSurjection ùíá‚Çä
   isSurjection-ùíá (b , b‚àà') =
     PT.map (Œª (n , b‚àà) ‚Üí
       let (y , y‚àà) = invEq (_ , isEquivF‚Çô n) (b , b‚àà)
       in y , ‚Ñù‚Çä‚â°
            (‚à©$-‚àà‚Çô _ _ n y‚àà
           ‚àô cong fst (secEq (_ , isEquivF‚Çô n) (b , b‚àà))))
       (exN' b b‚àà')

   ùíá‚Çä-equiv : isEquiv ùíá‚Çä
   ùíá‚Çä-equiv = isEmbedding√óisSurjection‚ÜíisEquiv
     (isEmbedding-ùíá , isSurjection-ùíá)

  lipF‚Çô : ‚àÄ n ‚Üí Lipschitz-‚Ñù‚Üí‚Ñù‚Ñô (B n)
       (interval‚Ñô (rat (‚Ñö.- fromNat (suc n))) (rat (fromNat (suc n))))
       (Œª x _ ‚Üí fst (fst (fl‚Çô n)) x)
  lipF‚Çô n u _ v _ = snd (fst (fl‚Çô n)) u v

  module _ (K : ‚Ñï ‚Üí ‚Ñö‚Çä) where
   boundedInvLipschitz : Type
   boundedInvLipschitz =
     ‚àÄ n x y
         ‚Üí ‚Ñö.abs x ‚Ñö.‚â§ fromNat (suc n)
         ‚Üí ‚Ñö.abs y ‚Ñö.‚â§ fromNat (suc n)
       ‚Üí  rat (‚Ñö.abs (y ‚Ñö.- x)) ‚â§·µ£ rat (fst (K n)) ¬∑·µ£ abs·µ£ (f y -·µ£ f x)

   module BoundedInvLipsch (ibl : boundedInvLipschitz)
              -- (ùíá-pos : ‚àÄ x ‚Üí 0 <·µ£ ùíá x)
              -- (aprox : ‚ÑöApprox‚Ñô' ‚ä§Pred (Œª x ‚Üí (rat [ pos 0 / 1+ 0 ] <·µ£ x) , squash‚ÇÅ)
              --     Œª x _ ‚Üí ùíá x , ùíá-pos x)
              where
    invLipF‚Çô : ‚àÄ n ‚Üí Invlipschitz-‚Ñù‚Üí‚Ñù‚Ñô (K n)
      (interval‚Ñô (rat (‚Ñö.- fromNat (suc n))) (rat (fromNat (suc n))))
      (Œª x _ ‚Üí fst (fst (fl‚Çô n)) x)
    invLipF‚Çô n u u‚àà v v‚àà Œµ X =
     let X' = fst (‚àº‚âÉabs<Œµ _ _ _) X


     in invEq (‚àº‚âÉabs<Œµ _ _ _)
          (isTrans‚â§<·µ£ _ _ _
            bil-clamp
            (isTrans<‚â°·µ£ _ _ _
              (<·µ£-o¬∑·µ£ _ _ (‚Ñö‚Çä‚Üí‚Ñù‚Çä (K n)) X')
              (sym (rat¬∑·µ£rat _ _))))

        where

         u' = clamp·µ£ (rat (‚Ñö.- [ pos (suc n) / 1+ 0 ]))
                (rat [ pos (suc n) / 1+ 0 ]) u
         v' = clamp·µ£ (rat (‚Ñö.- [ pos (suc n) / 1+ 0 ]))
                (rat [ pos (suc n) / 1+ 0 ]) v

         opaque
          unfolding _+·µ£_
          bil-clamp : abs·µ£ (u +·µ£ -·µ£ v) ‚â§·µ£
                       fst (‚Ñö‚Çä‚Üí‚Ñù‚Çä (K n)) ¬∑·µ£
                       abs·µ£ (fst (fst (fl‚Çô n)) u +·µ£ -·µ£ fst (fst (fl‚Çô n)) v)
          bil-clamp =
            subst2 {x = u'} {z = v'} (Œª u v ‚Üí abs·µ£ (u +·µ£ -·µ£ v) ‚â§·µ£
               fst (‚Ñö‚Çä‚Üí‚Ñù‚Çä (K n)) ¬∑·µ£
               abs·µ£ (fst (fst (fl‚Çô n)) u +·µ£ -·µ£ fst (fst (fl‚Çô n)) v))
               (sym (‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â° (rat (‚Ñö.- fromNat (suc n))) (rat (fromNat (suc n)))
                   u ((fst u‚àà) , snd u‚àà)))
               (sym (‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â° (rat (‚Ñö.- fromNat (suc n))) (rat (fromNat (suc n)))
                   v (fst v‚àà , snd v‚àà)))
               (‚â§Cont‚ÇÇ {Œª u v ‚Üí
                         abs·µ£ (clamp·µ£ (rat (‚Ñö.- [ pos (suc n) / 1+ 0 ]))
                 (rat [ pos (suc n) / 1+ 0 ]) u -·µ£
                           clamp·µ£ (rat (‚Ñö.- [ pos (suc n) / 1+ 0 ]))
                 (rat [ pos (suc n) / 1+ 0 ]) v)}
                       {Œª u v ‚Üí
                         fst (‚Ñö‚Çä‚Üí‚Ñù‚Çä (K n)) ¬∑·µ£
                       abs·µ£ (fst (fst (fl‚Çô n)) (clamp·µ£ (rat (‚Ñö.- [ pos (suc n) / 1+ 0 ]))
                 (rat [ pos (suc n) / 1+ 0 ]) u)
                          -·µ£ fst (fst (fl‚Çô n)) (clamp·µ£ (rat (‚Ñö.- [ pos (suc n) / 1+ 0 ]))
                 (rat [ pos (suc n) / 1+ 0 ]) v))}
                  (cont‚àò‚ÇÇ IsContinuousAbs·µ£
                      (cont‚ÇÇ‚àò (contNE‚ÇÇ sumR)
                        (IsContinuousClamp (fromNeg (suc n)) (fromNat (suc n)) )
                        (IsContinuous‚àò _ _ IsContinuous-·µ£
                           (IsContinuousClamp (fromNeg (suc n)) (fromNat (suc n))))))
                  (cont‚àò‚ÇÇ (IsContinuous¬∑·µ£L _)
                     (cont‚àò‚ÇÇ IsContinuousAbs·µ£
                        (cont‚ÇÇ‚àò (contNE‚ÇÇ sumR)
                            (IsContinuous‚àò _ _
                              (snd (fl‚Çô n))
                             (IsContinuousClamp (fromNeg (suc n)) (fromNat (suc n))))
                            (IsContinuous‚àò _ _ IsContinuous-·µ£
                              (IsContinuous‚àò _ _
                              (snd (fl‚Çô n))
                             (IsContinuousClamp (fromNeg (suc n)) (fromNat (suc n))))))))
                    (Œª u v ‚Üí
                        subst2 _‚â§·µ£_
                            (sym (abs·µ£-rat _) ‚àô cong abs·µ£ (sym (-·µ£-rat‚ÇÇ _ _)))
                            (cong‚ÇÇ (Œª fu fv ‚Üí rat (fst (K n)) ¬∑·µ£
                              abs·µ£ (fu -·µ£ fv))
                               (cong f (‚àà‚Ñöinterval‚Ñô‚Üíclam‚â° _ _ _
                                (clam‚àà‚Ñöinterval‚Ñô _ _ (‚Ñö.neg‚â§pos _ _) _))
                                ‚àô cong {x =
                                rat (‚Ñö.clamp ((‚Ñö.- [ pos (suc n) / 1+ 0 ]))
                                     ([ pos (suc n) / 1+ 0 ]) u) }
                                       (fst (fst (fl‚Çô n))) refl)
                               (cong f (‚àà‚Ñöinterval‚Ñô‚Üíclam‚â° _ _ _
                                (clam‚àà‚Ñöinterval‚Ñô _ _ (‚Ñö.neg‚â§pos _ _) _))
                                 ‚àô cong {x =
                                rat (‚Ñö.clamp ((‚Ñö.- [ pos (suc n) / 1+ 0 ]))
                                     ([ pos (suc n) / 1+ 0 ]) v) }
                                       (fst (fst (fl‚Çô n))) refl))
                           (ibl n
                           (‚Ñö.clamp ((‚Ñö.- [ pos (suc n) / 1+ 0 ]))
                               ([ pos (suc n) / 1+ 0 ]) (v))
                           (‚Ñö.clamp ((‚Ñö.- [ pos (suc n) / 1+ 0 ]))
                               ([ pos (suc n) / 1+ 0 ]) (u))
                               (‚Ñö.absFrom‚â§√ó‚â§ _ _ (‚Ñö.‚â§clamp _ _ _ (‚Ñö.neg‚â§pos _ _))
                                  (‚Ñö.clamp‚â§ (‚Ñö.- [ pos (suc n) / 1+ 0 ]) _ _))
                               (‚Ñö.absFrom‚â§√ó‚â§ _ _ (‚Ñö.‚â§clamp _ _ _ (‚Ñö.neg‚â§pos _ _))
                                  (‚Ñö.clamp‚â§ (‚Ñö.- [ pos (suc n) / 1+ 0 ]) _ _))) )
                    u v)


boundedLipsch-coh : (f : ‚Ñö ‚Üí ‚Ñù) (B B' : ‚Ñï ‚Üí ‚Ñö‚Çä)
    (bl : boundedLipschitz f B)
    (bl' : boundedLipschitz f B')
    ‚Üí ‚àÄ x ‚Üí  BoundedLipsch.ùíá f B bl x
           ‚â° BoundedLipsch.ùíá f B' bl' x
boundedLipsch-coh f B B' bl bl' =
                  ‚â°Continuous _ _
                   (BoundedLipsch.ùíá-cont f B bl)
                   (BoundedLipsch.ùíá-cont f B' bl')
                    Œª r¬†‚Üí
                      BoundedLipsch.ùíá-rat f B bl r ‚àô
                        sym (BoundedLipsch.ùíá-rat f B' bl' r)


_‚Çä^‚Åø_ : ‚Ñù‚Çä ‚Üí ‚Ñï ‚Üí ‚Ñù‚Çä
(x , 0<x) ‚Çä^‚Åø n  = (x ^‚Åø n) , 0<x^‚Åø x n 0<x


IsContinuous‚Çä^‚Åø : ‚àÄ n ‚Üí IsContinuousWithPred
         (Œª x ‚Üí _ , isProp<·µ£ _ _)
         Œª x 0<x ‚Üí  fst ((x , 0<x) ‚Çä^‚Åø n)
IsContinuous‚Çä^‚Åø zero = AsContinuousWithPred _ _
 (IsContinuousConst 1)
IsContinuous‚Çä^‚Åø (suc n) =
 cont‚ÇÇ¬∑·µ£WP _ _ _
   (IsContinuous‚Çä^‚Åø n) (AsContinuousWithPred _ _
  (IsContinuousId))


^‚Ñï-+ : ‚àÄ x a b ‚Üí ((x ‚Çä^‚Åø a) ‚Çä¬∑·µ£ (x ‚Çä^‚Åø b)) ‚â° (x ‚Çä^‚Åø (a ‚Ñï.+ b))
^‚Ñï-+ x zero b = ‚Ñù‚Çä‚â° (¬∑IdL _)
^‚Ñï-+ x (suc a) b =
   ‚Ñù‚Çä‚â° ((sym $ ¬∑·µ£Assoc _ _ _)
        ‚àô‚àô cong (fst (x ‚Çä^‚Åø a) ¬∑·µ£_) (¬∑·µ£Comm _ _)
        ‚àô‚àô ¬∑·µ£Assoc _ _ _)
  ‚àô cong (_‚Çä¬∑·µ£ x) (^‚Ñï-+ x a b)

_^‚Ñ§_ : ‚Ñù‚Çä ‚Üí ‚Ñ§ ‚Üí ‚Ñù‚Çä
x ^‚Ñ§ pos n = x ‚Çä^‚Åø n
x ^‚Ñ§ ‚Ñ§.negsuc n = inv‚Ñù‚Çä (x ‚Çä^‚Åø (suc n))


_‚Ñö^‚Ñ§_ : ‚Ñö‚Çä ‚Üí ‚Ñ§ ‚Üí ‚Ñö‚Çä
x ‚Ñö^‚Ñ§ pos n = _ , ‚Ñö.0<‚Ñö^‚Åø (fst x) (snd x) n
x ‚Ñö^‚Ñ§ ‚Ñ§.negsuc n = inv‚Ñö‚Çä (_ , ‚Ñö.0<‚Ñö^‚Åø (fst x) (snd x) (suc n))




^‚Ñ§-rat : ‚àÄ q n ‚Üí ((‚Ñö‚Çä‚Üí‚Ñù‚Çä q) ^‚Ñ§ n) ‚â° ‚Ñö‚Çä‚Üí‚Ñù‚Çä (q ‚Ñö^‚Ñ§ n)
^‚Ñ§-rat q (pos n) = ‚Ñù‚Çä‚â° (^‚Åø-‚Ñö^‚Åø _ _)
^‚Ñ§-rat q (‚Ñ§.negsuc n) =
  ‚Ñù‚Çä‚â° (  fst (‚Ñö‚Çä‚Üí‚Ñù‚Çä q ^‚Ñ§ ‚Ñ§.negsuc n)
      ‚â°‚ü® cong (fst ‚àò inv‚Ñù‚Çä) (‚Ñù‚Çä‚â° (^‚Åø-‚Ñö^‚Åø _ _)) ‚ü©
         fst (inv‚Ñù‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä (_ , ‚Ñö.0<‚Ñö^‚Åø (fst q) (snd q) (suc n))))
      ‚â°‚ü® inv‚Ñù'-rat _ _
        (snd ((‚Ñö‚Çä‚Üí‚Ñù‚Çä ((q .fst ‚Ñö^‚Åø suc n) ,
          ‚Ñö.0<‚Ñö^‚Åø (fst q) (snd q) (suc n))))) ‚ü© _
      ‚àé)

^‚Ñ§-‚ÑöApprox‚Ñô'' : ‚àÄ n ‚Üí ‚ÑöApprox‚Ñô''
      (Œª x ‚Üí (rat [ pos 0 / 1+ 0 ] <·µ£ x) , isProp<·µ£ _ _)
      (Œª x ‚Üí (rat [ pos 0 / 1+ 0 ] <·µ£ x) , isProp<·µ£ _ _)
      (curry (Œª p ‚Üí ((p .fst , p .snd) ^‚Ñ§ n)))
^‚Ñ§-‚ÑöApprox‚Ñô'' n x x‚ààP Œµ =
  fst (q‚Çä ‚Ñö^‚Ñ§ n) , snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä (q‚Çä ‚Ñö^‚Ñ§ n)) ,
    ‚â°‚Üí‚àº (cong fst (sym (^‚Ñ§-rat q‚Çä n)) ‚àô
         cong (curry (Œª p ‚Üí (p ^‚Ñ§ n) .fst) (rat x))
             (isProp<·µ£ _ _ _ _))

 where
  q‚Çä = (x , ‚Ñö.<‚Üí0< _ (<·µ£‚Üí<‚Ñö _ _ x‚ààP))

IsContinuous^‚Ñ§ : ‚àÄ n ‚Üí IsContinuousWithPred
         (Œª x ‚Üí _ , isProp<·µ£ _ _)
         Œª x 0<x ‚Üí  fst ((x , 0<x) ^‚Ñ§ n)
IsContinuous^‚Ñ§ (pos n) = IsContinuous‚Çä^‚Åø n
IsContinuous^‚Ñ§ (‚Ñ§.negsuc n) =
 IsContinuousWP‚àò _ _ _ _
   _ (snd inv‚Ñù') (IsContinuous‚Çä^‚Åø (suc n))


-- TODO : more direct!! (inv‚Ñù‚Çä is more basic than inv‚Ñù)

‚Çä^‚Åø-inv‚Ñù‚Çä : ‚àÄ n x  ‚Üí
            ((inv‚Ñù‚Çä x) ‚Çä^‚Åø n) ‚â° (inv‚Ñù‚Çä (x ‚Çä^‚Åø n))
‚Çä^‚Åø-inv‚Ñù‚Çä n x =
    ‚Ñù‚Çä‚â° (cong (_^‚Åø n) (inv‚Ñù‚Çä‚â°inv‚Ñù _ (inl (snd x))) ‚àô‚àô
       ^‚Åø-inv‚Ñù _ _ _ _
       ‚àô‚àô sym (inv‚Ñù‚Çä‚â°inv‚Ñù _ (inl (snd (x ‚Çä^‚Åø n)))) )

1‚Çä^‚Åø‚â°1 : ‚àÄ k ‚Üí 1 ‚Çä^‚Åø k ‚â° 1
1‚Çä^‚Åø‚â°1 zero = refl
1‚Çä^‚Åø‚â°1 (suc k) = ‚Ñù‚Çä‚â° (¬∑IdR _) ‚àô 1‚Çä^‚Åø‚â°1 k

1^‚Ñ§‚â°1 : ‚àÄ k ‚Üí 1 ^‚Ñ§ k ‚â° 1
1^‚Ñ§‚â°1 (pos n) = 1‚Çä^‚Åø‚â°1 n
1^‚Ñ§‚â°1 (‚Ñ§.negsuc n) =
     cong inv‚Ñù‚Çä (1‚Çä^‚Åø‚â°1 (suc n))
   ‚àô inv‚Ñù‚Çä1


pos+negsuc : ‚àÄ a b ‚Üí pos a ‚Ñ§.+ ‚Ñ§.negsuc b ‚â° pos (suc a) ‚Ñ§.+ ‚Ñ§.negsuc (suc b)
pos+negsuc a b = ‚Ñ§.+Comm _ _ ‚àô‚àô
   cong (‚Ñ§.negsuc b ‚Ñ§.+_) (‚Ñ§.+Comm _ _)
     ‚àô ‚Ñ§.+Assoc (‚Ñ§.negsuc b) (‚Ñ§.negsuc 0) _ ‚àô‚àô ‚Ñ§.+Comm _ _

^‚Ñ§-minus : ‚àÄ x a b ‚Üí ((x ^‚Ñ§ (pos a)) ‚Çä¬∑·µ£ (x ^‚Ñ§ (‚Ñ§.negsuc b)))
                   ‚â° (x ^‚Ñ§ ((pos a) ‚Ñ§.+ (‚Ñ§.negsuc b)))
^‚Ñ§-minus x zero b =
    ‚Ñù‚Çä‚â° (¬∑IdL _)
  ‚àô cong (x ^‚Ñ§_) (‚Ñ§.pos0+ _)
^‚Ñ§-minus x (suc a) zero =
  ‚Ñù‚Çä‚â° (sym (¬∑·µ£Assoc _ _ _) ‚àô
    cong (fst (x ‚Çä^‚Åø a) ¬∑·µ£_) (
       cong (fst x ¬∑·µ£_) (cong (fst ‚àò inv‚Ñù‚Çä) (‚Ñù‚Çä‚â° (¬∑IdL _)))
      ‚àô x¬∑inv‚Ñù‚Çä[x] x)  ‚àô ¬∑IdR _ )
^‚Ñ§-minus x (suc a) (suc b) =
  let z = ^‚Ñ§-minus x a b
  in ‚Ñù‚Çä‚â° (sym (¬∑·µ£Assoc _ _ _) ‚àô
       cong ((x .fst ^‚Åø a) ¬∑·µ£_)
         (  ¬∑·µ£Comm _ _
        ‚àô‚àô  cong (_¬∑·µ£ x .fst) (cong fst (inv‚Ñù‚Çä¬∑ (x ‚Çä^‚Åø (suc b)) x))
            ‚àô sym (¬∑·µ£Assoc _ _ _)
            ‚àô cong (inv‚Ñù‚Çä (x ‚Çä^‚Åø suc b) .fst ¬∑·µ£_)
                (¬∑·µ£Comm _ _ ‚àô x¬∑inv‚Ñù‚Çä[x] x )
        ‚àô‚àô ¬∑IdR _))
       ‚àô‚àô z ‚àô‚àô
     cong (x ^‚Ñ§_) (pos+negsuc a b)

^‚Ñ§-+ : ‚àÄ x a b ‚Üí ((x ^‚Ñ§ a) ‚Çä¬∑·µ£ (x ^‚Ñ§ b)) ‚â° (x ^‚Ñ§ (a ‚Ñ§.+ b))
^‚Ñ§-+ x (pos n) (pos n‚ÇÅ) = ^‚Ñï-+ x n n‚ÇÅ ‚àô cong (x ^‚Ñ§_) (‚Ñ§.pos+ _ _)
^‚Ñ§-+ x (pos n) (‚Ñ§.negsuc n‚ÇÅ) = ^‚Ñ§-minus x n n‚ÇÅ
^‚Ñ§-+ x (‚Ñ§.negsuc n) (pos n‚ÇÅ) =
  ‚Ñù‚Çä‚â° (¬∑·µ£Comm _ _)
  ‚àô‚àô ^‚Ñ§-minus x n‚ÇÅ n ‚àô‚àô
  cong (x ^‚Ñ§_) (‚Ñ§.+Comm _ _)
^‚Ñ§-+ x (‚Ñ§.negsuc n) (‚Ñ§.negsuc n‚ÇÅ) =
      sym (inv‚Ñù‚Çä¬∑ _ _)
   ‚àô‚àô cong inv‚Ñù‚Çä (^‚Ñï-+ x (suc n) (suc n‚ÇÅ))
   ‚àô‚àô cong (x ^‚Ñ§_) (‚Ñ§.negsuc+ n (suc n‚ÇÅ))


^‚Ñï-¬∑ : ‚àÄ x a b ‚Üí ((x ‚Çä^‚Åø a) ‚Çä^‚Åø b) ‚â° (x ‚Çä^‚Åø (a ‚Ñï.¬∑ b))
^‚Ñï-¬∑ x a zero = cong (x ‚Çä^‚Åø_) (‚Ñï.0‚â°m¬∑0 a)
^‚Ñï-¬∑ x a (suc b) = cong (_‚Çä¬∑·µ£ (x ‚Çä^‚Åø a)) (^‚Ñï-¬∑ x a b)
  ‚àô ^‚Ñ§-+ x (pos (a ‚Ñï.¬∑ b)) (pos a) ‚àô
   cong {y = pos ((a ‚Ñï.¬∑ suc b))} (x ^‚Ñ§_)
    (sym (‚Ñ§.pos+ _ _) ‚àô cong pos
      ((cong (‚Ñï._+ a) (‚Ñï.¬∑-comm _ _) ‚àô ‚Ñï.+-comm _ _) ‚àô ‚Ñï.¬∑-comm (suc b) a))


pow-root-+‚Ñï‚Çä‚ÇÅ : ‚àÄ (m n : ‚Ñï‚Çä‚ÇÅ) ‚Üí
         nth-pow-root-iso (m ¬∑‚Çä‚ÇÅ n)
             ‚â° compIso (nth-pow-root-iso m) (nth-pow-root-iso n)
pow-root-+‚Ñï‚Çä‚ÇÅ (1+ m) (1+ n) = SetsIso‚â°fun isSet‚Ñù‚Çä isSet‚Ñù‚Çä
  (funExt (Œª x ‚Üí sym (^‚Ñï-¬∑ x (suc m) (suc n))))


‚Çô‚àö1 : ‚àÄ b ‚Üí root b 1 ‚â° 1
‚Çô‚àö1 b = cong (root b) (sym (1‚Çä^‚Åø‚â°1 _)) ‚àô Iso.leftInv (nth-pow-root-iso b) 1



‚Çô‚àö-StrictMonotone : ‚àÄ {x y : ‚Ñù‚Çä} (b : ‚Ñï‚Çä‚ÇÅ)
      ‚Üí fst x <·µ£ fst y ‚Üí fst (root b x) <·µ£ fst (root b y)
‚Çô‚àö-StrictMonotone x@{_ , 0<x} y@{_ , 0<y} (1+ b) x<y =
  ^‚ÅøStrictMonotone‚Åª¬π  (suc b) (‚Ñï.suc-‚â§-suc  ‚Ñï.zero-‚â§)
    (snd (root (1+ b) (_ , 0<x)))
    (snd (root (1+ b) (_ , 0<y)))
    (subst2 _<·µ£_
      (cong fst $ sym (Iso.rightInv (nth-pow-root-iso (1+ b)) x))
      (cong fst $ sym (Iso.rightInv (nth-pow-root-iso (1+ b)) y))
      x<y)


‚Çô‚àö-Monotone : ‚àÄ {x y : ‚Ñù‚Çä} (b : ‚Ñï‚Çä‚ÇÅ)
      ‚Üí fst x ‚â§·µ£ fst y ‚Üí fst (root b x) ‚â§·µ£ fst (root b y)
‚Çô‚àö-Monotone x@{_ , 0<x} y@{_ , 0<y} (1+ b) x‚â§y =
  ^‚ÅøMonotone‚Åª¬π  (suc b) (‚Ñï.suc-‚â§-suc  ‚Ñï.zero-‚â§)
    (snd (root (1+ b) (_ , 0<x)))
    (snd (root (1+ b) (_ , 0<y)))
    (subst2 _‚â§·µ£_
      (cong fst $ sym (Iso.rightInv (nth-pow-root-iso (1+ b)) x))
      (cong fst $ sym (Iso.rightInv (nth-pow-root-iso (1+ b)) y))
      x‚â§y)



uContRoot0 : ‚àÄ n ‚Üí ‚àÄ (Œµ : ‚Ñö‚Çä) ‚Üí Œ£[ Œ¥ ‚àà ‚Ñö‚Çä ]
     (‚àÄ (u : ‚Ñù‚Çä) ‚Üí fst u <·µ£ rat (fst Œ¥)
         ‚Üí (fst (root n u)) <·µ£ rat (fst Œµ))
uContRoot0 (1+ n) Œµ =
    (Œµ ‚Ñö‚Çä^‚Åø (suc n))
  , Œª u u<Œµ‚Åø ‚Üí
    isTrans<‚â°·µ£ _ _ _ (‚Çô‚àö-StrictMonotone
          {y = ‚Ñö‚Çä‚Üí‚Ñù‚Çä (Œµ ‚Ñö‚Çä^‚Åø (suc n))} (1+ n) u<Œµ‚Åø)
         (cong (fst ‚àò root (1+ n)) (
            ‚Ñù‚Çä‚â° (sym (^‚Åø-‚Ñö^‚Åø _ _)))
          ‚àô cong fst (Iso.leftInv (nth-pow-root-iso (1+ n)) (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ)))


¬∑DistRoot : ‚àÄ x y b ‚Üí root b x ‚Çä¬∑·µ£ root b y ‚â° root b (x ‚Çä¬∑·µ£ y)
¬∑DistRoot x y b =
   sym (Iso.leftInv (nth-pow-root-iso b) _) ‚àô cong (root b)
     (‚Ñù‚Çä‚â° (^‚ÅøDist¬∑·µ£ _ _ _)
      ‚àô cong‚ÇÇ _‚Çä¬∑·µ£_
       (Iso.rightInv (nth-pow-root-iso b) x)
       (Iso.rightInv (nth-pow-root-iso b) y))

invCommRoot : ‚àÄ x b ‚Üí inv‚Ñù‚Çä (root b x) ‚â° root b (inv‚Ñù‚Çä x)
invCommRoot x b =
  isoFunInjective (nth-pow-root-iso b) _ _
   (‚Çä^‚Åø-inv‚Ñù‚Çä _ _
     ‚àô cong inv‚Ñù‚Çä (Iso.rightInv (nth-pow-root-iso b) _)
     ‚àô sym (Iso.rightInv (nth-pow-root-iso b) _))

pow-root-comm‚Çä : ‚àÄ x a b ‚Üí (root b x) ‚Çä^‚Åø a ‚â° root b (x ‚Çä^‚Åø a)
pow-root-comm‚Çä x zero b = sym (‚Çô‚àö1 b)
pow-root-comm‚Çä x (suc a) b =
    cong (_‚Çä¬∑·µ£ (root b x)) (pow-root-comm‚Çä x a b)
  ‚àô ¬∑DistRoot _ _ _


pow-root-comm : ‚àÄ x a b ‚Üí (root b x) ^‚Ñ§ a ‚â° root b (x ^‚Ñ§ a)
pow-root-comm x (pos n) b = pow-root-comm‚Çä x n b
pow-root-comm x (‚Ñ§.negsuc n) b =
   cong inv‚Ñù‚Çä (pow-root-comm‚Çä x (suc n) b) ‚àô
     invCommRoot _ _



‚Ñù‚Çä‚Üí‚Ñù‚ÇÄ‚Çä : ‚Ñù‚Çä ‚Üí ‚Ñù‚ÇÄ‚Çä
‚Ñù‚Çä‚Üí‚Ñù‚ÇÄ‚Çä (x , y) = x , <·µ£Weaken‚â§·µ£ _ _ y



a/[a+c]<b/[b+c] : ‚àÄ (a b c : ‚Ñù‚Çä) ‚Üí fst a <·µ£ fst b ‚Üí
    fst (a ‚Çä¬∑·µ£ inv‚Ñù‚Çä (a ‚Çä+·µ£ c)) <·µ£ fst (b ‚Çä¬∑·µ£ inv‚Ñù‚Çä (b ‚Çä+·µ£ c))
a/[a+c]<b/[b+c] a b c a<b =
  invEq (z/y'<x/y‚âÉy‚Çä¬∑z<y'‚Çä¬∑x _ _ _ _)
   (subst2 _<·µ£_
     (cong (_+·µ£ fst c ¬∑·µ£ fst a) (¬∑·µ£Comm _ _) ‚àô sym (¬∑DistR+ _ _ _))
      (sym (¬∑DistR+ _ _ _))
     (<·µ£-o+ _ _ _ (<·µ£-o¬∑·µ£ _ _ c a<b) ))



_‚ÇÄ‚Çä+·µ£_ : ‚Ñù‚Çä ‚Üí ‚Ñù‚ÇÄ‚Çä ‚Üí ‚Ñù‚Çä
(x , 0<x) ‚ÇÄ‚Çä+·µ£ (y , 0‚â§y) = x +·µ£ y ,
 (isTrans‚â°<·µ£ _ _ _ (sym (+·µ£-rat _ _)) $ <‚â§·µ£Monotone+·µ£ _ _ _ _ 0<x 0‚â§y)



opaque
 unfolding _<·µ£_
 x<Œ¥‚Üíx‚â§0 : ‚àÄ x ‚Üí ((Œµ : ‚Ñö‚Çä) ‚Üí x <·µ£ (rat (fst Œµ))) ‚Üí x ‚â§·µ£ 0
 x<Œ¥‚Üíx‚â§0 x p = eq‚Ñù _ _
   Œª Œµ ‚Üí invEq (‚àº‚âÉabs<Œµ _ _ _)
     (isTrans‚â°<·µ£ _ _ _
         (cong abs·µ£ (+IdR _ ‚àô max·µ£Comm _ _)
           ‚àô (abs·µ£NonNeg _ (‚â§max·µ£ 0 x)) ‚àô max·µ£Comm _ _) (p' Œµ))
   where
   p' : (Œµ : ‚Ñö‚Çä) ‚Üí max·µ£ x 0 <·µ£ (rat (fst Œµ))
   p' Œµ = max<-lem _ _ _  (p Œµ) (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ))

opaque
 unfolding _<·µ£_
 x<y+Œ¥‚Üíx‚â§y : ‚àÄ x y ‚Üí ((Œµ : ‚Ñö‚Çä) ‚Üí x <·µ£ y +·µ£ (rat (fst Œµ))) ‚Üí x ‚â§·µ£ y
 x<y+Œ¥‚Üíx‚â§y x y p = invEq (x‚â§y‚âÉ0‚â§y-x _ _)
  ( isTrans‚â§‚â°·µ£ _ _ _
    (-·µ£‚â§·µ£ _ 0 (x<Œ¥‚Üíx‚â§0 _ (a<c+b‚áía-c<b _ _ _ ‚àò p)))
    (-[x-y]‚â°y-x _ _))

-- lim‚àö‚Üí‚ÇÄ : ‚àÄ n ‚Üí (Œµ : ‚Ñö‚Çä) ‚Üí
--            ‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ] (‚àÄ x ‚Üí
--                fst x <·µ£ rat (fst Œ¥) ‚Üí fst (root n x) <·µ£ rat (fst Œµ))
-- lim‚àö‚Üí‚ÇÄ = {!!}


module slope-incr-root (n : ‚Ñï) where


 help-fn : (a c : ‚Ñù‚Çä) ‚Üí ‚Ñù
 help-fn a c =
   fst (root (1+ (suc n)) (a ‚Çä+·µ£ c)) -·µ£ fst (root (1+ (suc n)) a)

 help-fn-decr : ‚àÄ c a b ‚Üí fst a <·µ£ fst b
                 ‚Üí  help-fn b c <·µ£ help-fn a c
 help-fn-decr c a b a<b =
      subst2 _<·µ£_
        (cong (fst c ¬∑·µ£_) (inv‚Ñù‚Çä‚â°inv‚Ñù _ _) ‚àô sym (H.h b))
         (cong (fst c ¬∑·µ£_) (inv‚Ñù‚Çä‚â°inv‚Ñù _ _) ‚àô sym (H.h a))
        (invEq (z/y'<x/y‚âÉy‚Çä¬∑z<y'‚Çä¬∑x (fst c) (fst c)
           (H.fac.S‚Çä a) (H.fac.S‚Çä b ))
          (<·µ£-¬∑·µ£o _ _ c (Seq<‚ÜíŒ£<
            (geometricProgression _ (H.fac.r a))
            (geometricProgression _ (H.fac.r b))
            (suc n) (Œª m m‚â§n ‚Üí
              subst2 _<·µ£_
                (sym (geometricProgressionClosed _ _ _))
                (sym (geometricProgressionClosed _ _ _))
                (<‚â§·µ£‚ÇäMonotone¬∑·µ£
                  (‚Ñù‚Çä‚Üí‚Ñù‚ÇÄ‚Çä ((root (2+ n) (a ‚Çä+·µ£ c) ‚Çä^‚Åø n)
                    ‚Çä¬∑·µ£ root (2+ n) (a ‚Çä+·µ£ c) ))
                  _ ((H.fac.r a , H.fac.0<r a) ‚Çä^‚Åø m) _

                     (^‚Åø-StrictMonotone (suc n)
                      (‚Ñï.suc-‚â§-suc ‚Ñï.zero-‚â§)
                      ((<·µ£Weaken‚â§·µ£ _ _
                      $ snd (root (1+ (suc n)) (a ‚Çä+·µ£ c))))
                       ((<·µ£Weaken‚â§·µ£ _ _
                      $ snd (root (1+ (suc n)) (b ‚Çä+·µ£ c))))
                       (‚Çô‚àö-StrictMonotone _
                         (<·µ£-+o _ _ (fst c) a<b)))
                     (^‚Åø-Monotone m
                      (<·µ£Weaken‚â§·µ£ _ _ (H.fac.0<r a))
                       (subst2 _‚â§·µ£_
                         (sym (cong fst (¬∑DistRoot _ _ _))
                            ‚àô (cong (fst (root (1+ (suc n)) a) ¬∑·µ£_)
                              (cong fst (sym (invCommRoot _ _))
                               ‚àô inv‚Ñù‚Çä‚â°inv‚Ñù _ _ )))
                         (sym (cong fst (¬∑DistRoot _ _ _))
                            ‚àô (cong (fst (root (1+ (suc n)) b) ¬∑·µ£_)
                              (cong fst (sym (invCommRoot _ _))
                               ‚àô inv‚Ñù‚Çä‚â°inv‚Ñù _ _ )))
                         (‚Çô‚àö-Monotone _
                           (<·µ£Weaken‚â§·µ£ _ _
                             (a/[a+c]<b/[b+c] _ _ _ a<b))))))))))

  where
  open b‚Åø-a‚Åø n hiding (n)

  module H (a : ‚Ñù‚Çä) where
   module fac = factor
     (fst (root (1+ (suc n)) a)) (fst (root (1+ (suc n)) (a ‚Çä+·µ£ c)))
     (snd (root (1+ (suc n)) a)) (snd (root (1+ (suc n)) (a ‚Çä+·µ£ c)))

   h : fst (root (2+ n) (a ‚Çä+·µ£ c)) -·µ£ fst (root (2+ n) a) ‚â° (c .fst Ôºè·µ£[
                S‚Çô (fst (root (2+ n) (a ‚Çä+·µ£ c)) ^‚Åø suc n)
                (r (fst (root (2+ n) a)) (fst (root (2+ n) (a ‚Çä+·µ£ c)))
                 (snd (root (2+ n) a)) (snd (root (2+ n) (a ‚Çä+·µ£ c))))
                (b‚Åø-a‚Åø.n n)
                , _ ])
   h = x¬∑y‚â°z‚Üíx‚â°z/y _ _ _ (inl fac.0<S) ((fac.[b-a]¬∑S‚â°b‚Åø-a‚Åø

         ‚àô cong‚ÇÇ _-·µ£_
         (cong fst
          (Iso.rightInv (nth-pow-root-iso (1+ (suc n))) (a ‚Çä+·µ£ c)))
         (cong fst
          (Iso.rightInv (nth-pow-root-iso (1+ (suc n))) a))
           ‚àô Lùêë.lem--063))


opaque
 unfolding -·µ£_
 -·µ£Weaken<·µ£ : ‚àÄ a b c ‚Üí 0 ‚â§·µ£ b ‚Üí a <·µ£ c  ‚Üí a -·µ£ b <·µ£ c
 -·µ£Weaken<·µ£ a b c 0‚â§b a<c =
   isTrans<‚â°·µ£ _ _ _
     (<‚â§·µ£Monotone+·µ£ _ _ _ _ a<c (-·µ£‚â§·µ£ _ _ 0‚â§b))
     (+IdR _)

opaque
 unfolding _+·µ£_
 nth-root-slope-incr : ‚àÄ n (x : ‚Ñö‚Çä) (Œî : ‚Ñö‚Çä)
    ‚Üí fst (root (1+ n) ((‚Ñö‚Çä‚Üí‚Ñù‚Çä x) ‚Çä+·µ£ (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œî)))
       -·µ£ fst (root (1+ n) (‚Ñö‚Çä‚Üí‚Ñù‚Çä x))
       ‚â§·µ£ fst (root (1+ n) (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œî))
 nth-root-slope-incr zero x Œî  = ‚â°·µ£Weaken‚â§·µ£ _ _ (-·µ£-rat‚ÇÇ _ _ ‚àô cong rat lem--063)
 nth-root-slope-incr (suc n) x Œî =
    x<y+Œ¥‚Üíx‚â§y _ _ h

  where

   h : ‚àÄ (Œµ : ‚Ñö‚Çä) ‚Üí
             fst (root (1+ (suc n)) ((‚Ñö‚Çä‚Üí‚Ñù‚Çä x) ‚Çä+·µ£ (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œî)))
       -·µ£ fst (root (1+ (suc n)) (‚Ñö‚Çä‚Üí‚Ñù‚Çä x))
          <·µ£ (fst (NthRoot.nth-root n (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œî))) +·µ£ rat (fst Œµ)

   h Œµ = PT.rec
     (isProp<·µ£ _ _)
     (Œª (Œ¥ , X)
        --(Œ¥' , X')
       ‚Üí let Œ¥‚äìx = (‚Ñö.min‚Çä
                     x Œ¥)
             ineq1 = (slope-incr-root.help-fn-decr
                 n (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œî) (‚Ñö‚Çä‚Üí‚Ñù‚Çä (/2‚Çä Œ¥‚äìx)) _
                       (isTrans<‚â§·µ£ _ _ _
                         (<‚Ñö‚Üí<·µ£ _ _ (x/2<x Œ¥‚äìx))
                         (min‚â§·µ£ _ (rat (fst Œ¥)))))

             ineq2 :
                fst (root (1+ (suc n)) ((‚Ñö‚Çä‚Üí‚Ñù‚Çä (/2‚Çä Œ¥‚äìx)) ‚Çä+·µ£ (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œî)))
                 -·µ£ fst (root (1+ (suc n)) (‚Ñö‚Çä‚Üí‚Ñù‚Çä (/2‚Çä Œ¥‚äìx)))
                    <·µ£
                 fst (root (1+ (suc n)) (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œî)) +·µ£ (rat (fst Œµ))
             ineq2 =
                -- isTrans<·µ£ _ _ _
                  -·µ£Weaken<·µ£ _ _ _
                     (<·µ£Weaken‚â§·µ£ _ _
                      (snd (root (1+ (suc n)) (‚Ñö‚Çä‚Üí‚Ñù‚Çä (/2‚Çä Œ¥‚äìx)))))
                     (isTrans<‚â°·µ£ _ _ _
                       (a-b<c‚áía<c+b _ _ _
                         (isTrans‚â§<·µ£ _ _ _
                          (‚â§abs·µ£ _)
                          (fst (‚àº‚âÉabs<Œµ _ _ _)
                            (sym‚àº _ _ _
                              (X _ _
                                (subst (_‚àº[ Œ¥ ]
                                   (‚Ñö‚Çä‚Üí‚Ñù‚Çä (/2‚Çä Œ¥‚äìx) .fst +·µ£ rat (fst Œî)))
                                 (+IdL _)
                                 (+·µ£-‚àº 0 (‚Ñö‚Çä‚Üí‚Ñù‚Çä (/2‚Çä Œ¥‚äìx) .fst)
                                 (rat (fst Œî)) Œ¥
                                    (invEq (‚àº‚âÉabs<Œµ _ _ _)
                                      (isTrans‚â°<·µ£ _ _ _
                                        (minusComm-abs·µ£ _ _ ‚àô
                                         cong (abs·µ£ ‚àò (‚Ñö‚Çä‚Üí‚Ñù‚Çä (/2‚Çä Œ¥‚äìx) .fst +·µ£_))
                                           (-·µ£-rat 0) ‚àô cong abs·µ£ (+IdR _)
                                         ‚àô abs·µ£Pos _ ((‚Ñö‚Çä‚Üí‚Ñù‚Çä (/2‚Çä Œ¥‚äìx) .snd)))
                                        ((isTrans<‚â§·µ£ _ _ _
                         (<‚Ñö‚Üí<·µ£ _ _ (x/2<x Œ¥‚äìx))
                         (min‚â§·µ£' (rat (fst x)) _)))))))))) ))
                       (+·µ£Comm _ _))

         in isTrans<·µ£ _ _ _
              ineq1
                 ineq2
       )
      (IsContinuousRoot (2+ n) (rat (fst Œî))
        Œµ (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œî)))




 uContRoot‚Ñö : ‚àÄ n ‚Üí IsUContinuous‚Ñö‚Ñô (Œª x ‚Üí (0 <·µ£ x) , isProp<·µ£ _ _ )
                    (curry (fst ‚àò root n) ‚àò rat)
 uContRoot‚Ñö (1+ n) Œµ =
   (Œµ ‚Ñö‚Çä^‚Åø (suc n)) ,
     ‚Ñö.elimBy‚â°‚äé<'
      (Œª x y X u‚àà v‚àà ‚Üí
        sym‚àº _ _ _ ‚àò X v‚àà u‚àà ‚àò (subst (‚Ñö._< fst (Œµ ‚Ñö‚Çä^‚Åø suc n))
           (‚Ñö.absComm- _ _)))
      (Œª x u‚àà v‚àà _ ‚Üí subst (_ ‚àº[ _ ]_)
         (cong (fst ‚àò (root (1+ n))) (‚Ñù‚Çä‚â° refl)) (refl‚àº _ _))
      Œª x Œî u‚àà v‚àà X ‚Üí
        sym‚àº _ _ _ (invEq (‚àº‚âÉabs<Œµ _ _ _)
         (isTrans‚â°<·µ£ _ _ _ (abs·µ£Pos _
           (fst (x<y‚âÉ0<y-x _ _)
             (‚Çô‚àö-StrictMonotone (1+ n)
               (isTrans‚â°<·µ£ _ _ _
                 (sym (+IdR _)) (<·µ£-o+ _ _ (rat x) (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œî)))))))
          let X' = isTrans<‚â°·µ£ _ _ _
               (‚Çô‚àö-StrictMonotone {‚Ñö‚Çä‚Üí‚Ñù‚Çä Œî} {‚Ñö‚Çä‚Üí‚Ñù‚Çä (Œµ ‚Ñö‚Çä^‚Åø suc n)} (1+ n)
               ((<‚Ñö‚Üí<·µ£ _ _ (subst (‚Ñö._< fst (Œµ ‚Ñö‚Çä^‚Åø suc n))
                   (‚Ñö.absComm- _ _ ‚àô cong ‚Ñö.abs
                     lem--063 ‚àô (‚Ñö.absPos _ (‚Ñö.0<‚Ñö‚Çä Œî))) X))))
                     (cong (fst ‚àò (root (1+ n)))
                        (‚Ñù‚Çä‚â°
                          (sym (^‚Åø-‚Ñö^‚Åø _ _)))
                       ‚àô cong fst (Iso.leftInv (nth-pow-root-iso (1+ n))
                         (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ)))
          in isTrans‚â§<·µ£ _ _ _
              (isTrans‚â°‚â§·µ£ _ _ _
                 (cong‚ÇÇ (Œª v‚àà u‚àà ‚Üí
                    fst (root (1+ n) (rat (x ‚Ñö.+ Œî .fst) , v‚àà)) -·µ£
                     fst (root (1+ n) (rat x , u‚àà)))
                      (isProp<·µ£ _ _ _ _) (isProp<·µ£ _ _ _ _))
                  (nth-root-slope-incr _
                    (x , (‚Ñö.<‚Üí0< _ (<·µ£‚Üí<‚Ñö _ _ u‚àà))) _) )
              X'))

uContRoot : ‚àÄ n ‚Üí IsUContinuous‚Ñô (Œª x ‚Üí (0 <·µ£ x) , isProp<·µ£ _ _ )
                   (curry (fst ‚àò root n))
uContRoot n = IsUContinuous‚Ñö‚Ñô‚ÜíIsUContinuous‚Ñô _
  (Œª _ _ _ _ ‚Üí ‚Çô‚àö-Monotone n)
  (uContRoot‚Ñö n)


^‚Ñ§-¬∑ : ‚àÄ x a b ‚Üí ((x ^‚Ñ§ a) ^‚Ñ§ b) ‚â°  (x ^‚Ñ§ (a ‚Ñ§.¬∑ b))
^‚Ñ§-¬∑ x (pos n) (pos n‚ÇÅ) = ^‚Ñï-¬∑ x n n‚ÇÅ ‚àô cong (x ^‚Ñ§_) (‚Ñ§.pos¬∑pos _ _)
^‚Ñ§-¬∑ x (pos zero) (‚Ñ§.negsuc n‚ÇÅ) = 1^‚Ñ§‚â°1 _
^‚Ñ§-¬∑ x (pos (suc n)) (‚Ñ§.negsuc n‚ÇÅ) =
     cong inv‚Ñù‚Çä (^‚Ñï-¬∑ x (suc n) (suc n‚ÇÅ))
   ‚àô cong (x ^‚Ñ§_) (cong ‚Ñ§.-_ (‚Ñ§.pos¬∑pos _ _ ) ‚àô sym (‚Ñ§.pos¬∑negsuc _ _))
^‚Ñ§-¬∑ x (‚Ñ§.negsuc n) (pos zero) =
  cong {x = 0} (x ^‚Ñ§_) (sym (‚Ñ§.¬∑AnnihilR _))
^‚Ñ§-¬∑ x (‚Ñ§.negsuc n) (pos (suc n‚ÇÅ)) =
      ‚Çä^‚Åø-inv‚Ñù‚Çä _ _
   ‚àô‚àô cong inv‚Ñù‚Çä (^‚Ñï-¬∑ x (suc n) (suc n‚ÇÅ))
   ‚àô‚àô cong (x ^‚Ñ§_)
     ( cong ‚Ñ§.-_ ((‚Ñ§.pos¬∑pos (suc n) (suc n‚ÇÅ) )) ‚àô sym (‚Ñ§.negsuc¬∑pos n (suc n‚ÇÅ)) )

^‚Ñ§-¬∑ x (‚Ñ§.negsuc n) (‚Ñ§.negsuc n‚ÇÅ) =
        (sym (‚Çä^‚Åø-inv‚Ñù‚Çä _ _)
       ‚àô cong (_‚Çä^‚Åø (suc n‚ÇÅ)) (inv‚Ñù‚ÇäInvol _))
   ‚àô‚àô ^‚Ñï-¬∑ x (suc n) (suc n‚ÇÅ)
   ‚àô‚àô cong (x ^‚Ñ§_) (‚Ñ§.pos¬∑pos _ _ ‚àô (sym $ ‚Ñ§.negsuc¬∑negsuc n n‚ÇÅ))



pre^‚Ñö-aprox : ‚àÄ a b ‚Üí ‚ÑöApprox‚Ñô'' (Œª x ‚Üí (0 <·µ£ x) , isProp<·µ£ _ _)
                                 (Œª x ‚Üí (0 <·µ£ x) , isProp<·µ£ _ _)
                    Œª x 0<x ‚Üí (root b ((x , 0<x) ^‚Ñ§ a))
pre^‚Ñö-aprox a b =
  ‚ÑöApprox‚Ñô‚àò (Œª x ‚Üí (0 <·µ£ x) , isProp<·µ£ _ _)
            (Œª x ‚Üí (0 <·µ£ x) , isProp<·µ£ _ _)
            (Œª x ‚Üí (0 <·µ£ x) , isProp<·µ£ _ _)
     (curry (root b))
      (curry ((_^‚Ñ§ a)))
       (uContRoot _)
      (‚ÑöApprox‚Ñô'‚Üí‚ÑöApprox‚Ñô'' _ _ (curry (root b)) (‚ÑöApprox‚Ñô-root b))
      (^‚Ñ§-‚ÑöApprox‚Ñô'' a)

module _ (x : ‚Ñù) (0<x : 0 <·µ£ x) where
 ^‚Ñö-coh' : ‚àÄ a a' b b' ‚Üí pos a ‚Ñ§.¬∑ pos (suc b') ‚â° pos a' ‚Ñ§.¬∑ pos (suc b) ‚Üí
   (root (1+ b) (x , 0<x)  ^‚Ñ§ (pos a)) ‚â° (root (1+ b') (x , 0<x) ^‚Ñ§ (pos a'))
 ^‚Ñö-coh' n n' b b' p  =
     let z = cong‚ÇÇ (_^‚Ñ§_)
               (sym ((cong Iso.inv (pow-root-+‚Ñï‚Çä‚ÇÅ (1+ b') (1+ b))) ‚â°$ (x , 0<x))
               ‚àô‚àô cong (flip root (x , 0<x) )
                 (¬∑‚Çä‚ÇÅ-comm _ _ )
               ‚àô‚àô (((cong Iso.inv (pow-root-+‚Ñï‚Çä‚ÇÅ (1+ b) (1+ b'))) ‚â°$ (x , 0<x))))
                (‚Ñ§.¬∑Comm _ _ ‚àô‚àô p ‚àô‚àô ‚Ñ§.¬∑Comm _ _)
    in (sym (cong (_‚Çä^‚Åø n)
            (Iso.rightInv (nth-pow-root-iso (1+ b')) (root (1+ b) (x , 0<x))))
        ‚àô (^‚Ñ§-¬∑ _ (pos (suc b')) (pos n)) )
      ‚àô‚àô z ‚àô‚àô
       ( sym (^‚Ñ§-¬∑ _ (pos (suc b)) (pos n'))
         ‚àô cong (_‚Çä^‚Åø n')
            (Iso.rightInv (nth-pow-root-iso (1+ b)) (root (1+ b') (x , 0<x))))

 ^‚Ñö-coh : ‚àÄ a a' b b' ‚Üí a ‚Ñ§.¬∑ pos (suc b') ‚â° a' ‚Ñ§.¬∑ pos (suc b) ‚Üí
   (root (1+ b) (x , 0<x)  ^‚Ñ§ a) ‚â° (root (1+ b') (x , 0<x) ^‚Ñ§ a')
 ^‚Ñö-coh (pos n) (pos n‚ÇÅ) b b' p = ^‚Ñö-coh' n n‚ÇÅ b b' p

 ^‚Ñö-coh (pos n) (‚Ñ§.negsuc n‚ÇÅ) b b' p =
   ‚ä•.rec (‚Ñ§.posNotnegsuc _ _
    (‚Ñ§.pos¬∑pos _ _ ‚àô‚àô p ‚àô‚àô (‚Ñ§.negsuc¬∑pos n‚ÇÅ (suc b) ‚àô
      cong (‚Ñ§.-_) (sym (‚Ñ§.pos¬∑pos _ _)) )))
 ^‚Ñö-coh (‚Ñ§.negsuc n) (pos n‚ÇÅ) b b' p =
   ‚ä•.rec (‚Ñ§.negsucNotpos _ _
    ((cong (‚Ñ§.-_) (‚Ñ§.pos¬∑pos _ _) ‚àô
       sym (‚Ñ§.negsuc¬∑pos n (suc b'))) ‚àô‚àô p ‚àô‚àô ((sym (‚Ñ§.pos¬∑pos _ _)) )))
 ^‚Ñö-coh (‚Ñ§.negsuc n) (‚Ñ§.negsuc n‚ÇÅ) b b' p =
   cong inv‚Ñù‚Çä (^‚Ñö-coh' (suc n) (suc n‚ÇÅ) b b' (
     sym (‚Ñ§.-DistL¬∑ (‚Ñ§.negsuc n) (pos (suc b')))
      ‚àô‚àô cong ‚Ñ§.-_ p ‚àô‚àô
      ‚Ñ§.-DistL¬∑ (‚Ñ§.negsuc n‚ÇÅ) (pos (suc b))))

 _^‚Ñöc_ : ‚Ñö ‚Üí ‚Ñù‚Çä
 _^‚Ñöc_ = SQ.Elim.go w
  where
  w : Elim (Œª _ ‚Üí ‚Ñù‚Çä)
  w .Elim.isSetB _ = isSet‚Ñù‚Çä
  w .Elim.f (a , b) = (root b (x , 0<x)) ^‚Ñ§ a
  w .Elim.f‚àº (a , (1+ b)) (a' , (1+ b')) r =
    ^‚Ñö-coh a a' b b' r

_^‚Ñö_ : ‚Ñù‚Çä ‚Üí ‚Ñö ‚Üí  ‚Ñù‚Çä
_^‚Ñö_ = uncurry _^‚Ñöc_

IsContinuous^‚Ñö : ‚àÄ q ‚Üí IsContinuousWithPred (Œª _ ‚Üí _ , isProp<·µ£ _ _)
                          (curry (fst ‚àò (_^‚Ñö q)))
IsContinuous^‚Ñö = SQ.ElimProp.go w
  where
  P = _
  w : ElimProp _
  w .ElimProp.isPropB _ = isPropŒ†3 Œª _ _ _ ‚Üí squash‚ÇÅ
  w .ElimProp.f (a , b) =
    IsContinuousWP‚àò P P (curry (fst ‚àò _^‚Ñ§ a)) (curry (fst ‚àò root b))
      (curry (snd ‚àò root b))
      (IsContinuous^‚Ñ§ a)
      (IsContinuousRoot b)

^‚Ñö-+ : ‚àÄ x a b ‚Üí ((x ^‚Ñö a) ‚Çä¬∑·µ£ (x ^‚Ñö b)) ‚â° (x ^‚Ñö (a ‚Ñö.+ b))
^‚Ñö-+ x‚Çä@(x , 0<x) = SQ.ElimProp2.go w
 where
 w : ElimProp2 (Œª z z‚ÇÅ ‚Üí ((x‚Çä ^‚Ñö z) ‚Çä¬∑·µ£ (x‚Çä ^‚Ñö z‚ÇÅ)) ‚â° (x‚Çä ^‚Ñö (z ‚Ñö.+ z‚ÇÅ)))
 w .ElimProp2.isPropB _ _ = isSet‚Ñù‚Çä _ _
 w .ElimProp2.f (a , 1+ b) (a' , 1+ b') =
  ((root (1+ b) (x , 0<x) ^‚Ñ§ a) ‚Çä¬∑·µ£ (root (1+ b') (x , 0<x) ^‚Ñ§ a'))
   ‚â°‚ü® cong‚ÇÇ _‚Çä¬∑·µ£_
        (cong (_^‚Ñ§ a) b‚àöx‚â° ‚àô ^‚Ñ§-¬∑ bb'‚àöx _ _)
        (cong (_^‚Ñ§ a') b'‚àöx‚â° ‚àô ^‚Ñ§-¬∑ bb'‚àöx _ _) ‚ü©
            ((bb'‚àöx ^‚Ñ§ (‚Ñö.‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (1+ b') ‚Ñ§.¬∑ a))
         ‚Çä¬∑·µ£ (bb'‚àöx ^‚Ñ§ (‚Ñö.‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (1+ b) ‚Ñ§.¬∑ a')))
   ‚â°‚ü® (Œª i ‚Üí ^‚Ñ§-+ bb'‚àöx
       (‚Ñ§.¬∑Comm (pos (suc b')) a i)
       (‚Ñ§.¬∑Comm (pos (suc b)) a' i)
       i) ‚ü©
   ((bb'‚àöx ^‚Ñ§
      (a ‚Ñ§.¬∑ ‚Ñö.‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (1+ b') ‚Ñ§.+ a' ‚Ñ§.¬∑ ‚Ñö.‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (1+ b)))) ‚àé

  where
   bb'‚àöx = root ((1+ b) ¬∑‚Çä‚ÇÅ (1+ b')) (x , 0<x)

   b‚àöx‚â° = sym (Iso.rightInv (nth-pow-root-iso (1+ b')) _) ‚àô
      (cong (_‚Çä^‚Åø (suc b')) $ sym (cong Iso.inv (pow-root-+‚Ñï‚Çä‚ÇÅ (1+ b') (1+ b)) ‚â°$ x‚Çä)
        ‚àô cong (flip root x‚Çä) (¬∑‚Çä‚ÇÅ-comm _ _))

   b'‚àöx‚â° = sym (Iso.rightInv (nth-pow-root-iso (1+ b)) _) ‚àô
      (cong (_‚Çä^‚Åø (suc b)) $ sym (cong Iso.inv (pow-root-+‚Ñï‚Çä‚ÇÅ (1+ b) (1+ b')) ‚â°$ x‚Çä))


^‚Ñö-¬∑ : ‚àÄ x a b ‚Üí ((x ^‚Ñö a) ^‚Ñö b) ‚â° (x ^‚Ñö (a ‚Ñö.¬∑ b))
^‚Ñö-¬∑ x‚Çä@(x , 0<x) = SQ.ElimProp2.go w
 where
 w : ElimProp2 _
 w .ElimProp2.isPropB _ _ = isSet‚Ñù‚Çä _ _
 w .ElimProp2.f (a , 1+ b) (a' , 1+ b') =
     cong (_^‚Ñ§ a')
       (sym (pow-root-comm _ _ _) ‚àô cong (_^‚Ñ§ a) (
             sym (cong Iso.inv (pow-root-+‚Ñï‚Çä‚ÇÅ (1+ b') (1+ b)) ‚â°$ x‚Çä)
          ‚àô cong (flip root x‚Çä) (¬∑‚Çä‚ÇÅ-comm _ _)))
       ‚àô ^‚Ñ§-¬∑ _ _ _



-- ^‚Åø-inv‚Ñù‚Çä : ‚àÄ n x ‚Üí
--             ((inv‚Ñù‚Çä x) ‚Çä^‚Åø n) ‚â° inv‚Ñù‚Çä (x ‚Çä^‚Åø n)
-- ^‚Åø-inv‚Ñù‚Çä n = {!!}
-- uncurry
--   Œª x 0<x ‚Üí
--      ‚Ñù‚Çä‚â° (‚â°ContinuousWithPred _ _ (openPred< 0) (openPred< 0)
--         _ _
--          (IsContinuousWP‚àò
--            (Œª y ‚Üí (0 <·µ£ y) , squash‚ÇÅ)
--            (Œª y ‚Üí (0 <·µ£ y) , squash‚ÇÅ)
--            _ _
--            (Œª x 0<x ‚Üí inv‚Ñù'-pos x 0<x) (IsContinuous‚Çä^‚Åø n) (snd inv‚Ñù'))

--     (IsContinuousWP‚àò
--            (Œª y ‚Üí (0 <·µ£ y) , squash‚ÇÅ)
--            (Œª y ‚Üí (0 <·µ£ y) , squash‚ÇÅ)
--            _ _
--            (Œª x 0<x ‚Üí snd ((x , 0<x) ‚Çä^‚Åø n)) (snd inv‚Ñù') (IsContinuous‚Çä^‚Åø n) )
--     (Œª r r<0 _ ‚Üí {!!}) x 0<x 0<x)


inv‚Ñù‚Çä^‚Ñ§ : ‚àÄ x a ‚Üí (inv‚Ñù‚Çä x) ^‚Ñ§ (‚Ñ§.- a) ‚â° x ^‚Ñ§ a
inv‚Ñù‚Çä^‚Ñ§ x (pos zero) = refl
inv‚Ñù‚Çä^‚Ñ§ x (pos (suc n)) = cong inv‚Ñù‚Çä (‚Çä^‚Åø-inv‚Ñù‚Çä (suc n) x)
 ‚àô inv‚Ñù‚ÇäInvol _
inv‚Ñù‚Çä^‚Ñ§ x (‚Ñ§.negsuc n) = ‚Çä^‚Åø-inv‚Ñù‚Çä _ _

inv‚Ñù‚Çä[^‚Ñ§] : ‚àÄ x a ‚Üí (inv‚Ñù‚Çä x ^‚Ñ§ a) ‚â° inv‚Ñù‚Çä (x ^‚Ñ§ a)
inv‚Ñù‚Çä[^‚Ñ§] x (pos zero) = ‚Ñù‚Çä‚â° (sym (inv‚Ñù‚Çä-rat 1))
inv‚Ñù‚Çä[^‚Ñ§] x (pos (suc n)) = ‚Çä^‚Åø-inv‚Ñù‚Çä _ _
inv‚Ñù‚Çä[^‚Ñ§] x (‚Ñ§.negsuc n) = cong inv‚Ñù‚Çä (‚Çä^‚Åø-inv‚Ñù‚Çä _ _)

inv‚Ñù‚Çä^‚Ñ§' : ‚àÄ x a ‚Üí (inv‚Ñù‚Çä x) ^‚Ñ§ a ‚â° x ^‚Ñ§ (‚Ñ§.- a)
inv‚Ñù‚Çä^‚Ñ§' x a = cong ((inv‚Ñù‚Çä x) ^‚Ñ§_) (sym (‚Ñ§.-Involutive a)) ‚àô inv‚Ñù‚Çä^‚Ñ§ x (‚Ñ§.- a)



inv‚Ñù‚Çä^‚Ñö : ‚àÄ x a ‚Üí (inv‚Ñù‚Çä x ^‚Ñö a) ‚â° inv‚Ñù‚Çä (x ^‚Ñö a)
inv‚Ñù‚Çä^‚Ñö x = SQ.ElimProp.go w

 where
 w : ElimProp _
 w .ElimProp.isPropB _ = isSet‚Ñù‚Çä _ _
 w .ElimProp.f (a , b) = cong (_^‚Ñ§ a) (sym (invCommRoot x b))
   ‚àô inv‚Ñù‚Çä[^‚Ñ§] (root b x) a

^‚Ñö-minus : ‚àÄ x a ‚Üí (x ^‚Ñö a) ‚â° ((inv‚Ñù‚Çä x) ^‚Ñö (‚Ñö.- a))
^‚Ñö-minus x = SQ.ElimProp.go w

 where
 w : ElimProp _
 w .ElimProp.isPropB _ = isSet‚Ñù‚Çä _ _
 w .ElimProp.f (a , (1+ b)) =
  cong (Œª b ‚Üí (x ^‚Ñö [ a , b ]))
   (sym (¬∑‚Çä‚ÇÅ-identityÀ° _))
  ‚àô
  (sym (inv‚Ñù‚Çä^‚Ñ§ _ _))
   ‚àô cong (_^‚Ñ§ _) (invCommRoot _ _)

^‚Ñö-minus' : ‚àÄ x a ‚Üí (x ^‚Ñö (‚Ñö.- a)) ‚â° ((inv‚Ñù‚Çä x) ^‚Ñö a)
^‚Ñö-minus' x a = ^‚Ñö-minus x (‚Ñö.- a) ‚àô cong ((inv‚Ñù‚Çä x) ^‚Ñö_) (‚Ñö.-Invol a)



1^‚Ñö‚â°1 : ‚àÄ q ‚Üí 1 ^‚Ñö q ‚â° 1
1^‚Ñö‚â°1 = ElimProp.go w
 where
 w : ElimProp _
 w .ElimProp.isPropB _ = isSet‚Ñù‚Çä _ _
 w .ElimProp.f (a , b) = cong (_^‚Ñ§ a) (‚Çô‚àö1 b) ‚àô 1^‚Ñ§‚â°1 _

Iso^‚Çô‚Çí‚Çú‚ÇÄ : ‚àÄ q ‚Üí 0 ‚Ñö.# q  ‚Üí Iso ‚Ñù‚Çä ‚Ñù‚Çä
Iso^‚Çô‚Çí‚Çú‚ÇÄ q _ .Iso.fun = _^‚Ñö q
Iso^‚Çô‚Çí‚Çú‚ÇÄ q 0#q .Iso.inv = _^‚Ñö (inv‚Ñö q 0#q)
Iso^‚Çô‚Çí‚Çú‚ÇÄ q 0#q .Iso.rightInv x =
 ^‚Ñö-¬∑ x _ _ ‚àô‚àô cong (x ^‚Ñö_) (‚Ñö.¬∑Comm _ _ ‚àô ‚Ñö.‚Ñö-y/y q 0#q)
  ‚àô‚àô ‚Ñù‚Çä‚â° (¬∑IdL (fst x))
Iso^‚Çô‚Çí‚Çú‚ÇÄ q 0#q .Iso.leftInv x =
 ^‚Ñö-¬∑ x _ _  ‚àô‚àô cong (x ^‚Ñö_) (‚Ñö.‚Ñö-y/y q 0#q) ‚àô‚àô ‚Ñù‚Çä‚â° (¬∑IdL (fst x))


-- pow-root-+ : ‚àÄ (m n : ‚Ñö‚Çä) ‚Üí
--          Iso^‚Çä (m ‚Ñö‚Çä¬∑ n)
--              ‚â° compIso (Iso^‚Çä m) (Iso^‚Çä n)
-- pow-root-+ m n = SetsIso‚â°fun isSet‚Ñù‚Çä isSet‚Ñù‚Çä
--   (funExt (Œª x ‚Üí {!Iso^‚Çä!}))


factor-x·µÉ-x·µá : ‚àÄ x a b ‚Üí fst (x ^‚Ñö a) -·µ£ fst (x ^‚Ñö b) ‚â°
                        fst (x ^‚Ñö b) ¬∑·µ£ (fst (x ^‚Ñö (a ‚Ñö.- b)) -·µ£ 1)
factor-x·µÉ-x·µá x a b =
    cong‚ÇÇ _-·µ£_
      (cong (fst ‚àò x ^‚Ñö_) (sym lem--05)
       ‚àô cong fst (sym (^‚Ñö-+ _ _ _)))
      (sym (¬∑IdR _))
  ‚àô sym (¬∑DistL- _ _ _)

factor-x·µÉ-x·µá' : ‚àÄ x a b ‚Üí fst (x ^‚Ñö a) -·µ£ fst (x ^‚Ñö b) ‚â°
                        fst (x ^‚Ñö a) ¬∑·µ£ (1 -·µ£ fst (x ^‚Ñö (b ‚Ñö.- a)))
factor-x·µÉ-x·µá' x a b =
 cong‚ÇÇ _-·µ£_ (sym (¬∑IdR _))
            (cong fst (cong (x ^‚Ñö_) (sym lem--05))
              ‚àô cong fst (sym (^‚Ñö-+ _ _ _)) )
   ‚àô sym (¬∑DistL- _ _ _)

factorOut-x·µÉ : ‚àÄ x a b ‚Üí x ^‚Ñö a ‚â°
     ((x ^‚Ñö b) ‚Çä¬∑·µ£ (x ^‚Ñö (a ‚Ñö.- b)))
factorOut-x·µÉ x a b =
  cong (x ^‚Ñö_) (sym lem--05)
  ‚àô sym (^‚Ñö-+ x b (a ‚Ñö.- b))

^‚Ñö-StrictMonotone : ‚àÄ {x y : ‚Ñù‚Çä} (q : ‚Ñö‚Çä)
    ‚Üí fst x <·µ£ fst y
    ‚Üí fst (x ^‚Ñö (fst q)) <·µ£ fst (y ^‚Ñö (fst q))
^‚Ñö-StrictMonotone {_ , 0<x} {_ , 0<y} = uncurry $ ElimProp.go w
 where
 w : ElimProp _
 w .ElimProp.isPropB _ = isPropŒ†2 Œª _ _ ‚Üí isProp<·µ£ _ _
 w .ElimProp.f (pos (suc n) , b) 0<q x<y =
   ^‚Åø-StrictMonotone _ (‚Ñï.suc-‚â§-suc  ‚Ñï.zero-‚â§)
      (<·µ£Weaken‚â§·µ£ _ _ (snd (root b (_ , 0<x))))
      (<·µ£Weaken‚â§·µ£ _ _ (snd (root b (_ , 0<y))))
     (‚Çô‚àö-StrictMonotone b x<y)

^‚Ñö-Monotone : ‚àÄ {x y : ‚Ñù‚Çä} (q : ‚Ñö‚Çä)
    ‚Üí fst x ‚â§·µ£ fst y
    ‚Üí fst (x ^‚Ñö (fst q)) ‚â§·µ£ fst (y ^‚Ñö (fst q))
^‚Ñö-Monotone {_ , 0<x} {_ , 0<y} = uncurry $ ElimProp.go w
 where
 w : ElimProp _
 w .ElimProp.isPropB _ = isPropŒ†2 Œª _ _ ‚Üí isProp‚â§·µ£ _ _
 w .ElimProp.f (pos (suc n) , b) 0<q x‚â§y =
   ^‚Åø-Monotone _ -- (‚Ñï.suc-‚â§-suc  ‚Ñï.zero-‚â§)
      (<·µ£Weaken‚â§·µ£ _ _ (snd (root b (_ , 0<x))))
     (‚Çô‚àö-Monotone b x‚â§y)


1<^‚Ñö : ‚àÄ x ‚Üí (q : ‚Ñö‚Çä) ‚Üí (1 <·µ£ fst x) ‚Üí (1 <·µ£ fst (x ^‚Ñö (fst q)))
1<^‚Ñö x q‚Çä@(q , 0<q) 1<x =
  subst (_<·µ£ fst (x ^‚Ñö q))
    (cong fst (1^‚Ñö‚â°1 q)) (^‚Ñö-StrictMonotone q‚Çä 1<x)


1‚â§^‚Ñö : ‚àÄ x ‚Üí (q : ‚Ñö‚Çä) ‚Üí (1 ‚â§·µ£ fst x) ‚Üí (1 ‚â§·µ£ fst (x ^‚Ñö (fst q)))
1‚â§^‚Ñö x q‚Çä@(q , 0<q) 1‚â§x =
  subst (_‚â§·µ£ fst (x ^‚Ñö q))
    (cong fst (1^‚Ñö‚â°1 q)) (^‚Ñö-Monotone q‚Çä 1‚â§x)


^‚Ñö-StrictMonotoneR : ‚àÄ {x : ‚Ñù‚Çä} ‚Üí 1 <·µ£ fst x ‚Üí (q r : ‚Ñö)
    ‚Üí q ‚Ñö.< r
    ‚Üí fst (x ^‚Ñö q) <·µ£ fst (x ^‚Ñö r)
^‚Ñö-StrictMonotoneR {x} 1<x q r q<r =
  isTrans<‚â°·µ£ _ _ _
    (isTrans‚â°<·µ£ _ _ _
      (sym (¬∑IdR _ )) (<·µ£-o¬∑·µ£ _ _ (x ^‚Ñö q) (1<^‚Ñö _ (‚Ñö.<‚Üí‚Ñö‚Çä _ _ q<r) 1<x)))
   (cong fst $ sym (factorOut-x·µÉ x  r q))

^‚Ñö-StrictMonotoneR' : ‚àÄ {x : ‚Ñù‚Çä} ‚Üí fst x <·µ£ 1  ‚Üí (q r : ‚Ñö)
    ‚Üí q ‚Ñö.< r
    ‚Üí fst (x ^‚Ñö r) <·µ£ fst (x ^‚Ñö q)
^‚Ñö-StrictMonotoneR' {x} x<1 q r q<r =
   fst (inv‚Ñù‚Çä-<-inv‚Ñù‚Çä (x ^‚Ñö q) (x ^‚Ñö r))
     (subst2 _<·µ£_
       (cong fst (inv‚Ñù‚Çä^‚Ñö x q))
       (cong fst (inv‚Ñù‚Çä^‚Ñö x r))
       (^‚Ñö-StrictMonotoneR {inv‚Ñù‚Çä x}
         1/x<1 q r q<r))
   where
   1/x<1 = isTrans‚â°<·µ£ _ _ _ (cong fst (sym (inv‚Ñù‚Çä1)))
            (invEq (inv‚Ñù‚Çä-<-inv‚Ñù‚Çä 1 x) x<1)

‚äÜIsContinuousWithPred : ‚àÄ P P' ‚Üí (P'‚äÜP : P' ‚äÜ P) ‚Üí ‚àÄ f
        ‚Üí IsContinuousWithPred P f
        ‚Üí IsContinuousWithPred P' (Œª x x‚àà ‚Üí f x (P'‚äÜP x x‚àà))
‚äÜIsContinuousWithPred _ _ P'‚äÜP f cp u Œµ u‚ààP =
  PT.map (map-snd (Œª x _ ‚Üí x _ ‚àò (P'‚äÜP _)))
    (cp u Œµ (P'‚äÜP _ u‚ààP))


^‚Ñö-MonotoneR : ‚àÄ {x : ‚Ñù‚Çä} ‚Üí (q r : ‚Ñö) ‚Üí q ‚Ñö.‚â§ r
    ‚Üí 1 ‚â§·µ£ fst x
    ‚Üí fst (x ^‚Ñö q) ‚â§·µ£ fst (x ^‚Ñö r)
^‚Ñö-MonotoneR {x} q r q‚â§r 1‚â§x =

  let z = ‚â§ContPos'pred {1}
             (‚äÜIsContinuousWithPred _ _
                (Œª x ‚Üí isTrans<‚â§·µ£ 0 1 x ((dec‚Ñö<·µ£? {0} {1})))
                 (Œª x x< ‚Üí fst ((x , x<) ^‚Ñö q))
                (IsContinuous^‚Ñö q))
             (‚äÜIsContinuousWithPred _ _
                (Œª x ‚Üí isTrans<‚â§·µ£ 0 1 x ((dec‚Ñö<·µ£? {0} {1})))
                 (Œª x x< ‚Üí fst ((x , x<) ^‚Ñö r))
                (IsContinuous^‚Ñö r))
                (Œª u 1‚â§u ‚Üí hh (‚Ñö.‚â§‚Üí<‚äé‚â° q r q‚â§r) u 1‚â§u (‚Ñö.‚â§‚Üí<‚äé‚â° 1 u 1‚â§u))
             (fst x) 1‚â§x
  in subst (Œª 0<x ‚Üí fst ((fst x , 0<x) ^‚Ñö q) ‚â§·µ£ fst ((fst x , 0<x) ^‚Ñö r))
       (isProp<·µ£ _ _ _ _)
       z


 where
 hh : ((q ‚â° r) ‚äé (q ‚Ñö.< r)) ‚Üí (u : ‚Ñö) (x‚ÇÄ<u : 1 ‚Ñö.‚â§ u) ‚Üí (1 ‚â° u) ‚äé (1 ‚Ñö.< u) ‚Üí
        fst
        ((rat u , isTrans<‚â§·µ£ 0 1 (rat u) dec‚Ñö<·µ£? (‚â§‚Ñö‚Üí‚â§·µ£ 1 u x‚ÇÄ<u)) ^‚Ñö q)
        ‚â§·µ£
        fst
        ((rat u , isTrans<‚â§·µ£ 0 1 (rat u) dec‚Ñö<·µ£? (‚â§‚Ñö‚Üí‚â§·µ£ 1 u x‚ÇÄ<u)) ^‚Ñö r)
 hh _ u x‚ÇÄ<u (inl x) =
   ‚â°·µ£Weaken‚â§·µ£ _ _
      (sym ((cong (fst ‚àò _^‚Ñö q) (‚Ñù‚Çä‚â° (cong rat x))))
        ‚àô‚àô cong fst (1^‚Ñö‚â°1 q) ‚àô
           cong fst (sym (1^‚Ñö‚â°1 r))
           ‚àô‚àô cong fst (cong (_^‚Ñö r) (‚Ñù‚Çä‚â° (cong rat x))))
 hh (inr q<r) u 1‚â§u (inr 1<u) = subst
       (Œª uu ‚Üí
         fst ((rat u , uu) ^‚Ñö q)
           ‚â§·µ£ fst ((rat u , uu) ^‚Ñö r))
            (isProp<·µ£ _ _ _ _)
             (<·µ£Weaken‚â§·µ£ _ _ ( ^‚Ñö-StrictMonotoneR
                             {rat u , isTrans<·µ£ 0 1 (rat u)
                                 ((dec‚Ñö<·µ£? {0} {1}))
                                   (<‚Ñö‚Üí<·µ£ _ _ 1<u)}
                              (<‚Ñö‚Üí<·µ£ _ _ 1<u) q r q<r))
 hh (inl q‚â°r) u 1‚â§u (inr 1<u) = ‚â°·µ£Weaken‚â§·µ£ _ _
   (cong (fst ‚àò ((rat u , isTrans<‚â§·µ£ 0 1 (rat u) dec‚Ñö<·µ£? (‚â§‚Ñö‚Üí‚â§·µ£ 1 u 1‚â§u)) ^‚Ñö_))
     q‚â°r)


fromNat‚Ñù+ : ‚àÄ {x y z} ‚Üí
    x ‚Ñï.+ y ‚â° z ‚Üí
    HasFromNat.fromNat fromNat‚Ñù x +·µ£ HasFromNat.fromNat fromNat‚Ñù y
      ‚â° HasFromNat.fromNat fromNat‚Ñù z
fromNat‚Ñù+ p = +·µ£-rat _ _ ‚àô cong rat (‚Ñö.‚Ñï+‚Üí‚Ñö+  _ _ ‚àô cong ([_/ 1 ] ‚àò pos) p)

AM-GM‚ÇÇ : ‚àÄ z ‚Üí 1 <·µ£ fst z ‚Üí ‚àÄ x (Œî : ‚Ñö‚Çä) ‚Üí
          fst (2 ‚Çä¬∑·µ£ (z ^‚Ñö x)) <·µ£
            fst ((z ^‚Ñö (x ‚Ñö.- fst Œî)) ‚Çä+·µ£ (z ^‚Ñö (x ‚Ñö.+ fst Œî)))
AM-GM‚ÇÇ z 1<z x Œî = isTrans<‚â°·µ£ _ _ _ (isTrans‚â°<·µ£ _ _ _
       (cong (2 ¬∑·µ£_) (cong (fst ‚àò z ^‚Ñö_) lem--035
          ‚àô sym (cong fst (^‚Ñö-+ z _ _)))
          ‚àô ¬∑·µ£Comm _ _ ‚àô sym (¬∑·µ£Assoc _ _ _))
       (fst (z<x‚âÉy‚Çä¬∑z<y‚Çä¬∑x _ _ (z ^‚Ñö (x ‚Ñö.- fst Œî))) (isTrans‚â°<·µ£ _ _ _
         (cong (fst a ¬∑·µ£_) (sym (fromNat‚Ñù+ refl))
           ‚àô ¬∑DistL+ (fst a) 1 1)
       (invEq (x<y‚âÉ0<y-x _ _)
      $ isTrans<‚â°·µ£ _ _ _ (‚Ñù‚Çä¬∑ (_ , w') (_ , w'))
       (Lùêë.lem--073 {fst a} {1})))))
        (¬∑DistL+ _ _ _ ‚àô +·µ£Comm _ _ ‚àô
          cong‚ÇÇ _+·µ£_
          (cong (((z ^‚Ñö (x ‚Ñö.- fst Œî)) .fst) ¬∑·µ£_)
              (sym (rat¬∑·µ£rat _ _)) ‚àô ¬∑IdR _)
              (cong (((z ^‚Ñö (x ‚Ñö.- fst Œî)) .fst) ¬∑·µ£_)
                (cong fst (^‚Ñö-+ z _ _)) ‚àô
                  (cong fst (^‚Ñö-+ z _ _)) ‚àô
                    cong (fst ‚àò z ^‚Ñö_)
                      lem--074))


 where
 a = z ^‚Ñö (fst Œî)
 w' = fst (x<y‚âÉ0<y-x _ _) (1<^‚Ñö z Œî 1<z)

inv‚Ñö‚Çä-[/] : ‚àÄ n m ‚Üí [ n / 1 ] ‚Ñö.¬∑ fst (inv‚Ñö‚Çä (fromNat (suc m))) ‚â° [ n / 1+ m ]
inv‚Ñö‚Çä-[/] n m = cong‚ÇÇ [_/_]
  (‚Ñ§.¬∑IdR n)
    (¬∑‚Çä‚ÇÅ-identityÀ° (1+ m))

[2+N]/[1+N]=2-N/[1+N] : ‚àÄ n ‚Üí
   [ pos (2 ‚Ñï.+ n) , (1+ n) ] ‚â° (fromNat 2) ‚Ñö.- [ pos n / 1+ n ]
[2+N]/[1+N]=2-N/[1+N] n = cong‚ÇÇ [_/_]
  (sym (‚Ñ§.plusMinus _ _) ‚àô cong‚ÇÇ (‚Ñ§._+_)
      (sym (‚Ñ§.pos+ (2 ‚Ñï.+ n) n) ‚àô cong ‚Ñ§.suc‚Ñ§  (‚Ñ§.pos+ _ _ ‚àô cong‚ÇÇ ‚Ñ§._+_
        (cong ‚Ñö.‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (sym (¬∑‚Çä‚ÇÅ-identityÀ° (1+ n))))
        (cong pos (sym (‚Ñï.+-zero n)) )))
      (sym (‚Ñ§.¬∑IdR _)))
  (sym (¬∑‚Çä‚ÇÅ-identityÀ° _) ‚àô sym (¬∑‚Çä‚ÇÅ-identityÀ° _))

module AM-GM-hlp (b : ‚Ñù‚Çä) (1<b : 1 <·µ£ (fst b)) (x‚ÇÄ : ‚Ñö) (s : ‚Ñö‚Çä) where

 x : ‚Ñï ‚Üí ‚Ñö
 x n = x‚ÇÄ ‚Ñö.+ fromNat n ‚Ñö.¬∑ fst s

 -- TODO : this should be used in few places bellow:
 x-suc : ‚àÄ n ‚Üí x n ‚Ñö.+ fst s ‚â° x (suc n)
 x-suc n = sym (‚Ñö.+Assoc _ _ _)
     ‚àô cong (x‚ÇÄ ‚Ñö.+_) (
       cong ((fromNat n) ‚Ñö.¬∑ (fst s) ‚Ñö.+_) (sym (‚Ñö.¬∑IdL _)) ‚àô‚àô
       sym (‚Ñö.¬∑DistR+  (fromNat n) 1 (fst s)) ‚àô‚àô
           cong (‚Ñö._¬∑ (fst s)) (‚Ñö.+Comm _ _ ‚àô (‚Ñö.‚Ñï+‚Üí‚Ñö+ 1 n) ) )

 Œ± : ‚Ñù‚Çä
 Œ± = (1 ‚Çä+·µ£ (b ^‚Ñö (2 ‚Ñö.¬∑ fst s))) ‚Çä¬∑·µ£ ‚Ñö‚Çä‚Üí‚Ñù‚Çä ( [ 1 / 2 ] , _ )

 y : ‚Ñï ‚Üí ‚Ñù‚Çä
 y zero = b ^‚Ñö x‚ÇÄ
 y (suc n) = (b ^‚Ñö (x n)) ‚Çä¬∑·µ£ Œ±



 fromAM-GM : fst (b ^‚Ñö x 1) <·µ£
      fst (b ^‚Ñö x‚ÇÄ) +·µ£
      rat (fst (inv‚Ñö‚Çä (fromNat 2))) ¬∑·µ£ (fst (b ^‚Ñö x 2) -·µ£ fst (b ^‚Ñö x‚ÇÄ))
 fromAM-GM = isTrans‚â°<·µ£ _ _ _ (cong (fst ‚àò b ^‚Ñö_ ‚àò (x‚ÇÄ ‚Ñö.+_ ))
      (‚Ñö.¬∑IdL _))
    (isTrans<‚â°·µ£ _ _ _ (invEq (z<x/y‚Çä‚âÉy‚Çä¬∑z<x _ _ 2)
   (AM-GM‚ÇÇ b 1<b (x‚ÇÄ ‚Ñö.+ fst s) s))
    (cong (_¬∑·µ£ fst (inv‚Ñù‚Çä 2))
       (cong‚ÇÇ _+·µ£_
          (cong (fst ‚àò b ^‚Ñö_) (sym lem--034)
            ‚àô Lùêë.lem--034 {fst (b ^‚Ñö x‚ÇÄ)} {fst (b ^‚Ñö x‚ÇÄ)}
            ‚àô cong (_-·µ£ fst (b ^‚Ñö x‚ÇÄ))
             (x+x‚â°2x _ ‚àô ¬∑·µ£Comm _ _))
             ((cong (fst ‚àò b ^‚Ñö_) (sym (‚Ñö.+Assoc _ _ _)
             ‚àô cong (x‚ÇÄ ‚Ñö.+_) (‚Ñö.x+x‚â°2x _))))
         ‚àô sym (+·µ£Assoc _ _ _))
      ‚àô ¬∑DistR+ (fst (b ^‚Ñö x‚ÇÄ) ¬∑·µ£ 2) _ _
      ‚àô cong‚ÇÇ _+·µ£_ ([x¬∑y·µ£]/‚Çäy _ _)
             (¬∑·µ£Comm _ _ ‚àô
             cong‚ÇÇ _¬∑·µ£_ (inv‚Ñù'-rat 2 _ _)
               (+·µ£Comm _ _))))

 opaque
  unfolding -·µ£_ _+·µ£_
  convStep : ‚àÄ N ‚Üí rat (fst (inv‚Ñö‚Çä (fromNat (suc N)))) ¬∑·µ£
       (fst (b ^‚Ñö x (suc N)) -·µ£ fst (b ^‚Ñö x‚ÇÄ))
       <·µ£
       rat (fst (inv‚Ñö‚Çä (fromNat (suc (suc N))))) ¬∑·µ£
       (fst (b ^‚Ñö x (suc (suc N))) -·µ£ fst (b ^‚Ñö x‚ÇÄ))

  convSteps : ‚àÄ N n ‚Üí n ‚Ñï.< N ‚Üí
                  fst (b ^‚Ñö (x (suc n))) <·µ£
                     (fst (b ^‚Ñö x‚ÇÄ) +·µ£ (rat (fst (fromNat (suc n)
                      ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä (fromNat (suc N)))) ¬∑·µ£
                       (fst (b ^‚Ñö (x (suc N))) -·µ£ fst (b ^‚Ñö x‚ÇÄ))  ))
  convSteps zero n n<0 = ‚ä•.rec (‚Ñï.¬¨-<-zero n<0)
  convSteps (suc N) n n<sN@(N-n@(suc k) , p) =
    let X = convSteps N n (k , cong pred‚Ñï p)
    in isTrans<·µ£ _ _ _ X (<·µ£-o+ _ _ _
         (subst2 _<·µ£_ (¬∑·µ£Assoc _ _ _ ‚àô
             cong (_¬∑·µ£ ((fst (b ^‚Ñö (x (suc N))) -·µ£ fst (b ^‚Ñö x‚ÇÄ))))
            (sym (rat¬∑·µ£rat  (fromNat (suc n))
             (fst $ inv‚Ñö‚Çä (fromNat (suc N))))))

           (¬∑·µ£Assoc _ _ _ ‚àô
             cong (_¬∑·µ£ ((fst (b ^‚Ñö (x (suc (suc N)))) -·µ£ fst (b ^‚Ñö x‚ÇÄ))))
            (sym (rat¬∑·µ£rat (fromNat (suc n))
             (fst $ inv‚Ñö‚Çä (fromNat (suc (suc N)))))))
           (fst (z<x‚âÉy‚Çä¬∑z<y‚Çä¬∑x _ _ (fromNat (suc n)))
             (convStep N))))
  convSteps (suc zero) zero (zero , 1+n=1+N) = fromAM-GM
  convSteps (suc (suc N)) zero (zero , 1+n=1+N) =
    ‚ä•.rec (‚Ñï.znots (cong pred‚Ñï 1+n=1+N))
  convSteps (suc N) (suc n) (zero , 2+n=1+N) =
    subst2 _<·µ£_ (cong (fst ‚àò (b ^‚Ñö_) ‚àò x) (sym 2+n=1+N))
      (cong (Œª sn ‚Üí fst (b ^‚Ñö x‚ÇÄ) +·µ£
       rat (fst (fromNat (suc (pred‚Ñï sn)) ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä (fromNat (suc (suc N)))))
       ¬∑·µ£ (fst (b ^‚Ñö x (suc (suc N))) -·µ£ fst (b ^‚Ñö x‚ÇÄ))) (sym (2+n=1+N)))
         (isTrans<‚â°·µ£ _ _ _ (a-b<c‚áía<c+b (fst (b ^‚Ñö x (suc N))) _ _
           (invEq (z<x/y‚Çä‚âÉy‚Çä¬∑z<x _ _ (‚Ñö‚Çä‚Üí‚Ñù‚Çä (inv‚Ñö‚Çä (fromNat (suc N)))))
            (convStep N)))
           (cong (_+·µ£ fst (b ^‚Ñö x‚ÇÄ))
            (sym (¬∑·µ£Assoc _ _ _) ‚àô
              cong (rat (fst (inv‚Ñö‚Çä (fromNat (suc (suc N))))) ¬∑·µ£_)
               (¬∑·µ£Comm _ _)
              ‚àô ¬∑·µ£Assoc _ _ _
               ‚àô cong (_¬∑·µ£ (fst (b ^‚Ñö x (suc (suc N))) -·µ£ fst (b ^‚Ñö x‚ÇÄ)))
                    ((cong (rat (fst (inv‚Ñö‚Çä (fromNat (suc (suc N))))) ¬∑·µ£_)
                      (inv‚Ñù'-rat _ _ (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä (inv‚Ñö‚Çä (fromNat (suc N)))))
                        ‚àô cong rat (‚Ñö.inv‚Ñö‚Çä-invol _))
                     ‚àô sym (rat¬∑·µ£rat _ (fromNat (suc N)))) ‚àô
                        cong rat (‚Ñö.¬∑Comm _ _)))
              ‚àô +·µ£Comm _ _ ))


  convStep zero = isTrans‚â°<·µ£ _ _ _
    (¬∑IdL _) (a<c+b‚áía-c<b _ _  _ fromAM-GM)
  convStep (suc N) =
    isTrans<·µ£ _ _ _
       (isTrans<‚â°·µ£ _ _ _
          (invEq (z<x/y‚Çä‚âÉy‚Çä¬∑z<x _ _ (fromNat (suc (suc (suc N)))))
            (isTrans‚â°<·µ£ _ _ _
             (¬∑·µ£Assoc _ _ _ ‚àô
              cong (_¬∑·µ£ (fst (b ^‚Ñö x (suc (suc N))) -·µ£ fst (b ^‚Ñö x‚ÇÄ)))
                (sym (rat¬∑·µ£rat _ _) ‚àô
                 cong rat ((inv‚Ñö‚Çä-[/] _ _) ‚àô [2+N]/[1+N]=2-N/[1+N] (suc N)))
               ‚àô
                ¬∑DistR+ 2 (-·µ£ (rat [ _ / _ ])
                ) _
                )
              (isTrans<‚â°·µ£ _ _ _
                 (<·µ£-o+ _ _ _ (isTrans‚â°<·µ£ _ _ _ (-·µ£¬∑ _ _)
                   (-·µ£<·µ£ _ _
                  (isTrans<‚â°·µ£ _ _ _
             (a<c+b‚áía-c<b _ _ _ (convSteps (suc N) N ‚Ñï.‚â§-refl))
            (cong (_¬∑·µ£ (fst (b ^‚Ñö x (suc (suc N))) -·µ£ fst (b ^‚Ñö x‚ÇÄ)))
             (cong rat (inv‚Ñö‚Çä-[/] (pos (suc N)) (suc N)))))) ))
                 (cong (_-·µ£ (fst (b ^‚Ñö x (suc N)) -·µ£ fst (b ^‚Ñö x‚ÇÄ)))
                   (sym (x+x‚â°2x _))
                  ‚àô‚àô Lùêë.lem--076 ‚àô‚àô
                  cong ((_-·µ£ fst (b ^‚Ñö x‚ÇÄ)) ‚àò (_-·µ£ fst (b ^‚Ñö x (suc N))))
                    (x+x‚â°2x _)))))
           (cong ((fst (2 ‚Çä¬∑·µ£ (b ^‚Ñö x (suc (suc N))))
           -·µ£ fst (b ^‚Ñö x (suc N)) +·µ£
            -·µ£ fst (b ^‚Ñö x‚ÇÄ))
             ¬∑·µ£_) (inv‚Ñù'-rat _ _ _) ‚àô ¬∑·µ£Comm _ _))

       (<·µ£-o¬∑·µ£ _ _ (‚Ñö‚Çä‚Üí‚Ñù‚Çä
             ((inv‚Ñö‚Çä ([ pos (suc (suc (suc N))) , (1+ 0) ] , tt)))) (
          (<·µ£-+o _ _ _
             (a<c+b‚áía-c<b _ _
              (fst (b ^‚Ñö (x (suc N))))
               (isTrans<‚â°·µ£ _ _ _ (AM-GM‚ÇÇ b 1<b (x (suc (suc N))) s)
                 (cong‚ÇÇ _+·µ£_
                   (cong (fst ‚àò (b ^‚Ñö_)) (cong (‚Ñö._- (fst s))
                     (sym (x-suc (suc N)))
                     ‚àô sym lem--034))
                    (cong (fst ‚àò (b ^‚Ñö_)) (x-suc (suc (suc N))) )  ))))) )



AM-GM-strict : ‚àÄ z x ‚Üí (1 <·µ£ fst z) ‚Üí (Œî : ‚Ñö‚Çä) ‚Üí (Œ± : ‚Ñö) ‚Üí 0 ‚Ñö.< Œ± ‚Üí Œ± ‚Ñö.< 1 ‚Üí
          fst (z ^‚Ñö (x ‚Ñö.+ (Œ± ‚Ñö.¬∑ fst Œî))) <·µ£
            fst (z ^‚Ñö x) +·µ£
              (rat Œ±) ¬∑·µ£
                (fst (z ^‚Ñö (x ‚Ñö.+ fst Œî)) -·µ£ fst (z ^‚Ñö x))
AM-GM-strict z x 1<z Œî = ElimProp.go w
 where
 w : ElimProp _
 w .ElimProp.isPropB _ = isPropŒ†2 Œª _ _ ‚Üí isProp<·µ£ _ _
 w .ElimProp.f (pos zero , (1+ m)) 0<Œ± Œ±<1 =
   ‚ä•.rec (‚Ñ§.¬¨-pos<-zero 0<Œ±)
 w .ElimProp.f (pos (suc n) , (1+ m)) 0<Œ± Œ±<1 =
   subst2 _<·µ£_
     (cong (fst ‚àò z ^‚Ñö_ ‚àò (x ‚Ñö.+_))
         (‚Ñö.¬∑Assoc _ [ pos 1 / 1+ m ] _ ‚àô
            cong (‚Ñö._¬∑ (fst Œî)) n/N-lem))
     ((cong (fst (z ^‚Ñö x) +·µ£_)
       (cong‚ÇÇ _¬∑·µ£_ (cong rat n/N-lem)
         (cong (_-·µ£ (fst (z ^‚Ñö x)))
           ((cong (fst ‚àò z ^‚Ñö_ ‚àò (x ‚Ñö.+_))
              (‚Ñö.¬∑Assoc _ [ pos 1 / 1+ m ] _ ‚àô
            cong (‚Ñö._¬∑ (fst Œî)) (‚Ñö.x¬∑inv‚Ñö‚Çä[x] (fromNat (suc m)))
              ‚àô ‚Ñö.¬∑IdL _)))))))
     ww
  where
  Œî/N =  ([ pos 1 / 1+ m ] , _) ‚Ñö‚Çä¬∑ Œî

  n/N-lem = cong‚ÇÇ [_/_] (‚Ñ§.¬∑IdR _) (¬∑‚Çä‚ÇÅ-identityÀ° _)

  ww = AM-GM-hlp.convSteps z 1<z x Œî/N m n
       (‚Ñï.pred‚Ñï-‚â§-pred‚Ñï (‚Ñ§.pos-‚â§-pos‚Üí‚Ñï‚â§ _ _
         (subst2 ‚Ñ§._<_ (‚Ñ§.¬∑IdR _) (‚Ñ§.¬∑IdL _)
           Œ±<1)))
 w .ElimProp.f Œ±@(‚Ñ§.negsuc n , 1+ m) 0<Œ± _ =
   ‚ä•.rec $ ‚Ñ§.¬¨pos‚â§negsuc (subst (0 ‚Ñ§.‚â§_) (‚Ñ§.¬∑IdR _)
            (‚Ñö.<Weaken‚â§ 0 SQ.[ Œ± ] 0<Œ±))

AM-GM : ‚àÄ z x ‚Üí (1 <·µ£ fst z) ‚Üí (Œî : ‚Ñö‚Çä) ‚Üí (Œ± : ‚Ñö) ‚Üí 0 ‚Ñö.‚â§ Œ± ‚Üí Œ± ‚Ñö.‚â§ 1 ‚Üí
          fst (z ^‚Ñö (x ‚Ñö.+ (Œ± ‚Ñö.¬∑ fst Œî))) ‚â§·µ£
            fst (z ^‚Ñö x) +·µ£
              (rat Œ±) ¬∑·µ£
                (fst (z ^‚Ñö (x ‚Ñö.+ fst Œî)) -·µ£ fst (z ^‚Ñö x))

AM-GM z x 1<z Œî Œ± 0‚â§Œ± Œ±‚â§1 =
 ‚äé.rec
   (Œª Œ±‚â°1 ‚Üí ‚â°·µ£Weaken‚â§·µ£
       (fst (z ^‚Ñö (x ‚Ñö.+ Œ± ‚Ñö.¬∑ fst Œî)))
       (fst (z ^‚Ñö x) +·µ£ rat Œ± ¬∑·µ£ (fst (z ^‚Ñö (x ‚Ñö.+ fst Œî)) -·µ£ fst (z ^‚Ñö x)))
       (cong {y = fst Œî} (fst ‚àò (z ^‚Ñö_) ‚àò (x ‚Ñö.+_))
          (cong (‚Ñö._¬∑ _) Œ±‚â°1 ‚àô ‚Ñö.¬∑IdL _)
        ‚àô‚àô sym (Lùêë.lem--05)
        ‚àô‚àô cong (fst (z ^‚Ñö x) +·µ£_)
             (sym (cong ((_¬∑·µ£ (fst (z ^‚Ñö (x ‚Ñö.+ fst Œî)) -·µ£ fst (z ^‚Ñö x))
               ) ‚àò rat) Œ±‚â°1 ‚àô ¬∑IdL _))))
   (‚äé.rec
      (Œª 0=Œ± _ ‚Üí ‚â°·µ£Weaken‚â§·µ£ _ _
         (cong (fst ‚àò (z ^‚Ñö_))
            (ùêê'.+IdR' x _
               (cong (‚Ñö._¬∑ (fst Œî)) (sym 0=Œ±)
                 ‚àô ùêê'.0LeftAnnihilates _))
           ‚àô sym (ùêë'.+IdR' _ _
           (cong (_¬∑·µ£ (fst (z ^‚Ñö (x ‚Ñö.+ fst Œî)) -·µ£ fst (z ^‚Ñö x)))
             (cong rat (sym 0=Œ±))
            ‚àô ùêë'.0LeftAnnihilates _))))
      ((<·µ£Weaken‚â§·µ£ _ _ ‚àò_) ‚àò (AM-GM-strict z x 1<z Œî Œ±))
      (‚Ñö.‚â§‚Üí‚â°‚äé< 0 Œ± 0‚â§Œ±))
   (‚Ñö.‚â§‚Üí‚â°‚äé< Œ± 1 Œ±‚â§1)

^‚Åø-1 : ‚àÄ x ‚Üí x ^‚Åø 1 ‚â° x
^‚Åø-1 x = ¬∑IdL _

^‚Ñö-1 : ‚àÄ x ‚Üí x ^‚Ñö 1 ‚â° x
^‚Ñö-1 x = ‚Ñù‚Çä‚â° (^‚Åø-1 _)

-- AM-GM



slope-incr-strict : (z : ‚Ñù‚Çä) (1<z : 1 <·µ£ fst z) ‚Üí (a b c : ‚Ñö)
  ‚Üí (a<b : a ‚Ñö.< b) ‚Üí (b<c : b ‚Ñö.< c) ‚Üí  (a<c : a ‚Ñö.< c) ‚Üí
  ((fst (z ^‚Ñö b) -·µ£ fst (z ^‚Ñö a))
    Ôºè·µ£‚Çä ‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä _ _ a<b))
      <·µ£
  ((fst (z ^‚Ñö c) -·µ£ fst (z ^‚Ñö a))
    Ôºè·µ£‚Çä ‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä _ _  a<c ))
slope-incr-strict z 1<z a b c a<b b<c a<c =
  isTrans‚â°<·µ£ _ _ _
     (cong (_¬∑·µ£ fst (inv‚Ñù‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä a b a<b))))
      (cong (_-·µ£ fst (z ^‚Ñö a))
          (cong (fst ‚àò (z ^‚Ñö_))
            (sym lem--05 ‚àô cong (a ‚Ñö.+_) (sym (‚Ñö.y¬∑[x/y] _ _) ‚àô
             ‚Ñö.¬∑Comm _ _ ‚àô
              cong (‚Ñö._¬∑ fst (‚Ñö.<‚Üí‚Ñö‚Çä a c a<c))
               (‚Ñö.¬∑Comm _ _))))))
     (isTrans<‚â°·µ£ _ _ _
      amgm
      (¬∑·µ£Comm _ _ ‚àô
        cong‚ÇÇ _¬∑·µ£_ (cong (_-·µ£ fst (z ^‚Ñö a))
          (cong (fst ‚àò (z ^‚Ñö_))
            lem--05))
         (sym (inv‚Ñù'-rat _ _ (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä _ _  a<c )))))))

 where
 Œ±‚Çä = (‚Ñö.<‚Üí‚Ñö‚Çä _ _  a<b ) ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä _ _  a<c )
 Œ±<1 : fst Œ±‚Çä ‚Ñö.< 1
 Œ±<1 = ‚Ñö.x<y¬∑z‚Üíx¬∑inv‚Ñö‚Çäy<z _ _ _
   (subst (b ‚Ñö.- a ‚Ñö.<_)
    (sym (‚Ñö.¬∑IdR _))
    (‚Ñö.<-+o _ _ (‚Ñö.- a) b<c))


 amgm = invEq (z/y<x‚Çä‚âÉz<y‚Çä¬∑x _ _ (‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä _ _  a<b )))
  (isTrans<‚â°·µ£ _ _ _ (a<c+b‚áía-c<b _ _ _
      (AM-GM-strict z a 1<z ((‚Ñö.<‚Üí‚Ñö‚Çä _ _  a<c ))
          (fst Œ±‚Çä) (‚Ñö.0<‚Ñö‚Çä Œ±‚Çä) Œ±<1))
           (cong (_¬∑·µ£ (fst (z ^‚Ñö (a ‚Ñö.+ fst (‚Ñö.<‚Üí‚Ñö‚Çä _ _ a<c))) -·µ£
       fst (z ^‚Ñö a))) (rat¬∑·µ£rat _ _)
        ‚àô sym (¬∑·µ£Assoc _ _ _)))

opaque
 unfolding _+·µ£_
 slope-incr'-strict : (z : ‚Ñù‚Çä) (1<z : 1 <·µ£ fst z) ‚Üí (a b c : ‚Ñö)
   ‚Üí (a ‚Ñö.< b) ‚Üí (b<c : b ‚Ñö.< c) ‚Üí  (a<c : a ‚Ñö.< c) ‚Üí
   ((fst (z ^‚Ñö c) -·µ£ fst (z ^‚Ñö a))
     Ôºè·µ£‚Çä ‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä _ _ a<c))
       <·µ£
   ((fst (z ^‚Ñö c) -·µ£ fst (z ^‚Ñö b))
     Ôºè·µ£‚Çä ‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä _ _  b<c ))
 slope-incr'-strict z 1<z a b c a<b b<c a<c =
  let w = fst (x'/x<[x'+y']/[x+y]‚âÉ[x'+y']/[x+y]<y'/y
                  (‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä _ _ a<b)) ((fst (z ^‚Ñö b) -·µ£ fst (z ^‚Ñö a)))
                  (‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä _ _ b<c)) ((fst (z ^‚Ñö c) -·µ£ fst (z ^‚Ñö b))))
              (isTrans<‚â°·µ£ _ _ _
                (slope-incr-strict z 1<z _ _ _ a<b b<c a<c)
                (cong‚ÇÇ _Ôºè·µ£‚Çä_
                  Lùêë.lem--077
                  (‚Ñù‚Çä‚â° (cong rat lem--077))))
  in isTrans‚â°<·µ£ _ _ _
      (cong‚ÇÇ _Ôºè·µ£‚Çä_
        Lùêë.lem--077
        ((‚Ñù‚Çä‚â° (cong rat lem--077)))) w

opaque
 unfolding _+·µ£_ -·µ£_
 slope-incr : (z : ‚Ñù‚Çä) (a b c : ‚Ñö)
   ‚Üí (a<b : a ‚Ñö.< b) ‚Üí (b‚â§c : b ‚Ñö.‚â§ c) ‚Üí  (a<c : a ‚Ñö.< c) ‚Üí
   ((fst (z ^‚Ñö b) -·µ£ fst (z ^‚Ñö a))
     Ôºè·µ£‚Çä ‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä _ _ a<b))
       ‚â§·µ£
   ((fst (z ^‚Ñö c) -·µ£ fst (z ^‚Ñö a))
     Ôºè·µ£‚Çä ‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä _ _  a<c ))
 slope-incr (z , 0<z) a b c a<b b‚â§c a<c =
   <‚Üí‚â§ContPos'pred {0}
     {Œª z 0<z ‚Üí
        ((fst ((z , 0<z) ^‚Ñö b)
        -·µ£ fst ((z , 0<z) ^‚Ñö a))
      Ôºè·µ£‚Çä ‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä _ _ a<b))}
      {Œª z 0<z ‚Üí
         ((fst ((z , 0<z) ^‚Ñö c)
           -·µ£ fst ((z , 0<z) ^‚Ñö a))
      Ôºè·µ£‚Çä ‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä _ _  a<c ))}
       ((IsContinuousWP‚àò' _ _ _
       (IsContinuous¬∑·µ£R (fst (inv‚Ñù‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä _ _ a<b)))))
       (contDiagNE‚ÇÇWP sumR _ _ _
         (‚äÜIsContinuousWithPred _ _ (Œª x 0<x ‚Üí 0<x) _
           (IsContinuous^‚Ñö b))
            (IsContinuousWP‚àò' _ _ _ IsContinuous-·µ£
              ((‚äÜIsContinuousWithPred _ _ (Œª x 0<x ‚Üí 0<x) _
           (IsContinuous^‚Ñö a)))))))
       (((IsContinuousWP‚àò' _ _ _
       (IsContinuous¬∑·µ£R (fst (inv‚Ñù‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä _ _ a<c)))))
       (contDiagNE‚ÇÇWP sumR _ _ _
         (‚äÜIsContinuousWithPred _ _ (Œª x 0<x ‚Üí 0<x) _
           (IsContinuous^‚Ñö c))
            (IsContinuousWP‚àò' _ _ _ IsContinuous-·µ£
              ((‚äÜIsContinuousWithPred _ _ (Œª x 0<x ‚Üí 0<x) _
           (IsContinuous^‚Ñö a))))))))
       (‚Ñö.byTrichotomy 1 w)
         z 0<z

  where

   slope-incr** : (z : ‚Ñù‚Çä) (1<z : 1 <·µ£ fst z) ‚Üí (a b c : ‚Ñö)
     ‚Üí (a<b : a ‚Ñö.< b) ‚Üí (b‚â§c : b ‚Ñö.‚â§ c) ‚Üí  (a<c : a ‚Ñö.< c) ‚Üí
     ((fst (z ^‚Ñö b) -·µ£ fst (z ^‚Ñö a))
       Ôºè·µ£‚Çä ‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä _ _ a<b))
         ‚â§·µ£
     ((fst (z ^‚Ñö c) -·µ£ fst (z ^‚Ñö a))
       Ôºè·µ£‚Çä ‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä _ _  a<c ))
   slope-incr** z 1<z a b c a<b =
      flip
        Œª a<c ‚Üí ‚äé.rec
           (‚â°·µ£Weaken‚â§·µ£ _ _ ‚àò
             cong
               (Œª (b , a<b) ‚Üí
                 ((fst (z ^‚Ñö b) -·µ£ fst (z ^‚Ñö a)) Ôºè·µ£‚Çä ‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä a b a<b)))
               ‚àò Œ£‚â°Prop {B = Œª b ‚Üí a ‚Ñö.< b} (‚Ñö.isProp< _))
           (Œª b<c ‚Üí <·µ£Weaken‚â§·µ£ _ _ $  slope-incr-strict z 1<z a b c a<b b<c a<c)
          ‚àò ‚Ñö.‚â§‚Üí‚â°‚äé< b c

   w : ‚Ñö.TrichotomyRec 1
          Œª u ‚Üí (0<u : 0 <·µ£ rat u) ‚Üí ((fst ((rat u , 0<u) ^‚Ñö b) -·µ£ fst ((rat u , 0<u) ^‚Ñö a)) Ôºè·µ£‚Çä
                      ‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä a b a<b))
                     ‚â§·µ£
                     ((fst ((rat u , 0<u) ^‚Ñö c) -·µ£ fst ((rat u , 0<u) ^‚Ñö a)) Ôºè·µ£‚Çä
                      ‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä a c a<c))
   w .‚Ñö.TrichotomyRec.lt-case u u<1 0<u =
     subst2 _‚â§·µ£_
         (sym (-·µ£¬∑ _ _ ) ‚àô cong‚ÇÇ (Œª A B ‚Üí A Ôºè·µ£‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä B))
            (-[x-y]‚â°y-x _ _ ‚àô cong‚ÇÇ _-·µ£_ (sym (cong fst (^‚Ñö-minus u‚Çä b)))
                        ((sym (cong fst (^‚Ñö-minus u‚Çä a)))))
                        {u = ‚Ñö.<‚Üí‚Ñö‚Çä (‚Ñö.- b) (‚Ñö.- a) (‚Ñö.minus-< _ _ a<b)}
                        (‚Ñö‚Çä‚â° (sym lem--083)))
         (sym (-·µ£¬∑ _ _) ‚àô (cong‚ÇÇ (Œª A B ‚Üí A Ôºè·µ£‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä B))
            (-[x-y]‚â°y-x _ _ ‚àô cong‚ÇÇ _-·µ£_
               ((sym (cong fst (^‚Ñö-minus u‚Çä c))))
               ((sym (cong fst (^‚Ñö-minus u‚Çä a)))))
               {u = ‚Ñö.<‚Üí‚Ñö‚Çä (‚Ñö.- c) (‚Ñö.- a) (‚Ñö.minus-< _ _ a<c)}
                 (‚Ñö‚Çä‚â° (sym lem--083))))
           (-·µ£‚â§·µ£ _ _
             (‚äé.rec ww'' ww' (‚Ñö.‚â§‚Üí‚â°‚äé< b c b‚â§c)))
     where
     u‚Çä : ‚Ñù‚Çä
     u‚Çä = (rat u , 0<u)
     1/u‚Çä : ‚Ñù‚Çä
     1/u‚Çä = (inv‚Ñù‚Çä (rat u , 0<u))
     1<1/u : 1 <·µ£ (fst 1/u‚Çä)
     1<1/u = isTrans<‚â°·µ£ _ _ _
        (invEq (z<x/y‚Çä‚âÉy‚Çä¬∑z<x 1 1 (rat u , 0<u)) (isTrans‚â°<·µ£ _ _ _
            (¬∑IdR _) (<‚Ñö‚Üí<·µ£ _ _ u<1)))
         (¬∑IdL _)

     ww' : (b ‚Ñö.< c) ‚Üí   ((fst (1/u‚Çä ^‚Ñö (‚Ñö.- a)) -·µ£ fst (1/u‚Çä ^‚Ñö (‚Ñö.- c)))
                                  Ôºè·µ£‚Çä ‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä (‚Ñö.- c) (‚Ñö.- a) (‚Ñö.minus-< a c a<c)))
                                    ‚â§·µ£
                                ((fst (1/u‚Çä ^‚Ñö (‚Ñö.- a)) -·µ£ fst (1/u‚Çä ^‚Ñö (‚Ñö.- b)))
                                  Ôºè·µ£‚Çä ‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä (‚Ñö.- b) (‚Ñö.- a) (‚Ñö.minus-< a b a<b) ))
     ww' b<c = <·µ£Weaken‚â§·µ£ _ _ $ slope-incr'-strict (inv‚Ñù‚Çä (rat u , 0<u)) 1<1/u (‚Ñö.- c) (‚Ñö.- b) (‚Ñö.- a)
              (‚Ñö.minus-< _ _ b<c) (‚Ñö.minus-< _ _ a<b) (‚Ñö.minus-< _ _ a<c)


     ww'' : (b ‚â° c) ‚Üí   ((fst (1/u‚Çä ^‚Ñö (‚Ñö.- a)) -·µ£ fst (1/u‚Çä ^‚Ñö (‚Ñö.- c)))
                                  Ôºè·µ£‚Çä ‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä (‚Ñö.- c) (‚Ñö.- a) (‚Ñö.minus-< a c a<c)))
                                   ‚â§·µ£
                                ((fst (1/u‚Çä ^‚Ñö (‚Ñö.- a)) -·µ£ fst (1/u‚Çä ^‚Ñö (‚Ñö.- b)))
                                  Ôºè·µ£‚Çä ‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä (‚Ñö.- b) (‚Ñö.- a) (‚Ñö.minus-< a b a<b) ))
     ww'' b=c = ‚â°·µ£Weaken‚â§·µ£ _ _ (
             cong
               (Œª (b , -b<-a) ‚Üí
                 ((fst (1/u‚Çä ^‚Ñö (‚Ñö.- a)) -·µ£ fst (1/u‚Çä ^‚Ñö (‚Ñö.- b))) Ôºè·µ£‚Çä ‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä (‚Ñö.- b) (‚Ñö.- a) -b<-a)))
               (Œ£‚â°Prop {B = Œª b ‚Üí (‚Ñö.- b) ‚Ñö.< (‚Ñö.- a)} (Œª _ ‚Üí ‚Ñö.isProp< _ _) (sym b=c)))


   w .‚Ñö.TrichotomyRec.eq-case _ = ‚â°·µ£Weaken‚â§·µ£ _ _
             (ùêë'.0LeftAnnihilates' _ _
                 (ùêë'.+InvR' _ _ (cong (fst ‚àò (_^‚Ñö b)) (‚Ñù‚Çä‚â° refl) ‚àô cong fst (1^‚Ñö‚â°1 b)
                   ‚àô sym (cong (fst ‚àò (_^‚Ñö a)) (‚Ñù‚Çä‚â° refl) ‚àô cong fst (1^‚Ñö‚â°1 a))))
               ‚àô sym (ùêë'.0LeftAnnihilates' _ _
                 (ùêë'.+InvR' _ _ ((cong (fst ‚àò (_^‚Ñö c)) (‚Ñù‚Çä‚â° refl) ‚àô cong fst (1^‚Ñö‚â°1 c)
                   ‚àô sym (cong (fst ‚àò (_^‚Ñö a)) (‚Ñù‚Çä‚â° refl) ‚àô cong fst (1^‚Ñö‚â°1 a)))))))
   w .‚Ñö.TrichotomyRec.gt-case u 1<u 0<u =
     slope-incr** (rat u , 0<u) (<‚Ñö‚Üí<·µ£ _ _ 1<u) a b c a<b b‚â§c a<c




slope-incr' : (z : ‚Ñù‚Çä) ‚Üí (a b c : ‚Ñö)
  ‚Üí (a‚â§b : a ‚Ñö.‚â§ b) ‚Üí (b<c : b ‚Ñö.< c) ‚Üí  (a<c : a ‚Ñö.< c) ‚Üí
  ((fst (z ^‚Ñö c) -·µ£ fst (z ^‚Ñö a))
    Ôºè·µ£‚Çä ‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä _ _ a<c))
      ‚â§·µ£
  ((fst (z ^‚Ñö c) -·µ£ fst (z ^‚Ñö b))
    Ôºè·µ£‚Çä ‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä _ _  b<c ))
slope-incr' z a b c a‚â§b b<c a<c =
     subst2 _‚â§·µ£_
       (sym (-·µ£¬∑ _ _) ‚àô cong‚ÇÇ (Œª A B ‚Üí A Ôºè·µ£‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä B))
          (-[x-y]‚â°y-x _ _ ‚àô cong‚ÇÇ _-·µ£_ (sym (cong fst (^‚Ñö-minus z _)))
                      ((sym (cong fst (^‚Ñö-minus z _)))))
                      {u = ‚Ñö.<‚Üí‚Ñö‚Çä (‚Ñö.- _) (‚Ñö.- _) (‚Ñö.minus-< _ _ _)}
                      (‚Ñö‚Çä‚â° (sym lem--083)))
       (sym (-·µ£¬∑ _ _) ‚àô (cong‚ÇÇ (Œª A B ‚Üí A Ôºè·µ£‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä B))
          (-[x-y]‚â°y-x _ _ ‚àô cong‚ÇÇ _-·µ£_
             ((sym (cong fst (^‚Ñö-minus z _))))
             ((sym (cong fst (^‚Ñö-minus z _)))))
             {u = ‚Ñö.<‚Üí‚Ñö‚Çä (‚Ñö.- _) (‚Ñö.- _) (‚Ñö.minus-< _ _ _)}
               (‚Ñö‚Çä‚â° (sym lem--083))))
              ww

 where
 ww : -·µ£ ((fst (inv‚Ñù‚Çä z ^‚Ñö (‚Ñö.- a)) -·µ£ fst (inv‚Ñù‚Çä z ^‚Ñö (‚Ñö.- c))) Ôºè·µ£‚Çä
        ‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä (‚Ñö.- c) (‚Ñö.- a) (‚Ñö.minus-< a c a<c)))
      ‚â§·µ£
      -·µ£ ((fst (inv‚Ñù‚Çä z ^‚Ñö (‚Ñö.- b)) -·µ£ fst (inv‚Ñù‚Çä z ^‚Ñö (‚Ñö.- c))) Ôºè·µ£‚Çä
        ‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä (‚Ñö.- c) (‚Ñö.- b) (‚Ñö.minus-< b c b<c)))


 ww = -·µ£‚â§·µ£ _ _ (slope-incr (inv‚Ñù‚Çä z) (‚Ñö.- c) (‚Ñö.- b) (‚Ñö.- a)
         (‚Ñö.minus-< _ _ b<c) (‚Ñö.minus-‚â§ _ _ a‚â§b) (‚Ñö.minus-< _ _ a<c))


slope-monotone : (z : ‚Ñù‚Çä)  ‚Üí (a b a' b' : ‚Ñö)
  ‚Üí (a<b : a ‚Ñö.< b) ‚Üí (a'<b' : a' ‚Ñö.< b') ‚Üí (a‚â§a' : a ‚Ñö.‚â§ a') ‚Üí  (b‚â§b' : b ‚Ñö.‚â§ b') ‚Üí
  ((fst (z ^‚Ñö b) -·µ£ fst (z ^‚Ñö a))
    Ôºè·µ£‚Çä ‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä _ _ a<b))
      ‚â§·µ£
  ((fst (z ^‚Ñö b') -·µ£ fst (z ^‚Ñö a'))
    Ôºè·µ£‚Çä ‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä _ _  a'<b' ))
slope-monotone z a b a' b' a<b a'<b' a‚â§a' b‚â§b' =
  isTrans‚â§·µ£ _ _ _
    (slope-incr z a b b' a<b b‚â§b' (‚Ñö.isTrans<‚â§ _ _ _ a<b b‚â§b'))
      (slope-incr' z a a' b' a‚â§a' a'<b' (‚Ñö.isTrans<‚â§ _ _ _ a<b b‚â§b'))

opaque
 unfolding -·µ£_ _+·µ£_
 slope-monotoneÔºÉ : (z : ‚Ñù‚Çä) ‚Üí (a b a' b' : ‚Ñö)
   ‚Üí (aÔºÉb : rat a ÔºÉ rat b) ‚Üí (a'<b' : a' ‚Ñö.< b') ‚Üí (a‚â§a' : a ‚Ñö.‚â§ a') ‚Üí  (b‚â§b' : b ‚Ñö.‚â§ b') ‚Üí
   ((fst (z ^‚Ñö b) -·µ£ fst (z ^‚Ñö a))
     Ôºè·µ£[ rat b -·µ£ rat a  , invEq (ÔºÉŒî _ _) aÔºÉb ])
       ‚â§·µ£
   ((fst (z ^‚Ñö b') -·µ£ fst (z ^‚Ñö a'))
     Ôºè·µ£‚Çä ‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä _ _  a'<b' ))
 slope-monotoneÔºÉ z a b a' b' (inl a<b) a'<b' a‚â§a' b‚â§b' =
   isTrans‚â°‚â§·µ£ _ _ _
     (cong ((fst (z ^‚Ñö b) -·µ£ fst (z ^‚Ñö a)) ¬∑·µ£_)
       (sym (inv‚Ñù‚Çä‚â°inv‚Ñù _ _)))
     (slope-monotone z  a b a' b' (<·µ£‚Üí<‚Ñö _ _ a<b) a'<b' a‚â§a' b‚â§b')
 slope-monotoneÔºÉ z  a b a' b' (inr b<a) a'<b' a‚â§a' b‚â§b' =
   isTrans‚â°‚â§·µ£ _ _ _
      w
     (slope-monotone z b a a' b' (<·µ£‚Üí<‚Ñö _ _ b<a) a'<b'
       (‚Ñö.isTrans‚â§ _ _ _
         (‚Ñö.<Weaken‚â§ _ _ (<·µ£‚Üí<‚Ñö _ _ b<a)) a‚â§a')
          (‚Ñö.isTrans‚â§ _ _ _ a‚â§a' (‚Ñö.<Weaken‚â§ _ _ a'<b')))

  where
  w : ((fst (z ^‚Ñö b) -·µ£ fst (z ^‚Ñö a)) Ôºè·µ£[ rat b -·µ£ rat a ,
        invEq (ÔºÉŒî (rat b) (rat a)) (inr b<a) ])
       ‚â°
       ((fst (z ^‚Ñö a) -·µ£ fst (z ^‚Ñö b)) Ôºè·µ£‚Çä
        ‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä b a (<·µ£‚Üí<‚Ñö b a b<a)))
  w = sym (-·µ£¬∑-·µ£ _ _) ‚àô
      cong‚ÇÇ _¬∑·µ£_
        (-[x-y]‚â°y-x _ _)
        (-inv‚Ñù _ _ ‚àô‚àô cong‚ÇÇ inv‚Ñù (-[x-y]‚â°y-x (rat b) (rat a))
          (toPathP refl)
          ‚àô‚àô sym (inv‚Ñù‚Çä‚â°inv‚Ñù _ _))

 slope-monotoneÔºÉ' : (z : ‚Ñù‚Çä) ‚Üí (a b a' b' : ‚Ñö)
   ‚Üí (a<b : a ‚Ñö.< b) ‚Üí (a'ÔºÉb' : rat a' ÔºÉ rat b')  ‚Üí (a‚â§a' : a ‚Ñö.‚â§ a') ‚Üí  (b‚â§b' : b ‚Ñö.‚â§ b') ‚Üí
   ((fst (z ^‚Ñö b) -·µ£ fst (z ^‚Ñö a))
     Ôºè·µ£‚Çä ‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä _ _  a<b ))
       ‚â§·µ£
   ((fst (z ^‚Ñö b') -·µ£ fst (z ^‚Ñö a'))
      Ôºè·µ£[ rat b' -·µ£ rat a'  , invEq (ÔºÉŒî _ _) a'ÔºÉb' ])
 slope-monotoneÔºÉ' z a b a' b' a<b (inl a'<b') a‚â§a' b‚â§b' =
   isTrans‚â§‚â°·µ£ _ _ _
     (slope-monotone z a b a' b' a<b (<·µ£‚Üí<‚Ñö _ _ a'<b') a‚â§a' b‚â§b')
     ((cong ((fst (z ^‚Ñö b') -·µ£ fst (z ^‚Ñö a')) ¬∑·µ£_)
       (inv‚Ñù‚Çä‚â°inv‚Ñù _ _)))
 slope-monotoneÔºÉ' z a b a' b' a<b (inr b'<a') a‚â§a' b‚â§b' =
  isTrans‚â§‚â°·µ£ _ _ _
    ((slope-monotone z a b b' a' a<b (<·µ£‚Üí<‚Ñö _ _ b'<a')
       (‚Ñö.isTrans‚â§ _ _ _ (‚Ñö.<Weaken‚â§ _ _ a<b) b‚â§b')
       (‚Ñö.isTrans‚â§ _ _ _ b‚â§b' ((‚Ñö.<Weaken‚â§ _ _ (<·µ£‚Üí<‚Ñö _ _ b'<a'))))))
    (sym w)


  where
  w : ((fst (z ^‚Ñö b') -·µ£ fst (z ^‚Ñö a')) Ôºè·µ£[ rat b' -·µ£ rat a' ,
        invEq (ÔºÉŒî (rat b') (rat a')) (inr b'<a') ])
       ‚â°
       ((fst (z ^‚Ñö a') -·µ£ fst (z ^‚Ñö b')) Ôºè·µ£‚Çä
        ‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä b' a' (<·µ£‚Üí<‚Ñö b' a' b'<a')))
  w = sym (-·µ£¬∑-·µ£ _ _) ‚àô
      cong‚ÇÇ _¬∑·µ£_
        (-[x-y]‚â°y-x _ _)
        (-inv‚Ñù _ _ ‚àô‚àô cong‚ÇÇ inv‚Ñù (-[x-y]‚â°y-x (rat b') (rat a'))
          (toPathP refl)
          ‚àô‚àô sym (inv‚Ñù‚Çä‚â°inv‚Ñù _ _))




slope-monotone-strict : (z : ‚Ñù‚Çä) (1<z : 1 <·µ£ fst z) ‚Üí (a b a' b' : ‚Ñö)
  ‚Üí (a<b : a ‚Ñö.< b) ‚Üí (a'<b' : a' ‚Ñö.< b') ‚Üí (a‚â§a' : a ‚Ñö.‚â§ a') ‚Üí  (b<b' : b ‚Ñö.< b') ‚Üí
  ((fst (z ^‚Ñö b) -·µ£ fst (z ^‚Ñö a))
    Ôºè·µ£‚Çä ‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä _ _ a<b))
      <·µ£
  ((fst (z ^‚Ñö b') -·µ£ fst (z ^‚Ñö a'))
    Ôºè·µ£‚Çä ‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä _ _  a'<b' ))
slope-monotone-strict z 1<z a b a' b' a<b a'<b' a‚â§a' b<b' =
  isTrans<‚â§·µ£ _ _ _
    (slope-incr-strict z 1<z a b b' a<b b<b' (‚Ñö.isTrans< _ _ _ a<b b<b'))
      (slope-incr' z a a' b' a‚â§a' a'<b' (‚Ñö.isTrans< _ _ _ a<b b<b'))

slope-monotone-strict' : (z : ‚Ñù‚Çä) (1<z : 1 <·µ£ fst z) ‚Üí (a b a' b' : ‚Ñö)
  ‚Üí (a<b : a ‚Ñö.< b) ‚Üí (a'<b' : a' ‚Ñö.< b') ‚Üí (a<a' : a ‚Ñö.< a') ‚Üí  (b‚â§b' : b ‚Ñö.‚â§ b') ‚Üí
  ((fst (z ^‚Ñö b) -·µ£ fst (z ^‚Ñö a))
    Ôºè·µ£‚Çä ‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä _ _ a<b))
      <·µ£
  ((fst (z ^‚Ñö b') -·µ£ fst (z ^‚Ñö a'))
    Ôºè·µ£‚Çä ‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä _ _  a'<b' ))
slope-monotone-strict' z 1<z a b a' b' a<b a'<b' a<a' b‚â§b' =
  isTrans‚â§<·µ£ _ _ _
    (slope-incr z a b b' a<b b‚â§b' (‚Ñö.isTrans<‚â§ _ _ _ a<b b‚â§b'))
      (slope-incr'-strict z 1<z a a' b' a<a' a'<b' (‚Ñö.isTrans<‚â§ _ _ _ a<b b‚â§b'))

opaque
 unfolding inv‚Ñù
 bernoulli's-ineq-^‚Ñö-r<1 : ‚àÄ x r ‚Üí 1 <·µ£ fst x ‚Üí 0 ‚Ñö.< r ‚Üí r ‚Ñö.< 1 ‚Üí fst (x ^‚Ñö r) <·µ£ 1 +·µ£ rat r ¬∑·µ£ (fst x -·µ£ 1)
 bernoulli's-ineq-^‚Ñö-r<1 x r 1<x 0<r r<1 =
   isTrans<‚â°·µ£ _ _ _ (a-b<c‚áía<c+b _ 1 _
       ((fst (z/y<x‚Çä‚âÉz<y‚Çä¬∑x _ _ _)
             (slope-incr-strict x 1<x 0 r 1
                0<r r<1 ‚Ñö.dec‚Ñö<?))))
              (+·µ£Comm _ _ ‚àô cong (1 +·µ£_)
                (cong‚ÇÇ _¬∑·µ£_ (cong rat (‚Ñö.+IdR _))
                  (ùêë'.¬∑IdR' _ _ (cong rat ‚Ñö.dec‚Ñö?)
                   ‚àô cong‚ÇÇ (_-·µ£_) (cong fst (^‚Ñö-1 x)) (cong fst (1^‚Ñö‚â°1 0)))))

 bernoulli's-ineq-^‚Ñö : ‚àÄ x r ‚Üí 1 <·µ£ fst x
  ‚Üí 1 ‚Ñö.< r ‚Üí 1 +·µ£ rat r ¬∑·µ£ (fst x -·µ£ 1)  <·µ£ fst (x ^‚Ñö r)
 bernoulli's-ineq-^‚Ñö x r 1<x 1<r =
   isTrans‚â°<·µ£ _ _ _
        (cong (1 +·µ£_) (cong‚ÇÇ _¬∑·µ£_
          (sym (cong rat (‚Ñö.+IdR _)))
          (cong‚ÇÇ (_-·µ£_) (sym (cong fst (^‚Ñö-1 x))) (cong fst (sym (1^‚Ñö‚â°1 0)))
           ‚àô sym (ùêë'.¬∑IdR' _ _ (cong rat ‚Ñö.dec‚Ñö?))))
          ‚àô +·µ£Comm _ _)
        (a<b-c‚áía+c<b _ _ 1 (fst (z<x/y‚Çä‚âÉy‚Çä¬∑z<x _ _ _)
         (slope-incr-strict x 1<x 0 1 r ‚Ñö.dec‚Ñö<?
          1<r (‚Ñö.isTrans< _ 1 _ ‚Ñö.dec‚Ñö<? 1<r))))


power-slope-Œî : (z : ‚Ñù‚Çä) (1<z : 1 <·µ£ fst z) ‚Üí (a b : ‚Ñö) ‚Üí a ‚Ñö.< b ‚Üí
   (Œî : ‚Ñö‚Çä) ‚Üí
  fst (z ^‚Ñö b) -·µ£ fst (z ^‚Ñö a) <·µ£
   fst (z ^‚Ñö (b ‚Ñö.+ fst Œî)) -·µ£ fst (z ^‚Ñö (a ‚Ñö.+ fst Œî))
power-slope-Œî z 1<z a b a<b Œî =
  isTrans<‚â°·µ£ _ _ _
    (isTrans‚â°<·µ£ _ _ _
       (sym (¬∑IdL _))
       (<·µ£-¬∑·µ£o _ _ (_ ,
         x<y‚Üí0<y-x _ _ (^‚Ñö-StrictMonotoneR 1<z _ _ a<b ))
        (1<^‚Ñö z Œî 1<z)  ))
    (¬∑DistL- (fst (z ^‚Ñö (fst Œî))) _ _ ‚àô
      cong‚ÇÇ _-·µ£_
       (¬∑·µ£Comm _ _ ‚àô cong fst (^‚Ñö-+ z _ _))
       (¬∑·µ£Comm _ _ ‚àô cong fst (^‚Ñö-+ z _ _)))


fromNat‚Ñù‚â°fromNat‚Ñö : ‚àÄ n ‚Üí fromNat (suc n) ‚â° ‚Ñö‚Çä‚Üí‚Ñù‚Çä (fromNat (suc n))
fromNat‚Ñù‚â°fromNat‚Ñö n = ‚Ñù‚Çä‚â° refl

bound : ‚Ñù‚Çä ‚Üí ‚Ñö‚Çä ‚Üí ‚Ñù
bound z B = ((fst (z ^‚Ñö (2 ‚Ñö.¬∑ (fst B))) -·µ£ fst (z ^‚Ñö (fst B))) ¬∑·µ£
   rat (fst (inv‚Ñö‚Çä B)))

bound1‚â°0 : ‚àÄ q ‚Üí bound 1 q ‚â° 0
bound1‚â°0 q = ùêë'.0LeftAnnihilates' _ _
  (ùêë'.+InvR' _ _ ((cong fst (1^‚Ñö‚â°1 _) ‚àô cong fst (sym (1^‚Ñö‚â°1 _)))))

2x-x‚â°x : ‚àÄ q ‚Üí (2 ‚Ñö.¬∑ q) ‚Ñö.- q ‚â° q
2x-x‚â°x q = cong ((2 ‚Ñö.¬∑ q) ‚Ñö.+_)
            (cong (‚Ñö.-_) (sym (‚Ñö.¬∑IdL _)))
              ‚àô sym (ùêê'.¬∑DistL- 2 1 q)
              ‚àô ‚Ñö.¬∑IdL _

module _ (Z N : ‚Ñï) where

 N<2N : fromNat (suc N) ‚Ñö.< 2 ‚Ñö.¬∑ fromNat (suc N)
 N<2N = (‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _
         (‚Ñ§.suc-‚â§-suc (subst (pos (suc N) ‚Ñ§.‚â§_) (cong pos (‚Ñï.+-suc _ _)
          ‚àô ‚Ñ§.pos+ _ _)
           (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _ (‚Ñï.‚â§-+k {0} {N} {k = suc N} ‚Ñï.zero-‚â§)))))

 N<2N' : fromNat (suc N) ‚Ñö.< fromNat (2 ‚Ñï.¬∑ suc N)
 N<2N' = subst (fromNat (suc N) ‚Ñö.<_) (‚Ñö.‚Ñï¬∑‚Üí‚Ñö¬∑ _ _) N<2N



 1<2+Z = (<‚Ñö‚Üí<·µ£ 1 (fromNat (2 ‚Ñï.+ Z)) (‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _
        (‚Ñï.‚â§-k+ {k = 2} ‚Ñï.zero-‚â§))))

 bound‚Ñö : ‚Ñö‚Çä
 bound‚Ñö = ‚Ñö.<‚Üí‚Ñö‚Çä _ _
    (<·µ£‚Üí<‚Ñö ((fromNat (2 ‚Ñï.+ Z)) ‚Ñö^‚Åø suc N)
           ((fromNat (2 ‚Ñï.+ Z)) ‚Ñö^‚Åø (2 ‚Ñï.¬∑ suc N))
      (subst2 _<·µ£_
        (^‚Åø-‚Ñö^‚Åø _ _)
        (cong (fst ‚àò (fromNat (suc (suc Z)) ^‚Ñö_))
          (‚Ñö.‚Ñï¬∑‚Üí‚Ñö¬∑ _ _)
         ‚àô ^‚Åø-‚Ñö^‚Åø _ _)
       (^‚Ñö-StrictMonotoneR {fromNat (suc (suc Z))}
       1<2+Z
       (fromNat (suc N)) (2 ‚Ñö.¬∑ fromNat (suc N)) N<2N)))
         ‚Ñö‚Çä¬∑
       (inv‚Ñö‚Çä (fromNat (suc N)))

 bound‚ÑöInv : ‚Ñö‚Çä
 bound‚ÑöInv = ‚Ñö.<‚Üí‚Ñö‚Çä _ _
    (<·µ£‚Üí<‚Ñö ([ 1 / fromNat (2 ‚Ñï.+ Z) ] ‚Ñö^‚Åø (2 ‚Ñï.¬∑ suc N))
           ([ 1 / fromNat (2 ‚Ñï.+ Z) ] ‚Ñö^‚Åø (suc N))
      (subst2 _<·µ£_
        (^‚Åø-‚Ñö^‚Åø _ _)
        (^‚Åø-‚Ñö^‚Åø _ _)
        (^‚Ñö-StrictMonotoneR' {‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ 1 / fromNat (2 ‚Ñï.+ Z) ] , _)}
           (<‚Ñö‚Üí<·µ£ _ _ (fst (‚Ñö.inv‚Ñö‚Çä-<-inv‚Ñö‚Çä 1 (fromNat (2 ‚Ñï.+ Z)))
             (‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _ ((‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _
               (‚Ñï.‚â§-k+ {k = 2} ‚Ñï.zero-‚â§))))))
           (fromNat (suc N)) (fromNat (2 ‚Ñï.¬∑ suc N))
              (subst (Œª n ‚Üí fromNat (n) ‚Ñö.< fromNat (2 ‚Ñï.¬∑ suc N))
                (‚Ñï.¬∑-identityÀ° _)
                (‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _ (
                  invEq (‚Ñ§.pos-<-pos‚âÉ‚Ñï< _ _)
                    (‚Ñï.<-¬∑sk {1} {2} {N} ‚Ñï.‚â§-refl)))))))
         ‚Ñö‚Çä¬∑
       (inv‚Ñö‚Çä (fromNat (suc N)))


 hlp : fst
      (inv‚Ñù‚Çä
       (‚Ñö‚Çä‚Üí‚Ñù‚Çä
        (‚Ñö.<‚Üí‚Ñö‚Çä [ pos (suc N) / 1+ 0 ]
         [ pos (suc (N ‚Ñï.+ suc (N ‚Ñï.+ zero))) / 1+ 0 ] N<2N')))
      ‚â° rat (fst (inv‚Ñö‚Çä ([ pos (suc N) , (1+ 0) ] , tt)))
 hlp = (inv‚Ñù‚Çä-rat _ ‚àô
            cong (rat ‚àò fst ‚àò inv‚Ñö‚Çä)
              (‚Ñö‚Çä‚â° (cong (‚Ñö._- (fromNat (suc N))) (sym (‚Ñö.‚Ñï¬∑‚Üí‚Ñö¬∑ _ _))
               ‚àô 2x-x‚â°x (fromNat (suc N)))))

 hlp2 : inv‚Ñù‚Çä (fromNat (2 ‚Ñï.+ Z)) ‚â°
      ‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ 1 / fromNat (2 ‚Ñï.+ Z) ] , _)
 hlp2 = ‚Ñù‚Çä‚â° (cong (fst ‚àò inv‚Ñù‚Çä) (fromNat‚Ñù‚â°fromNat‚Ñö _)
  ‚àô inv‚Ñù‚Çä-rat (fromNat (2 ‚Ñï.+ Z)))

 opaque
  unfolding -·µ£_ _+·µ£_
  bound‚ÑöInv<bound‚Ñö : fst (bound‚ÑöInv) ‚Ñö.< fst (bound‚Ñö)
  bound‚ÑöInv<bound‚Ñö =
    <·µ£‚Üí<‚Ñö _ _
      (subst2 _<·µ£_
        (cong‚ÇÇ _¬∑·µ£_
           (cong‚ÇÇ _-·µ£_
             (cong fst (^‚Ñö-minus' _ _ ‚àô cong (_^‚Ñö fromNat (suc N))
                  hlp2)
              ‚àô ^‚Åø-‚Ñö^‚Åø (suc N) _)
             (cong fst (^‚Ñö-minus' _ _ ‚àô cong (_^‚Ñö fromNat (2 ‚Ñï.¬∑ suc N))
                  hlp2) ‚àô ^‚Åø-‚Ñö^‚Åø (2 ‚Ñï.¬∑ suc N) _))
           (cong (fst ‚àò inv‚Ñù‚Çä ‚àò ‚Ñö‚Çä‚Üí‚Ñù‚Çä)
             (‚Ñö‚Çä‚â° (sym lem--083))
             ‚àô hlp)
          ‚àô sym (rat¬∑·µ£rat _ _))
        (cong‚ÇÇ _¬∑·µ£_
           (cong‚ÇÇ _-·µ£_
             (^‚Åø-‚Ñö^‚Åø _ _)
             (^‚Åø-‚Ñö^‚Åø _ _))
           hlp
          ‚àô sym (rat¬∑·µ£rat _ _))
        (slope-monotone-strict (fromNat (2 ‚Ñï.+ Z))
           1<2+Z
          (‚Ñö.- (fromNat (2 ‚Ñï.¬∑ suc N))) (‚Ñö.- (fromNat (suc N)))
          (fromNat (suc N)) (fromNat (2 ‚Ñï.¬∑ suc N))
          (‚Ñö.minus-< _ _ N<2N')
          N<2N'
          (‚Ñö.isTrans‚â§ _ 0 _  (‚Ñö.neg‚â§pos _ _) (‚Ñö.0‚â§pos _ _))
          (‚Ñö.isTrans‚â§< _ 0 _  (‚Ñö.neg‚â§pos _ _) (‚Ñö.0<pos _ _))))

1<bound‚Ñö : ‚àÄ Z n ‚Üí 1 ‚Ñö.< fst (bound‚Ñö Z n)
1<bound‚Ñö Z n = w

 where
 w : 1 ‚Ñö.< (((fromNat (2 ‚Ñï.+ Z)) ‚Ñö^‚Åø (2 ‚Ñï.¬∑ suc n)) ‚Ñö.- ((fromNat (2 ‚Ñï.+ Z)) ‚Ñö^‚Åø suc n))
              ‚Ñö.¬∑ fst (inv‚Ñö‚Çä (fromNat (suc n)))
 w = subst (1 ‚Ñö.<_)
    (‚Ñö.¬∑Assoc _ _ _
       ‚àô cong (‚Ñö._¬∑ fst (inv‚Ñö‚Çä (fromNat (suc n))))
         (‚Ñö.¬∑DistR+ (fromNat (2 ‚Ñï.+ Z) ‚Ñö^‚Åø suc n) (-1) (fromNat (2 ‚Ñï.+ Z) ‚Ñö^‚Åø suc n)
           ‚àô cong‚ÇÇ (‚Ñö._+_)
           (‚Ñö.¬∑-‚Ñö^‚Åø (suc n) (suc n) (fromNat (2 ‚Ñï.+ Z)) ‚àô cong {x = (suc n) ‚Ñï.+ (suc n)} ((fromNat (2 ‚Ñï.+ Z)) ‚Ñö^‚Åø_)
             (cong (Œª n' ‚Üí suc (n ‚Ñï.+ suc n')) (sym (‚Ñï.+-zero n))))
             (sym (‚Ñö.-¬∑- (‚Ñö.- 1) _) ‚àô ‚Ñö.¬∑IdL _)
             ) )
    (‚Ñö.‚â§<Monotone¬∑-onPos 1 ((fromNat (2 ‚Ñï.+ Z) ‚Ñö^‚Åø suc n) ‚Ñö.- 1)
       1 _
       (‚Ñö.‚â§-+o 2 ((fromNat (2 ‚Ñï.+ Z) ‚Ñö^‚Åø suc n)) -1
         (‚Ñö.isTrans‚â§ _ (fromNat (2 ‚Ñï.+ Z)) _ (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos 2 (2 ‚Ñï.+ Z)
          (‚Ñï.suc-‚â§-suc (‚Ñï.suc-‚â§-suc (‚Ñï.zero-‚â§ {Z})))))
          (subst (fromNat (2 ‚Ñï.+ Z) ‚Ñö.‚â§_) (sym (‚Ñö.fromNat-^ (2 ‚Ñï.+ Z) (suc n)))
            (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _
              (subst (‚Ñï._‚â§ ((2 ‚Ñï.+ Z) ^ suc n))
                (cong (suc ‚àò suc) (¬∑-identity ≥ Z))
                 (‚Ñï.^-monotone (2 ‚Ñï.+ Z) 0 n (‚Ñï.zero-‚â§ {n}))))))))
       (subst (‚Ñö._<
          (fromNat (2 ‚Ñï.+ Z) ‚Ñö^‚Åø suc n) ‚Ñö.¬∑ fst (inv‚Ñö‚Çä (fromNat (suc n))))
            (‚Ñö.x¬∑inv‚Ñö‚Çä[x] (fromNat (suc n)))
              (‚Ñö.<-¬∑o _ _ (fst (inv‚Ñö‚Çä (fromNat (suc n))))
                (‚Ñö.0<‚Ñö‚Çä (inv‚Ñö‚Çä (fromNat (suc n))))
                 (subst (fst (fromNat (suc n)) ‚Ñö.<_)
                   (sym (‚Ñö.fromNat-^ (2 ‚Ñï.+ Z) (suc n)))
                   (‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _ (invEq (‚Ñ§.pos-<-pos‚âÉ‚Ñï< _ _) (‚Ñï.sn<ssm^sn n Z))))))
       (‚Ñö.dec‚Ñö<? {0} {1}) (‚Ñö.dec‚Ñö‚â§? {0} {1}))

pred0< : ‚Ñô ‚Ñù
pred0< = Œª x ‚Üí (0 <·µ£ x) , isProp<·µ£ _ _

pred1< : ‚Ñô ‚Ñù
pred1< = Œª x ‚Üí (1 <·µ£ x) , isProp<·µ£ _ _


opaque
 unfolding -·µ£_ _+·µ£_
 contBound : ‚àÄ B ‚Üí IsContinuousWithPred pred0< (curry (flip bound B))
 contBound B =
   IsContinuousWP‚àò ‚ä§Pred _ _ _ _
     (AsContinuousWithPred _ _ (IsContinuous¬∑·µ£R (rat (fst (inv‚Ñö‚Çä B)))))
     (contDiagNE‚ÇÇWP sumR _
        _ _
          (IsContinuous^‚Ñö _)
           (IsContinuousWP‚àò pred0< _ _ _
             (curry (snd ‚àò (_^‚Ñö fst B))) (AsContinuousWithPred _ _  IsContinuous-·µ£)
               (IsContinuous^‚Ñö _)))




-- module ExpSlopeBound (z : ‚Ñù‚Çä) (1<z : 1 <·µ£ fst z)  where
--  module _ (B : ‚Ñö‚Çä) where



--   ineqStrict : ‚àÄ x y ‚Üí y ‚Ñö.‚â§ fst B ‚Üí x ‚Ñö.< y ‚Üí
--            (fst (z ^‚Ñö y) -·µ£ fst (z ^‚Ñö x)) <·µ£
--               bound z B ¬∑·µ£ rat (y ‚Ñö.- x)
--   ineqStrict x y y‚â§B x<y =
--        isTrans<‚â°·µ£ _ _ _
--          (fst (z/y<x‚Çä‚âÉz<y‚Çä¬∑x _ _ (‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä _ _ x<y)))
--            (isTrans‚â§<·µ£ _ _ _
--              (slope-incr' z x x' y
--                (‚Ñö.‚â§max _ _) x'<y x<y)
--              (isTrans<‚â§·µ£ _ _ _
--                (<·µ£-¬∑·µ£o _ _ (inv‚Ñù‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä x' y x'<y)))
--                 (power-slope-Œî z 1<z x' y x'<y
--                (‚Ñö.<‚Üí‚Ñö‚Çä _ _ (‚Ñö.isTrans<‚â§  _ _ _ x'<y y‚â§B))))
--                (isTrans‚â°‚â§·µ£ _ _ _
--                  (cong‚ÇÇ _Ôºè·µ£‚Çä_ (cong (Œª v ‚Üí
--                         fst (z ^‚Ñö (y ‚Ñö.+ (fst B ‚Ñö.- x'))) -·µ£ fst (z ^‚Ñö v))
--                        lem--05)
--                    (‚Ñù‚Çä‚â° (cong rat lem--078)))
--                  (isTrans‚â§‚â°·µ£ _ _ _
--                     (slope-incr z
--                       (fst B) (y ‚Ñö.+ (fst B ‚Ñö.- x')) (2 ‚Ñö.¬∑ (fst B))
--                        (subst2 (‚Ñö._<_) (‚Ñö.+IdL (fst B))
--                          (sym (‚Ñö.+Assoc _ _ _)
--                          ‚àô cong (y ‚Ñö.+_) (‚Ñö.+Comm _ _))
--                          (‚Ñö.<-+o 0 _ (fst B) (‚Ñö.-< _ _ x'<y)))
--                        (subst2 ‚Ñö._‚â§_
--                          ( sym (‚Ñö.+Assoc _ _ _)
--                          ‚àô cong (y ‚Ñö.+_) (‚Ñö.+Comm _ _)) (‚Ñö.x+x‚â°2x (fst B))
--                          (‚Ñö.‚â§-+o _ _ _ y-x'‚â§B))
--                        (subst (‚Ñö._< (2 ‚Ñö.¬∑ fst B)) (‚Ñö.¬∑IdL (fst B))
--                          (‚Ñö.<-¬∑o _ _ (fst B) (‚Ñö.0<‚Ñö‚Çä B)
--                            (‚Ñö.dec‚Ñö<? {1} {2})))) ww)))))
--          (¬∑·µ£Comm _ _)

--     where
--     x' = ‚Ñö.max x (y ‚Ñö.- fst B)

--     x'<y : x' ‚Ñö.< y
--     x'<y = ‚Ñö.max< _ _ _ x<y (‚Ñö.<-‚Ñö‚Çä' y y B (‚Ñö.isRefl‚â§ y ) )

--     y-x'‚â§B : y ‚Ñö.- x' ‚Ñö.‚â§ fst B
--     y-x'‚â§B = subst (y ‚Ñö.- x' ‚Ñö.‚â§_) lem--079
--      (‚Ñö.‚â§-o+ _ _ y
--      (‚Ñö.minus-‚â§ (y ‚Ñö.- fst B) x' (‚Ñö.‚â§max' x (y ‚Ñö.- fst B))))

--     ww' = (‚Ñö.<‚Üí‚Ñö‚Çä (fst B) (2 ‚Ñö.¬∑ fst B)
--              (subst (‚Ñö._< 2 ‚Ñö.¬∑ fst B) (‚Ñö.¬∑IdL (fst B))
--               (‚Ñö.<-¬∑o 1 2 (fst B) (‚Ñö.0<‚Ñö‚Çä B) ‚Ñö.dec‚Ñö<?)))

--     ww : ((fst (z ^‚Ñö (2 ‚Ñö.¬∑ fst B)) -·µ£ fst (z ^‚Ñö fst B)) Ôºè·µ£‚Çä
--             (‚Ñö‚Çä‚Üí‚Ñù‚Çä ww'))
--            ‚â° ((fst (z ^‚Ñö (2 ‚Ñö.¬∑ (fst B))) -·µ£ fst (z ^‚Ñö (fst B))) ¬∑·µ£
--      rat (fst (inv‚Ñö‚Çä B)))
--     ww =
--      cong ((fst (z ^‚Ñö (2 ‚Ñö.¬∑ fst B)) -·µ£ fst (z ^‚Ñö fst B)) ¬∑·µ£_)
--        (inv‚Ñù'-rat _ (snd ww') (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä ww')) ‚àô
--          cong (rat ‚àò fst ‚àò inv‚Ñö‚Çä) (‚Ñö‚Çä‚â°
--           (cong (‚Ñö._- (fst B)) (sym (‚Ñö.x+x‚â°2x (fst B)))
--            ‚àô sym (lem--034 {fst B}))) )


--   ineqStrictInv : ‚àÄ x y ‚Üí (‚Ñö.- (fst B)) ‚Ñö.‚â§ x ‚Üí x ‚Ñö.< y ‚Üí
--                 (-·µ£ (bound (inv‚Ñù‚Çä z) B)) ¬∑·µ£ rat (y ‚Ñö.- x) <·µ£  (fst (z ^‚Ñö y) -·µ£ fst (z ^‚Ñö x))
--   ineqStrictInv x y -B‚â§x x<y =
--      isTrans‚â°<·µ£ _ _ _ (¬∑·µ£Comm _ _)
--        (fst (z<x/y‚Çä‚âÉy‚Çä¬∑z<x _ _ _) w)
--     where

--     -2B<-B = (‚Ñö.minus-< _ _ (subst (‚Ñö._< 2 ‚Ñö.¬∑ (fst B))
--                 (‚Ñö.¬∑IdL (fst B)) (‚Ñö.<-¬∑o 1 2 (fst B) (‚Ñö.0<‚Ñö‚Çä B)
--                   ‚Ñö.dec‚Ñö<?)))

--     w : (-·µ£ (bound (inv‚Ñù‚Çä z) B))  <·µ£  ((fst (z ^‚Ñö y) -·µ£ fst (z ^‚Ñö x)) Ôºè·µ£‚Çä ‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä _ _  x<y ))
--     w = isTrans‚â°<·µ£ _ _ _ (sym (-·µ£¬∑ _ _) ‚àô
--        cong‚ÇÇ _¬∑·µ£_ (-[x-y]‚â°y-x _ _ ‚àô cong‚ÇÇ _-·µ£_
--                     (cong fst (cong (inv‚Ñù‚Çä z ^‚Ñö_) (sym (‚Ñö.-Invol _)) ‚àô sym (^‚Ñö-minus _ _)))
--                     (cong fst (cong (inv‚Ñù‚Çä z ^‚Ñö_) (sym (‚Ñö.-Invol _)) ‚àô sym (^‚Ñö-minus _ _))))
--                   (sym (inv‚Ñù‚Çä-rat B)
--                    ‚àô cong (fst ‚àò inv‚Ñù‚Çä ‚àò ‚Ñö‚Çä‚Üí‚Ñù‚Çä)
--                      (‚Ñö‚Çä‚â° ((sym (‚Ñö.¬∑IdL _) ‚àô ‚Ñö.¬∑DistR+ 2 -1 (fst B))
--                       ‚àô cong (‚Ñö._+ (‚Ñö.- fst B)) (sym (‚Ñö.-Invol _))
--                       ‚àô ‚Ñö.+Comm _ _))) )
--       (slope-monotone-strict z 1<z
--         (‚Ñö.- (2 ‚Ñö.¬∑ fst B)) (‚Ñö.- (fst B))
--           x y -2B<-B x<y
--             (‚Ñö.isTrans‚â§ _ _ _ (‚Ñö.<Weaken‚â§ _ _ -2B<-B) -B‚â§x)
--             (‚Ñö.isTrans‚â§< _ _ _ -B‚â§x x<y))

--   ineq : ‚àÄ x y ‚Üí y ‚Ñö.‚â§ fst B ‚Üí x ‚Ñö.‚â§ y ‚Üí
--            (fst (z ^‚Ñö y) -·µ£ fst (z ^‚Ñö x)) ‚â§·µ£
--               bound z B ¬∑·µ£ rat (y ‚Ñö.- x)
--   ineq x y y‚â§B = ‚äé.rec
--     (Œª x‚â°y ‚Üí ‚â°·µ£Weaken‚â§·µ£ _ _
--       (ùêë'.+InvR' _ _ (cong (fst ‚àò z ^‚Ñö_) (sym x‚â°y))
--         ‚àô‚àô sym (ùêë'.0RightAnnihilates (bound z B)) ‚àô‚àô
--         cong (bound z B ¬∑·µ£_) (cong rat (sym (ùêê'.+InvR' _ _ (sym x‚â°y))))))
--     (<·µ£Weaken‚â§·µ£ _ _ ‚àò ineqStrict x y y‚â§B )
--     ‚àò ‚Ñö.‚â§‚Üí‚â°‚äé< x y



--   ineqInv : ‚àÄ x y ‚Üí (‚Ñö.- (fst B)) ‚Ñö.‚â§ x ‚Üí x ‚Ñö.‚â§ y ‚Üí
--                 (-·µ£ (bound (inv‚Ñù‚Çä z) B)) ¬∑·µ£ rat (y ‚Ñö.- x) ‚â§·µ£  (fst (z ^‚Ñö y) -·µ£ fst (z ^‚Ñö x))
--   ineqInv x y -B‚â§x =
--     ‚äé.rec
--       (Œª x‚â°y ‚Üí ‚â°·µ£Weaken‚â§·µ£ _ _
--          (cong (-·µ£ bound (inv‚Ñù‚Çä z) B ¬∑·µ£_) (cong rat (ùêê'.+InvR' y x (sym x‚â°y))) ‚àô‚àô
--            ùêë'.0RightAnnihilates (-·µ£ bound (inv‚Ñù‚Çä z) B) ‚àô‚àô
--             (sym (ùêë'.+InvR' (fst (z ^‚Ñö y)) (fst (z ^‚Ñö x))
--              (cong (fst ‚àò (z ^‚Ñö_)) (sym x‚â°y))) )))
--       (<·µ£Weaken‚â§·µ£ _ _ ‚àò ineqStrictInv x y -B‚â§x)
--      ‚àò ‚Ñö.‚â§‚Üí‚â°‚äé< x y

--   opaque
--    unfolding -·µ£_ abs·µ£
--    ineq-abs : ‚àÄ x y ‚Üí x ‚Ñö.‚â§ fst B ‚Üí y ‚Ñö.‚â§ fst B ‚Üí
--             abs·µ£ (fst (z ^‚Ñö y) -·µ£ fst (z ^‚Ñö x)) ‚â§·µ£
--                bound z B ¬∑·µ£ rat (‚Ñö.abs' (y ‚Ñö.- x))
--    ineq-abs x y x‚â§B y‚â§B = w (‚Ñö.‚â°‚äé# x y)

--     where
--     w : (x ‚â° y) ‚äé (x ‚Ñö.# y) ‚Üí abs·µ£ (fst (z ^‚Ñö y) -·µ£ fst (z ^‚Ñö x)) ‚â§·µ£
--                bound z B ¬∑·µ£ rat (‚Ñö.abs' (y ‚Ñö.- x))
--     w (inl x‚â°y) =
--       ‚â°·µ£Weaken‚â§·µ£ _ _
--        (cong abs·µ£ (ùêë'.+InvR' _ _ (cong (fst ‚àò z ^‚Ñö_) (sym x‚â°y)))
--          ‚àô‚àô sym (ùêë'.0RightAnnihilates (bound z B)) ‚àô‚àô
--          cong (bound z B ¬∑·µ£_)
--           (cong (rat ‚àò ‚Ñö.abs') (sym (ùêê'.+InvR' _ _ (sym x‚â°y))))
--           )
--     w (inr (inl x<y)) = <·µ£Weaken‚â§·µ£ _ _ (isTrans<‚â°·µ£ _ _ _ (isTrans‚â°<·µ£ _ _ _
--           (abs·µ£NonNeg _ (x‚â§y‚Üí0‚â§y-x _ _ (^‚Ñö-MonotoneR x y
--              (‚Ñö.<Weaken‚â§ _ _ x<y)
--             (<·µ£Weaken‚â§·µ£ _ _ 1<z))))
--            (ineqStrict x y y‚â§B x<y))
--          (cong (bound z B ¬∑·µ£_)
--           (cong rat (sym (‚Ñö.absPos _ (‚Ñö.-< _ _ x<y)) ‚àô ‚Ñö.abs'‚â°abs _))))
--     w (inr (inr y<x)) =
--       <·µ£Weaken‚â§·µ£ _ _ (isTrans<‚â°·µ£ _ _ _ (isTrans‚â°<·µ£ _ _ _
--           (minusComm-abs·µ£ _ _ ‚àô
--            abs·µ£Pos _ (x<y‚Üí0<y-x _ _ (^‚Ñö-StrictMonotoneR 1<z y x y<x)))
--            (ineqStrict y x x‚â§B y<x))
--          (cong (bound z B ¬∑·µ£_)
--           (cong rat ((sym (‚Ñö.-[x-y]‚â°y-x _ _) ‚àô sym (‚Ñö.absNeg _
--             (subst ((y ‚Ñö.- x) ‚Ñö.<_)
--               (‚Ñö.+InvR _) (‚Ñö.<-+o _ _ (‚Ñö.- x) y<x)))) ‚àô ‚Ñö.abs'‚â°abs _))))

--   ineqInv-abs : ‚àÄ x y ‚Üí (‚Ñö.- (fst B)) ‚Ñö.‚â§ x ‚Üí (‚Ñö.- (fst B)) ‚Ñö.‚â§ y ‚Üí
--                 (-·µ£ (bound (inv‚Ñù‚Çä z) B)) ¬∑·µ£ rat (‚Ñö.abs (y ‚Ñö.- x)) ‚â§·µ£
--                     abs·µ£ (fst (z ^‚Ñö y) -·µ£ fst (z ^‚Ñö x))
--   ineqInv-abs = ‚Ñö.elimBy‚â§ (Œª x y X u v ‚Üí
--     subst2 (Œª a b ‚Üí (-·µ£ (bound (inv‚Ñù‚Çä z) B)) ¬∑·µ£ rat a ‚â§·µ£ b)
--                     (‚Ñö.absComm- _ _) (minusComm-abs·µ£ _ _) (X v u))
--      Œª x y x‚â§y x‚â§ _ ‚Üí
--         subst2 (Œª a b ‚Üí (-·µ£ (bound (inv‚Ñù‚Çä z) B)) ¬∑·µ£ rat a ‚â§·µ£ b)
--           (sym (‚Ñö.absNonNeg _ (‚Ñö.-‚â§ _ _ x‚â§y)))
--            (sym (abs·µ£NonNeg _ (x‚â§y‚Üí0‚â§y-x _ _ (^‚Ñö-MonotoneR _ _ x‚â§y (<·µ£Weaken‚â§·µ£ _ _ 1<z) ))))
--            (ineqInv x y x‚â§ x‚â§y)
