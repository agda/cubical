{-# OPTIONS --safe --lossy-unification #-}

module Cubical.HITs.CauchyReals.ExponentiationDer where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Equiv.Properties
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Function
open import Cubical.Foundations.Powerset
open import Cubical.Foundations.Transport

open import Cubical.Functions.FunExtEquiv

open import Cubical.Relation.Nullary

open import Cubical.Data.Bool as ùüö hiding (_‚â§_)
open import Cubical.Data.Nat as ‚Ñï hiding (_¬∑_;_+_)
import Cubical.Data.Nat.Mod as ‚Ñï
import Cubical.Data.Nat.Order as ‚Ñï
open import Cubical.Data.Empty as ‚ä•
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Int as ‚Ñ§ using (pos; ‚Ñ§)
import Cubical.Data.Int.Order as ‚Ñ§
open import Cubical.Data.Sigma
open import Cubical.Data.Unit

open import Cubical.HITs.PropositionalTruncation as PT

open import Cubical.HITs.SetQuotients as SQ hiding (_/_)

open import Cubical.Data.NatPlusOne

open import Cubical.Data.Rationals as ‚Ñö using (‚Ñö ; [_/_])
open import Cubical.Data.Rationals.Order as ‚Ñö using
  ( _‚Ñö‚Çä+_ ; 0<_ ; ‚Ñö‚Çä ; _‚Ñö‚Çä¬∑_ ; ‚Ñö‚Çä‚â°)
open import Cubical.Data.Rationals.Order.Properties as ‚Ñö
 using (inv‚Ñö‚Çä;/2‚Çä;/3‚Çä;/4‚Çä;x/2<x;inv‚Ñö;_‚Ñö^‚Åø_;_‚Ñö‚Çä^‚Åø_)


open import Cubical.HITs.CauchyReals.Base
open import Cubical.HITs.CauchyReals.Lems
open import Cubical.HITs.CauchyReals.Closeness
open import Cubical.HITs.CauchyReals.Lipschitz
open import Cubical.HITs.CauchyReals.Order
open import Cubical.HITs.CauchyReals.Continuous
open import Cubical.HITs.CauchyReals.Multiplication
open import Cubical.HITs.CauchyReals.Inverse
open import Cubical.HITs.CauchyReals.Sequence
open import Cubical.HITs.CauchyReals.Bisect
open import Cubical.HITs.CauchyReals.NthRoot
open import Cubical.HITs.CauchyReals.Derivative

open import Cubical.HITs.CauchyReals.Exponentiation

import Cubical.Algebra.CommRing.Instances.Int as ‚Ñ§CRing
open import Cubical.Algebra.Ring.Properties
open import Cubical.Algebra.Group
open import Cubical.Algebra.Group.Morphisms
open import Cubical.Algebra.Group.MorphismProperties
import Cubical.Algebra.CommRing as CR
import Cubical.Algebra.CommRing.Properties as CR

module Lùêô = Lems ‚Ñ§CRing.‚Ñ§CommRing
module ùêô' = RingTheory (CR.CommRing‚ÜíRing ‚Ñ§CRing.‚Ñ§CommRing )



slopeMonotone^ : (n : ‚Ñï) (a b a' b' : ‚Ñù‚Çä)
  ‚Üí (a<b : fst a <·µ£ fst b) ‚Üí (a'<b' : fst a' <·µ£ fst b')
  ‚Üí (a‚â§a' : fst a ‚â§·µ£ fst a') ‚Üí  (b‚â§b' : fst b ‚â§·µ£ fst b') ‚Üí
  (((fst b ^‚Åø n) -·µ£ (fst a ^‚Åø n))
    Ôºè·µ£‚Çä (_ , x<y‚Üí0<y-x _ _ a<b ))
      ‚â§·µ£
  (((fst b' ^‚Åø n) -·µ£ (fst a' ^‚Åø n))
    Ôºè·µ£‚Çä (_ , x<y‚Üí0<y-x _ _ a'<b' ))
slopeMonotone^ zero a b a' b' a<b a'<b' a‚â§a' b‚â§b' =
  ‚â°·µ£Weaken‚â§·µ£ _ _
    ((ùêë'.0LeftAnnihilates' _ _ (+-·µ£ _))
    ‚àô sym (ùêë'.0LeftAnnihilates' _ _ (+-·µ£ _)))
slopeMonotone^ (suc zero) a b a' b' a<b a'<b' a‚â§a' b‚â§b' =
  ‚â°·µ£Weaken‚â§·µ£ _ _
    ((cong (_Ôºè·µ£‚Çä (_ , x<y‚Üí0<y-x _ _ a<b )) (cong‚ÇÇ _-·µ£_ (¬∑IdL _) (¬∑IdL _))
      ‚àô x¬∑inv‚Ñù‚Çä[x] _)
     ‚àô sym (x¬∑inv‚Ñù‚Çä[x] _) ‚àô (cong (_Ôºè·µ£‚Çä (_ , x<y‚Üí0<y-x _ _ a'<b' ))
       (sym ((cong‚ÇÇ _-·µ£_ (¬∑IdL _) (¬∑IdL _))))))
slopeMonotone^ (suc (suc N)) a b a' b' a<b a'<b' a‚â§a' b‚â§b' =
   subst2 _‚â§·µ£_
     (sym ([x¬∑y·µ£]/‚Çäy _ (_ , x<y‚Üí0<y-x _ _ a<b ))
       ‚àô cong (_Ôºè·µ£‚Çä (_ , x<y‚Üí0<y-x _ _ a<b )) (¬∑·µ£Comm _ _ ‚àô fa.[b-a]¬∑S‚â°b‚Åø-a‚Åø))
     (sym ([x¬∑y·µ£]/‚Çäy _ (_ , x<y‚Üí0<y-x _ _ a'<b'))
       ‚àô cong (_Ôºè·µ£‚Çä (_ , x<y‚Üí0<y-x _ _ a'<b' )) (¬∑·µ£Comm _ _ ‚àô fa'.[b-a]¬∑S‚â°b‚Åø-a‚Åø))
     (Seq‚â§‚ÜíŒ£‚â§-upto
       (geometricProgression _ fa.r)
       (geometricProgression _ fa'.r)
       (suc (suc N))
       w)
 where
 open b‚Åø-a‚Åø N
 module fa = factor (fst a) (fst b) (snd a) (snd b)
 module fa' = factor (fst a') (fst b') (snd a') (snd b')

 w : (n‚ÇÅ : ‚Ñï) ‚Üí n‚ÇÅ ‚Ñï.< suc (suc N) ‚Üí
      geometricProgression (fst b ^‚Åø (suc N)) (fst a Ôºè·µ£[ fst b , _ ]) n‚ÇÅ ‚â§·µ£
      geometricProgression (fst b' ^‚Åø (suc N)) (fst a' Ôºè·µ£[ fst b' , _ ]) n‚ÇÅ
 w n x =
  let (m , p) = ‚Ñï.pred‚Ñï-‚â§-pred‚Ñï x
  in subst2 _‚â§·µ£_ -- ^‚Ñï-+
    ((cong‚ÇÇ _¬∑·µ£_ refl (sym ([x/y]¬∑y·µ£ _ _ (inl (0<x^‚Åø _ _ (snd b))))
     ‚àô ¬∑·µ£Comm _ _) ‚àô ¬∑·µ£Assoc _ _ _)
      ‚àô cong‚ÇÇ _¬∑·µ£_
          ((cong fst (^‚Ñï-+ b _ _) ‚àô cong ((fst b) ^‚Åø_) (p)))
          (Ôºè^‚Åø _ _ _ _ _)
      ‚àô sym (geometricProgressionClosed _ _ _))
    ((cong‚ÇÇ _¬∑·µ£_ refl (sym ([x/y]¬∑y·µ£ _ _ (inl (0<x^‚Åø _ _ (snd b'))))
     ‚àô ¬∑·µ£Comm _ _) ‚àô ¬∑·µ£Assoc _ _ _)
      ‚àô cong‚ÇÇ _¬∑·µ£_
          ((cong fst (^‚Ñï-+ b' _ _) ‚àô cong ((fst b') ^‚Åø_) (p)))
          (Ôºè^‚Åø _ _ _ _ _)
      ‚àô sym (geometricProgressionClosed _ _ _))
    (‚â§·µ£‚ÇäMonotone¬∑·µ£ _ _ _ _
      (<·µ£Weaken‚â§·µ£ _ _ (0<x^‚Åø _ _ (snd b')))
      (<·µ£Weaken‚â§·µ£ _ _ (0<x^‚Åø _ _ (snd a)))
      (^‚Åø-Monotone _ (<·µ£Weaken‚â§·µ£ _ _ (snd b)) b‚â§b')
       (^‚Åø-Monotone _ (<·µ£Weaken‚â§·µ£ _ _ (snd a)) a‚â§a') )

slope-monotone-‚Çô‚àö : (n : ‚Ñï) (a b a' b' : ‚Ñù‚Çä)
  ‚Üí (a<b : fst a <·µ£ fst b) ‚Üí (a'<b' : fst a' <·µ£ fst b')
  ‚Üí (a‚â§a' : fst a ‚â§·µ£ fst a') ‚Üí  (b‚â§b' : fst b ‚â§·µ£ fst b') ‚Üí
  ((fst (root (1+ n) b') -·µ£ fst (root (1+ n) a'))
    Ôºè·µ£‚Çä (_ , x<y‚Üí0<y-x _ _ a'<b' ))
      ‚â§·µ£
  ((fst (root (1+ n) b) -·µ£ fst (root (1+ n) a))
    Ôºè·µ£‚Çä (_ , x<y‚Üí0<y-x _ _ a<b ))
slope-monotone-‚Çô‚àö n a b a' b' a<b a'<b' a‚â§a' b‚â§b' =
  fst (x/y‚â§x'/y'‚âÉy'/x'‚â§y/x _ _ _ _) $
   subst2 _‚â§·µ£_
    ((cong‚ÇÇ _¬∑·µ£_ (cong‚ÇÇ _-·µ£_
      (cong fst (Iso.rightInv (nth-pow-root-iso (1+ n)) _))
     (cong fst (Iso.rightInv (nth-pow-root-iso (1+ n)) _))) refl))
    (cong‚ÇÇ _¬∑·µ£_ (cong‚ÇÇ _-·µ£_
     (cong fst (Iso.rightInv (nth-pow-root-iso (1+ n)) _))
     (cong fst (Iso.rightInv (nth-pow-root-iso (1+ n)) _))) refl)
    $ slopeMonotone^ (suc n)
     ((root (1+ n) a)) ((root (1+ n) b)) ((root (1+ n) a')) ((root (1+ n) b'))
    (‚Çô‚àö-StrictMonotone (1+ n) a<b)
      (‚Çô‚àö-StrictMonotone (1+ n) a'<b')
       (‚Çô‚àö-Monotone {a} {a'} (1+ n) a‚â§a')
       ((‚Çô‚àö-Monotone {b} {b'} (1+ n) b‚â§b'))


cauchySequenceSpeedup : ‚àÄ s
    ‚Üí (ics : IsCauchySequence' s)
    ‚Üí (spd : ‚Ñö‚Çä ‚Üí ‚Ñï)
    ‚Üí (‚àÄ Œµ ‚Üí fst (ics Œµ) ‚Ñï.‚â§ spd Œµ)

    ‚Üí IsCauchySequence' s
cauchySequenceSpeedup s  ics spd ‚â§spd Œµ =
 let (N , X) = ics Œµ
 in spd Œµ ,
     Œª m n spdN<n spdN<m ‚Üí

        X m n (‚Ñï.‚â§<-trans (‚â§spd Œµ) spdN<n)
               (‚Ñï.‚â§<-trans (‚â§spd Œµ) spdN<m)
opaque
 unfolding _‚â§·µ£_
 cauchySequenceSpeedup‚â° : ‚àÄ s ics spd ‚â§spd ‚Üí
   fromCauchySequence' s ics ‚â°
    fromCauchySequence' s (cauchySequenceSpeedup s ics spd ‚â§spd   )
 cauchySequenceSpeedup‚â° s ics spd ‚â§spd =
   fromCauchySequence'-‚â°-lem _ _ _

 fromCauchySequence'‚â§ : ‚àÄ s ics s' ics'
   ‚Üí (‚àÄ n ‚Üí s n ‚â§·µ£ s' n)
   ‚Üí fromCauchySequence' s ics ‚â§·µ£ fromCauchySequence' s' ics'
 fromCauchySequence'‚â§ s ics s' ics' x =
   cong‚ÇÇ max·µ£
      (cauchySequenceSpeedup‚â° s  ics
         (Œª Œµ ‚Üí ‚Ñï.max (‚Ñï.max (fst (ics Œµ)) (fst (ics' Œµ))) ((fst (ics' (2 ‚Ñö‚Çä¬∑ Œµ)))))
           Œª Œµ ‚Üí ‚Ñï.‚â§-trans ‚Ñï.left-‚â§-max ‚Ñï.left-‚â§-max)
      (cauchySequenceSpeedup‚â° s' ics'
         ((Œª Œµ ‚Üí ‚Ñï.max (‚Ñï.max (fst (ics Œµ)) (fst (ics' Œµ))) ((fst (ics' (2 ‚Ñö‚Çä¬∑ Œµ))))))
           Œª Œµ ‚Üí ‚Ñï.‚â§-trans ‚Ñï.right-‚â§-max ‚Ñï.left-‚â§-max) ‚àô
   snd (NonExpanding‚ÇÇ.Œ≤-lim-lim/2 maxR _ _ _ _) ‚àô
     (congLim _ _ _ _
      Œª q ‚Üí  x (suc (fastS q)))
      ‚àô
       sym (cauchySequenceSpeedup‚â° s' ics'
         fastS Œª Œµ ‚Üí subst (‚Ñï._‚â§ fastS Œµ) (cong (fst ‚àò ics')
           ((‚Ñö‚Çä‚â° (cong (2 ‚Ñö.¬∑_) (‚Ñö.¬∑Comm _ _) ‚àô ‚Ñö.y¬∑[x/y] 2 _)))) ‚Ñï.right-‚â§-max)

  where
   fastS : ‚Ñö‚Çä ‚Üí ‚Ñï
   fastS Œµ = ‚Ñï.max (‚Ñï.max (fst (ics (/2‚Çä Œµ)))
        (fst (ics' (/2‚Çä Œµ))))
               (fst (ics' (2 ‚Ñö‚Çä¬∑ /2‚Çä Œµ)))

¬∑-lim‚Ñô : ‚àÄ P x f g F G
        ‚Üí at x limitOf‚Ñô P , f is F
        ‚Üí at x limitOf‚Ñô P , g is G
        ‚Üí at x limitOf‚Ñô P , (Œª r x‚ÇÅ x‚ÇÇ ‚Üí f r x‚ÇÅ x‚ÇÇ ¬∑·µ£ g r x‚ÇÅ x‚ÇÇ) is (F ¬∑·µ£ G)
¬∑-lim‚Ñô P x f g F G fL gL Œµ =
  PT.map3 w (fL (Œµ'f)) (gL (Œµ'g)) (gL 1)

 where

 Œµ'f : ‚Ñù‚Çä
 Œµ'f = (Œµ ‚ÇäÔºè·µ£‚Çä 2) ‚ÇäÔºè·µ£‚Çä (1 +·µ£ abs·µ£ G ,
          isTrans‚â°<·µ£ _ _ _ (sym (+·µ£-rat _ _)) (<‚â§·µ£Monotone+·µ£ 0 1 0 (abs·µ£ G) dec‚Ñö<·µ£? (0‚â§abs·µ£ G)))

 Œµ'g : ‚Ñù‚Çä
 Œµ'g = (Œµ ‚ÇäÔºè·µ£‚Çä 2) ‚ÇäÔºè·µ£‚Çä (1 +·µ£ abs·µ£ F ,
          isTrans‚â°<·µ£ _ _ _ (sym (+·µ£-rat _ _)) (<‚â§·µ£Monotone+·µ£ 0 1 0 (abs·µ£ F) dec‚Ñö<·µ£? (0‚â§abs·µ£ F)))


 w : _
 w (Œ¥ , p) (Œ¥' , p') (Œ¥'' , p'') = Œ¥* , ww

  where

   f¬∑g : ‚àÄ r ‚Üí _ ‚Üí _ ‚Üí ‚Ñù
   f¬∑g r x‚ÇÅ x‚ÇÇ = f r x‚ÇÅ x‚ÇÇ ¬∑·µ£ g r x‚ÇÅ x‚ÇÇ

   Œ¥* : ‚Ñù‚Çä
   Œ¥* = min·µ£‚Çä (min·µ£‚Çä Œ¥ Œ¥') Œ¥''

   ww : ‚àÄ (r : ‚Ñù) (r‚àà : r ‚àà P) (xÔºÉr : x ÔºÉ r) ‚Üí
          abs·µ£ (x -·µ£ r) <·µ£ fst Œ¥* ‚Üí
          abs·µ£ (F ¬∑·µ£ G -·µ£ (f¬∑g) r r‚àà xÔºÉr) <·µ£ fst Œµ
   ww r r‚àà xÔºÉr x‚ÇÅ = subst2 _<·µ£_
        (cong abs·µ£ (sym Lùêë.lem--065))
        yy
        (isTrans‚â§<·µ£ _ _ _
          ((abs·µ£-triangle _ _) )
          (<·µ£Monotone+·µ£ _ _ _ _
            (isTrans‚â°<·µ£ _ _ _
              (¬∑abs·µ£ _ _)
              (<·µ£‚ÇäMonotone¬∑·µ£ _ _ _ _
              (0‚â§abs·µ£ _) (0‚â§abs·µ£ _) gx< u))
              (isTrans‚â°<·µ£ _ _ _ (¬∑abs·µ£ _ _)
                (<·µ£‚ÇäMonotone¬∑·µ£ _ _ _ _
              ((0‚â§abs·µ£ F)) (0‚â§abs·µ£ _)
               (subst (_<·µ£ (1 +·µ£ (abs·µ£ F)))
                (+IdL _)
                 (<·µ£-+o (rat 0) (rat 1) (abs·µ£ F) dec‚Ñö<·µ£?)) u'))))


     where
      x‚ÇÅ' = isTrans<‚â§·µ£ _ _ _ x‚ÇÅ
                 (isTrans‚â§·µ£ _ _ _ (min‚â§·µ£ _ _) (min‚â§·µ£ _ _))
      x‚ÇÅ'' = isTrans<‚â§·µ£ _ _ _ x‚ÇÅ
                 (isTrans‚â§·µ£ _ _ _ (min‚â§·µ£ _ _) (min‚â§·µ£' _ _))
      x‚ÇÅ''' = isTrans<‚â§·µ£ _ _ _ x‚ÇÅ (min‚â§·µ£' _ _)
      u = p r r‚àà xÔºÉr x‚ÇÅ'
      u' = p' r r‚àà xÔºÉr x‚ÇÅ''
      u'' = p'' r r‚àà xÔºÉr x‚ÇÅ'''
      gx< : abs·µ£ (g r r‚àà xÔºÉr) <·µ£ 1 +·µ£ abs·µ£ G
      gx< =
         subst (_<·µ£ (1 +·µ£ abs·µ£ G))
            (cong abs·µ£ (sym (Lùêë.lem--035)))

           (isTrans‚â§<·µ£ _ _ _
             (abs·µ£-triangle ((g r r‚àà xÔºÉr) -·µ£ G) G)
              (<·µ£-+o _ 1 (abs·µ£ G)
                (subst (_<·µ£ 1) (minusComm-abs·µ£ _ _) u'')))
      0<1+g = <‚â§·µ£Monotone+·µ£ 0 1 0 (abs·µ£ G) dec‚Ñö<·µ£? (0‚â§abs·µ£ G)
      0<1+f = <‚â§·µ£Monotone+·µ£ 0 1 0 (abs·µ£ F) dec‚Ñö<·µ£? (0‚â§abs·µ£ F)

      yy : _ ‚â° _
      yy =
        (cong‚ÇÇ _+·µ£_
            (cong ((1 +·µ£ abs·µ£ G) ¬∑·µ£_)
              (cong ((fst (Œµ ‚ÇäÔºè·µ£‚Çä 2)) ¬∑·µ£_)
                (inv‚Ñù‚â° _ _ _)
               ‚àô ¬∑·µ£Comm  (fst (Œµ ‚ÇäÔºè·µ£‚Çä 2))
              (inv‚Ñù (1 +·µ£ abs·µ£ G)
                  (inl (isTrans‚â°<·µ£ _ _ _ (sym (+·µ£-rat _ _)) 0<1+g)))) ‚àô
              ¬∑·µ£Assoc _ _ _)
            (cong ((1 +·µ£ abs·µ£ F) ¬∑·µ£_)
              (cong ((fst (Œµ ‚ÇäÔºè·µ£‚Çä 2)) ¬∑·µ£_)
               (inv‚Ñù‚â° _ _ _)
               ‚àô ¬∑·µ£Comm  (fst (Œµ ‚ÇäÔºè·µ£‚Çä 2))
              (inv‚Ñù (1 +·µ£ abs·µ£ F)
                  (inl (isTrans‚â°<·µ£ _ _ _ (sym (+·µ£-rat _ _)) 0<1+f)))) ‚àô
               ¬∑·µ£Assoc _ _ _) ‚àô
            sym (¬∑DistR+ _ _ (fst (Œµ ‚ÇäÔºè·µ£‚Çä 2)))
             ‚àô‚àô cong {y = 2} (_¬∑·µ£ (fst (Œµ ‚ÇäÔºè·µ£‚Çä 2)))
                             (cong‚ÇÇ _+·µ£_
                                 (x¬∑inv‚Ñù[x] (1 +·µ£ abs·µ£ G)
                                   (inl (isTrans‚â°<·µ£ _ _ _ (sym (+·µ£-rat _ _)) 0<1+g)))
                                 (x¬∑inv‚Ñù[x] (1 +·µ£ abs·µ£ F)
                                   (inl (isTrans‚â°<·µ£ _ _ _ (sym (+·µ£-rat _ _)) 0<1+f)))
                                   ‚àô +·µ£-rat _ _
                                )
                        ‚àô‚àô ¬∑·µ£Comm 2 (fst (Œµ ‚ÇäÔºè·µ£‚Çä 2))  ‚àô
                          [x/y]¬∑y·µ£ (fst Œµ) _ (inl _))


IsContinuousLimŒî‚Ñô : ‚àÄ P f x x‚àà ‚Üí IsContinuousWithPred P f ‚Üí
                    at 0 limitOf‚Ñô (P ‚àòS (x +·µ£_))  ,
                     (Œª Œîx x‚àà _ ‚Üí f (x +·µ£ Œîx) x‚àà) is (f x x‚àà)
IsContinuousLimŒî‚Ñô P f x x‚àà cx =
  let z = IsContinuousLim‚Ñô (P ‚àòS (x +·µ£_)) _ 0
           (subst (fst ‚àò P) (sym (+IdR _)) x‚àà)
            (IsContinuousWP‚àò _ _ _ _ (Œª _ x ‚Üí x)
              cx (AsContinuousWithPred _ _ (IsContinuous+·µ£L x)))
  in subst2 (at (rat [ pos zero / 1+ zero ]) limitOf‚Ñô (P ‚àòS (x +·µ£_))  ,_is_)
         refl (cong‚ÇÇ f ((+IdR _)) (toPathP ((snd (P _)) _ _ ))) z


chainRuleIncr‚Ñô : ‚àÄ x f f'gx g g'x
        ‚Üí (gPos : ‚àÄ x x‚àà ‚Üí 0 <·µ£ g x x‚àà)
        ‚Üí (‚àÄ x x‚àà y y‚àà ‚Üí x <·µ£ y ‚Üí g x x‚àà <·µ£ g y y‚àà)
        ‚Üí IsContinuousWithPred pred0< g
        ‚Üí derivativeOf‚Ñô pred0< , g at x is g'x
         ‚Üí derivativeOf‚Ñô pred0< , f at (g (fst x) (snd x) , gPos _ _) is f'gx
        ‚Üí derivativeOf‚Ñô pred0< ,
           (Œª r r‚àà ‚Üí f (g r r‚àà) (gPos _ _)) at x is (f'gx ¬∑·µ£ g'x)

chainRuleIncr‚Ñô x‚Çä@(x , 0<x) f f'gx g g'x gPos incrG gC gD fD =

  let z = ¬∑-lim‚Ñô _ _ _ _ _ _ w gD
  in subst (at (rat [ pos zero / 1+ zero ])
       limitOf‚Ñô (pred0< ‚àòS (x +·µ£_)) ,_is (f'gx ¬∑·µ£ g'x))
      (funExt‚ÇÉ Œª x‚ÇÅ y z‚ÇÅ ‚Üí sym (x/y=x/z¬∑z/y _ _ _ _ _))
       z


 where
 0#g : ‚àÄ h ‚Üí ‚àÄ h‚àà ‚Üí (0ÔºÉh : 0 ÔºÉ h) ‚Üí 0 ÔºÉ (g (x +·µ£ h) h‚àà -·µ£ g x 0<x)
 0#g h h‚àà =
   ‚äé.map ((x<y‚Üí0<y-x _ _ ‚àòS incrG _ _ _ _)
           ‚àòS subst (_<·µ£ (x +·µ£ h)) (+IdR x) ‚àòS <·µ£-o+ _ _ x)
            (((x<y‚Üíx-y<0 _ _ ‚àòS incrG _ _ _ _)
           ‚àòS subst ((x +·µ£ h) <·µ£_) (+IdR x) ‚àòS <·µ£-o+ _ _ x))

 w' :   ‚àÄ (Œµ : ‚Ñù‚Çä) ‚Üí ‚àÉ[ Œ¥ ‚àà ‚Ñù‚Çä ]
        (‚àÄ h h‚àà 0ÔºÉh ‚Üí
           abs·µ£ (0 -·µ£ h) <·µ£ fst Œ¥ ‚Üí
             abs·µ£ (f'gx -·µ£ ((f (g (x) 0<x  +·µ£ h) h‚àà -·µ£ f (g x 0<x) (gPos x 0<x))
           Ôºè·µ£[ (h) , 0ÔºÉh ])) <·µ£ fst Œµ)

 w' = fD

 w : at 0 limitOf‚Ñô _ ,
        (Œª h h‚àà 0ÔºÉh ‚Üí (f (g (x +·µ£ h) h‚àà) (gPos _ _) -·µ£ f (g x 0<x) (gPos _ _))
           Ôºè·µ£[ (g (x +·µ£ h) h‚àà -·µ£ g x 0<x) , 0#g h h‚àà 0ÔºÉh ]) is f'gx
 w Œµ =
   PT.rec squash‚ÇÅ
     (Œª (Œ¥ , X) ‚Üí
         PT.map  (map-snd
            Œª X* r r‚àà ÔºÉr <a ‚Üí
              let Œîg<Œ¥ = isTrans‚â°<·µ£ _ _ _
                     (cong abs·µ£ (+IdL _ ‚àô -[x-y]‚â°y-x _ _))
                    (X* r r‚àà ÔºÉr <a)
                  z = X ((g (x +·µ£ r) r‚àà -·µ£ g x 0<x))
                      (subst-‚àà pred0< (sym Lùêë.lem--05 ) (gPos _ _))
                       (0#g _ _ ÔºÉr) Œîg<Œ¥
              in isTrans‚â°<·µ£ _ _ _
                   (cong (Œª xx ‚Üí
                       abs·µ£ (f'gx -·µ£
                         ((xx -·µ£ f (g x 0<x) (gPos x 0<x))
                          Ôºè·µ£[ g (x +·µ£ r) r‚àà -·µ£ g x 0<x , 0#g r r‚àà ÔºÉr ])
                       ))
                     (cong (uncurry f)
                       (Œ£‚â°Prop (snd ‚àò pred0<) (sym Lùêë.lem--05))) )
                   z)
           (IsContinuousLimŒî‚Ñô _ _ x 0<x gC Œ¥))

     (w' Œµ)


preMapLimitPos : ‚àÄ P Q x x' f g y ‚Üí
   (u : ‚àÄ r r‚àà ÔºÉr ‚Üí  g r r‚àà ÔºÉr ‚àà Q)
   (v : ‚àÄ r r‚àà ÔºÉr ‚Üí x' ÔºÉ g r r‚àà ÔºÉr)
  ‚Üí at x  limitOf‚Ñô P , g is x'
  ‚Üí at x' limitOf‚Ñô Q , f is y
  ‚Üí at x  limitOf‚Ñô P ,
   (Œª r r‚àà ÔºÉr ‚Üí f (g r r‚àà ÔºÉr) (u _ _ _) (v _ _ _ )) is y
preMapLimitPos _ _ _ _ _ _ _ _ _ gL =
  PT.rec squash‚ÇÅ
    (Œª (Œ¥ , X) ‚Üí
      PT.rec squash‚ÇÅ
       (Œª (Œ¥' , X') ‚Üí
         ‚à£ Œ¥' , (Œª _ _ _ uu ‚Üí
           let vv = X' _ _ _ uu
           in X _ _ _ vv) ‚à£‚ÇÅ)
       (gL Œ¥)) ‚àò_


mapLimitPos' : ‚àÄ x P Q f g y y‚àà ‚Üí (f‚àà : ‚àÄ r r‚àà xÔºÉ ‚Üí f r r‚àà xÔºÉ ‚àà Q)
  ‚Üí IsContinuousWithPred Q g
  ‚Üí at x limitOf‚Ñô P , f is y
  ‚Üí at x limitOf‚Ñô P , (Œª r r‚àà xÔºÉ ‚Üí g (f r r‚àà xÔºÉ) (f‚àà _ _ _)) is
      g y y‚àà
mapLimitPos' x P Q f g y y‚àà f‚àà gC fL (Œµ , 0<Œµ) =
    PT.rec squash‚ÇÅ
    (Œª (q , 0<q , q<Œµ) ‚Üí
     let q‚Çä = (q , ‚Ñö.<‚Üí0< _ (<·µ£‚Üí<‚Ñö _ _ 0<q))
     in PT.rec squash‚ÇÅ
         (Œª (Œ¥' , D') ‚Üí
            PT.rec squash‚ÇÅ
              (Œª (Œ¥ , D) ‚Üí
                ‚à£ min·µ£‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œ¥') Œ¥ ,
                    (Œª r r‚àà xÔºÉr x-r<Œ¥ ‚Üí
                       let uu = D r r‚àà xÔºÉr
                                  (isTrans<‚â§·µ£ _ _ _ x-r<Œ¥
                                    (min‚â§·µ£' (rat (fst Œ¥')) _))
                           uu' = D' (f r r‚àà xÔºÉr) (f‚àà r r‚àà xÔºÉr)
                                 (invEq (‚àº‚âÉabs<Œµ _ _ _) uu)
                       in  isTrans<·µ£ _ _ _
                            (fst (‚àº‚âÉabs<Œµ _ _ _) uu')
                            q<Œµ) ‚à£‚ÇÅ)
              (fL (‚Ñö‚Çä‚Üí‚Ñù‚Çä (Œ¥'))))
         (gC y (q‚Çä) y‚àà))
   (dense‚Ñöin‚Ñù _ _ 0<Œµ)



invDerivative‚ÑôPos-temp : ‚àÄ x f f' f'Pos (fPos : ‚àÄ x 0<x ‚Üí 0 <·µ£ f x 0<x )
  ‚Üí (isEquivF : isEquiv {A = ‚Ñù √ó Unit} {B = ‚Ñù‚Çä}
       Œª x ‚Üí f (fst x) (snd x) , fPos (fst x) (snd x) )
   ‚Üí (‚àÄ x y ‚Üí fst x <·µ£ fst y ‚Üí
       fst (invEq (_ , isEquivF) x) <·µ£ fst (invEq (_ , isEquivF) y))
   ‚Üí (‚àÄ x y ‚Üí fst x <·µ£ fst y ‚Üí
       (f (fst x) (snd x)) <·µ£ (f (fst y) (snd y)))
       ‚Üí IsContinuousWithPred ‚ä§Pred f
  ‚Üí IsContinuousWithPred pred0< (Œª x x‚àà ‚Üí fst (invEq (_ , isEquivF) (x , x‚àà)))
  ‚Üí derivativeOf‚Ñô ‚ä§Pred , f at x is f'
  ‚Üí derivativeOf‚Ñô pred0< , (Œª r 0<r ‚Üí
       fst (invEq (_ , isEquivF) (r , 0<r)))
         at f (fst x) (snd x) , fPos _ _
       is fst (inv‚Ñù‚Çä (f' , f'Pos))
invDerivative‚ÑôPos-temp x f f' f'Pos fPos isEquivF incrG incrF  fC gC dF =
  subst
    (uncurry (at (rat [ pos zero / 1+ zero ]) limitOf‚Ñô_,_is
      fst (inv‚Ñù‚Çä (f' , f'Pos)) ))
    (Œ£PathP (refl , funExt‚ÇÉ
      pp)) d''
  where

  e : _ ‚âÉ _
  e = (_ , isEquivF)

  g = invEq e

  y = f (fst x) (snd x)



  h'' : (r : ‚Ñù) ‚Üí r ‚àà (Œª x‚ÇÅ ‚Üí pred0< (y +·µ£ x‚ÇÅ)) ‚Üí ‚Ñù
  h'' h h‚àà  = fst (g (_ , h‚àà)) -·µ£ fst x


  h' : (r : ‚Ñù) ‚Üí r ‚àà (Œª x‚ÇÅ ‚Üí pred0< (y +·µ£ x‚ÇÅ)) ‚Üí 0 ÔºÉ r ‚Üí ‚Ñù
  h' h h‚àà _ = h'' h h‚àà



  uu : (r : ‚Ñù) (r‚àà : r ‚àà (Œª x‚ÇÇ ‚Üí pred0< (y +·µ£ x‚ÇÇ))) (ÔºÉr : 0 ÔºÉ r) ‚Üí
        h' r r‚àà ÔºÉr ‚àà (Œª x‚ÇÇ ‚Üí ‚ä§Pred (x .fst +·µ£ x‚ÇÇ))
  uu _ r‚àà _ = tt

  vv : (r : ‚Ñù) (r‚àà : r ‚àà (Œª x‚ÇÇ ‚Üí pred0< (y +·µ£ x‚ÇÇ))) (ÔºÉr : 0 ÔºÉ r) ‚Üí
        0 ÔºÉ h' r r‚àà ÔºÉr
  vv r r‚àà = ‚äé.elim
    (inl ‚àò Œª p ‚Üí x<y‚Üí0<y-x _ _ (isTrans‚â°<·µ£ _ _ _
     (sym (cong fst (retEq e _)))
     (incrG (y , fPos _ _) _ (isTrans‚â°<·µ£ _ _ _ (sym (+IdR _))
       ((<·µ£-o+ 0 _ y p))))) )
    (inr ‚àò Œª p ‚Üí
      (x<y‚Üíx-y<0 _ _ (isTrans<‚â°·µ£ _ _ _
       (incrG _ _ (isTrans<‚â°·µ£ _ _ _ (<·µ£-o+ _ 0 y p) (+IdR _)))
         (cong fst (retEq e _)))) )

  h-lim : at 0 limitOf‚Ñô (Œª x‚ÇÅ ‚Üí pred0< (y +·µ£ x‚ÇÅ)) , (Œª h h‚àà _ ‚Üí h'' h h‚àà) is 0
  h-lim = subst (at _ limitOf‚Ñô _ , h' is_) (ùêë'.+InvR' _ _
      (cong (fst ‚àò invEq e) (‚Ñù‚Çä‚â° (+IdR y)) ‚àô cong fst (retEq e _)))
    (IsContinuousLim‚Ñô (Œª x‚ÇÅ ‚Üí pred0< (y +·µ£ x‚ÇÅ)) h'' 0
      (isTrans<‚â°·µ£ _ _ _ (fPos (fst x) (snd x)) (sym (+IdR _)))

      (IsContinuousWP‚àò ‚ä§Pred _ _ _ _
        (AsContinuousWithPred _ _ (IsContinuous+·µ£R (-·µ£ fst x)))
          (IsContinuousWP‚àò _ _
               _ _ _ gC
           (AsContinuousWithPred _ _ (IsContinuous+·µ£L y ))))
           )

  d' : at 0 limitOf‚Ñô (Œª x‚ÇÅ ‚Üí pred0< (y +·µ£ x‚ÇÅ)) ,
        (Œª r r‚àà ÔºÉr ‚Üí
           differenceAt‚Ñô ‚ä§Pred f (x .fst) (h' r r‚àà ÔºÉr) (vv r r‚àà ÔºÉr) (x .snd)
           (uu r r‚àà ÔºÉr))
        is f'
  d' = preMapLimitPos _ _ _ _ _
     h'
     f'
     uu vv
      h-lim dF


  h''-pos : (r : ‚Ñù) (r‚àà : r ‚àà (Œª x‚ÇÅ ‚Üí pred0< (f (fst x) (snd x) +·µ£ x‚ÇÅ)))
              (xÔºÉ : 0 ÔºÉ r) ‚Üí
             0 <·µ£ differenceAt‚Ñô ‚ä§Pred f (x .fst) (h' r r‚àà xÔºÉ)
               _ (x .snd) _
  h''-pos r r‚àà xÔºÉ = incr‚Üí0<differenceAt‚Ñô _ _ _ _ _ _ _
   Œª _ _ _ _ ‚Üí incrF _ _


  d'' :
   at 0 limitOf‚Ñô pred0< ‚àòS (y +·µ£_) ,
       (Œª r z z‚ÇÅ ‚Üí
          inv‚Ñù' .fst
          (differenceAt‚Ñô ‚ä§Pred f (x .fst) (h' r z z‚ÇÅ) _ (x .snd) _)
          (h''-pos r z z‚ÇÅ))
         is (fst (inv‚Ñù‚Çä (f' , f'Pos)) )
  d'' = mapLimitPos' _ _ _ _ _ f'
        f'Pos
        h''-pos
        (snd inv‚Ñù')
        d'


  pp : ‚àÄ x' u v ‚Üí fst (inv‚Ñù‚Çä (_ , _))
                   ‚â° differenceAt‚Ñô pred0< _
                      _ x' v (fPos (fst x) (snd x)) u
  pp x' u v =
    cong {x = _ , uuu} (fst ‚àò inv‚Ñù‚Çä)
       (‚Ñù‚Çä‚â° (sym (abs·µ£Pos _ uuu) ‚àô ¬∑abs·µ£ _ _))
      ‚àô (cong fst (inv‚Ñù‚Çä¬∑ (abs·µ£ _ , 0ÔºÉ‚Üí0<abs _ zz)
          (_ , 0ÔºÉ‚Üí0<abs _ (inv‚Ñù0ÔºÉ _ _))) ‚àô
       cong‚ÇÇ _¬∑·µ£_
          (cong (fst ‚àò inv‚Ñù‚Çä) (‚Ñù‚Çä‚â° (cong abs·µ£ zzz))
            ‚àô sym (abs·µ£-inv‚Ñù _ _))
          (sym (abs·µ£-inv‚Ñù _ _)
           ‚àô cong abs·µ£ (inv‚ÑùInvol _ _  ‚àô
            cong‚ÇÇ _-·µ£_ refl (cong fst (sym (retEq e _))))
             ))
       ‚àô ¬∑·µ£Comm _ _ ‚àô sym (¬∑abs·µ£ _ _) ‚àô (abs·µ£Pos _
        (incr‚Üí0<differenceAt‚Ñô _ _ _ _ _ _ _
         Œª _ _ _ _ ‚Üí incrG _ _))
   where -- ¬∑abs·µ£ _ _
   uuu = _

   qq : f (x .fst +·µ£ h' x' u v) (uu x' u v) ‚â° y +·µ£ x'
   qq = cong‚ÇÇ f (Lùêë.lem--05) (toPathP refl)
         ‚àô cong fst (secEq e _)


   zzz : f (x .fst +·µ£ h' x' u v) (uu x' u v) -·µ£ f (x .fst) (x .snd)
              ‚â° x'
   zzz = cong (_-·µ£ f (x .fst) (x .snd)) qq ‚àô Lùêë.lem--063


   zz : 0 ÔºÉ ((f (x .fst +·µ£ h' x' u v) (uu x' u v)) -·µ£ f (x .fst) (x .snd))
   zz = subst (0 ÔºÉ_) (sym zzz) v


invDerivative‚Ñô : ‚àÄ x (f : ‚Ñù ‚Üí ‚Ñù) f' f'Pos (fPos : ‚àÄ x ‚Üí 0 <·µ£ f x)
  ‚Üí (isEquivF : isEquiv {A = ‚Ñù} {B = ‚Ñù‚Çä} Œª x ‚Üí f x  , fPos x)
   ‚Üí (‚àÄ x y ‚Üí fst x <·µ£ fst y ‚Üí
       (invEq (_ , isEquivF) x) <·µ£ (invEq (_ , isEquivF) y))
   ‚Üí (‚àÄ x y ‚Üí x <·µ£ y ‚Üí  (f x) <·µ£ (f y)) ‚Üí IsContinuous f
  ‚Üí IsContinuousWithPred pred0< (Œª x x‚àà ‚Üí (invEq (_ , isEquivF) (x , x‚àà)))
  ‚Üí derivativeOf f at x is f'
  ‚Üí derivativeOf‚Ñô pred0< , (Œª r 0<r ‚Üí
        (invEq (_ , isEquivF) (r , 0<r)))
         at f x , fPos _
       is fst (inv‚Ñù‚Çä (f' , f'Pos))
invDerivative‚Ñô x f f' f'Pos fPos isEquivF incrG incrF  fC gC dF =
 invDerivative‚ÑôPos-temp
   (x , tt)
   (Œª x _ ‚Üí f x)
   f'
   f'Pos
   (Œª v _ ‚Üí fPos v)
   (snd (isoToEquiv rUnit√óIso ‚àô‚Çë (_ , isEquivF)))
   (Œª x‚ÇÅ y x‚ÇÇ ‚Üí incrG _ _ x‚ÇÇ)
   (Œª x‚ÇÅ y x‚ÇÇ ‚Üí incrF _ _ x‚ÇÇ)
   (AsContinuousWithPred _ _ fC)
   gC
   (as-derivativeOf‚Ñô _ _ _ _ _ dF)


invDerivative‚ÑôPos : ‚àÄ x f f' f'Pos (fPos : ‚àÄ x 0<x ‚Üí 0 <·µ£ f x 0<x )
  ‚Üí (isEquivF : isEquiv {A = ‚Ñù‚Çä} {B = ‚Ñù‚Çä}
       Œª x ‚Üí f (fst x) (snd x) , fPos (fst x) (snd x) )
   ‚Üí (‚àÄ x y ‚Üí fst x <·µ£ fst y ‚Üí
       fst (invEq (_ , isEquivF) x) <·µ£ fst (invEq (_ , isEquivF) y))
   ‚Üí (‚àÄ x y ‚Üí fst x <·µ£ fst y ‚Üí
       (f (fst x) (snd x)) <·µ£ (f (fst y) (snd y)))
       ‚Üí IsContinuousWithPred pred0< f
  ‚Üí IsContinuousWithPred pred0< (Œª x x‚àà ‚Üí fst (invEq (_ , isEquivF) (x , x‚àà)))
  ‚Üí derivativeOf‚Ñô pred0< , f at x is f'
  ‚Üí derivativeOf‚Ñô pred0< , (Œª r 0<r ‚Üí
       fst (invEq (_ , isEquivF) (r , 0<r)))
         at f (fst x) (snd x) , fPos _ _
       is fst (inv‚Ñù‚Çä (f' , f'Pos))
invDerivative‚ÑôPos x f f' f'Pos fPos isEquivF incrG incrF  fC gC dF =
  subst
    (uncurry (at (rat [ pos zero / 1+ zero ]) limitOf‚Ñô_,_is
      fst (inv‚Ñù‚Çä (f' , f'Pos)) ))
    (Œ£PathP (refl , funExt‚ÇÉ
      pp)) d''
  where


  e : _ ‚âÉ _
  e = (_ , isEquivF)

  g = invEq e

  y = f (fst x) (snd x)



  h'' : (r : ‚Ñù) ‚Üí r ‚àà (Œª x‚ÇÅ ‚Üí pred0< (y +·µ£ x‚ÇÅ)) ‚Üí ‚Ñù
  h'' h h‚àà  = fst (g (_ , h‚àà)) -·µ£ fst x


  h' : (r : ‚Ñù) ‚Üí r ‚àà (Œª x‚ÇÅ ‚Üí pred0< (y +·µ£ x‚ÇÅ)) ‚Üí 0 ÔºÉ r ‚Üí ‚Ñù
  h' h h‚àà _ = h'' h h‚àà



  uu : (r : ‚Ñù) (r‚àà : r ‚àà (Œª x‚ÇÇ ‚Üí pred0< (y +·µ£ x‚ÇÇ))) (ÔºÉr : 0 ÔºÉ r) ‚Üí
        h' r r‚àà ÔºÉr ‚àà (Œª x‚ÇÇ ‚Üí pred0< (x .fst +·µ£ x‚ÇÇ))
  uu _ r‚àà _ =
   isTrans<‚â°·µ£ _ _ _ (snd (g (_ , r‚àà)))
     (sym Lùêë.lem--05)

  vv : (r : ‚Ñù) (r‚àà : r ‚àà (Œª x‚ÇÇ ‚Üí pred0< (y +·µ£ x‚ÇÇ))) (ÔºÉr : 0 ÔºÉ r) ‚Üí
        0 ÔºÉ h' r r‚àà ÔºÉr
  vv r r‚àà = ‚äé.elim
    (inl ‚àò Œª p ‚Üí x<y‚Üí0<y-x _ _ (isTrans‚â°<·µ£ _ _ _
     (sym (cong fst (retEq e _)))
     (incrG (y , fPos _ _) _ (isTrans‚â°<·µ£ _ _ _ (sym (+IdR _))
       ((<·µ£-o+ 0 _ y p))))) )
    (inr ‚àò Œª p ‚Üí
      (x<y‚Üíx-y<0 _ _ (isTrans<‚â°·µ£ _ _ _
       (incrG _ _ (isTrans<‚â°·µ£ _ _ _ (<·µ£-o+ _ 0 y p) (+IdR _)))
         (cong fst (retEq e _)))) )


  h-lim : at 0 limitOf‚Ñô (Œª x‚ÇÅ ‚Üí pred0< (y +·µ£ x‚ÇÅ)) , (Œª h h‚àà _ ‚Üí h'' h h‚àà) is 0
  h-lim = subst (at _ limitOf‚Ñô _ , h' is_) (ùêë'.+InvR' _ _
      (cong (fst ‚àò invEq e) (‚Ñù‚Çä‚â° (+IdR y)) ‚àô cong fst (retEq e _)))
    (IsContinuousLim‚Ñô (Œª x‚ÇÅ ‚Üí pred0< (y +·µ£ x‚ÇÅ)) h'' 0
      (isTrans<‚â°·µ£ _ _ _ (fPos (fst x) (snd x)) (sym (+IdR _)))

      (IsContinuousWP‚àò ‚ä§Pred _ _ _ _
        (AsContinuousWithPred _ _ (IsContinuous+·µ£R (-·µ£ fst x)))
          (IsContinuousWP‚àò _ _
               _ _ _ gC
           (AsContinuousWithPred _ _ (IsContinuous+·µ£L y ))))
           )

  d' : at 0 limitOf‚Ñô (Œª x‚ÇÅ ‚Üí pred0< (y +·µ£ x‚ÇÅ)) ,
        (Œª r r‚àà ÔºÉr ‚Üí
           differenceAt‚Ñô pred0< f (x .fst) (h' r r‚àà ÔºÉr) (vv r r‚àà ÔºÉr) (x .snd)
           (uu r r‚àà ÔºÉr))
        is f'
  d' = preMapLimitPos _ _ _ _ _
     h'
     f'
     uu vv
      h-lim dF


  h''-pos : (r : ‚Ñù) (r‚àà : r ‚àà (Œª x‚ÇÅ ‚Üí pred0< (f (fst x) (snd x) +·µ£ x‚ÇÅ)))
              (xÔºÉ : 0 ÔºÉ r) ‚Üí
             0 <·µ£ differenceAt‚Ñô pred0< f (x .fst) (h' r r‚àà xÔºÉ)
               _ (x .snd) _
  h''-pos r r‚àà xÔºÉ = incr‚Üí0<differenceAt‚Ñô _ _ _ _ _ _ _
   Œª _ _ _ _ ‚Üí incrF _ _


  d'' :
   at 0 limitOf‚Ñô pred0< ‚àòS (y +·µ£_) ,
       (Œª r z z‚ÇÅ ‚Üí
          inv‚Ñù' .fst
          (differenceAt‚Ñô pred0< f (x .fst) (h' r z z‚ÇÅ) _ (x .snd) _)
          (h''-pos r z z‚ÇÅ))
         is (fst (inv‚Ñù‚Çä (f' , f'Pos)) )
  d'' = mapLimitPos' _ _ _ _ _ f'
        f'Pos
        h''-pos
        (snd inv‚Ñù')
        d'


  pp : ‚àÄ x' u v ‚Üí fst (inv‚Ñù‚Çä (_ , _))
                   ‚â° differenceAt‚Ñô pred0< _
                      _ x' v (fPos (fst x) (snd x)) u
  pp x' u v =
    cong {x = _ , uuu} (fst ‚àò inv‚Ñù‚Çä)
       (‚Ñù‚Çä‚â° (sym (abs·µ£Pos _ uuu) ‚àô ¬∑abs·µ£ _ _))
      ‚àô (cong fst (inv‚Ñù‚Çä¬∑ (abs·µ£ _ , 0ÔºÉ‚Üí0<abs _ zz)
          (_ , 0ÔºÉ‚Üí0<abs _ (inv‚Ñù0ÔºÉ _ _))) ‚àô
       cong‚ÇÇ _¬∑·µ£_
          (cong (fst ‚àò inv‚Ñù‚Çä) (‚Ñù‚Çä‚â° (cong abs·µ£ zzz))
            ‚àô sym (abs·µ£-inv‚Ñù _ _))
          (sym (abs·µ£-inv‚Ñù _ _)
           ‚àô cong abs·µ£ (inv‚ÑùInvol _ _  ‚àô
            cong‚ÇÇ _-·µ£_ refl (cong fst (sym (retEq e _))))
             ))
       ‚àô ¬∑·µ£Comm _ _ ‚àô sym (¬∑abs·µ£ _ _) ‚àô (abs·µ£Pos _
        (incr‚Üí0<differenceAt‚Ñô _ _ _ _ _ _ _
         Œª _ _ _ _ ‚Üí incrG _ _))
   where -- ¬∑abs·µ£ _ _
   uuu = _

   qq : f (x .fst +·µ£ h' x' u v) (uu x' u v) ‚â° y +·µ£ x'
   qq = cong‚ÇÇ f (Lùêë.lem--05) (toPathP (isProp<·µ£ _ _ _ _))
         ‚àô cong fst (secEq e _)


   zzz : f (x .fst +·µ£ h' x' u v) (uu x' u v) -·µ£ f (x .fst) (x .snd)
              ‚â° x'
   zzz = cong (_-·µ£ f (x .fst) (x .snd)) qq ‚àô Lùêë.lem--063


   zz : 0 ÔºÉ ((f (x .fst +·µ£ h' x' u v) (uu x' u v)) -·µ£ f (x .fst) (x .snd))
   zz = subst (0 ÔºÉ_) (sym zzz) v

derivative-n‚àö : ‚àÄ x n ‚Üí
        derivativeOf‚Ñô pred0< , curry (fst ‚àò root (1+ n))
                  at x is fst
                   (inv‚Ñù‚Çä (fromNat (suc n) ‚Çä¬∑·µ£ (root (1+ n) x ‚Çä^‚Åø n)))
derivative-n‚àö x@(x' , 0<x') n = subst2
  (derivativeOf‚Ñô pred0< ,_at_is
   fst (inv‚Ñù‚Çä (fromNat (suc n) ‚Çä¬∑·µ£ (root (1+ n) x ‚Çä^‚Åø n))))
   refl (secEq e x) w
 where

 e = isoToEquiv (nth-pow-root-iso (1+ n))

 y = invEq e x

 w = invDerivative‚ÑôPos y _ _ (snd (fromNat (suc n) ‚Çä¬∑·µ£ (y ‚Çä^‚Åø n)))
       (Œª x‚ÇÅ 0<x ‚Üí snd ((x‚ÇÅ , 0<x) ‚Çä^‚Åø (suc n)))
       (snd e)
       (Œª _ _ ‚Üí ‚Çô‚àö-StrictMonotone _)
       (Œª a b  ‚Üí ^‚Åø-StrictMonotone _ ‚Ñï.zero-<-suc
         (<·µ£Weaken‚â§·µ£ _ _ (snd a)) ((<·µ£Weaken‚â§·µ£ _ _ (snd b))))
       (AsContinuousWithPred _ _ (IsContinuous^‚Åø _))
       (IsContinuousRoot _ )
       Œª Œµ ‚Üí
         PT.map (map-snd
             Œª {a} X r _ ‚Üí X r) (derivative-^‚Åø n (fst y) Œµ)

reciporalDerivative : ‚àÄ x f f' ‚Üí (fPos : ‚àÄ x 0<x ‚Üí 0 <·µ£ f x 0<x)
 ‚Üí IsContinuousWithPred pred0< f
 ‚Üí derivativeOf‚Ñô pred0< , f at x is f'
 ‚Üí derivativeOf‚Ñô pred0< , (Œª r 0<r ‚Üí fst (inv‚Ñù‚Çä (f r 0<r , fPos _ _)))
     at x is (-·µ£ (f' Ôºè·µ£‚Çä ((f (fst x) (snd x) , fPos _ _ ) ‚Çä¬∑·µ£
                       (f (fst x) (snd x) , fPos _ _ ))))
reciporalDerivative (x , x‚àà) f f' fPos fC d =
  subst2
         {x = pp‚ÇÄ}
         {y = pp‚ÇÅ}
         {z = [1/f]'} (at 0 limitOf‚Ñô pred0< ‚àòS (x +·µ£_) ,_is_)
         pp
        (cong ((f' ¬∑·µ£_) ‚àò -·µ£_ ‚àò fst ‚àò inv‚Ñù‚Çä)
          (‚Ñù‚Çä‚â° {_ , ‚Ñù‚Çä¬∑ (f x x‚àà , fPos x x‚àà) (f (x +·µ£ 0) x+0‚àà , fPos _ _)}
            {_ , _} (cong (f x x‚àà  ¬∑·µ£_)
              (cong‚ÇÇ f (+IdR x) (toPathP (isProp<·µ£ _ _ _ _)))))
           ‚àô ¬∑-·µ£ _ _)
            w
 where
 f‚Åª¬≤ = -·µ£ (fst (inv‚Ñù‚Çä ((f x x‚àà , fPos _ _ ) ‚Çä¬∑·µ£
                       (f x x‚àà , fPos _ _ ))))

 [1/f]' = _

 x+0‚àà = (subst-‚àà pred0< (sym (+IdR _)) x‚àà)

 f‚Åª¬≤-lim : at 0 limitOf‚Ñô (Œª x‚ÇÅ ‚Üí pred0< (x +·µ£ x‚ÇÅ)) ,
            (Œª x' x'‚àà _ ‚Üí
               -·µ£ (fst
               (inv‚Ñù‚Çä
                ((f x x‚àà , fPos x x‚àà) ‚Çä¬∑·µ£ (f (x +·µ£ x') x'‚àà , fPos (x +·µ£ x') x'‚àà)))))
            is (-·µ£ (fst (inv‚Ñù‚Çä ((f x x‚àà , fPos _ _ ) ‚Çä¬∑·µ£
                       (f (x +·µ£ 0) x+0‚àà
                        , fPos _ _ )))))
 f‚Åª¬≤-lim = IsContinuousLim‚Ñô _ _ 0 (x+0‚àà)
                (IsContinuousWP‚àò ‚ä§Pred _ _ _ _
                  (AsContinuousWithPred _ _ IsContinuous-·µ£)
                    (IsContinuousWP‚àò _ _ _ _ _
                       (snd inv‚Ñù')
                        (IsContinuousWP‚àò ‚ä§Pred _ _ _ _
                          (AsContinuousWithPred _ _ (IsContinuous¬∑·µ£L _))
                           (IsContinuousWP‚àò _ _ _ _ _
                             fC
                             (AsContinuousWithPred _ _ (IsContinuous+·µ£L x))))))
 pp‚ÇÄ = _
 pp‚ÇÅ = _

 pp : pp‚ÇÄ ‚â° pp‚ÇÅ
 pp = funExt‚ÇÉ Œª _ _ _ ‚Üí ùêë.¬∑CommAssocr _ _ _ ‚àô
   cong (_¬∑·µ£ inv‚Ñù _ _) ((¬∑-·µ£ _ _ ‚àô
     cong (-·µ£_)
       (cong‚ÇÇ _¬∑·µ£_ refl (cong fst (inv‚Ñù‚Çä¬∑ _ _))
        ‚àô ùêë'.¬∑DistL- (f (x +·µ£ _) _) (f x x‚àà) _ ‚àô
        cong‚ÇÇ _-·µ£_ (¬∑·µ£Comm _ _ ‚àô [x/‚Çäy]¬∑y·µ£ _ _)
         (¬∑·µ£Comm _ _ ‚àô cong (_¬∑·µ£ f x x‚àà) (¬∑·µ£Comm _ _) ‚àô
           [x/‚Çäy]¬∑y·µ£ _ _)) )
     ‚àô -[x-y]‚â°y-x _ _)

 w : at 0 limitOf‚Ñô pred0< ‚àòS (x +·µ£_) , pp‚ÇÄ is [1/f]'
 w = ¬∑-lim‚Ñô (pred0< ‚àòS (x +·µ£_)) 0 _ _ _ _ d f‚Åª¬≤-lim


derivative-^‚Ñ§ : ‚àÄ x k ‚Üí ¬¨ (k ‚â° 0) ‚Üí
   derivativeOf‚Ñô pred0< , curry (fst ‚àòS (_^‚Ñ§ k)) at x is
     (rat [ k / 1 ] ¬∑·µ£ fst (x ^‚Ñ§ (k ‚Ñ§.- 1 )))
derivative-^‚Ñ§ (x , 0<x) (pos zero) ¬¨k=0 = ‚ä•.rec (¬¨k=0 refl)
derivative-^‚Ñ§ (x , 0<x) (pos (suc n)) ¬¨k=0  Œµ =
  PT.map (map-snd
    Œª {a} X r _ ‚Üí X r) (derivative-^‚Åø n x Œµ)
derivative-^‚Ñ§ x‚Çä@(x , 0<x) (‚Ñ§.negsuc n) _ =
  let h = reciporalDerivative (x , 0<x)
           (Œª r x‚ÇÇ ‚Üí fst ((r , x‚ÇÇ) ^‚Ñ§ pos (suc n))) _
             (Œª r x‚ÇÇ ‚Üí snd ((r , x‚ÇÇ) ^‚Ñ§ pos (suc n)))
             (AsContinuousWithPred _ _ (IsContinuous^‚Åø _))
             (Œª Œµ ‚Üí PT.map (map-snd
              Œª {a} X r _ ‚Üí X r)
              (derivative-^‚Åø n x Œµ))
  in subst (derivativeOf‚Ñô pred0< , _ at _ is_)
      (cong -·µ£_ (sym (¬∑·µ£Assoc _ _ _)) ‚àô
        sym (-·µ£¬∑ _ _) ‚àô
         cong‚ÇÇ (_¬∑·µ£_)
         (-·µ£-rat _)
         (cong ((x ^‚Åø n) ¬∑·µ£_)
           (cong fst (cong inv‚Ñù‚Çä (‚Ñù‚Çä‚â° (sym (¬∑·µ£Assoc _ _ _) ‚àô
             cong ((x ^‚Åø n) ¬∑·µ£_) (¬∑·µ£Comm _ _)))
              ‚àô inv‚Ñù‚Çä¬∑  (x‚Çä ‚Çä^‚Åø n) (x‚Çä ‚Çä^‚Åø (suc (suc n)))))
           ‚àô ¬∑·µ£Assoc _ _ _ ‚àô ùêë'.¬∑IdL' _ _ (x¬∑inv‚Ñù‚Çä[x] _)
         )) h

[0/n]=[0/m] : ‚àÄ n m ‚Üí [ 0 / n ] ‚â° [ 0 / m ]
[0/n]=[0/m] n m = eq/ _ _ refl

0#[n/m]‚Üín‚â†0 : ‚àÄ n m ‚Üí 0 ‚Ñö.# [ n , (1+ m) ] ‚Üí ¬¨ n ‚â° 0
0#[n/m]‚Üín‚â†0 n m x n=0 =
 let x' = subst (0 ‚Ñö.#_) (cong [_/ (1+ m) ] n=0 ‚àô [0/n]=[0/m] _ _) x
 in ‚Ñö.isIrrefl# 0 x'


derivative-^‚Ñö : ‚àÄ x q ‚Üí 0 ‚Ñö.# q ‚Üí
   derivativeOf‚Ñô pred0< , curry (fst ‚àòS (_^‚Ñö q)) at x is
     (rat q ¬∑·µ£ fst (x ^‚Ñö (q ‚Ñö.- 1)))

derivative-^‚Ñö x = SQ.ElimProp.go w
  where
  w : ElimProp _
  w .ElimProp.isPropB _ = isPropŒ†2 Œª _ _ ‚Üí squash‚ÇÅ
  w .ElimProp.f ( n , (1+ m) ) 0#q =
    subst (derivativeOf‚Ñô pred0< , _ at x is_)
        (cong‚ÇÇ (_¬∑·µ£_) refl (cong fst (inv‚Ñù‚Çä¬∑ _ _))
          ‚àô Lùêë.lem--086
          ‚àô cong‚ÇÇ (_¬∑·µ£_) (cong (rat [ n / 1 ] ¬∑·µ£_)
             (cong
               {x = fromNat (suc m)}
               {y = ‚Ñö‚Çä‚Üí‚Ñù‚Çä (fromNat (suc m))}
               (fst ‚àò inv‚Ñù‚Çä) (fromNat‚Ñù‚â°fromNat‚Ñö m)
               ‚àô inv‚Ñù‚Çä-rat (fromNat (suc m)))
           ‚àô sym (rat¬∑·µ£rat _ _) ‚àô cong rat (inv‚Ñö‚Çä-[/] n m))
            (cong‚ÇÇ (_¬∑·µ£_) refl (cong fst (sym (inv‚Ñù‚Çä^‚Ñö _ [ pos m / 1+ m ]))
               ‚àô cong fst (sym (^‚Ñö-minus' x _)))
             ‚àô cong fst (^‚Ñö-+ _ [ _ / 1+ m ] _
              ‚àô cong (x ^‚Ñö_) (
                ‚Ñö.n/k-m/k _ _ _ ‚àô
                  cong [_/ 1+ m ] (sym (‚Ñ§.+Assoc _ _ _)
                    ‚àô cong {y = ‚Ñ§.- pos (suc m)} (n ‚Ñ§.+_)
                     (sym (‚Ñ§.negsuc+ 0 m))) ‚àô sym (‚Ñö.n/k-m/k n (pos (suc m)) (1+ m))
                   ‚àô cong (‚Ñö._-_ [ n / 1+ m ] ) (‚Ñö.k/k _)))))
        ww -- sym (^‚Ñö-minus' x [ pos m / 1+ m ])
   where
   ww : derivativeOf‚Ñô pred0< , curry (fst ‚àòS (_^‚Ñö [ n / (1+ m) ])) at x is
              ((rat [ n / 1 ] ¬∑·µ£ fst (root (1+ m) x ^‚Ñ§ (n ‚Ñ§.- 1 ))) ¬∑·µ£
                fst (inv‚Ñù‚Çä (fromNat (suc m) ‚Çä¬∑·µ£ (root (1+ m) x ‚Çä^‚Åø m))))
   ww = chainRuleIncr‚Ñô _ _ _ _ _ _
          (Œª x‚ÇÅ x‚àà y y‚àà x‚ÇÇ ‚Üí
            ‚Çô‚àö-StrictMonotone {x‚ÇÅ , x‚àà} {y , y‚àà} (1+ m) x‚ÇÇ )
          (IsContinuousRoot (1+ m))
         (derivative-n‚àö x m)
         (derivative-^‚Ñ§ _ n (0#[n/m]‚Üín‚â†0 _ _ 0#q))



opaque
 unfolding inv‚Ñù
 bernoulli's-ineq-^‚Ñö‚Åø : ‚àÄ x n ‚Üí 1 ‚Ñö.< x
  ‚Üí
   ((fromNat (suc (suc n))) ‚Ñö.¬∑ (x ‚Ñö.- 1)) ‚Ñö.+ 1  ‚Ñö.< (x ‚Ñö^‚Åø (suc (suc n)))
 bernoulli's-ineq-^‚Ñö‚Åø x n 1<x =
  <·µ£‚Üí<‚Ñö _ _
    (subst2 _<·µ£_
      (cong (1 +·µ£_) (sym (rat¬∑·µ£rat _ _)) ‚àô  +·µ£Comm _ _) (^‚Åø-‚Ñö^‚Åø _ _)
      (bernoulli's-ineq-^‚Ñö (‚Ñö‚Çä‚Üí‚Ñù‚Çä (x ,
        ‚Ñö.<‚Üí0< _ (‚Ñö.isTrans< 0 1 _ (‚Ñö.0<pos  _ _) 1<x)))
        (fromNat (suc (suc n))) (<‚Ñö‚Üí<·µ£ _ _ 1<x)
           (‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _ (invEq (‚Ñ§.pos-<-pos‚âÉ‚Ñï< _ _)
             (‚Ñï.suc-‚â§-suc (‚Ñï.zero-<-suc {n}))))))




‚Ñö0‚â§x¬∑·µ£x : ‚àÄ x ‚Üí 0 ‚Ñö.‚â§ x ‚Ñö.¬∑ x
‚Ñö0‚â§x¬∑·µ£x = SQ.ElimProp.go w
  where
  w : ElimProp _
  w .ElimProp.isPropB _ = ‚Ñö.isProp‚â§ _ _
  w .ElimProp.f (pos n , b) = ‚Ñö.‚â§Monotone¬∑-onNonNeg 0 [ ‚Ñ§.pos n , b ] 0 [ ‚Ñ§.pos n , b ]
    (‚Ñö.0‚â§pos _ _) (‚Ñö.0‚â§pos _ _) (‚Ñö.0‚â§pos _ _) (‚Ñö.0‚â§pos _ _)
  w .ElimProp.f (‚Ñ§.negsuc n , b) =
    subst {x = [ ‚Ñ§.pos (suc n) , b ] ‚Ñö.¬∑ [ ‚Ñ§.pos (suc n) , b ]}
          {y = [ ‚Ñ§.negsuc n , b ] ‚Ñö.¬∑ [ ‚Ñ§.negsuc n , b ]}
          (0 ‚Ñö.‚â§_) (cong [_/ _ ] (sym (‚Ñ§.negsuc¬∑negsuc _ _)))
      (‚Ñö.‚â§Monotone¬∑-onNonNeg 0 [ ‚Ñ§.pos (suc n) , b ] 0 [ ‚Ñ§.pos (suc n) , b ]
    (‚Ñö.0‚â§pos _ _) (‚Ñö.0‚â§pos _ _) (‚Ñö.0‚â§pos _ _) (‚Ñö.0‚â§pos _ _))


0‚â§x¬∑·µ£x : ‚àÄ x ‚Üí 0 ‚â§·µ£ x ¬∑·µ£ x
0‚â§x¬∑·µ£x = ‚â§Cont (IsContinuousConst 0) (cont‚ÇÇ¬∑·µ£ _ _ IsContinuousId IsContinuousId)
  Œª u ‚Üí isTrans‚â§‚â°·µ£ _ _ _ (‚â§‚Ñö‚Üí‚â§·µ£ _ _
    (‚Ñö0‚â§x¬∑·µ£x u)) (rat¬∑·µ£rat u u )


opaque
 unfolding inv‚Ñù
 x+1/x-bound : ‚àÄ (x : ‚Ñù‚Çä) ‚Üí rat [ 1 / 2 ] ‚â§·µ£ fst x ‚Üí
    (fst x -·µ£ 1) -·µ£ (1 -·µ£ fst (inv‚Ñù‚Çä x))  ‚â§·µ£ (2 ¬∑·µ£ (fst x -·µ£ 1)) ¬∑·µ£ (fst x -·µ£ 1)
 x+1/x-bound x 1/2‚â§x =
   isTrans‚â°‚â§·µ£ _ _ _
     (Œª i ‚Üí  (fst x -·µ£ 1 -·µ£ (1 -·µ£ ¬∑IdL (fst (inv‚Ñù‚Çä x)) (~ i))))
     (b‚â§c-b‚áía+b‚â§c _ _ _ (isTrans‚â°‚â§·µ£ _ _ _
       (-[x-y]‚â°y-x _ _)
       (a‚â§c+b‚áía-c‚â§b _ _ _
       (isTrans‚â§‚â°·µ£ _ _ _ (invEq (z/y‚â§x‚Çä‚âÉz‚â§y‚Çä¬∑x _ _ _) (invEq (x‚â§y‚âÉ0‚â§y-x _ _)
         (isTrans‚â§‚â°·µ£ _ _ _ h Lùêë.lem--085))) (+·µ£Comm _ _)))))

  where
  h :  0  ‚â§·µ£ (fst x -·µ£ 1) ¬∑·µ£ (fst x -·µ£ 1) ¬∑·µ£ ((Lùêë.[ 2 ]r ¬∑·µ£ x .fst) -·µ£ 1)
  h = isTrans‚â°‚â§·µ£ _ _ _ (rat¬∑·µ£rat 0 0)
      (‚â§·µ£‚ÇäMonotone¬∑·µ£ 0 _ 0 _
        (0‚â§x¬∑·µ£x _) (‚â§·µ£-refl 0)
        (0‚â§x¬∑·µ£x _) (fst (x‚â§y‚âÉ0‚â§y-x _ _)
         (fst (z/y‚â§x‚Çä‚âÉz‚â§y‚Çä¬∑x (fst x) 1 2) (isTrans‚â°‚â§·µ£ _ _ _
           (¬∑IdL _ ‚àô dec‚Ñö‚â°·µ£?) 1/2‚â§x) )))


lnSeq : ‚Ñù‚Çä ‚Üí ‚Ñï ‚Üí ‚Ñù
lnSeq z n =  (fst (z ^‚Ñö [ 1 / 2+ n ]) -·µ£ 1)  ¬∑·µ£ fromNat (suc (suc n))


opaque
 unfolding -·µ£_
 lnSeqMonStrictInZ : (z z' : ‚Ñù‚Çä)
                ‚Üí fst z <·µ£ fst z'
                ‚Üí ‚àÄ n ‚Üí lnSeq z n <·µ£ lnSeq z' n
 lnSeqMonStrictInZ z z' z<z' n =
   <·µ£-¬∑·µ£o _ _ (fromNat (suc (suc n)))
    $ <·µ£-+o _ _ -1
      (^‚Ñö-StrictMonotone {z} {z'} ([ 1 / 2+ n ] , _) z<z')

 lnSeqMonInZ : (z z' : ‚Ñù‚Çä)
                ‚Üí fst z ‚â§·µ£ fst z'
                ‚Üí ‚àÄ n ‚Üí lnSeq z n ‚â§·µ£ lnSeq z' n
 lnSeqMonInZ z z' z‚â§z' n =
   ‚â§·µ£-¬∑·µ£o _ _ (fromNat (suc (suc n))) (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.0‚â§pos _ _))
    $ ‚â§·µ£-+o _ _ -1
      (^‚Ñö-Monotone {z} {z'} ([ 1 / 2+ n ] , _) z‚â§z')



 lnSeqCont : ‚àÄ n ‚Üí IsContinuousWithPred pred0<
              (Œª z 0<z ‚Üí lnSeq (z , 0<z) n)
 lnSeqCont n =  IsContinuousWP‚àò' pred0< _ _
      (IsContinuous‚àò _ _ (IsContinuous¬∑·µ£R _)
        ((IsContinuous+·µ£R -1))
        ) (IsContinuous^‚Ñö [ 1 / 2+ n ])


lnSeq' : ‚Ñù‚Çä ‚Üí ‚Ñï ‚Üí ‚Ñù
lnSeq' z n = (1 -·µ£ fst (z ^‚Ñö (‚Ñö.- [ 1 / 2+ n ])))  ¬∑·µ£ fromNat (suc (suc n))


lnSeq'Cont : ‚àÄ n ‚Üí IsContinuousWithPred pred0<
             (Œª z 0<z ‚Üí lnSeq' (z , 0<z) n)
lnSeq'Cont n =  IsContinuousWP‚àò' pred0< _ _
     (IsContinuous‚àò _ _ (IsContinuous¬∑·µ£R _)
       (IsContinuous‚àò _ _ (IsContinuous+·µ£L 1)
        IsContinuous-·µ£)
       ) (IsContinuous^‚Ñö (‚Ñö.- [ 1 / 2+ n ]))

lnSeq'[z]‚â°lnSeq[1/x] : ‚àÄ n z ‚Üí -·µ£ lnSeq' z n ‚â° lnSeq (inv‚Ñù‚Çä z) n
lnSeq'[z]‚â°lnSeq[1/x] n z =  sym (-·µ£¬∑ _ _)
  ‚àô cong (_¬∑·µ£ fromNat (suc (suc n)))
    (-[x-y]‚â°y-x 1 _ ‚àô
     cong (_-·µ£ 1)
      (cong fst (^‚Ñö-minus' _ _)))

lnSeq[z]‚â°lnSeq'[1/x] : ‚àÄ n z ‚Üí lnSeq z n ‚â° -·µ£ lnSeq' (inv‚Ñù‚Çä z) n
lnSeq[z]‚â°lnSeq'[1/x] n z =
     cong (flip lnSeq n) (sym (inv‚Ñù‚ÇäInvol z))
   ‚àô sym (lnSeq'[z]‚â°lnSeq[1/x] n (inv‚Ñù‚Çä z))


x^‚Üí‚àû : ‚àÄ m (Œµ : ‚Ñö‚Çä) ‚Üí
         Œ£[ N ‚àà ‚Ñï ]
           (‚àÄ n ‚Üí N ‚Ñï.< n ‚Üí fromNat m ‚Ñö.< (((fst Œµ) ‚Ñö.+ 1) ‚Ñö^‚Åø n))
x^‚Üí‚àû m Œµ =
 let (1+ N , X) = ‚Ñö.ceil‚Ñö‚Çä
         (fromNat (suc m) ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä Œµ )
 in   suc N
    , Œª { zero 0< ‚Üí ‚ä•.rec (‚Ñï.¬¨-<-zero 0<)
      ; (suc zero) <1 ‚Üí ‚ä•.rec (‚Ñï.¬¨-<-zero (‚Ñï.pred‚Ñï-‚â§-pred‚Ñï <1))
      ; (suc (suc n)) <ssn ‚Üí
       ‚Ñö.isTrans< (fromNat m) _ _
         (subst (fromNat m ‚Ñö.<_)
           (‚Ñö.¬∑Comm _ _)
           (‚Ñö.isTrans< _ (fromNat (suc m)) _
             (‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _ ((‚Ñ§.isRefl‚â§ {pos (suc m)})))
              (‚Ñö.x¬∑inv‚Ñö‚Çäy<z‚Üíx<y¬∑z _ _ _ X)))
         (‚Ñö.isTrans< _ _ _ (‚Ñö.<-¬∑o
           (fromNat (suc N))
           (fromNat (suc (suc n))) _ (‚Ñö.0<‚Ñö‚Çä Œµ)
           (‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _  (invEq (‚Ñ§.pos-<-pos‚âÉ‚Ñï< (suc N) (suc (suc n))) <ssn)))
          (‚Ñö.isTrans< _ _ _ (
           ‚Ñö.isTrans‚â§< _ _ _
            (‚Ñö.‚â°Weaken‚â§ _ _
             (cong ((fromNat (suc (suc n))) ‚Ñö.¬∑_)
              lem--034))
            (‚Ñö.<+‚Ñö‚Çä' _ _ 1 (‚Ñö.isRefl‚â§ _)))
          (bernoulli's-ineq-^‚Ñö‚Åø ((fst Œµ) ‚Ñö.+ 1) n
           (subst (1 ‚Ñö.<_) (‚Ñö.+Comm _ _)
            (‚Ñö.<+‚Ñö‚Çä' 1 1 Œµ (‚Ñö.isRefl‚â§ 1))))))}


-- bernoulli's-ineq-^‚Ñö-r<1 : ‚àÄ x r ‚Üí 1 <·µ£ fst x ‚Üí 0 ‚Ñö.< r ‚Üí r ‚Ñö.< 1 ‚Üí fst (x ^‚Ñö r) <·µ£ 1 +·µ£ rat r ¬∑·µ£ (fst x -·µ£ 1)


module _ (z : ‚Ñù‚Çä) where

 lnSeq=diff : ‚àÄ n ‚Üí ((fst (z ^‚Ñö (0 ‚Ñö.+ [ 1 / (2+ n)])) -·µ£
                fst (z ^‚Ñö 0)) Ôºè·µ£[ rat [ 1 / (2+ n)] , inl (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ 1 / 2+ n ] , _))) ])
                 ‚â° lnSeq z n
 lnSeq=diff n = cong‚ÇÇ _¬∑·µ£_ (cong‚ÇÇ _-·µ£_ (cong (fst ‚àò (z ^‚Ñö_)) (‚Ñö.+IdL _)) refl )
  (inv‚Ñù-rat _ _ (inl (‚Ñö.0<‚Üí< _ tt)))

 lnSeq‚â§ : ‚àÄ n ‚Üí lnSeq z n ‚â§·µ£ fst z -·µ£ 1
 lnSeq‚â§ n = subst2 _‚â§·µ£_
   (cong ((fst (z ^‚Ñö ([ 1 / 2+ n ])) -·µ£ 1) ¬∑·µ£_)
      (inv‚Ñù‚Çä-rat _ ‚àô cong rat (cong (fst ‚àò inv‚Ñö‚Çä)
    (‚Ñö‚Çä‚â° (‚Ñö.+IdR _)) ‚àô ‚Ñö.inv‚Ñö‚Çä-invol _)))

   (ùêë'.¬∑IdR' _ _
     (cong fst inv‚Ñù‚Çä1) ‚àô cong (_-·µ£ 1) (cong fst (^‚Ñö-1 _)))
   (slope-incr z 0 [ 1 / 2+ n ] 1
      (‚Ñö.0<pos _ _)
      ((fst (‚Ñö.inv‚Ñö‚Çä-‚â§-inv‚Ñö‚Çä 1 (fromNat (suc (suc n))))
        (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö 1 (pos (suc (suc n)))
          (‚Ñ§.suc-‚â§-suc {0} {pos (suc n)}
            ((‚Ñ§.‚â§-suc {0} {pos n} (‚Ñ§.zero-‚â§pos {n} )))))))

      (‚Ñö.0<pos _ _))



 lnSeq‚â§lnSeq : ‚àÄ n m ‚Üí m ‚Ñï.‚â§ n ‚Üí lnSeq z n ‚â§·µ£ lnSeq z m
 lnSeq‚â§lnSeq n m m‚â§n =
   subst2 _‚â§·µ£_
     (cong ((fst (z ^‚Ñö ([ 1 / 2+ n ])) -·µ£ 1) ¬∑·µ£_)
        (inv‚Ñù‚Çä-rat _ ‚àô cong rat (cong (fst ‚àò inv‚Ñö‚Çä)
      (‚Ñö‚Çä‚â° (‚Ñö.+IdR _)) ‚àô ‚Ñö.inv‚Ñö‚Çä-invol _)))
     (cong ((fst (z ^‚Ñö ([ 1 / 2+ m ])) -·µ£ 1) ¬∑·µ£_)
        (inv‚Ñù‚Çä-rat _ ‚àô cong rat (cong (fst ‚àò inv‚Ñö‚Çä)
      (‚Ñö‚Çä‚â° (‚Ñö.+IdR _)) ‚àô ‚Ñö.inv‚Ñö‚Çä-invol _)))
     (slope-monotone z 0 [ 1 / 2+ n ] 0 [ 1 / 2+ m ]
            (‚Ñö.0<pos _ _) (‚Ñö.0<pos _ _) (‚Ñö.0‚â§pos _ _)
             (fst (‚Ñö.inv‚Ñö‚Çä-‚â§-inv‚Ñö‚Çä (fromNat (suc (suc m))) (fromNat (suc (suc n))))
               (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (invEq (‚Ñ§.pos-‚â§-pos‚âÉ‚Ñï‚â§ _ _) (‚Ñï.‚â§-k+ {k = 2} m‚â§n)))))

 lnSeq'‚â§lnSeq' : ‚àÄ m n ‚Üí m ‚Ñï.‚â§ n ‚Üí lnSeq' z m ‚â§·µ£ lnSeq' z n
 lnSeq'‚â§lnSeq' m n m<n =
   subst2 _‚â§·µ£_
        ((cong ((1 -·µ£ fst (z ^‚Ñö (‚Ñö.- [ 1 / 2+ m ]))) ¬∑·µ£_)
     (inv‚Ñù‚Çä-rat _ ‚àô cong rat (cong (fst ‚àò inv‚Ñö‚Çä)
    (‚Ñö‚Çä‚â° (‚Ñö.+IdL _
    ‚àô ‚Ñö.-Invol _)) ‚àô ‚Ñö.inv‚Ñö‚Çä-invol _))))
     (cong ((1 -·µ£ fst (z ^‚Ñö (‚Ñö.- [ 1 / 2+ n ]))) ¬∑·µ£_)
     (inv‚Ñù‚Çä-rat _ ‚àô cong rat (cong (fst ‚àò inv‚Ñö‚Çä)
    (‚Ñö‚Çä‚â° (‚Ñö.+IdL _
    ‚àô ‚Ñö.-Invol _)) ‚àô ‚Ñö.inv‚Ñö‚Çä-invol _)))
     (slope-monotone z (‚Ñö.- [ 1 / 2+ _ ]) 0 (‚Ñö.- [ 1 / 2+ _ ]) 0
             (‚Ñö.minus-< 0 [ 1 / 2+ _ ] ((‚Ñö.0<pos 0 (1+ _))))
             (‚Ñö.minus-< 0 [ 1 / 2+ _ ] ((‚Ñö.0<pos 0 (1+ _))))

             (‚Ñö.minus-‚â§ [ 1 / 2+ _ ] [ 1 / 2+ _ ]
                (fst (‚Ñö.inv‚Ñö‚Çä-‚â§-inv‚Ñö‚Çä (fromNat (suc (suc m))) ((fromNat (suc (suc n)))))
                       ((‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (invEq (‚Ñ§.pos-‚â§-pos‚âÉ‚Ñï‚â§ _ _) (‚Ñï.‚â§-k+ {k = 2} m<n))))))
              (‚Ñö.isRefl‚â§ 0))


--  0‚â§·µ£lnSeq : ‚àÄ n ‚Üí 0 ‚â§·µ£ lnSeq z n
--  0‚â§·µ£lnSeq n =  isTrans‚â°‚â§·µ£ _ _ _ (rat¬∑·µ£rat 0 0) $
--    ‚â§·µ£‚ÇäMonotone¬∑·µ£ _ _ _ _
--     w (‚â§·µ£-refl _)
--     w  (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.0‚â§pos _ _) )

--    where

--    w = fst (x‚â§y‚âÉ0‚â§y-x _ _) (1‚â§^‚Ñö z _ 1‚â§z)

 lnSeq'‚â§lnSeq : ‚àÄ n m ‚Üí lnSeq' z n ‚â§·µ£ lnSeq z m
 lnSeq'‚â§lnSeq n m =
   subst2 _‚â§·µ£_
     (cong ((1 -·µ£ fst (z ^‚Ñö (‚Ñö.- [ 1 / 2+ n ]))) ¬∑·µ£_)
       (inv‚Ñù‚Çä-rat _ ‚àô cong rat (cong (fst ‚àò inv‚Ñö‚Çä)
      (‚Ñö‚Çä‚â° (‚Ñö.+IdL _
      ‚àô ‚Ñö.-Invol _)) ‚àô ‚Ñö.inv‚Ñö‚Çä-invol _)))
     (cong ((fst (z ^‚Ñö ([ 1 / 2+ m ])) -·µ£ 1) ¬∑·µ£_)
        (inv‚Ñù‚Çä-rat _ ‚àô cong rat (cong (fst ‚àò inv‚Ñö‚Çä)
      (‚Ñö‚Çä‚â° (‚Ñö.+IdR _)) ‚àô ‚Ñö.inv‚Ñö‚Çä-invol _)))
     (slope-monotone z (‚Ñö.- [ 1 / 2+ n ]) 0 0 [ 1 / 2+ m ]
            (‚Ñö.minus-< 0 [ pos 1 / 2+ n ] (‚Ñö.0<pos _ _)) (‚Ñö.0<pos _ _ )
            (‚Ñö.minus-‚â§ 0 [ pos 1 / 2+ n ] (‚Ñö.0‚â§pos _ _)) (‚Ñö.0‚â§pos _ _))


seqŒî-Œ¥ : (Z : ‚Ñï) ‚Üí (Œµ : ‚Ñö‚Çä) ‚Üí Œ£ ‚Ñï Œª N ‚Üí (n : ‚Ñï) ‚Üí
            N ‚Ñï.< n ‚Üí
            fromNat (suc (suc Z)) ‚Ñö.<
            ((fst (Œµ ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä (fromNat (suc Z) ‚Ñö‚Çä¬∑ 2)) ‚Ñö.+ 1) ‚Ñö^‚Åø
             n)
seqŒî-Œ¥ Z Œµ = x^‚Üí‚àû (suc (suc Z))
         (Œµ ‚Ñö‚Çä¬∑ (inv‚Ñö‚Çä ((([ pos (suc Z) / 1 ] , _)) ‚Ñö‚Çä¬∑ 2)))

opaque
 unfolding -·µ£_ _+·µ£_

 seqŒî-pos : ‚àÄ z Z ‚Üí (z<Z : fst z ‚â§·µ£ fromNat (suc (suc Z))) ‚Üí
    1 ‚â§·µ£ fst z ‚Üí ‚àÄ (Œµ : ‚Ñö‚Çä) ‚Üí
    (‚àÄ n ‚Üí (fst (seqŒî-Œ¥ Z Œµ)) ‚Ñï.< n ‚Üí
       lnSeq z n -·µ£ lnSeq' z n <·µ£ (rat (fst Œµ)))

 seqŒî-pos z Z z‚â§Z 1‚â§z Œµ =
  let (N , X) = x^‚Üí‚àû (suc (suc Z))
          (Œµ ‚Ñö‚Çä¬∑ (inv‚Ñö‚Çä ((([ pos (suc Z) / 1 ] , _)) ‚Ñö‚Çä¬∑ 2)))
  in Œª { n N<n ‚Üí
     let
         X' = X (suc (suc n)) (‚Ñï.‚â§-trans N<n (‚Ñï.‚â§SumRight {k = 2}) )
         X'' = isTrans<‚â°·µ£ _ _ _ (a<c+b‚áía-b<c _ _ _
             (isTrans<‚â°·µ£ _ _ _ (^‚Ñö-StrictMonotone {fromNat (suc (suc Z)) }
                {‚Ñö‚Çä‚Üí‚Ñù‚Çä
                  (((Œµ ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä (([ pos (suc Z) / 1 ] , tt) ‚Ñö‚Çä¬∑ 2)) ‚Ñö‚Çä+ 1)
                   ‚Ñö‚Çä^‚Åø (suc (suc n)))}
                 ([ 1 / 1+ (suc n) ] , _)
                 (<‚Ñö‚Üí<·µ£ _ _ X'))
                 (cong (fst ‚àò _^‚Ñö [ pos 1 / 1+ (suc n) ])
                   (‚Ñù‚Çä‚â° (sym (^‚Åø-‚Ñö^‚Åø _ _)))
                  ‚àô  cong fst (^‚Ñö-¬∑
                      (‚Ñö‚Çä‚Üí‚Ñù‚Çä
                       ((Œµ ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä (([ pos (suc Z) / 1 ] , tt) ‚Ñö‚Çä¬∑ 2)) ‚Ñö‚Çä+ 1))
                       (fromNat (suc (suc n))) [ pos 1 / 1+ (suc n) ])
                       ‚àô cong (fst ‚àò
                          (‚Ñö‚Çä‚Üí‚Ñù‚Çä ((Œµ ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä (([ pos (suc Z) / 1 ] , _) ‚Ñö‚Çä¬∑ 2))
                            ‚Ñö‚Çä+ 1) ^‚Ñö_)) (‚Ñö.x¬∑inv‚Ñö‚Çä[x] (fromNat _))
                       ‚àô cong fst (^‚Ñö-1 _) ‚àô cong (_+·µ£ 1) (rat¬∑·µ£rat _ _))))
                       (cong (rat (fst Œµ) ¬∑·µ£_)
                         (sym (inv‚Ñù‚Çä-rat _)))
         X''' = isTrans‚â°<·µ£ _ _ _
                  (cong (_¬∑·µ£
                 (fst (fromNat (suc (suc Z)) ^‚Ñö [ 1 / 2+ n ]) -·µ£ 1))
                  (cong rat (cong {y = fromNat (suc Z)} (‚Ñö._¬∑ 2)
                   (‚Ñö.‚Ñ§-‚Üí‚Ñö- _ _ ‚àô cong [_/ 1 ] (sym (‚Ñ§.pos- _ _)) )
                  )))
                  (fst (z<x/y‚Çä‚âÉy‚Çä¬∑z<x _ _ _) X'')
     in isTrans‚â°<·µ£ _ _ _
       (cong (Œª y ‚Üí lnSeq z n -·µ£  (1 -·µ£ y) ¬∑·µ£ fromNat (suc (suc n)) )
         (cong fst (^‚Ñö-minus' z _) ‚àô
           cong fst (inv‚Ñù‚Çä^‚Ñö _ _))
        ‚àô sym (ùêë'.¬∑DistL- _ _ _))
       (isTrans‚â§<·µ£ _ _ _
         (isTrans‚â§‚â°·µ£ _ _ _ (‚â§·µ£-¬∑·µ£o _ _ (fromNat (suc (suc n)))
          (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.0‚â§pos _ _))
          ((x+1/x-bound _ (isTrans‚â§·µ£ _ _ _
             dec‚Ñö‚â§·µ£?
             (1‚â§^‚Ñö z
               ([ pos 1 / 2+ n ] , _)
               1‚â§z)
               ))))
          (sym (¬∑·µ£Assoc _ _ _)))
          (isTrans‚â§<·µ£ _ _ _
           (‚â§·µ£‚ÇäMonotone¬∑·µ£ _ _ _ _
           (let w = fst (x‚â§y‚âÉ0‚â§y-x _ _) (1‚â§^‚Ñö z ([ 1 / 2+ n ] , _) 1‚â§z)
            in isTrans‚â°‚â§·µ£ _ _ _ (sym (ùêë'.0RightAnnihilates 2) ) (‚â§·µ£-o¬∑·µ£ _ _ 2 dec‚Ñö‚â§·µ£?
                   (x‚â§y‚Üí0‚â§y-x 1 _ (1‚â§^‚Ñö _ _
                    (isTrans‚â§·µ£ _ _ _ 1‚â§z z‚â§Z)))))


            (0‚â§·µ£lnSeq _)
             (‚â§·µ£-o¬∑·µ£ _ _ 2 dec‚Ñö‚â§·µ£?
              (‚â§·µ£-+o _ _ -1
               (^‚Ñö-Monotone {y = fromNat (suc (suc Z))} ([ 1 / 2+ n ] , _) z‚â§Z)))
             (isTrans‚â§·µ£ _ _ _ (lnSeq‚â§ z n)
               (‚â§·µ£-+o _ _ -1 z‚â§Z)))
           (isTrans‚â°<·µ£ _ _ _ (¬∑·µ£Comm _ _ ‚àô  (¬∑·µ£Assoc _ _ _) ‚àô
            cong (_¬∑·µ£ (fst (fromNat (suc (suc Z)) ^‚Ñö [ 1 / 2+ n ]) +·µ£ -1))
             (sym (rat¬∑·µ£rat _ _)) )
               X''')))
               }
   where

    0‚â§·µ£lnSeq : ‚àÄ n ‚Üí 0 ‚â§·µ£ lnSeq z n
    0‚â§·µ£lnSeq n =  isTrans‚â°‚â§·µ£ _ _ _ (rat¬∑·µ£rat 0 0) $
      ‚â§·µ£‚ÇäMonotone¬∑·µ£ _ _ _ _
       w (‚â§·µ£-refl _)
       w  (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.0‚â§pos _ _) )

      where

      w : rat 0 ‚â§·µ£ fst (z ^‚Ñö [ 1 / 2+ n ]) -·µ£ 1
      w = fst (x‚â§y‚âÉ0‚â§y-x _ _) (1‚â§^‚Ñö z _ 1‚â§z)

opaque
 unfolding inv‚Ñù

 1‚â§x-‚äî-x‚Åª¬π : ‚àÄ x ‚Üí 1 ‚â§·µ£ fst (max·µ£‚Çä x (inv‚Ñù‚Çä x))
 1‚â§x-‚äî-x‚Åª¬π (x , 0<x) =
  <‚Üí‚â§ContPos'pred {0}
   (AsContinuousWithPred _ _ (IsContinuousConst 1))
   (contDiagNE‚ÇÇWP maxR _ _ _
     (AsContinuousWithPred _ _ (IsContinuousId))
       (snd inv‚Ñù'))
   (Œª u 0<u ‚Üí
     ‚äé.rec (Œª 1‚â§u ‚Üí isTrans‚â§·µ£ _ _ _ (‚â§‚Ñö‚Üí‚â§·µ£ _ _ 1‚â§u) (‚â§max·µ£ _ _))
           (Œª u‚â§1 ‚Üí isTrans‚â§·µ£ _ _ _
                      (‚â§‚Ñö‚Üí‚â§·µ£ _ (fst (inv‚Ñö‚Çä (u , ‚Ñö.<‚Üí0< _ (<·µ£‚Üí<‚Ñö _ _ 0<u))))
             (fst (‚Ñö.inv‚Ñö‚Çä-‚â§-inv‚Ñö‚Çä _ _) u‚â§1))
            (isTrans‚â§‚â°·µ£ _ _ _
             (‚â§max·µ£ _ (rat u))
              ( max·µ£Comm _ _ ‚àô cong (max·µ£ (rat u)) (sym (inv‚Ñù‚Çä-rat _)
               ‚àô cong (fst ‚àò inv‚Ñù‚Çä) (‚Ñù‚Çä‚â° refl)))))
       (‚Ñö.‚â§cases 1 u))
   x 0<x



mapNE-fromCauchySequence' : ‚àÄ {h} (ne : NonExpanding‚ÇÇ h) s ics s' ics' ‚Üí
    Œ£ (IsCauchySequence'
         Œª k ‚Üí NonExpanding‚ÇÇ.go ne (s k) (s' k)) Œª icsf ‚Üí
      NonExpanding‚ÇÇ.go ne
        (fromCauchySequence' s ics)
        (fromCauchySequence' s' ics')
          ‚â°
           fromCauchySequence' _ icsf
mapNE-fromCauchySequence' ne s ics s' ics' =
 (Œª  Œµ ‚Üí
  let (N , X) = ics (/2‚Çä Œµ)
      (N' , X') = ics' (/2‚Çä Œµ)
  in ‚Ñï.max N N' , Œª m n <n <m ‚Üí
       isTrans<‚â°·µ£ _ _ _ (fst (‚àº‚âÉabs<Œµ _ _ _) (go‚àº‚ÇÇ (/2‚Çä Œµ) (/2‚Çä Œµ)
           (invEq (‚àº‚âÉabs<Œµ _ _ _)
             (X m n (‚Ñï.‚â§<-trans ‚Ñï.left-‚â§-max <n)
                    (‚Ñï.‚â§<-trans ‚Ñï.left-‚â§-max <m)))
           (invEq (‚àº‚âÉabs<Œµ _ _ _)
              ((X' m n (‚Ñï.‚â§<-trans ‚Ñï.right-‚â§-max <n)
                       (‚Ñï.‚â§<-trans ‚Ñï.right-‚â§-max <m)))))
          ) (cong rat (‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst Œµ))))
   , cong‚ÇÇ go
       (cauchySequenceSpeedup‚â° _ _
          (Œª Œµ ‚Üí ‚Ñï.max (fst (ics Œµ)) (fst (ics' Œµ)))
            Œª _ ‚Üí ‚Ñï.left-‚â§-max)
       (cauchySequenceSpeedup‚â° _ _
          (Œª Œµ ‚Üí ‚Ñï.max (fst (ics Œµ)) (fst (ics' Œµ)))
            Œª _ ‚Üí ‚Ñï.right-‚â§-max)
      ‚àô snd (Œ≤-lim-lim/2 _ _ _ _)
         ‚àô congLim _ _ _ _ Œª _ ‚Üí refl

 where
 open NonExpanding‚ÇÇ ne

Lipschitz-¬∑R : ‚àÄ q a ‚Üí abs·µ£ a ‚â§·µ£ rat (fst q) ‚Üí Lipschitz-‚Ñù‚Üí‚Ñù q (_¬∑·µ£ a)
Lipschitz-¬∑R q a a<q u v Œµ u‚àºv =
   invEq (‚àº‚âÉabs<Œµ _ _ _) (
    subst2 _<·µ£_
     (sym (¬∑abs·µ£ _ _) ‚àô cong abs·µ£ (ùêë'.¬∑DistL- _ _ _))
     (¬∑·µ£Comm _ _ ‚àô sym (rat¬∑·µ£rat _ _))
     (isTrans‚â§<·µ£ _ _ _
       (‚â§·µ£-o¬∑·µ£ _ _ _ (0‚â§abs·µ£ _) a<q)
       (<·µ£-¬∑·µ£o _ _ (‚Ñö‚Çä‚Üí‚Ñù‚Çä q) (fst (‚àº‚âÉabs<Œµ _ _ _) u‚àºv))))

‚àÉLipschitz-¬∑R : ‚àÄ a ‚Üí ‚àÉ[ L ‚àà ‚Ñö‚Çä ] Lipschitz-‚Ñù‚Üí‚Ñù L (_¬∑·µ£ a)
‚àÉLipschitz-¬∑R a =
  PT.map (Œª (q , (<q , _)) ‚Üí
    (q , (‚Ñö.<‚Üí0< _ $ <·µ£‚Üí<‚Ñö _ _ (isTrans‚â§<·µ£ _ _ _ (0‚â§abs·µ£ _) <q)))
      , Lipschitz-¬∑R _ a (<·µ£Weaken‚â§·µ£ _ _ <q) )
   (dense‚Ñöin‚Ñù _ _
    (isTrans‚â°<·µ£ _ _ _ (sym (+IdR _)) (<·µ£-o+ 0 1 (abs·µ£ a) dec‚Ñö<·µ£?)))


module expPreDer (Z : ‚Ñï) where
 module expPreDer' (z : ‚Ñù‚Çä)
          (z‚â§Z : fst z ‚â§·µ£ fromNat (suc (suc Z)))
          (1/Z‚â§z :  rat [ 1 / fromNat (suc (suc Z)) ] ‚â§·µ£ fst z) where



  seqŒî : ‚àÄ (Œµ : ‚Ñö‚Çä) ‚Üí
     (‚àÄ n ‚Üí (fst (seqŒî-Œ¥ Z Œµ)) ‚Ñï.< n ‚Üí
        lnSeq z n -·µ£ lnSeq' z n <·µ£ (rat (fst Œµ)))

  seqŒî Œµ n a<n =
      isTrans‚â°<·µ£ _ _ _ (w' n z)
        (seqŒî-pos z‚äîz‚Åª¬π Z z‚äîz‚Åª¬π‚â§Z (1‚â§x-‚äî-x‚Åª¬π z) Œµ n a<n)

   where
     diff : ‚Ñù‚Çä ‚Üí ‚Ñï ‚Üí ‚Ñù
     diff z n = lnSeq z n -·µ£ lnSeq' z n

     z‚äîz‚Åª¬π : ‚Ñù‚Çä
     z‚äîz‚Åª¬π = max·µ£‚Çä z (inv‚Ñù‚Çä z)

     z‚äîz‚Åª¬π‚â§Z : fst z‚äîz‚Åª¬π ‚â§·µ£ fromNat (suc (suc Z))
     z‚äîz‚Åª¬π‚â§Z = max‚â§-lem _ _ _ z‚â§Z
      (subst2 _‚â§·µ£_
        (¬∑IdR _) (¬∑IdR _)
        (fst (z/y'‚â§x/y‚âÉy‚Çä¬∑z‚â§y'‚Çä¬∑x 1 1 (inv‚Ñù‚Çä z) (fromNat (suc (suc Z))))
         (subst2 _‚â§·µ£_
        ((sym (inv‚Ñù‚Çä-rat (fromNat (suc (suc Z)))) ‚àô
         cong (fst ‚àò inv‚Ñù‚Çä) (‚Ñù‚Çä‚â° refl))
         ‚àô sym (¬∑IdL _)) (cong fst (sym (inv‚Ñù‚ÇäInvol z)) ‚àô sym (¬∑IdL _))
         1/Z‚â§z)))
     opaque
      unfolding _+·µ£_
      wC : ‚àÄ n ‚Üí
        IsContinuousWithPred pred0<
          (Œª z 0<z ‚Üí diff (z , 0<z) n)
      wC n = contDiagNE‚ÇÇWP sumR pred0<  _ _
                (lnSeqCont n)
                (IsContinuousWP‚àò' pred0< _ _ IsContinuous-·µ£
                 (lnSeq'Cont n))

     w-r<1 : ‚àÄ n r 0<r ‚Üí diff (‚Ñö‚Çä‚Üí‚Ñù‚Çä (r , 0<r)) n ‚â°
                        diff (inv‚Ñù‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä (r , 0<r))) n
     w-r<1 n r 0<r =
        +·µ£Comm _ _ ‚àô cong‚ÇÇ _+·µ£_
          (lnSeq'[z]‚â°lnSeq[1/x] n (‚Ñö‚Çä‚Üí‚Ñù‚Çä (r , 0<r)))
          (lnSeq[z]‚â°lnSeq'[1/x] n (‚Ñö‚Çä‚Üí‚Ñù‚Çä (r , 0<r)))

     w-r : ‚àÄ n r 0<r ‚Üí diff (‚Ñö‚Çä‚Üí‚Ñù‚Çä (r , 0<r)) n ‚â°
                        diff (max·µ£‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä (r , 0<r)) (‚Ñö‚Çä‚Üí‚Ñù‚Çä (inv‚Ñö‚Çä (r , 0<r)))) n
     w-r n r 0<r = ‚äé.rec
         (Œª ‚â§r ‚Üí cong (flip diff n)
                  (‚Ñù‚Çä‚â° {‚Ñö‚Çä‚Üí‚Ñù‚Çä (r , 0<r)}
                       {max·µ£‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä (r , 0<r)) (‚Ñö‚Çä‚Üí‚Ñù‚Çä (inv‚Ñö‚Çä (r , 0<r)))}
                    ((sym (max·µ£Comm (fst ((‚Ñö‚Çä‚Üí‚Ñù‚Çä (r , 0<r))))
                               (fst (‚Ñö‚Çä‚Üí‚Ñù‚Çä (inv‚Ñö‚Çä (r , 0<r))))
                     ‚àô ‚â§·µ£‚Üí‚â° (‚â§‚Ñö‚Üí‚â§·µ£ _ _ ‚â§r)))))) -- ‚â§‚Ñö‚Üí‚â§·µ£ _ _ ‚â§r

          (Œª r‚â§ ‚Üí w-r<1 n r 0<r ‚àô

           cong (flip diff n) (‚Ñù‚Çä‚â°
            (inv‚Ñù‚Çä-rat _ ‚àô sym (‚â§·µ£‚Üí‚â°  (‚â§‚Ñö‚Üí‚â§·µ£ r _  r‚â§))))
            )
         (‚Ñö.‚â§cases (fst (inv‚Ñö‚Çä (r , 0<r))) r)

     w' : ‚àÄ n z ‚Üí diff z n ‚â° diff (max·µ£‚Çä z (inv‚Ñù‚Çä z)) n
     w' n (z , 0<z) =
      ‚â°ContinuousWithPred
                 pred0< pred0< (openPred< 0) (openPred< 0) _ _ (wC n)
                 (IsContinuousWP‚àò pred0< pred0< _ _
                   (Œª r x ‚Üí snd (max·µ£‚Çä (r , x) (inv‚Ñù‚Çä (r , x))))  (wC n)
                   ((contDiagNE‚ÇÇWP maxR _ _ _
                   (AsContinuousWithPred _ _ (IsContinuousId))
                     (snd inv‚Ñù'))))
                 (Œª r r‚àà r‚àà' ‚Üí cong (flip diff n) (‚Ñù‚Çä‚â° refl)
                      ‚àô w-r n r (‚Ñö.<‚Üí0< _ (<·µ£‚Üí<‚Ñö _ _ r‚àà'))
                  ‚àô cong (flip diff n)
                   (cong‚ÇÇ max·µ£‚Çä
                     (‚Ñù‚Çä‚â° refl)
                     (‚Ñù‚Çä‚â° {_} {_ , snd ((inv‚Ñù‚Çä (fst (‚Ñö‚Çä‚Üí‚Ñù‚Çä
                      (r , ‚Ñö.<‚Üí0< r (<·µ£‚Üí<‚Ñö [ pos 0 / 1 ] r r‚àà'))) , r‚àà')))}
                      (sym (inv‚Ñù‚Çä-rat _) ‚àô cong (fst ‚àò inv‚Ñù‚Çä)
                       (‚Ñù‚Çä‚â° refl) ))) )
                 z 0<z 0<z

  -- lnSeq-‚àº : (Œµ : ‚Ñö‚Çä) ‚Üí ‚àÄ {!!}
  -- lnSeq-‚àº = {!!}
  ca-lnSeq : IsCauchySequence' (lnSeq z)
  ca-lnSeq Œµ =
    fst (seqŒî-Œ¥ Z Œµ) , ‚Ñï.elimBy‚â§
     (Œª x y X u v ‚Üí isTrans‚â°<·µ£ _ _ _
       (minusComm-abs·µ£ _ _) (X v u) )
     Œª x y x‚â§y <y <x ‚Üí
       isTrans‚â§<·µ£ _ _ _
        ((isTrans‚â°‚â§·µ£ _ _ _
            (abs·µ£NonPos (lnSeq z y +·µ£ -·µ£ lnSeq z x)
              (fst (x‚â§y‚âÉx-y‚â§0 _ _) (lnSeq‚â§lnSeq z _ _ x‚â§y))
              ‚àô -[x-y]‚â°y-x _ _)
            (‚â§·µ£-o+ _ _ _ (-·µ£‚â§·µ£ _ _ (lnSeq'‚â§lnSeq z x y)))
            ))
        (seqŒî Œµ _ <x)

--   -- ca-lnSeq' : IsCauchySequence' lnSeq'
--   -- ca-lnSeq' = IsCauchySequence'-via-~seq lnSeq lnSeq' lnSeq~lnSeq' ca-lnSeq
--   -- IsCauchySequence'-via-~seq

  preLn : ‚Ñù
  preLn = fromCauchySequence' _ ca-lnSeq

 -- --  lnSeq'-lim : ?
 -- --  lnSeq'-lim = fromCauchySequence'‚â° _ ca-lnSeq
 -- -- -- fromCauchySequence'‚â° : ‚àÄ s ics x
 -- -- --          ‚Üí ((‚àÄ (Œµ : ‚Ñö‚Çä) ‚Üí
 -- -- --              ‚àÉ[ N ‚àà ‚Ñï ] (‚àÄ n ‚Üí N ‚Ñï.< n ‚Üí
 -- -- --                   abs·µ£ ((s n) -·µ£ x) <·µ£ rat (fst Œµ))))
 -- -- --          ‚Üí fromCauchySequence' s ics ‚â° x

  preLn‚â§lnSeq : ‚àÄ n ‚Üí preLn ‚â§·µ£ (lnSeq z n)
  preLn‚â§lnSeq n =
    x<y+Œ¥‚Üíx‚â§y  _ _ Œª Œµ ‚Üí
          let (m , M) = fromCauchySequence'-lim _ ca-lnSeq Œµ
              ii = isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _)
                   (isTrans‚â°<·µ£ _ _ _
                    (minusComm-abs·µ£ _ _)
                    (M (‚Ñï.max (suc m) n) ‚Ñï.left-‚â§-max))
          in isTrans<‚â§·µ£ _ _ _
               (a-b<c‚áía<c+b _ _ _ ii)
               (isTrans‚â§‚â°·µ£ _ _ _
                 (‚â§·µ£-o+ _ _ (rat (fst Œµ))
                   (lnSeq‚â§lnSeq z _ _ ‚Ñï.right-‚â§-max))
                 (+·µ£Comm _ _))

  lnSeq'‚â§preLn : ‚àÄ n ‚Üí  lnSeq' z n ‚â§·µ£ preLn
  lnSeq'‚â§preLn n = x<y+Œ¥‚Üíx‚â§y  _ _ Œª Œµ ‚Üí
   let (m , M) = fromCauchySequence'-lim _ ca-lnSeq Œµ

   in isTrans‚â§<·µ£ _ _ _ (lnSeq'‚â§lnSeq z n (suc m))
        (isTrans<‚â°·µ£ _ _ _ (a-b<c‚áía<c+b _ _ _
         (isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _) (M (suc m) (‚Ñï.‚â§-refl {suc m}))))
           (+·µ£Comm (rat (fst Œµ)) preLn))

  preLn‚àº : ‚àÄ n Œµ ‚Üí fst (seqŒî-Œ¥ Z Œµ) ‚Ñï.< n ‚Üí lnSeq z n ‚àº[ Œµ ] preLn
  preLn‚àº n Œµ <n = invEq (‚àº‚âÉabs<Œµ _ _ _)
    (isTrans‚â§<·µ£ _ _ _
      (isTrans‚â°‚â§·µ£ _ _ _
        (abs·µ£NonNeg _ (x‚â§y‚Üí0‚â§y-x _ _ (preLn‚â§lnSeq n)))
        (‚â§·µ£-o+ _ _ _ (-·µ£‚â§·µ£ _ _ (lnSeq'‚â§preLn n))))
     (seqŒî Œµ n <n))

  0<preLn : 1 <·µ£ fst z ‚Üí 0 <·µ£ preLn
  0<preLn 1<z = isTrans<‚â§·µ£ _ _ _
      (‚Ñù‚Çä¬∑ (_ , x<y‚Üí0<y-x _ 1
       (^‚Ñö-StrictMonotoneR {z} 1<z (‚Ñö.- [ 1 / 2+ 0 ]) 0
         (‚Ñö.dec‚Ñö<? {‚Ñö.- [ pos 1 / 2+ 0 ]} {0})))
      (fromNat 2))
      (lnSeq'‚â§preLn 0)

  -- preLn<0 : fst z <·µ£ 1 ‚Üí preLn <·µ£ 0
  -- preLn<0 z<1 = isTrans‚â§<·µ£ _ _ _
  --   {!!}
  --   {!!}

 open expPreDer'

 0=preLn : (1‚â§ : fst 1 ‚â§·µ£ fromNat (suc (suc Z)))
           (‚â§1 : rat [ pos 1 / 2+ Z ] ‚â§·µ£ 1)
           ‚Üí 0 ‚â° preLn 1 1‚â§ ‚â§1
 0=preLn 1‚â§ ‚â§1 = sym (limConstRat 0 Œª _ _ ‚Üí refl‚àº _ _)
  ‚àô congLim _ _ _ _ Œª q ‚Üí sym (ùêë'.0LeftAnnihilates' _ _
     (ùêë'.+InvR' (fst (1 ^‚Ñö [ 1 / 2+ _ ])) 1 (cong fst (1^‚Ñö‚â°1 _))))

 preLn-inv : (z : ‚Ñù‚Çä)
          (z‚â§Z : fst z ‚â§·µ£ fromNat (suc (suc Z)))
          (1/Z‚â§z :  rat [ 1 / fromNat (suc (suc Z)) ] ‚â§·µ£ fst z)
          (1/z‚â§Z : fst (inv‚Ñù‚Çä z) ‚â§·µ£ fromNat (suc (suc Z)))
          (1/Z‚â§1/z :  rat [ 1 / fromNat (suc (suc Z)) ] ‚â§·µ£ fst (inv‚Ñù‚Çä z))
           ‚Üí preLn (inv‚Ñù‚Çä z) 1/z‚â§Z 1/Z‚â§1/z ‚â° -·µ£ (preLn z z‚â§Z 1/Z‚â§z)
 preLn-inv z z‚â§Z 1/Z‚â§z 1/z‚â§Z 1/Z‚â§1/z =
   fromCauchySequence'‚â° _ _ _
     Œª Œµ ‚Üí ‚à£ (fst (seqŒî-Œ¥ Z Œµ)) ,
          (Œª n <n ‚Üí
            isTrans‚â°<·µ£ _ (preLn z z‚â§Z 1/Z‚â§z -·µ£ lnSeq' z n) _
              (cong (Œª xx ‚Üí abs·µ£ (xx -·µ£ -·µ£ preLn z z‚â§Z 1/Z‚â§z))
                  (sym (lnSeq'[z]‚â°lnSeq[1/x] n z))
                ‚àô cong abs·µ£ (sym (Lùêë.lem--083 {preLn z z‚â§Z 1/Z‚â§z} {lnSeq' z n}))
                ‚àô abs·µ£NonNeg _ (x‚â§y‚Üí0‚â§y-x _ _ (lnSeq'‚â§preLn _ _ _ n )))
              (isTrans‚â§<·µ£ _ _ _
                (‚â§·µ£-+o (preLn z z‚â§Z 1/Z‚â§z) _ (-·µ£ lnSeq' z n)
                  (preLn‚â§lnSeq _ _ _ n))
                (seqŒî z z‚â§Z 1/Z‚â§z Œµ n <n))) ‚à£‚ÇÅ




 monotonePreLn : (z z' : ‚Ñù‚Çä)
          (z‚â§Z : fst z ‚â§·µ£ fromNat (suc (suc Z)))
          (1/Z‚â§z :  rat [ 1 / fromNat (suc (suc Z)) ] ‚â§·µ£ fst z)
          (z'‚â§Z : fst z' ‚â§·µ£ fromNat (suc (suc Z)))
          (1/Z‚â§z' :  rat [ 1 / fromNat (suc (suc Z)) ] ‚â§·µ£ fst z')
          ‚Üí fst z ‚â§·µ£ fst z'
          ‚Üí preLn z z‚â§Z 1/Z‚â§z  ‚â§·µ£
              preLn z' z'‚â§Z 1/Z‚â§z'
 monotonePreLn z z' z‚â§Z 1/Z‚â§z z'‚â§Z 1/Z‚â§z' z‚â§z' =
   fromCauchySequence'‚â§ _ _ _ _
     (lnSeqMonInZ z z' z‚â§z')




 opaque
  unfolding -·µ£_

  slope-monotone-preLn : ‚àÄ (a b a' b' : ‚Ñù‚Çä)
     a‚â§Z 1/Z‚â§a b‚â§Z 1/Z‚â§b a'‚â§Z 1/Z‚â§a' b'‚â§Z 1/Z‚â§b'
    ‚Üí (a<b : fst a <·µ£ fst b) ‚Üí (a'<b' : fst a' <·µ£ fst b')
    ‚Üí (a‚â§a' : fst a ‚â§·µ£ fst a') ‚Üí  (b‚â§b' : fst b ‚â§·µ£ fst b') ‚Üí
    (((preLn b' b'‚â§Z 1/Z‚â§b') -·µ£ (preLn a' a'‚â§Z 1/Z‚â§a'))
      Ôºè·µ£‚Çä (_ , x<y‚Üí0<y-x _ _ a'<b' ))
        ‚â§·µ£
    (((preLn b b‚â§Z 1/Z‚â§b) -·µ£ (preLn a a‚â§Z 1/Z‚â§a))
      Ôºè·µ£‚Çä (_ , x<y‚Üí0<y-x _ _ a<b ))
  slope-monotone-preLn a b a' b'
    a‚â§Z 1/Z‚â§a b‚â§Z 1/Z‚â§b a'‚â§Z 1/Z‚â§a' b'‚â§Z 1/Z‚â§b'
      a<b a'<b' a‚â§a' b‚â§b' =
        PT.rec2 (isProp‚â§·µ£ _ _)
                          ww
          (‚àÉLipschitz-¬∑R (fst (inv‚Ñù‚Çä b'-a')))
          (‚àÉLipschitz-¬∑R (fst (inv‚Ñù‚Çä b-a)))


    where


     b'-a' : ‚Ñù‚Çä
     b'-a' = (_ , x<y‚Üí0<y-x _ _ a'<b' )
     b-a : ‚Ñù‚Çä
     b-a = (_ , x<y‚Üí0<y-x _ _ a<b )
     opaque
      unfolding _+·µ£_
      ww : Œ£ ‚Ñö‚Çä (Œª L ‚Üí Lipschitz-‚Ñù‚Üí‚Ñù L (_¬∑·µ£ fst (inv‚Ñù‚Çä b'-a'))) ‚Üí
           Œ£ ‚Ñö‚Çä (Œª L ‚Üí Lipschitz-‚Ñù‚Üí‚Ñù L (_¬∑·µ£ fst (inv‚Ñù‚Çä b-a))) ‚Üí
              ((preLn b' b'‚â§Z 1/Z‚â§b' -·µ£ preLn a' a'‚â§Z 1/Z‚â§a') Ôºè·µ£‚Çä
                  (fst b' +·µ£ -·µ£ fst a' , x<y‚Üí0<y-x (fst a') (fst b') a'<b'))
                 ‚â§·µ£
                 ((preLn b b‚â§Z 1/Z‚â§b -·µ£ preLn a a‚â§Z 1/Z‚â§a) Ôºè·µ£‚Çä
                  (fst b +·µ£ -·µ£ fst a , x<y‚Üí0<y-x (fst a) (fst b) a<b))
      ww (_ , lip¬∑') (_ , lip¬∑) = subst2 _‚â§·µ£_
        (sym (snd (map-fromCauchySequence' _ _ _ _ lip¬∑'))
               ‚àô cong (_Ôºè·µ£‚Çä b'-a')
                   (sym (snd (mapNE-fromCauchySequence' sumR _ _ _ _))
                      ‚àô cong ((preLn b' b'‚â§Z 1/Z‚â§b') +·µ£_)
                       (sym (snd (map-fromCauchySequence' _ _ _ _ (snd -·µ£R))))))
        (sym (snd (map-fromCauchySequence' _ _ _ _ lip¬∑))
               ‚àô cong (_Ôºè·µ£‚Çä b-a)
                   (sym (snd (mapNE-fromCauchySequence' sumR _ _ _ _))
                     ‚àô cong ((preLn b b‚â§Z 1/Z‚â§b) +·µ£_)
                       (sym (snd (map-fromCauchySequence' _ _ _ _ (snd -·µ£R))))))
            (fromCauchySequence'‚â§ _ _ _ _ w)

       where



       w : (n : ‚Ñï) ‚Üí
                (((lnSeq b' n) -·µ£ (lnSeq a' n)) Ôºè·µ£‚Çä b'-a')
             ‚â§·µ£ (((lnSeq b n) -·µ£ (lnSeq a n)) Ôºè·µ£‚Çä b-a)
       w n = subst2 _‚â§·µ£_
              (¬∑·µ£Assoc _ _ _
                 ‚àô cong (_Ôºè·µ£‚Çä b'-a')
                  ((cong (fromNat (suc (suc n)) ¬∑·µ£_)
                   (cong‚ÇÇ _-·µ£_ (sym (¬∑IdL _)) (sym (¬∑IdL _)) ‚àô sym ( Lùêë.lem--075))
                      ‚àô ¬∑·µ£Comm _ _  ‚àô ùêë'.¬∑DistL- _ _ _)))
              (¬∑·µ£Assoc _ _ _
                  ‚àô cong (_Ôºè·µ£‚Çä b-a) ((cong (fromNat (suc (suc n)) ¬∑·µ£_)
                    (cong‚ÇÇ _-·µ£_ (sym (¬∑IdL _)) (sym (¬∑IdL _)) ‚àô sym (Lùêë.lem--075))
                      ‚àô ¬∑·µ£Comm _ _ ‚àô ùêë'.¬∑DistL- _ _ _)))
              (‚â§·µ£-o¬∑·µ£ _ _ _ (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.0‚â§pos _ _))
                (slope-monotone-‚Çô‚àö (suc n) _ _ _ _
                  a<b a'<b' a‚â§a' b‚â§b'))

