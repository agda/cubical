{-# OPTIONS --lossy-unification --safe #-}

module Cubical.HITs.CauchyReals.ExponentiationMore where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Function
open import Cubical.Foundations.Powerset
open import Cubical.Foundations.Transport
open import Cubical.Foundations.Structure

open import Cubical.Functions.FunExtEquiv
open import Cubical.Functions.Embedding
open import Cubical.Functions.Surjection

open import Cubical.Relation.Nullary

open import Cubical.Data.Bool as ùüö hiding (_‚â§_)
open import Cubical.Data.Nat as ‚Ñï hiding (_¬∑_;_+_)
import Cubical.Data.Nat.Mod as ‚Ñï
import Cubical.Data.Nat.Order as ‚Ñï
open import Cubical.Data.Empty as ‚ä•
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Int as ‚Ñ§ using (pos; ‚Ñ§)
import Cubical.Data.Int.Order as ‚Ñ§
open import Cubical.Data.Sigma
open import Cubical.Data.Unit

open import Cubical.HITs.PropositionalTruncation as PT

open import Cubical.HITs.SetQuotients as SQ hiding (_/_)

open import Cubical.Data.NatPlusOne

open import Cubical.Data.Rationals as ‚Ñö using (‚Ñö ; [_/_])
open import Cubical.Data.Rationals.Order as ‚Ñö using
  ( _‚Ñö‚Çä+_ ; 0<_ ; ‚Ñö‚Çä ; _‚Ñö‚Çä¬∑_ ; ‚Ñö‚Çä‚â°)
open import Cubical.Data.Rationals.Order.Properties as ‚Ñö
 using (inv‚Ñö‚Çä;/2‚Çä;/3‚Çä;/4‚Çä;x/2<x;inv‚Ñö;_‚Ñö^‚Åø_;_‚Ñö‚Çä^‚Åø_)


open import Cubical.HITs.CauchyReals.Base
open import Cubical.HITs.CauchyReals.Lems
open import Cubical.HITs.CauchyReals.Closeness
open import Cubical.HITs.CauchyReals.Lipschitz
open import Cubical.HITs.CauchyReals.Order
open import Cubical.HITs.CauchyReals.Continuous
open import Cubical.HITs.CauchyReals.Multiplication
open import Cubical.HITs.CauchyReals.Inverse
open import Cubical.HITs.CauchyReals.Sequence
open import Cubical.HITs.CauchyReals.Bisect
-- open import Cubical.HITs.CauchyReals.BisectApprox
open import Cubical.HITs.CauchyReals.NthRoot
open import Cubical.HITs.CauchyReals.Derivative

open import Cubical.HITs.CauchyReals.Exponentiation
open import Cubical.HITs.CauchyReals.ExponentiationDer

import Cubical.Algebra.CommRing.Instances.Int as ‚Ñ§CRing
open import Cubical.Algebra.Group.Instances.Bool
open import Cubical.Algebra.Ring
open import Cubical.Algebra.Ring.Properties
open import Cubical.Algebra.Group
open import Cubical.Algebra.Group.Morphisms
open import Cubical.Algebra.Group.MorphismProperties
import Cubical.Algebra.CommRing as CR

open import Cubical.Algebra.Group.DirProd


fromLipschitz'-rat : ‚àÄ f isL q ‚Üí
  fst (fromLipschitz' (f ‚àòS rat) isL) (rat q) ‚â° f (rat q)
fromLipschitz'-rat f = PT.elim
 (Œª _ ‚Üí isPropŒ† Œª _ ‚Üí isSet‚Ñù _ _)
 Œª _ _ ‚Üí refl

x+n¬∑x‚â°sn¬∑x : ‚àÄ n x ‚Üí x +·µ£ fromNat n ¬∑·µ£ x ‚â° fromNat (suc n) ¬∑·µ£ x
x+n¬∑x‚â°sn¬∑x n x = cong‚ÇÇ _+·µ£_
  (sym (¬∑IdL _)) refl ‚àô sym (¬∑DistR+ _ _ _)
   ‚àô cong (_¬∑·µ£ x) (fromNat+·µ£ 1 n)


+Group‚Ñù : Group‚ÇÄ
+Group‚Ñù = Ring‚ÜíGroup R‚Ñù

Is¬∑‚ÇäGroup‚Ñù : IsGroup 1 _‚Çä¬∑·µ£_ inv‚Ñù‚Çä
Is¬∑‚ÇäGroup‚Ñù = makeIsGroup
   isSet‚Ñù‚Çä
   (Œª _ _ _ ‚Üí ‚Ñù‚Çä‚â° (¬∑·µ£Assoc _ _ _ ))
   (Œª _ ‚Üí ‚Ñù‚Çä‚â° (¬∑IdR _)) (Œª _ ‚Üí ‚Ñù‚Çä‚â° (¬∑IdL _))
   (Œª (x , 0<x) ‚Üí ‚Ñù‚Çä‚â° (¬∑inv‚Ñù' x 0<x))
   (Œª (x , 0<x) ‚Üí ‚Ñù‚Çä‚â° (¬∑·µ£Comm _ _ ‚àô ¬∑inv‚Ñù' x 0<x))

‚Ñù‚Çã‚Çä : Type
‚Ñù‚Çã‚Çä = Œ£ ‚Ñù (0 ÔºÉ_)

_¬∑·µ£‚Çã‚Çä_ : ‚Ñù‚Çã‚Çä ‚Üí ‚Ñù‚Çã‚Çä ‚Üí ‚Ñù‚Çã‚Çä
x ¬∑·µ£‚Çã‚Çä x‚ÇÅ = (fst x ¬∑·µ£ fst x‚ÇÅ) , 0ÔºÉ¬∑ _ _ (snd x) (snd x‚ÇÅ)

‚Ñù‚Çã‚Çä‚â° : ‚àÄ {x y : ‚Ñù‚Çã‚Çä} ‚Üí fst x ‚â° fst y ‚Üí x ‚â° y
‚Ñù‚Çã‚Çä‚â° = Œ£‚â°Prop (isPropÔºÉ 0)

‚Ñù‚Çã‚Çä‚Üí‚Ñù‚Çä√óBool : ‚Ñù‚Çã‚Çä ‚Üí (‚Ñù‚Çä √ó Bool)
‚Ñù‚Çã‚Çä‚Üí‚Ñù‚Çä√óBool x = (abs·µ£ (fst x) , 0ÔºÉ‚Üí0<abs _ (snd x)) ,
  ‚äé.rec (const true) (const false) (snd x)

‚Ñù‚Çä√óBool‚Üí‚Ñù‚Çã‚Çä : (‚Ñù‚Çä √ó Bool) ‚Üí ‚Ñù‚Çã‚Çä
‚Ñù‚Çä√óBool‚Üí‚Ñù‚Çã‚Çä x = (if (snd x) then (1 , inl dec‚Ñö<·µ£?) else (-1 , inr dec‚Ñö<·µ£?))
  ¬∑·µ£‚Çã‚Çä (fst (fst x) , inl (snd (fst x)))

opaque
 unfolding 0ÔºÉ¬∑ abs·µ£
 sec-‚Ñù‚Çã‚Çä‚Üí‚Ñù‚Çä√óBool : section ‚Ñù‚Çã‚Çä‚Üí‚Ñù‚Çä√óBool ‚Ñù‚Çä√óBool‚Üí‚Ñù‚Çã‚Çä
 sec-‚Ñù‚Çã‚Çä‚Üí‚Ñù‚Çä√óBool (x , false) =
   cong‚ÇÇ _,_
   (‚Ñù‚Çä‚â° (¬∑abs·µ£ _ _ ‚àô ¬∑IdL _ ‚àô abs·µ£Pos _ (snd x)))
   refl
 sec-‚Ñù‚Çã‚Çä‚Üí‚Ñù‚Çä√óBool (x , true) =
  cong‚ÇÇ _,_
   (‚Ñù‚Çä‚â° (¬∑abs·µ£ _ _ ‚àô ¬∑IdL _ ‚àô abs·µ£Pos _ (snd x)))
   refl

ret-‚Ñù‚Çã‚Çä‚Üí‚Ñù‚Çä√óBool : retract ‚Ñù‚Çã‚Çä‚Üí‚Ñù‚Çä√óBool ‚Ñù‚Çä√óBool‚Üí‚Ñù‚Çã‚Çä
ret-‚Ñù‚Çã‚Çä‚Üí‚Ñù‚Çä√óBool (fst‚ÇÅ , inl x) =
  ‚Ñù‚Çã‚Çä‚â° (¬∑IdL _ ‚àô abs·µ£Pos _ x)
ret-‚Ñù‚Çã‚Çä‚Üí‚Ñù‚Çä√óBool (fst‚ÇÅ , inr x) =
  ‚Ñù‚Çã‚Çä‚â° (sym (-·µ£‚â°[-1¬∑·µ£] _)
    ‚àô‚àô cong (-·µ£_) (abs·µ£Neg _ x)
    ‚àô‚àô -·µ£Invol _)

Iso-‚Ñù‚Çã‚Çä-‚Ñù‚Çä√óùüö : Iso ‚Ñù‚Çã‚Çä (‚Ñù‚Çä √ó Bool)
Iso-‚Ñù‚Çã‚Çä-‚Ñù‚Çä√óùüö .Iso.fun  = ‚Ñù‚Çã‚Çä‚Üí‚Ñù‚Çä√óBool
Iso-‚Ñù‚Çã‚Çä-‚Ñù‚Çä√óùüö .Iso.inv = ‚Ñù‚Çä√óBool‚Üí‚Ñù‚Çã‚Çä
Iso-‚Ñù‚Çã‚Çä-‚Ñù‚Çä√óùüö .Iso.rightInv = sec-‚Ñù‚Çã‚Çä‚Üí‚Ñù‚Çä√óBool
Iso-‚Ñù‚Çã‚Çä-‚Ñù‚Çä√óùüö .Iso.leftInv = ret-‚Ñù‚Çã‚Çä‚Üí‚Ñù‚Çä√óBool

IsGroup‚ÑùÀ£ : IsGroup {G = ‚Ñù‚Çã‚Çä}
  (1 , inl dec‚Ñö<·µ£?)
  _¬∑·µ£‚Çã‚Çä_
  Œª (x , 0ÔºÉx) ‚Üí inv‚Ñù x 0ÔºÉx , inv‚Ñù0ÔºÉ x 0ÔºÉx
IsGroup‚ÑùÀ£ = makeIsGroup
  (isSetŒ£ isSet‚Ñù (isProp‚ÜíisSet ‚àò isPropÔºÉ 0))
  (Œª _ _ _ ‚Üí ‚Ñù‚Çã‚Çä‚â° (¬∑·µ£Assoc _ _ _))
  (Œª _ ‚Üí ‚Ñù‚Çã‚Çä‚â° (¬∑IdR _)) (Œª _ ‚Üí ‚Ñù‚Çã‚Çä‚â° (¬∑IdL _))
  (Œª _ ‚Üí ‚Ñù‚Çã‚Çä‚â° (x¬∑inv‚Ñù[x] _ _))
  (Œª _ ‚Üí ‚Ñù‚Çã‚Çä‚â° (¬∑·µ£Comm _ _ ‚àô x¬∑inv‚Ñù[x] _ _))

¬∑‚ÇäGroup‚Ñù : Group‚ÇÄ
¬∑‚ÇäGroup‚Ñù = group _ _ _ _ Is¬∑‚ÇäGroup‚Ñù

¬∑Group‚Ñù : Group‚ÇÄ
¬∑Group‚Ñù = group _ _ _ _ IsGroup‚ÑùÀ£


-- GroupIso-‚ÑùÀ£-‚ÑùÀ£‚Çä√óùüö : GroupIso ¬∑Group‚Ñù (DirProd ¬∑‚ÇäGroup‚Ñù BoolGroup)
-- GroupIso-‚ÑùÀ£-‚ÑùÀ£‚Çä√óùüö = Iso-‚Ñù‚Çã‚Çä-‚Ñù‚Çä√óùüö , makeIsGroupHom {!!}


module AutCont (Gstr : GroupStr ‚Ñù) where

 open GroupStr Gstr
 GÃÇ : Group‚ÇÄ
 GÃÇ = ‚Ñù , Gstr

 contGroupIso : Type
 contGroupIso = Œ£ (GroupIso GÃÇ GÃÇ) Œª x ‚Üí (IsContinuous (Iso.fun (fst x))
                                        √ó IsContinuous (Iso.inv (fst x)))
 i‚â° : ‚àÄ {x‚ÇÄ x‚ÇÅ : contGroupIso} ‚Üí Iso.fun (fst (fst x‚ÇÄ)) ‚â° Iso.fun (fst (fst x‚ÇÅ)) ‚Üí x‚ÇÄ ‚â° x‚ÇÅ
 i‚â° {x‚ÇÄ} {x‚ÇÅ} = Œ£‚â°Prop (Œª _ ‚Üí isProp√ó (isPropIsContinuous _) (isPropIsContinuous _))
  ‚àò GroupIso‚â° ‚àò SetsIso‚â°fun isSet‚Ñù isSet‚Ñù


 Aut[_]·µ£ : Group‚ÇÄ
 Aut[_]·µ£ =
   makeGroup {G = contGroupIso}
     (idGroupIso , IsContinuousId , IsContinuousId)
     (Œª (a , b , c) (a' , b' , c') ‚Üí
       compGroupIso a a' , IsContinuous‚àò _ _ b' b , IsContinuous‚àò _ _ c c')
     (Œª (a , b , c) ‚Üí invGroupIso a , c , b)
     (isSetŒ£ (isSetŒ£ (isSet-SetsIso isSet‚Ñù isSet‚Ñù)
        (Œª _ ‚Üí isProp‚ÜíisSet (isPropIsGroupHom _ _)))
         (Œª _ ‚Üí isProp‚ÜíisSet (isProp√ó (isPropIsContinuous _) (isPropIsContinuous _))))
     (Œª _ _ _ ‚Üí i‚â° refl)
          (Œª _ ‚Üí i‚â° refl)
          (Œª _ ‚Üí i‚â° refl)
          (Œª ((x , _) , _) ‚Üí i‚â° (funExt (Iso.leftInv x)))
          (Œª ((x , _) , _) ‚Üí i‚â° (funExt (Iso.rightInv x)))



open AutCont public using (Aut[_]·µ£)

module +GrAutomorphism (A : ‚ü® (Aut[ +Group‚Ñù ]) ‚ü©) where

 open IsGroupHom (snd A)
 open Iso (fst A)

 f-lin‚Ñö : ‚àÄ x q ‚Üí rat q ¬∑·µ£ fun x ‚â° fun (rat q ¬∑·µ£ x)
 f-lin‚Ñö x = SQ.ElimProp.go w
  where

  w'' : ‚àÄ x n ‚Üí fromNat n ¬∑·µ£ fun x ‚â° fun (fromNat n ¬∑·µ£ x)
  w'' x zero = ùêë'.0LeftAnnihilates _ ‚àô‚àô
    sym pres1 ‚àô‚àô cong fun (sym (ùêë'.0LeftAnnihilates _))
  w'' x (suc n) = sym (x+n¬∑x‚â°sn¬∑x n (fun x)) ‚àô‚àô
     cong (fun x +·µ£_) (w'' x n) ‚àô‚àô
      (sym (pres¬∑ _ _) ‚àô cong fun (x+n¬∑x‚â°sn¬∑x n x))


  w' : ‚àÄ n m ‚Üí rat [ ‚Ñ§.pos m , (1+ n) ] ¬∑·µ£ fun x ‚â° fun (rat [ ‚Ñ§.pos m , (1+ n) ] ¬∑·µ£ x)
  w' n m = cong‚ÇÇ _¬∑·µ£_ (cong rat (‚Ñö.[/]‚â°¬∑ (‚Ñ§.pos m) (1+ n))
      ‚àô rat¬∑·µ£rat _ _ ‚àô ¬∑·µ£Comm  _ _)
    refl ‚àô
    (sym (¬∑·µ£Assoc _ _ _) ‚àô
     cong (rat [ pos 1 / 1+ n ] ¬∑·µ£_)
       (w'' _ _)) ‚àô
        cong (rat [ pos 1 / 1+ n ] ¬∑·µ£_)
          (cong fun (cong (_¬∑·µ£ x)
           (cong rat (sym (m¬∑n/m n m)) ‚àô rat¬∑·µ£rat _ _)
           ‚àô sym (¬∑·µ£Assoc _ _ _)) ‚àô sym (w'' _ _)) ‚àô ¬∑·µ£Assoc _ _ _
          ‚àô cong‚ÇÇ _¬∑·µ£_ (sym (rat¬∑·µ£rat _ _)
           ‚àô cong rat (‚Ñö.¬∑Comm _ _
            ‚àô sym (‚Ñö.[/]‚â°¬∑ (pos (suc n)) (1+ n)) ‚àô
            eq/ _ _ (‚Ñ§.¬∑Comm _ _))) refl ‚àô ¬∑IdL _


  w : ElimProp (Œª z ‚Üí rat z ¬∑·µ£ fun x ‚â° fun (rat z ¬∑·µ£ x))
  w .ElimProp.isPropB _ = isSet‚Ñù _ _
  w .ElimProp.f (pos m , (1+ n)) = w' n m
  w .ElimProp.f (‚Ñ§.negsuc m , (1+ n)) =
    cong‚ÇÇ _¬∑·µ£_ (cong rat (‚Ñö.-[/] _ _) ‚àô sym (-·µ£-rat _)) refl  ‚àô (-·µ£¬∑ _ _)
    ‚àô cong -·µ£_ (w' n (suc m)) ‚àô sym (presinv _) ‚àô
     cong fun (sym (-·µ£¬∑ _ _) ‚àô
       cong‚ÇÇ _¬∑·µ£_ (-·µ£-rat _ ‚àô cong rat (sym (‚Ñö.-[/] _ _) )) refl)

 Œ± = fun 1

 fun-rat : ‚àÄ q ‚Üí fun (rat q) ‚â° rat q ¬∑·µ£ Œ±
 fun-rat q = cong fun (sym (¬∑IdR _)) ‚àô sym (f-lin‚Ñö 1 q)

 -- _ : {!!}
 -- _ = {!fun-rat 1!}

 Œ£fun' : Œ£[ f' ‚àà (‚Ñù ‚Üí ‚Ñù) ] ‚àÉ[ L ‚àà ‚Ñö‚Çä ] (Lipschitz-‚Ñù‚Üí‚Ñù L f')
 Œ£fun' = fromLipschitz' (fun ‚àò rat)
  (PT.map
     (Œª (Œ¥ , <Œ¥ , Œ¥<) ‚Üí
      let Œ¥‚Çä = Œ¥ , ‚Ñö.<‚Üí0< _
             (<·µ£‚Üí<‚Ñö _ _ (isTrans‚â§<·µ£ _ _ _
              (0‚â§abs·µ£ _) <Œ¥))
      in Œ¥‚Çä , Œª q r Œµ x x‚ÇÅ ‚Üí
          let u = ‚Ñö.absFrom<√ó< (fst Œµ) (q ‚Ñö.- r) x x‚ÇÅ
          in invEq (‚àº‚âÉabs<Œµ _ _ _)
                (isTrans‚â°<·µ£ _ _ _
                  (cong abs·µ£ (cong‚ÇÇ _-·µ£_ (fun-rat q) (fun-rat r)
                   ‚àô sym (ùêë'.¬∑DistL- _ _ _))
                    ‚àô ¬∑abs·µ£ _ _ ‚àô
                     ¬∑·µ£Comm _ _ ‚àô
                      cong (abs·µ£ Œ± ¬∑·µ£_)
                      (cong abs·µ£ (-·µ£-rat‚ÇÇ _ _) ‚àô abs·µ£-rat _ ) )
                  (isTrans‚â§<·µ£ _ _ _
                    (isTrans‚â§‚â°·µ£ _ _ _
                      (‚â§·µ£-¬∑·µ£o _ _ _
                        (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.0‚â§abs _) )
                        (<·µ£Weaken‚â§·µ£ _ _ <Œ¥))
                      (sym (rat¬∑·µ£rat _ _)))
                    (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.<-o¬∑ _ _ _ (‚Ñö.0<‚Ñö‚Çä Œ¥‚Çä) u))))
         )
     (dense‚Ñöin‚Ñù (abs·µ£ Œ±) ((abs·µ£ Œ±) +·µ£ 1)
       (isTrans‚â°<·µ£ _ _ _
         (sym (+IdR (abs·µ£ Œ±)))
         (<·µ£-o+ 0 1 _ dec‚Ñö<·µ£?))))


 fun' = fst Œ£fun'

 fun'-cont : IsContinuous fun'
 fun'-cont = PT.rec
  (isPropIsContinuous _)
  (Œª x ‚Üí Lipschitz‚ÜíIsContinuous _ _ (snd x))
  (snd Œ£fun')

 fun'¬∑ : ‚àÄ x ‚Üí fun' x ‚â° x ¬∑·µ£ Œ±
 fun'¬∑ = ‚â°Continuous _ _ fun'-cont
   (IsContinuous¬∑·µ£R Œ±)
    Œª q ‚Üí fromLipschitz'-rat fun _ _ ‚àô fun-rat q

 fun'-rat : ‚àÄ x ‚Üí fun' (rat x) ‚â° fun (rat x)
 fun'-rat x = fun'¬∑ (rat x) ‚àô sym (fun-rat x)



-- .Elim‚Ñù-Prop2Sym.rat-ratA r q p =
--     let z = sym (fun'-rat r) ‚àô‚àô p ‚àô‚àô fun'-rat q
--     in isoFunInjective (fst A) _ _ z
--   w .Elim‚Ñù-Prop2Sym.rat-limA = {!!}
--   w .Elim‚Ñù-Prop2.lim-limA = {!!}
--   w .Elim‚Ñù-Prop2.isPropA _ _ = isPropŒ† Œª _ ‚Üí isSet‚Ñù _ _

 -- fun'¬∑-equiv : isEquiv fun'
 -- fun'¬∑-equiv = isEmbedding√óisSurjection‚ÜíisEquiv {f = fun'}
 --  (fun-emb , {!!})

-- module +GrAutomorphism-Cont (A : ‚ü® (Aut[ +Group‚Ñù ]) ‚ü©) where

--  module F = +GrAutomorphism A
--  module F' = +GrAutomorphism (invGroupIso A)

--  isom' : Iso ‚Ñù ‚Ñù
--  isom' .Iso.fun = F.fun'
--  isom' .Iso.inv = F'.fun'
--  isom' .Iso.rightInv = {!!}
--  -- ‚â°Continuous _ _
--  --   (IsContinuous‚àò _ _ F.fun'-cont F'.fun'-cont) IsContinuousId
--  --     Œª r ‚Üí {!!}
--  isom' .Iso.leftInv = {!!}

--  Œ±¬∑Œ±'‚â°1 : F'.Œ± ¬∑·µ£ F.Œ± ‚â° 1
--  Œ±¬∑Œ±'‚â°1 = sym (F.fun'¬∑ _)
--   ‚àô  cong F.fun' (sym (¬∑IdL _) ‚àô sym (F'.fun'¬∑ _)) ‚àô isom' .Iso.rightInv 1

--  g-lin‚Ñö : ‚àÄ x q ‚Üí rat q ¬∑·µ£ g x ‚â° g (rat q ¬∑·µ£ x)
--  g-lin‚Ñö = {!!}


--  Œ≤ = g 1


--  g-rat : ‚àÄ q ‚Üí g (rat q) ‚â° rat q ¬∑·µ£ Œ≤
--  g-rat q = cong g (sym (¬∑IdR _)) ‚àô sym (g-lin‚Ñö 1 q)


--  Œ±¬∑Œ≤=1 : Œ± ¬∑·µ£ Œ≤ ‚â° 1
--  Œ±¬∑Œ≤=1 =
--    let q : ‚Ñö
--        q = {!!}
--        pp : {!!}
--        pp =     cong g {!f
--        !}
--                ‚àô Iso.leftInv (fst A) (rat q)
--    in {!!}

--  -- f‚â†1 : f 1 ‚â° 0 ‚Üí ‚ä•
--  -- f‚â†1 p = {!inj-rat _ _
--  --   (isoFunInjective (fst A) _ _ (p ‚àô sym (pres1)))!}

--  0<‚à£Œ±‚à£ : 0 <·µ£ abs·µ£ Œ±
--  0<‚à£Œ±‚à£ = {! !}


-- --  _ : {!!}
-- --  _ = {!g (abs·µ£ Œ±)!}


-- --  f-cont : IsContinuous f
-- --  f-cont u Œµ =
-- --   PT.map
-- --     {!!}
-- --     {!!}


Invlipschitz-‚Ñù‚Üí‚Ñù‚Üíinjective-interval : ‚àÄ K a b f ‚Üí
 Invlipschitz-‚Ñù‚Üí‚Ñù‚Ñô K (interval‚Ñô a b) f
    ‚Üí ‚àÄ x x‚àà y y‚àà ‚Üí f x x‚àà ‚â° f y y‚àà ‚Üí x ‚â° y
Invlipschitz-‚Ñù‚Üí‚Ñù‚Üíinjective-interval K a b f il x x‚àà y y‚àà =
 fst (‚àº‚âÉ‚â° _ _) ‚àò
   (Œª p Œµ ‚Üí subst‚àº (‚Ñö.y¬∑[x/y] K (fst Œµ))
     (il x x‚àà y  y‚àà ((inv‚Ñö‚Çä K) ‚Ñö‚Çä¬∑ Œµ) (p (inv‚Ñö‚Çä K ‚Ñö‚Çä¬∑ Œµ))))
   ‚àòS invEq (‚àº‚âÉ‚â° _ _)


interval‚Ñô‚Üídist< : ‚àÄ a b x y ‚Üí x ‚àà interval‚Ñô a b ‚Üí y ‚àà interval‚Ñô a b
                   ‚Üí abs·µ£ (x -·µ£ y) ‚â§·µ£ b -·µ£ a
interval‚Ñô‚Üídist< a b x y (a‚â§x , x‚â§b) (a‚â§y , y‚â§b) =
  isTrans‚â°‚â§·µ£ _ _ _ (abs-max _ ‚àô cong (max·µ£ _) (-[x-y]‚â°y-x _ _) )
    (max‚â§-lem _ _ _ (‚â§·µ£Monotone+·µ£ _ _ _ _ x‚â§b (-·µ£‚â§·µ£ _ _ a‚â§y))
                    ((‚â§·µ£Monotone+·µ£ _ _ _ _ y‚â§b (-·µ£‚â§·µ£ _ _ a‚â§x))))



‚Ñö1‚â§x‚äî1/x : ‚àÄ x ‚Üí 1 ‚Ñö.‚â§ ‚Ñö.max (fst x) (fst (inv‚Ñö‚Çä x))
‚Ñö1‚â§x‚äî1/x x =
  ‚äé.rec
     (Œª 1‚â§x ‚Üí
       ‚Ñö.isTrans‚â§ _ _ _ 1‚â§x (‚Ñö.‚â§max (fst x) (fst (inv‚Ñö‚Çä x))) )
     (Œª x<1 ‚Üí
       ‚Ñö.isTrans‚â§ _ _ _ (‚Ñö.inv‚Ñö‚â§inv‚Ñö 1 _
         (‚Ñö.<Weaken‚â§ _ _ x<1))
         (‚Ñö.‚â§max' (fst x) (fst (inv‚Ñö‚Çä x))))
   (‚Ñö.Dichotomy‚Ñö 1 (fst x))



1‚â§x‚äî1/x : ‚àÄ x ‚Üí 1 ‚â§·µ£ max·µ£ (fst x) (fst (inv‚Ñù‚Çä x))
1‚â§x‚äî1/x =
  uncurry (<‚Üí‚â§ContPos'pred {0}
    (AsContinuousWithPred _ _
      (IsContinuousConst _))
       (contDiagNE‚ÇÇWP maxR _ _ _
         (AsContinuousWithPred _ _
           IsContinuousId) (snd inv‚Ñù'))
             Œª u 0<u ‚Üí
               subst (1 ‚â§·µ£_) (cong (max·µ£ (rat u))
                 (sym (inv‚Ñù'-rat _ _ _)))
                 (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (
                  (‚Ñö1‚â§x‚äî1/x (u , ‚Ñö.<‚Üí0< u (<·µ£‚Üí<‚Ñö _ _ 0<u))))))


0<pos[sucN]¬≤ : ‚àÄ n ‚Üí 0 ‚Ñ§.< (‚Ñ§.pos (suc n)) ‚Ñ§.¬∑ (‚Ñ§.pos (suc n))
0<pos[sucN]¬≤ n = ‚Ñ§.<-¬∑o {0} {‚Ñ§.pos (suc n)} {n} (‚Ñ§.suc-‚â§-suc ‚Ñ§.zero-‚â§pos)

0<x¬≤ : ‚àÄ n ‚Üí ¬¨ (n ‚â° 0) ‚Üí 0 ‚Ñ§.< n ‚Ñ§.¬∑ n
0<x¬≤ (pos zero) x = ‚ä•.elim (x refl)
0<x¬≤ (pos (suc n)) _ = 0<pos[sucN]¬≤ n
0<x¬≤ (‚Ñ§.negsuc n) _ = subst (0 ‚Ñ§.<_) (sym (‚Ñ§.negsuc¬∑negsuc n n))
  (0<pos[sucN]¬≤ n)

mn<m¬≤+n¬≤ : (a b : ‚Ñï) ‚Üí pos (suc a) ‚Ñ§.¬∑ pos (suc b) ‚Ñ§.<
                    (pos (suc a) ‚Ñ§.¬∑ pos (suc a))
                      ‚Ñ§.+ (pos (suc b) ‚Ñ§.¬∑ pos (suc b))
mn<m¬≤+n¬≤ a b =
  ‚Ñ§.<-+pos-trans {k = a ‚Ñï.¬∑ suc b} h'
 where
 a' = pos (suc a)
 b' = pos (suc b)
 h : ((a' ‚Ñ§.¬∑ b') ‚Ñ§.+ (a' ‚Ñ§.¬∑ b')) ‚Ñ§.‚â§
         (a' ‚Ñ§.¬∑ a' ‚Ñ§.+ b' ‚Ñ§.¬∑ b')
 h = subst2 (‚Ñ§._‚â§_)
       (ùêô'.+IdL' _ _ refl)
       (cong (‚Ñ§._+ ((a' ‚Ñ§.¬∑ b') ‚Ñ§.+ (a' ‚Ñ§.¬∑ b'))) (Lùêô.lem--073 {a'} {b'})
        ‚àô ùêô'.minusPlus _ _)
       (‚Ñ§.‚â§-+o {o = ((a' ‚Ñ§.¬∑ b') ‚Ñ§.+ (a' ‚Ñ§.¬∑ b'))} (‚Ñ§.0‚â§x¬≤ (a' ‚Ñ§.- b')))

 h' = ‚Ñ§.<‚â§-trans (‚Ñ§.<-o+ (subst (‚Ñ§._< a' ‚Ñ§.¬∑ b')
     (sym (‚Ñ§.pos¬∑pos _ _)) (‚Ñ§.<-¬∑o {k = b}
       ‚Ñ§.isRefl‚â§))) h


‚Ñö1<x+1/x : ‚àÄ x ‚Üí 1 ‚Ñö.< fst x ‚Ñö.+ fst (inv‚Ñö‚Çä x)
‚Ñö1<x+1/x = uncurry (SQ.ElimProp.go w)
 where
 w : ElimProp (Œª z ‚Üí (y : 0< z) ‚Üí 1 ‚Ñö.< z ‚Ñö.+ fst (inv‚Ñö‚Çä (z , y)))
 w .ElimProp.isPropB _ = isPropŒ† Œª _ ‚Üí ‚Ñö.isProp< _ _
 w .ElimProp.f (pos (suc n) , (1+ m)) y =
    subst2 ‚Ñ§._<_
      (sym (‚Ñ§.pos¬∑pos  _ _)) (‚Ñ§.+Comm _ _ ‚àô sym (‚Ñ§.¬∑IdR _))
     (mn<m¬≤+n¬≤ m n)
opaque
 unfolding _+·µ£_
 1‚â§x+1/x : ‚àÄ x ‚Üí 1 ‚â§·µ£ fst x +·µ£ fst (inv‚Ñù‚Çä x)
 1‚â§x+1/x =
   uncurry (<‚Üí‚â§ContPos'pred {0}
     (AsContinuousWithPred _ _
       (IsContinuousConst _))
        (contDiagNE‚ÇÇWP sumR _ _ _
          (AsContinuousWithPred _ _
            IsContinuousId) (snd inv‚Ñù'))
              Œª u 0<u ‚Üí
                subst (1 ‚â§·µ£_) (cong (rat u +·µ£_)
                  (sym (inv‚Ñù'-rat _ _ _)))
                  (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.<Weaken‚â§ 1 _
                   (‚Ñö1<x+1/x (u , ‚Ñö.<‚Üí0< u (<·µ£‚Üí<‚Ñö _ _ 0<u))))))

-- pasting : (x‚ÇÄ : ‚Ñù) ‚Üí (f< : ‚àÄ x ‚Üí x ‚â§·µ£ x‚ÇÄ ‚Üí ‚Ñù)
--                   ‚Üí (<f : ‚àÄ x ‚Üí x‚ÇÄ ‚â§·µ£ x ‚Üí ‚Ñù)
--                   ‚Üí f< x‚ÇÄ (‚â§·µ£-refl x‚ÇÄ) ‚â° <f x‚ÇÄ (‚â§·µ£-refl x‚ÇÄ)
--                   ‚Üí Œ£[ f ‚àà (‚Ñù ‚Üí ‚Ñù) ]
--                         (‚àÄ x x‚â§x‚ÇÄ ‚Üí f x ‚â° f< x x‚â§x‚ÇÄ)
--                          √ó (‚àÄ x x‚ÇÄ‚â§x ‚Üí f x ‚â° <f x x‚ÇÄ‚â§x)
-- pasting x‚ÇÄ f< <f p =
--   (Œª x ‚Üí (<f (max·µ£ x‚ÇÄ x) (‚â§max·µ£ _ _)
--       +·µ£ f< (min·µ£ x‚ÇÄ x) (min‚â§·µ£ _ _))
--        -·µ£ f< x‚ÇÄ (‚â§·µ£-refl x‚ÇÄ))
--   , (Œª x x‚â§x‚ÇÄ ‚Üí
--       let z = min·µ£Comm _ _ ‚àô ‚â§‚Üímin·µ£ _ _ x‚â§x‚ÇÄ
--       in cong‚ÇÇ _-·µ£_ (cong‚ÇÇ _+·µ£_
--              (cong (uncurry <f) (Œ£‚â°Prop (Œª _ ‚Üí isProp‚â§·µ£ _ _)
--                (max·µ£Comm _ _ ‚àô ?))) -- x‚â§x‚ÇÄ
--              (cong (uncurry f<) (Œ£‚â°Prop (Œª _ ‚Üí isProp‚â§·µ£ _ _) z)) ) p ‚àô
--           Lùêë.lem--063)
--   , Œª x x‚ÇÄ‚â§x ‚Üí
--        ùêë'.plusMinus' _ _ _ (cong (uncurry f<)
--         (Œ£‚â°Prop (Œª _ ‚Üí isProp‚â§·µ£ _ _) (‚â§‚Üímin·µ£ _ _ x‚ÇÄ‚â§x))) ‚àô
--         (cong (uncurry <f)
--         (Œ£‚â°Prop (Œª _ ‚Üí isProp‚â§·µ£ _ _) ?)) -- x‚ÇÄ‚â§x


-- pasting< : ‚àÄ b x‚ÇÄ b<x‚ÇÄ
--                   ‚Üí (f< : ‚àÄ x ‚Üí b <·µ£ x ‚Üí x ‚â§·µ£ x‚ÇÄ ‚Üí ‚Ñù)
--                   ‚Üí (<f : ‚àÄ x ‚Üí x‚ÇÄ ‚â§·µ£ x ‚Üí ‚Ñù)
--                   ‚Üí f< x‚ÇÄ b<x‚ÇÄ (‚â§·µ£-refl x‚ÇÄ) ‚â° <f x‚ÇÄ (‚â§·µ£-refl x‚ÇÄ)
--                   ‚Üí Œ£[ f ‚àà (‚àÄ x ‚Üí b <·µ£ x ‚Üí ‚Ñù) ]
--                         (‚àÄ x b<x x‚â§x‚ÇÄ ‚Üí f x b<x ‚â° f< x b<x x‚â§x‚ÇÄ)
--                          √ó (‚àÄ x b<x x‚ÇÄ‚â§x ‚Üí f x b<x ‚â° <f x x‚ÇÄ‚â§x)
-- pasting< b x‚ÇÄ b<x‚ÇÄ f< <f p =
--    ((Œª x x< ‚Üí (<f (max·µ£ x‚ÇÄ x) (‚â§max·µ£ _ _)
--       +·µ£ f< (min·µ£ x‚ÇÄ x) (<min-lem _ _ _ b<x‚ÇÄ x<) (min‚â§·µ£ _ _))
--        -·µ£ f< x‚ÇÄ b<x‚ÇÄ (‚â§·µ£-refl x‚ÇÄ)))
--   , (Œª x b<x x‚â§x‚ÇÄ ‚Üí
--       let z = min·µ£Comm _ _ ‚àô ‚â§‚Üímin·µ£ _ _ x‚â§x‚ÇÄ
--       in cong‚ÇÇ _-·µ£_ (cong‚ÇÇ _+·µ£_
--              (cong (uncurry <f) (Œ£‚â°Prop (Œª _ ‚Üí isSet‚Ñù _ _)
--                (max·µ£Comm _ _ ‚àô x‚â§x‚ÇÄ)))
--              (cong (uncurry (uncurry f<))
--                (Œ£‚â°Prop (flip isProp‚â§·µ£ _ ‚àò fst) (Œ£‚â°Prop (isProp<·µ£ _) z)))
--              ) p ‚àô
--           Lùêë.lem--063)
--    , Œª x b<x x‚ÇÄ‚â§x ‚Üí
--      ùêë'.plusMinus' _ _ _ (cong (uncurry (uncurry f<))
--         (Œ£‚â°Prop (Œª (x , _) ‚Üí isProp‚â§·µ£ x _) (Œ£‚â°Prop (isProp<·µ£ _) (‚â§‚Üímin·µ£ _ _ x‚ÇÄ‚â§x))) ) ‚àô
--        cong (uncurry <f) ((Œ£‚â°Prop (Œª _ ‚Üí isSet‚Ñù _ _) x‚ÇÄ‚â§x))



-- pasting‚â§ : ‚àÄ b x‚ÇÄ b‚â§x‚ÇÄ
--                   ‚Üí (f< : ‚àÄ x ‚Üí b ‚â§·µ£ x ‚Üí x ‚â§·µ£ x‚ÇÄ ‚Üí ‚Ñù)
--                   ‚Üí (<f : ‚àÄ x ‚Üí x‚ÇÄ ‚â§·µ£ x ‚Üí ‚Ñù)
--                   ‚Üí f< x‚ÇÄ b‚â§x‚ÇÄ (‚â§·µ£-refl x‚ÇÄ) ‚â° <f x‚ÇÄ (‚â§·µ£-refl x‚ÇÄ)
--                   ‚Üí Œ£[ f ‚àà (‚àÄ x ‚Üí b ‚â§·µ£ x ‚Üí ‚Ñù) ]
--                         (‚àÄ x b‚â§x x‚â§x‚ÇÄ ‚Üí f x b‚â§x ‚â° f< x b‚â§x x‚â§x‚ÇÄ)
--                          √ó (‚àÄ x b‚â§x x‚ÇÄ‚â§x ‚Üí f x b‚â§x ‚â° <f x x‚ÇÄ‚â§x)
-- pasting‚â§ b x‚ÇÄ b‚â§x‚ÇÄ f< <f p =
--   (Œª x _ ‚Üí (fst h) x)
--   , (Œª x b‚â§x x‚â§x‚ÇÄ ‚Üí fst (snd h) x x‚â§x‚ÇÄ ‚àô q b‚â§x)
--   ,  const ‚àò snd (snd h)
--  where

--  q : ‚àÄ {y y' : Œ£[ x ‚àà ‚Ñù ] (b ‚â§·µ£ x) √ó (x ‚â§·µ£ x‚ÇÄ)}
--          ‚Üí (a : (fst y) ‚â° (fst y')) ‚Üí _ ‚â° _
--  q {y} {y'} = cong {x = y} {y = y'} (uncurry $ uncurry ‚àò f<) ‚àò
--          (Œ£‚â°Prop (Œª _ ‚Üí isProp√ó (isSet‚Ñù _ _) (isSet‚Ñù _ _)))

--  h = pasting x‚ÇÄ
--        (Œª x x‚â§x‚ÇÄ ‚Üí f< (max·µ£ b x) (‚â§max·µ£ _ _)
--          (max‚â§-lem _ _ _ b‚â§x‚ÇÄ x‚â§x‚ÇÄ))
--        <f (q b‚â§x‚ÇÄ ‚àô p)


opaque
 unfolding _+·µ£_
 slope-lower-bound : (z : ‚Ñù‚Çä) (B : ‚Ñö‚Çä) (1<z : 1 <·µ£ fst z) ‚Üí (y‚ÇÄ y‚ÇÅ : ‚Ñö )
   ‚Üí (y‚ÇÄ<y‚ÇÅ : y‚ÇÄ ‚Ñö.< y‚ÇÅ)
   ‚Üí (y‚ÇÄ‚àà : y‚ÇÄ ‚àà ‚Ñöinterval‚Ñô (‚Ñö.- (fst B)) (fst B))
   ‚Üí (y‚ÇÅ‚àà : y‚ÇÅ ‚àà ‚Ñöinterval‚Ñô (‚Ñö.- (fst B)) (fst B)) ‚Üí
   fst (z ^‚Ñö (‚Ñö.- fst B)) ¬∑·µ£
        ((fst z -·µ£ 1) Ôºè·µ£‚Çä z)
       <·µ£
   ((fst (z ^‚Ñö y‚ÇÅ) -·µ£ fst (z ^‚Ñö y‚ÇÄ))
     Ôºè·µ£‚Çä ‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä _ _  y‚ÇÄ<y‚ÇÅ ))
 slope-lower-bound z B 1<z y‚ÇÄ y‚ÇÅ y‚ÇÄ<y‚ÇÅ (-B‚â§y‚ÇÄ , y‚ÇÄ‚â§B) (-B‚â§y‚ÇÅ , y‚ÇÅ‚â§B) =
   isTrans<‚â°·µ£ _ _ _
     (‚â§<·µ£‚ÇäMonotone¬∑·µ£
       ((z ^‚Ñö (‚Ñö.- (fst B)))) (fst (z ^‚Ñö y‚ÇÄ))
       (_ ,
         isTrans‚â°‚â§·µ£ _ _ _ (sym (ùêë'.0LeftAnnihilates _))
            (‚â§·µ£-¬∑·µ£o 0 _ _
             (<·µ£Weaken‚â§·µ£ _ _ (snd (inv‚Ñù‚Çä (fst z , z .snd))))
              (<·µ£Weaken‚â§·µ£ _ _ (x<y‚Üí0<y-x _ _ 1<z))))
               ((fst (z ^‚Ñö (fst h‚Çä)) -·µ£ 1) Ôºè·µ£‚Çä ‚Ñö‚Çä‚Üí‚Ñù‚Çä h‚Çä)

       (^‚Ñö-MonotoneR {z} (‚Ñö.- (fst B)) y‚ÇÄ -B‚â§y‚ÇÄ (<·µ£Weaken‚â§·µ£ _ _ 1<z))

        (invEq (z/y'<x/y‚âÉy‚Çä¬∑z<y'‚Çä¬∑x _ _ _ _)
           brn )
        )
       (¬∑·µ£Assoc _ _ _
        ‚àô cong (_¬∑·µ£
         fst (inv‚Ñù‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä h‚Çä)))
          (sym (factor-x·µÉ-x·µá z _ _) ))

  where
   h‚Çä : ‚Ñö‚Çä
   h‚Çä = ‚Ñö.<‚Üí‚Ñö‚Çä _ _ y‚ÇÄ<y‚ÇÅ

   brn : fst (‚Ñö‚Çä‚Üí‚Ñù‚Çä h‚Çä) ¬∑·µ£ (fst z -·µ£ 1)   <·µ£
         fst z ¬∑·µ£ (fst (z ^‚Ñö fst h‚Çä) -·µ£ rat [ pos 1 / 1+ 0 ])

   brn = isTrans<‚â°·µ£ _ _ _ (a+c<b‚áía<b-c _ _ _ (isTrans‚â°<·µ£ _ _ _ (sym (¬∑DistR+ (fst (‚Ñö‚Çä‚Üí‚Ñù‚Çä h‚Çä)) 1 _))
          (a+c<b‚áía<b-c _ _ 1
           (isTrans‚â°<·µ£ _ _ _
            (+·µ£Comm (rat (fst h‚Çä ‚Ñö.+ [ pos 1 / 1+ 0 ]) ¬∑·µ£
       (fst z -·µ£ rat [ pos 1 / 1+ 0 ])) 1) (bernoulli's-ineq-^‚Ñö z (fst h‚Çä ‚Ñö.+ 1)
             1<z (subst (1 ‚Ñö.<_) (‚Ñö.+Comm 1 (fst h‚Çä))
              (‚Ñö.<+‚Ñö‚Çä' _ _ h‚Çä (‚Ñö.isRefl‚â§ 1))) )))))
             (sym (+·µ£Assoc (fst (z ^‚Ñö (fst h‚Çä ‚Ñö.+ 1))) _ _) ‚àô
              cong‚ÇÇ _+·µ£_
                (cong fst (sym (^‚Ñö-+ z (fst h‚Çä) 1))
                  ‚àô ¬∑·µ£Comm _ _ ‚àô
                    cong (_¬∑·µ£ (z ^‚Ñö fst h‚Çä) .fst) (cong fst (^‚Ñö-1 _) ))
                ((sym (-·µ£Distr _ _) ‚àô
                  cong (-·µ£_) (cong (1 +·µ£_) (¬∑IdL _)
                   ‚àô Lùêë.lem--05 ‚àô sym (¬∑IdL _))
                  ) ‚àô sym (-·µ£¬∑ _ _) ‚àô ¬∑·µ£Comm _ _)
               ‚àô sym (¬∑DistL+ _ _ _) )


slope-upper-bound : (z : ‚Ñù‚Çä) (B : ‚Ñö‚Çä) ‚Üí (y‚ÇÄ y‚ÇÅ : ‚Ñö )
  ‚Üí (y‚ÇÄ<y‚ÇÅ : y‚ÇÄ ‚Ñö.< y‚ÇÅ)
  ‚Üí (y‚ÇÄ‚àà : y‚ÇÄ ‚àà ‚Ñöinterval‚Ñô (‚Ñö.- (fst B)) (fst B))
  ‚Üí (y‚ÇÅ‚àà : y‚ÇÅ ‚àà ‚Ñöinterval‚Ñô (‚Ñö.- (fst B)) (fst B)) ‚Üí
  ((fst (z ^‚Ñö y‚ÇÅ) -·µ£ fst (z ^‚Ñö y‚ÇÄ))
    Ôºè·µ£‚Çä ‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä _ _  y‚ÇÄ<y‚ÇÅ ))
     ‚â§·µ£ fst (z ^‚Ñö (fst B)) ¬∑·µ£ (fst z -·µ£ 1)
slope-upper-bound z B y‚ÇÄ y‚ÇÅ y‚ÇÄ<y‚ÇÅ (-B‚â§y‚ÇÄ , y‚ÇÄ‚â§B) (-B‚â§y‚ÇÅ , y‚ÇÅ‚â§B) =
  isTrans‚â§‚â°·µ£ _ _ _
    (slope-monotone z
      y‚ÇÄ y‚ÇÅ (fst B) (fst B ‚Ñö.+ 1)
       y‚ÇÄ<y‚ÇÅ B<B+1 y‚ÇÄ‚â§B
         (‚Ñö.isTrans‚â§ _ _ _ y‚ÇÅ‚â§B (‚Ñö.<Weaken‚â§ _ _ B<B+1))
         )
    (ùêë'.¬∑IdR' _ _ (cong (fst ‚àò inv‚Ñù‚Çä)
      (‚Ñù‚Çä‚â° (cong rat lem--063)) ‚àô cong fst inv‚Ñù‚Çä1) ‚àô
       factor-x·µÉ-x·µá z (fst B ‚Ñö.+ 1) (fst B) ‚àô
         cong (Œª u ‚Üí fst (z ^‚Ñö fst B) ¬∑·µ£ (fst u -·µ£ 1))
           (cong (z ^‚Ñö_) lem--063 ‚àô ^‚Ñö-1 z))

 where
  h‚Çä = ‚Ñö.<‚Üí‚Ñö‚Çä _ _ y‚ÇÄ<y‚ÇÅ
  B<B+1 = ‚Ñö.<+‚Ñö‚Çä' _ _ 1 (‚Ñö.isRefl‚â§ (fst B))


-- -- lowBnd-1/‚Ñï : (Œµ : ‚Ñù‚Çä) ‚Üí ‚àÉ[ k ‚àà ‚Ñï‚Çä‚ÇÅ ] rat [ 1 / k ] <·µ£ fst Œµ
-- -- lowBnd-1/‚Ñï = {!!}


-- -- ceil‚Ñö‚Çä q = 1+ (fst (fst (floor-frac‚Ñö‚Çä q))) ,
-- --    subst2 (_<_) --  (fromNat (suc (fst (fst (floor-frac‚Ñö‚Çä q)))))
-- --       (‚Ñö.+Comm _ _ ‚àô fst (snd (floor-frac‚Ñö‚Çä q)))
-- --       (‚Ñö.‚Ñï+‚Üí‚Ñö+ _ _)
-- --        (<-+o _ _ (fromNat (fst (fst (floor-frac‚Ñö‚Çä q))))
-- --          (snd (snd (snd (floor-frac‚Ñö‚Çä q)))))


slUpBd : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñö‚Çä
slUpBd Z m = (fromNat (suc (suc Z)) ‚Ñö‚Çä^‚Åø (suc m)) ‚Ñö‚Çä¬∑ fromNat (suc Z)



monotone^‚Ñö' : ‚àÄ q q' q''
 ‚Üí q ‚Ñö.‚â§ q'
 ‚Üí q' ‚Ñö.‚â§ q''
 ‚Üí ‚àÄ u 0<u
 ‚Üí min·µ£ (fst ((rat u , 0<u) ^‚Ñö q)) (fst ((rat u , 0<u) ^‚Ñö q'')) ‚â§·µ£
   fst ((rat u , 0<u) ^‚Ñö q')
monotone^‚Ñö' q q' q'' q‚â§q' q'‚â§q'' u 0<u =
 ‚äé.rec
   (Œª 1‚â§u ‚Üí
     isTrans‚â§·µ£ _ _ _ (min‚â§·µ£ (fst ((rat u , 0<u) ^‚Ñö q))
            (fst ((rat u , 0<u) ^‚Ñö q'')))
        (^‚Ñö-MonotoneR {(rat u , 0<u)} q q'
           q‚â§q'
        (‚â§‚Ñö‚Üí‚â§·µ£ _ _ 1‚â§u)))
   (Œª u<1 ‚Üí isTrans‚â§·µ£ _ _ _
     (min‚â§·µ£' (fst ((rat u , 0<u) ^‚Ñö q))
            (fst ((rat u , 0<u) ^‚Ñö q'')))
       let xx = (^‚Ñö-MonotoneR {inv‚Ñù‚Çä (rat u , 0<u)}
               _ _  (‚Ñö.minus-‚â§ _ _ q'‚â§q'')
                   (isTrans‚â§‚â°·µ£ _ _ _
                    (invEq (z‚â§x/y‚Çä‚âÉy‚Çä¬∑z‚â§x 1 1 (rat u , 0<u))
                      (isTrans‚â°‚â§·µ£ _ _ _ (¬∑IdR _)
                        (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.<Weaken‚â§ _ _ u<1))))
                    (¬∑IdL _)))
       in subst2 _‚â§·µ£_
            (cong fst (sym (^‚Ñö-minus _ _)))
            (cong fst (sym (^‚Ñö-minus _ _)))
            xx)
   (‚Ñö.Dichotomy‚Ñö 1 u)



monotone^‚Ñö : ‚àÄ q q' q''
 ‚Üí q ‚Ñö.‚â§ q'
 ‚Üí q' ‚Ñö.‚â§ q''
 ‚Üí ‚àÄ z
 ‚Üí min·µ£ (fst (z ^‚Ñö q)) (fst (z ^‚Ñö q'')) ‚â§·µ£ fst (z ^‚Ñö q')
monotone^‚Ñö q q' q'' q‚â§q' q'‚â§q'' =
  uncurry (<‚Üí‚â§ContPos'pred {0}
    (contDiagNE‚ÇÇWP minR _ _ _
      (IsContinuous^‚Ñö q)
      (IsContinuous^‚Ñö q''))
    (IsContinuous^‚Ñö q')
    Œª u 0<u ‚Üí monotone^‚Ñö' q q' q'' q‚â§q' q'‚â§q'' u 0<u)

-- module BDL (z : ‚Ñù‚Çä) (Z : ‚Ñï)
--           (z‚â§Z : fst z ‚â§·µ£ fromNat (suc (suc Z)))
--           (1/Z‚â§z : rat [ 1 / fromNat (suc (suc Z)) ]  ‚â§·µ£ fst z)
--           -- (1+1/Z<z : rat (1 ‚Ñö.+ [ 1 / 1+ (suc Z) ]) ‚â§·µ£ fst z )
--            where


-- bdl' : 1 ‚â§·µ£ fst z ‚Üí boundedLipschitz (fst ‚àò z ^‚Ñö_) (slUpBd Z)
-- bdl' 1‚â§z n = ‚Ñö.elimBy‚â°‚äé<
--  (Œª x y X y‚àà x‚àà ‚Üí subst2 _‚â§·µ£_
--       (minusComm-abs·µ£ _ _)
--       (cong (rat ‚àò (fst (slUpBd Z n) ‚Ñö.¬∑_)) (‚Ñö.absComm- _ _))
--       (X x‚àà y‚àà)  )
--  (Œª x _ _ ‚Üí subst2 _‚â§·µ£_
--     (cong abs·µ£ (sym (+-·µ£ _)))
--     (cong rat (sym (ùêê'.0RightAnnihilates' _ _ (cong ‚Ñö.abs (‚Ñö.+InvR x)))))
--     (‚â§·µ£-refl 0))
--  Œª y‚ÇÄ y‚ÇÅ y‚ÇÄ<y‚ÇÅ y‚ÇÄ‚àà y‚ÇÅ‚àà ‚Üí
--   isTrans‚â°‚â§·µ£ _ _ _ (abs·µ£NonNeg _ (x‚â§y‚Üí0‚â§y-x _ _
--         (^‚Ñö-MonotoneR _ _ (‚Ñö.<Weaken‚â§ _ _ y‚ÇÄ<y‚ÇÅ) 1‚â§z )))
--     (isTrans‚â§‚â°·µ£ _ _ _ (isTrans‚â§·µ£ _ _ _ (
--    (fst (z/y‚â§x‚Çä‚âÉz‚â§y‚Çä¬∑x _ _ _) (slope-upper-bound z (fromNat (suc n))
--    y‚ÇÄ y‚ÇÅ y‚ÇÄ<y‚ÇÅ
--     (‚Ñö.absTo‚â§√ó‚â§ (fromNat (suc n)) y‚ÇÄ y‚ÇÄ‚àà)
--     (‚Ñö.absTo‚â§√ó‚â§ (fromNat (suc n)) y‚ÇÅ y‚ÇÅ‚àà))))
--      (‚â§·µ£-o¬∑ _ _ _ (‚Ñö.<Weaken‚â§ 0 _ (‚Ñö.-< _ _ y‚ÇÄ<y‚ÇÅ))
--       (‚â§·µ£‚ÇäMonotone¬∑·µ£ _ _ _ _
--         (<·µ£Weaken‚â§·µ£ _ _ $ snd (fromNat (suc (suc Z)) ^‚Ñö fst (fromNat (suc n))))
--         (x‚â§y‚Üí0‚â§y-x _ _ 1‚â§z)
--         (^‚Ñö-Monotone {y = fromNat (suc (suc Z))}
--          (fromNat (suc n)) z‚â§Z)
--         (‚â§·µ£-+o _ _ (-1) z‚â§Z))))
--      (¬∑·µ£Comm _ _ ‚àô
--       cong‚ÇÇ (_¬∑·µ£_)
--         (cong‚ÇÇ (_¬∑·µ£_) (^‚Åø-‚Ñö^‚Åø _ _) (cong rat (‚Ñö.‚Ñ§+‚Üí‚Ñö+ _ _))
--          ‚àô sym (rat¬∑·µ£rat _ _) )
--         (cong rat (sym (‚Ñö.absPos _ (‚Ñö.-< _ _ y‚ÇÄ<y‚ÇÅ))))
--        ‚àô sym (rat¬∑·µ£rat _ _)))



-- --  slUpBdInv : ‚Ñï ‚Üí ‚Ñö‚Çä
-- --  slUpBdInv m = (fromNat (suc (suc Z))) ‚Ñö‚Çä^‚Åø (suc (suc (suc m)))
-- --      -- ‚Ñö‚Çä¬∑ ((inv‚Ñö‚Çä (fromNat (suc (suc Z)))) ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä (fromNat (suc (suc Z))))
-- -- -- ((fst z -·µ£ 1) Ôºè·µ£‚Çä z)

--  -- slpBdIneq : ‚àÄ n ‚Üí fst (inv‚Ñö‚Çä (slUpBdInv n)) ‚Ñö.‚â§
--  --    fst (slUpBd n)
--  -- slpBdIneq n = ‚Ñö.isTrans‚â§ _ 1 _
--  --   (fst (‚Ñö.inv‚Ñö‚Çä-‚â§-inv‚Ñö‚Çä 1 _)
--  --     (‚Ñö.1‚â§x^‚Åø (fromNat (suc (suc Z)))
--  --          (suc (suc (suc n)))
--  --          (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö 1 (pos (suc (suc Z)))
--  --            (‚Ñ§.suc-‚â§-suc {0} {pos (suc Z)}
--  --             (‚Ñ§.zero-‚â§pos {suc Z})))))
--  --   (‚Ñö.‚â§Monotone¬∑-onNonNeg 1 _ 1 _
--  --    ((‚Ñö.1‚â§x^‚Åø (fromNat (suc (suc Z)))
--  --          ((suc n))
--  --          (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö 1 (pos (suc (suc Z)))
--  --            (‚Ñ§.suc-‚â§-suc {0} {pos (suc Z)}
--  --             (‚Ñ§.zero-‚â§pos {suc Z})))))
--  --    ((‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö 1 (pos (suc Z))
--  --            (‚Ñ§.suc-‚â§-suc {0} {pos Z}
--  --             (‚Ñ§.zero-‚â§pos {Z}))))
--  --    (‚Ñö.dec‚Ñö‚â§? {0} {1})
--  --    (‚Ñö.dec‚Ñö‚â§? {0} {1}))

-- --  1<z : 1 <·µ£ (fst z)
-- --  1<z = isTrans<·µ£ _ _ _ (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.<+‚Ñö‚Çä' _ _ _ (‚Ñö.isRefl‚â§ 1))) 1+1/Z<z


-- clamp·µ£‚Çä : ‚Ñù‚Çä ‚Üí ‚Ñù‚Çä ‚Üí ‚Ñù‚Çä ‚Üí ‚Ñù‚Çä
-- clamp·µ£‚Çä d u x = min·µ£‚Çä (max·µ£‚Çä d x) u

isIncrasing‚Ñô·µ£ : (P : ‚Ñô ‚Ñù) ‚Üí (‚àÄ (x : ‚Ñù) ‚Üí x ‚àà P ‚Üí ‚Ñù) ‚Üí Type
isIncrasing‚Ñô·µ£ P f =
 ‚àÄ (x : ‚Ñù) (x‚àà : x ‚àà P) (y : ‚Ñù) (y‚àà : y ‚àà P) ‚Üí x <·µ£ y ‚Üí f x x‚àà <·µ£ f y y‚àà


isNondecrasing‚Ñô·µ£ : (P : ‚Ñô ‚Ñù) ‚Üí (‚àÄ (x : ‚Ñù) ‚Üí x ‚àà P ‚Üí ‚Ñù) ‚Üí Type
isNondecrasing‚Ñô·µ£ P f =
 ‚àÄ (x : ‚Ñù) (x‚àà : x ‚àà P) (y : ‚Ñù) (y‚àà : y ‚àà P) ‚Üí x ‚â§·µ£ y ‚Üí f x x‚àà ‚â§·µ£ f y y‚àà


‚ààinterval‚Üí‚â§ContPos'pred : {x‚ÇÄ x‚ÇÅ : ‚Ñö} ‚Üí (x‚ÇÄ ‚Ñö.‚â§ x‚ÇÅ)
         ‚Üí {f‚ÇÄ f‚ÇÅ : ‚àÄ x ‚Üí x ‚àà interval‚Ñô (rat x‚ÇÄ) (rat x‚ÇÅ)   ‚Üí ‚Ñù}
         ‚Üí IsContinuousWithPred (interval‚Ñô (rat x‚ÇÄ) (rat x‚ÇÅ)) f‚ÇÄ
         ‚Üí IsContinuousWithPred (interval‚Ñô (rat x‚ÇÄ) (rat x‚ÇÅ)) f‚ÇÅ
         ‚Üí (‚àÄ u x‚ÇÄ<u<x‚ÇÅ ‚Üí f‚ÇÄ (rat u) x‚ÇÄ<u<x‚ÇÅ
                    ‚â§·µ£ f‚ÇÅ (rat u) x‚ÇÄ<u<x‚ÇÅ )
             ‚Üí ‚àÄ x x‚ÇÄ<x<x‚ÇÅ ‚Üí f‚ÇÄ x x‚ÇÄ<x<x‚ÇÅ ‚â§·µ£ f‚ÇÅ x x‚ÇÄ<x<x‚ÇÅ
‚ààinterval‚Üí‚â§ContPos'pred {x‚ÇÄ} {x‚ÇÅ} x‚ÇÄ‚â§x‚ÇÅ {f‚ÇÄ} {f‚ÇÅ} f‚ÇÄC f‚ÇÅC X x (‚â§x , x‚â§) =
  subst (Œª (u , u‚àà) ‚Üí f‚ÇÄ u u‚àà ‚â§·µ£ f‚ÇÅ u u‚àà)
   (Œ£‚â°Prop (‚àà-isProp ((interval‚Ñô (rat x‚ÇÄ) (rat x‚ÇÅ))))
     (sym (‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â° _ _ _ (‚â§x , x‚â§))))
   $ ‚â§Cont
     {Œª x ‚Üí f‚ÇÄ (clamp·µ£ (rat x‚ÇÄ) (rat x‚ÇÅ) x)
       (clamp·µ£‚àà‚Ñöinterval‚Ñô _ _ (‚â§‚Ñö‚Üí‚â§·µ£ _ _ x‚ÇÄ‚â§x‚ÇÅ) _)}
     {Œª x ‚Üí f‚ÇÅ (clamp·µ£ (rat x‚ÇÄ) (rat x‚ÇÅ) x)
      ((clamp·µ£‚àà‚Ñöinterval‚Ñô _ _ (‚â§‚Ñö‚Üí‚â§·µ£ _ _ x‚ÇÄ‚â§x‚ÇÅ) _))}
     (IsContinuousWithPred‚àòIsContinuous _ _ _
         _ f‚ÇÄC (IsContinuousClamp (rat x‚ÇÄ) (rat x‚ÇÅ)))
     (IsContinuousWithPred‚àòIsContinuous _ _ _
         _ f‚ÇÅC (IsContinuousClamp (rat x‚ÇÄ) (rat x‚ÇÅ)))
     (Œª u ‚Üí
        X (‚Ñö.clamp x‚ÇÄ x‚ÇÅ u) (clamp·µ£‚àà‚Ñöinterval‚Ñô (rat x‚ÇÄ) (rat x‚ÇÅ) (‚â§‚Ñö‚Üí‚â§·µ£ x‚ÇÄ x‚ÇÅ x‚ÇÄ‚â§x‚ÇÅ) (rat u)))
     x

module BDL (z : ‚Ñù‚Çä) (Z : ‚Ñï)
          (z‚â§Z : fst z ‚â§·µ£ fromNat (suc (suc Z)))
          (1/Z‚â§z : rat [ 1 / fromNat (suc (suc Z)) ]  ‚â§·µ£ fst z)
          -- (1+1/Z<z : rat (1 ‚Ñö.+ [ 1 / 1+ (suc Z) ]) ‚â§·µ£ fst z )
           where

 opaque
  unfolding _+·µ£_
  bdl' : (z : ‚Ñù‚Çä) (Z : ‚Ñï)
           (z‚â§Z : fst z ‚â§·µ£ fromNat (suc (suc Z)))
           (1/Z‚â§z : rat [ 1 / fromNat (suc (suc Z)) ]  ‚â§·µ£ fst z)
           ‚Üí 1 ‚â§·µ£ fst z ‚Üí boundedLipschitz (fst ‚àò z ^‚Ñö_) (slUpBd Z)
  bdl' z Z z‚â§Z 1/Z‚â§z 1‚â§z n = ‚Ñö.elimBy‚â°‚äé<
   (Œª x y X y‚àà x‚àà ‚Üí subst2 _‚â§·µ£_
        (minusComm-abs·µ£ _ _)
        (cong (rat ‚àò (fst (slUpBd Z n) ‚Ñö.¬∑_)) (‚Ñö.absComm- _ _))
        (X x‚àà y‚àà)  )
   (Œª x _ _ ‚Üí subst2 _‚â§·µ£_
      (cong abs·µ£ (sym (+-·µ£ _)))
      (cong rat (sym (ùêê'.0RightAnnihilates' _ _ (cong ‚Ñö.abs (‚Ñö.+InvR x)))))
      (‚â°·µ£Weaken‚â§·µ£ _ _ (abs·µ£-rat 0))) -- (‚â§·µ£-refl 0)
   Œª y‚ÇÄ y‚ÇÅ y‚ÇÄ<y‚ÇÅ y‚ÇÄ‚àà y‚ÇÅ‚àà ‚Üí
    isTrans‚â°‚â§·µ£ _ _ _ (abs·µ£NonNeg _ (x‚â§y‚Üí0‚â§y-x _ _
          (^‚Ñö-MonotoneR _ _ (‚Ñö.<Weaken‚â§ _ _ y‚ÇÄ<y‚ÇÅ) 1‚â§z )))
      (isTrans‚â§‚â°·µ£ _ _ _ (isTrans‚â§·µ£ _ _ _ (
     (fst (z/y‚â§x‚Çä‚âÉz‚â§y‚Çä¬∑x _ _ _) (slope-upper-bound z (fromNat (suc n))
     y‚ÇÄ y‚ÇÅ y‚ÇÄ<y‚ÇÅ
      (‚Ñö.absTo‚â§√ó‚â§ (fromNat (suc n)) y‚ÇÄ y‚ÇÄ‚àà)
      (‚Ñö.absTo‚â§√ó‚â§ (fromNat (suc n)) y‚ÇÅ y‚ÇÅ‚àà))))
       (‚â§·µ£-o¬∑ _ _ _ (‚Ñö.<Weaken‚â§ 0 _ (‚Ñö.-< _ _ y‚ÇÄ<y‚ÇÅ))
        (‚â§·µ£‚ÇäMonotone¬∑·µ£ _ _ _ _
          (<·µ£Weaken‚â§·µ£ _ _ $ snd (fromNat (suc (suc Z)) ^‚Ñö fst (fromNat (suc n))))
          (x‚â§y‚Üí0‚â§y-x _ _ 1‚â§z)
          (^‚Ñö-Monotone {y = fromNat (suc (suc Z))}
           (fromNat (suc n)) z‚â§Z)
          (isTrans‚â°‚â§·µ£ _ _ _ (cong (fst z +·µ£_) (-·µ£-rat 1)) (‚â§·µ£-+o _ _ (-1) z‚â§Z)))))
       (¬∑·µ£Comm _ _ ‚àô
        cong‚ÇÇ (_¬∑·µ£_)
          (cong‚ÇÇ (_¬∑·µ£_) (^‚Åø-‚Ñö^‚Åø _ _) (cong rat (‚Ñö.‚Ñ§+‚Üí‚Ñö+ _ _))
           ‚àô sym (rat¬∑·µ£rat _ _) )
          (cong rat (sym (‚Ñö.absPos _ (‚Ñö.-< _ _ y‚ÇÄ<y‚ÇÅ))))
         ‚àô sym (rat¬∑·µ£rat _ _)))


  bdl : boundedLipschitz (fst ‚àò z ^‚Ñö_) (slUpBd Z)
  bdl n x y x< y< = isTrans‚â°‚â§·µ£ _ _ _
     (cong (Œª z ‚Üí abs·µ£
       (fst (z ^‚Ñö  y) -·µ£ fst (z ^‚Ñö x)))
       (‚Ñù‚Çä‚â° refl))
    (‚ààinterval‚Üí‚â§ContPos'pred {[ 1 / fromNat (suc (suc Z)) ]}
         {fromNat (suc (suc Z)) }
         (‚Ñö.isTrans‚â§ [ 1 / (fromNat (suc (suc Z))) ] 1 (fromNat (suc (suc Z)))
          (fst (‚Ñö.inv‚Ñö‚Çä-‚â§-inv‚Ñö‚Çä 1 ((fromNat (suc (suc Z)))))
            ((‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos 1 (suc (suc Z))
            (‚Ñï.suc-‚â§-suc (‚Ñï.zero-‚â§ {suc Z})))))  )
           ((‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos 1 (suc (suc Z))
            (‚Ñï.suc-‚â§-suc (‚Ñï.zero-‚â§ {suc Z}))))))
         {Œª x‚ÇÅ z‚ÇÅ ‚Üí
             abs·µ£ (fst (_ ^‚Ñö  y) -·µ£ fst (_ ^‚Ñö x))}
         (IsContinuousWP‚àò' _ _ _ IsContinuousAbs·µ£ (IsContinuousWithPred‚äÜ pred0< _ _
          (Œª z z‚àà ‚Üí isTrans<‚â§·µ£ _ _ _ (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.0<pos _ _))
           (fst z‚àà))
          ((contDiagNE‚ÇÇWP sumR _ _ _
         (‚äÜIsContinuousWithPred _ _ (Œª x 0<x ‚Üí 0<x) _
           (IsContinuous^‚Ñö y))
            (IsContinuousWP‚àò' _ _ _ IsContinuous-·µ£
              ((‚äÜIsContinuousWithPred _ _ (Œª x 0<x ‚Üí 0<x) _
           (IsContinuous^‚Ñö x))))))))
         ((AsContinuousWithPred _ _ (IsContinuousConst
           (rat (fst (slUpBd Z n) ‚Ñö.¬∑ ‚Ñö.abs (y ‚Ñö.- x))))))
           www
         (fst z) (1/Z‚â§z , z‚â§Z))

      where
      www : (u : ‚Ñö)
             (x‚ÇÄ<u<x‚ÇÅ
              : rat u ‚àà
                interval‚Ñô (rat [ 1 / fromNat (suc (suc Z)) ])
                (rat (fromNat (suc (suc Z))))) ‚Üí
             abs·µ£
             (fst
              ((rat u ,
                isTrans<‚â§·µ£ (rat [ pos 0 / 1 ]) (rat [ 1 / fromNat (suc (suc Z)) ])
                (rat u)
                (<‚Ñö‚Üí<·µ£ [ pos 0 / 1 ] [ 1 / fromNat (suc (suc Z)) ]
                 (‚Ñö.0<pos 0 (fromNat (suc (suc Z)))))
                (fst x‚ÇÄ<u<x‚ÇÅ))
               ^‚Ñö y)
              -·µ£
              fst
              ((rat u ,
                isTrans<‚â§·µ£ (rat [ pos 0 / 1 ]) (rat [ 1 / fromNat (suc (suc Z)) ])
                (rat u)
                (<‚Ñö‚Üí<·µ£ [ pos 0 / 1 ] [ 1 / fromNat (suc (suc Z)) ]
                 (‚Ñö.0<pos 0 (fromNat (suc (suc Z)))))
                (fst x‚ÇÄ<u<x‚ÇÅ))
               ^‚Ñö x))
             ‚â§·µ£ rat (fst (slUpBd Z n) ‚Ñö.¬∑ ‚Ñö.abs (y ‚Ñö.- x))
      www u (‚â§u , u‚â§) =
        ‚äé.rec
          wwwL
          wwwR
          (‚Ñö.‚â§cases 1 u)
       where
       u‚Çä : ‚Ñù‚Çä
       u‚Çä = (rat u ,
                  isTrans<‚â§·µ£ (rat [ pos 0 / 1 ]) (rat [ 1 / fromNat (suc (suc Z)) ])
                  (rat u)
                  (<‚Ñö‚Üí<·µ£ [ pos 0 / 1 ] [ 1 / fromNat (suc (suc Z)) ]
                   (‚Ñö.0<pos 0 (fromNat (suc (suc Z)))))
                  ‚â§u)
       wwwL : 1 ‚Ñö.‚â§ u ‚Üí
               abs·µ£ (fst (u‚Çä ^‚Ñö y) -·µ£ fst (u‚Çä ^‚Ñö x))
               ‚â§·µ£ rat (fst (slUpBd Z n) ‚Ñö.¬∑ ‚Ñö.abs (y ‚Ñö.- x))
       wwwL 1‚â§u = bdl' u‚Çä
          Z u‚â§ ‚â§u (‚â§‚Ñö‚Üí‚â§·µ£ _ _ 1‚â§u) n x y x< y<

       wwwR : u ‚Ñö.‚â§ 1 ‚Üí
                abs·µ£ (fst (u‚Çä ^‚Ñö y) -·µ£ fst (u‚Çä ^‚Ñö x))
               ‚â§·µ£ rat (fst (slUpBd Z n) ‚Ñö.¬∑ ‚Ñö.abs (y ‚Ñö.- x))
       wwwR u‚â§1 = subst2 _‚â§·µ£_
              (cong abs·µ£ (cong‚ÇÇ _-·µ£_ (cong fst (sym (^‚Ñö-minus _ _)))
                                     (cong fst (sym (^‚Ñö-minus _ _)))))
              (cong (Œª uu ‚Üí rat (fst (slUpBd Z n) ‚Ñö.¬∑ uu))
                (cong ‚Ñö.abs (sym lem--083) ‚àô ‚Ñö.absComm- _ _))
            wwwR'
        where
         wwwR' : abs·µ£ (fst ((inv‚Ñù‚Çä u‚Çä) ^‚Ñö (‚Ñö.- y)) -·µ£ fst ((inv‚Ñù‚Çä u‚Çä) ^‚Ñö (‚Ñö.- x)))
                ‚â§·µ£ rat (fst (slUpBd Z n) ‚Ñö.¬∑ ‚Ñö.abs ((‚Ñö.- y) ‚Ñö.- (‚Ñö.- x)))
         wwwR' = bdl' (inv‚Ñù‚Çä u‚Çä) Z
          (isTrans‚â§‚â°·µ£ _ _ _ (invEq (inv‚Ñù‚Çä-‚â§-inv‚Ñù‚Çä _ _) ‚â§u) (inv‚Ñù‚Çä-rat _)  )
          (isTrans‚â°‚â§·µ£ _ _ _ (sym (inv‚Ñù‚Çä-rat _)) (invEq (inv‚Ñù‚Çä-‚â§-inv‚Ñù‚Çä _ _) u‚â§))
          (isTrans‚â°‚â§·µ£ _ _ _ (sym (inv‚Ñù‚Çä-rat _)) (invEq (inv‚Ñù‚Çä-‚â§-inv‚Ñù‚Çä 1 u‚Çä)
            (‚â§‚Ñö‚Üí‚â§·µ£ _ _ u‚â§1)))

          n (‚Ñö.- x) (‚Ñö.- y)
           (subst (‚Ñö._‚â§ (fromNat (suc n))) (‚Ñö.-abs x) x<)
           (subst (‚Ñö._‚â§ (fromNat (suc n))) (‚Ñö.-abs y) y<)

 open BoundedLipsch (fst ‚àò z ^‚Ñö_) (slUpBd Z) bdl public

-- --  bdlInv-lem : ( fst (fromNat (suc (suc Z))
-- --                    ^‚Ñö -2)) ‚â§·µ£ ((fst z -·µ£ 1) Ôºè·µ£‚Çä z)
-- --  bdlInv-lem = isTrans‚â°‚â§·µ£ _ _ _
-- --    (cong fst (^‚Ñö-minus' _ 2 ‚àô sym (^‚Ñö-+ _ 1 1)) ‚àô
-- --     cong‚ÇÇ _¬∑·µ£_ (
-- --         cong fst (^‚Ñö-1 (inv‚Ñù‚Çä (fromNat (suc (suc Z)))))
-- --       ‚àô cong (fst ‚àò inv‚Ñù‚Çä) (fromNat‚Ñù‚â°fromNat‚Ñö _)
-- --      ‚àô inv‚Ñù‚Çä-rat (fromNat (suc (suc Z))))
-- --         (cong fst (^‚Ñö-1 (inv‚Ñù‚Çä (fromNat (suc (suc Z)))))
-- --       ‚àô cong (fst ‚àò inv‚Ñù‚Çä) (fromNat‚Ñù‚â°fromNat‚Ñö _)) )
-- --    (‚â§·µ£‚ÇäMonotone¬∑·µ£ (rat _) _ _ _
-- --     (<·µ£Weaken‚â§·µ£ _ _ (x<y‚Üí0<y-x _ _ 1<z))
-- --     (<·µ£Weaken‚â§·µ£ _ _ $
-- --      snd (inv‚Ñù‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ pos (suc (suc Z)) , 1 ] , tt)))) (
-- --     <·µ£Weaken‚â§·µ£ _ _
-- --      (a+c<b‚áía<b-c _ _ _
-- --        (isTrans‚â°<·µ£ _ _ _ (+·µ£Comm (rat [ 1 / 1+ (suc Z) ]) 1) 1+1/Z<z)))
-- --      (invEq (inv‚Ñù‚Çä-‚â§-inv‚Ñù‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä _) _) (<·µ£Weaken‚â§·µ£ _ _ z<Z)))

-- --  bdlInv : boundedInvLipschitz slUpBdInv
-- --  bdlInv n = ‚Ñö.elimBy‚â°‚äé<
-- --   (Œª x y X y‚àà x‚àà ‚Üí subst2 _‚â§·µ£_
-- --        (cong rat (‚Ñö.absComm- _ _))
-- --        (cong (rat (fst (slUpBdInv n)) ¬∑·µ£_) (minusComm-abs·µ£ _ _))
-- --        (X x‚àà y‚àà)  )
-- --   ((Œª x _ _ ‚Üí subst2 _‚â§·µ£_
-- --      (cong rat (sym (cong ‚Ñö.abs (‚Ñö.+InvR x))))
-- --      (sym (ùêë'.0RightAnnihilates' _ _ (cong abs·µ£ (+-·µ£ _))))
-- --      (‚â§·µ£-refl 0)))
-- --   Œª y‚ÇÄ y‚ÇÅ y‚ÇÄ<y‚ÇÅ y‚ÇÄ‚àà y‚ÇÅ‚àà ‚Üí
-- --    subst2 _‚â§·µ£_
-- --      (cong rat (sym (‚Ñö.absPos _ (‚Ñö.-< _ _ y‚ÇÄ<y‚ÇÅ))))
-- --      (cong (rat (fst (slUpBdInv n)) ¬∑·µ£_)
-- --       (sym (abs·µ£NonNeg _ (x‚â§y‚Üí0‚â§y-x _ _
-- --          (^‚Ñö-MonotoneR _ _ (‚Ñö.<Weaken‚â§ _ _ y‚ÇÄ<y‚ÇÅ) (<·µ£Weaken‚â§·µ£ _ _ 1<z) )))))
-- --      (isTrans‚â°‚â§·µ£ _ _ _ (sym (¬∑IdR _))
-- --       (fst (z/y'‚â§x/y‚âÉy‚Çä¬∑z‚â§y'‚Çä¬∑x _ _ (‚Ñö‚Çä‚Üí‚Ñù‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä _ _ y‚ÇÄ<y‚ÇÅ))
-- --             (‚Ñö‚Çä‚Üí‚Ñù‚Çä (slUpBdInv n)))
-- --         (isTrans‚â°‚â§·µ£ _ _ _ (¬∑IdL _)
-- --          (isTrans‚â§·µ£ _ _ _
-- --            (isTrans‚â°‚â§·µ£ _ _ _
-- --              (inv‚Ñù‚Çä-rat _ ‚àô cong fst (
-- --                ( (sym (^‚Ñ§-rat (fromNat (suc (suc Z)))
-- --                    (‚Ñ§.negsuc (1 ‚Ñï.+ suc n)))
-- --                    ‚àô cong (_^‚Ñö [ ‚Ñ§.negsuc (1 ‚Ñï.+ suc n) / 1 ])
-- --                     (‚Ñù‚Çä‚â° refl))
-- --            ‚àô cong (fromNat (suc (suc Z)) ^‚Ñö_)
-- --             (cong [_/ 1 ] (‚Ñ§.negsuc+ _ _) ‚àô sym (‚Ñö.‚Ñ§+‚Üí‚Ñö+ _ _)))
-- --                ‚àô sym (^‚Ñö-+ _ _ _)) ‚àô ¬∑·µ£Comm _ _)
-- --              (‚â§·µ£‚ÇäMonotone¬∑·µ£
-- --                (fst (fromNat (suc (suc Z))
-- --                    ^‚Ñö (‚Ñö.- [ pos (suc n) , (1+ 0) ])))
-- --                _
-- --                _
-- --                _
-- --                (<·µ£Weaken‚â§·µ£ _ _
-- --                  $ snd (z ^‚Ñö (‚Ñö.- [ pos (suc n) , (1+ 0) ])))
-- --                (<·µ£Weaken‚â§·µ£ _ _
-- --                  $ snd (fromNat (fromNat (suc (suc Z))) ^‚Ñö -2))
-- --                (subst2 _‚â§·µ£_
-- --                  (cong fst (sym (^‚Ñö-minus' _ _)))
-- --                  (cong fst (sym (^‚Ñö-minus' _ _)))
-- --                  (^‚Ñö-Monotone (fromNat (suc n))
-- --                   (invEq (inv‚Ñù‚Çä-‚â§-inv‚Ñù‚Çä _ _)
-- --                    (<·µ£Weaken‚â§·µ£ _ _ z<Z))))
-- --                bdlInv-lem))
-- --           (<·µ£Weaken‚â§·µ£ _ _
-- --            (slope-lower-bound z (fromNat (suc n)) 1<z
-- --             _ _ y‚ÇÄ<y‚ÇÅ
-- --             (‚Ñö.absTo‚â§√ó‚â§ (fromNat (suc n)) y‚ÇÄ y‚ÇÄ‚àà)
-- --             (‚Ñö.absTo‚â§√ó‚â§ (fromNat (suc n)) y‚ÇÅ y‚ÇÅ‚àà))
-- --      )))))

-- --  open BoundedInvLipsch slUpBdInv bdlInv public

 mid-ùíá : ‚àÄ q q' q'' ‚Üí q ‚Ñö.‚â§ q' ‚Üí q' ‚Ñö.‚â§ q'' ‚Üí
    min·µ£ (ùíá (rat q))
         (ùíá (rat q'')) ‚â§·µ£ ùíá (rat q')
 mid-ùíá q q' q'' q‚â§q' q'‚â§q'' =
   subst2 _‚â§·µ£_
     (cong‚ÇÇ min·µ£ (sym (ùíá-rat q)) (sym (ùíá-rat q'')))
     (sym (ùíá-rat q'))
     (monotone^‚Ñö q q' q'' q‚â§q' q'‚â§q'' _)


 0<ùíá : ‚àÄ x ‚Üí 0 <·µ£ ùíá x
 0<ùíá x = PT.rec (isProp<·µ£ _ _)
  (Œª ((q , q') , q'-q<1 , q<x , x<q') ‚Üí
    let q‚äìq' = (min·µ£‚Çä (z ^‚Ñö q) (z ^‚Ñö q'))
    in PT.rec (isProp<·µ£ _ _)
       (Œª (Œµ , 0<Œµ , Œµ<q‚äìq') ‚Üí
         PT.rec (isProp<·µ£ _ _)
         (Œª (Œ¥ , X) ‚Üí
          PT.rec (isProp<·µ£ _ _)
            (Œª (r , r-x‚â§Œ¥ , x‚â§r) ‚Üí
               let r' = ‚Ñö.clamp q q' r
                   r'-x‚â§Œ¥ = isTrans‚â§·µ£ _ _ _
                             (‚â§·µ£-+o _ _ (-·µ£ x)
                               (‚â§‚Ñö‚Üí‚â§·µ£ _ _
                            (‚Ñö.clamped‚â§ q q' r
                              (‚Ñö.<Weaken‚â§ _ _
                                (<·µ£‚Üí<‚Ñö _ _ (isTrans<‚â§·µ£ _ _ _ q<x x‚â§r))))) ) r-x‚â§Œ¥
                   x‚â§r' = ‚â§min-lem _ (rat (‚Ñö.max q r)) (rat q')
                            (isTrans‚â§·µ£ _ _ _ x‚â§r
                             (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.‚â§max' q r)))
                            (<·µ£Weaken‚â§·µ£ _ _ x<q')
                   |fx-fr|<Œµ = fst (‚àº‚âÉabs<Œµ _ _ _)
                       (sym‚àº _ _ _ (X (rat r') (sym‚àº _ _ _
                         ((invEq (‚àº‚âÉabs<Œµ _ _ _)
                        (isTrans‚â°<·µ£ _ _ _
                          (abs·µ£NonNeg _ (x‚â§y‚Üí0‚â§y-x _ _ x‚â§r'))
                           (isTrans‚â§<·µ£ _ _ _
                               r'-x‚â§Œ¥ (<‚Ñö‚Üí<·µ£ _ _ (x/2<x Œ¥))))))) ))
                   zzz =
                        mid-ùíá q r' q'
                         (‚â§·µ£‚Üí‚â§‚Ñö _ _ (isTrans‚â§·µ£ _ _ _
                          (<·µ£Weaken‚â§·µ£ _ _ q<x) x‚â§r'))
                         (‚Ñö.clamp‚â§ q q' r)
                   zzz' = isTrans<‚â§·µ£ _ _ _
                            (isTrans<‚â°·µ£ _ _ _ Œµ<q‚äìq'
                              (cong‚ÇÇ min·µ£
                                (sym (ùíá-rat _)) (sym (ùíá-rat _))))
                             zzz
               in isTrans‚â°<·µ£ _ _ _ (sym (CR‚Ñù.+InvR _)) (a-b<c‚áía-c<b _ _ _
                     (isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _)
                    (isTrans<·µ£ _ _ _ |fx-fr|<Œµ zzz')))
              ) (‚àÉrationalApprox‚â§ x (/2‚Çä Œ¥)))

         (ùíá-cont x (Œµ , ‚Ñö.<‚Üí0< _ (<·µ£‚Üí<‚Ñö _ _ 0<Œµ)))
         )
      (dense‚Ñöin‚Ñù 0 _ (snd q‚äìq')) )
   (‚àÉrationalApprox x 1)

 ùíá‚Çä : ‚Ñù ‚Üí ‚Ñù‚Çä
 ùíá‚Çä x = ùíá x , 0<ùíá x

 fl‚Çô‚â°ùíá : ‚àÄ x n ‚Üí (x ‚àà interval‚Ñô (fromNeg (suc n)) (fromNat (suc n)))
           ‚Üí  fst (fst (fl‚Çô n)) x ‚â° ùíá x
 fl‚Çô‚â°ùíá x n x‚àà = ‚â°Continuous (fst (fst (fl‚Çô n)))
           (ùíá ‚àò clamp·µ£ (fromNeg (suc n)) (fromNat (suc n)))
     (snd (fl‚Çô n)) (IsContinuous‚àò _ _ ùíá-cont
          (IsContinuousClamp (fromNeg (suc n)) (fromNat (suc n))))
       (Œª r ‚Üí sym (ùíá-rat _))
       x
   ‚àô cong ùíá (sym (‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â° _ _ x x‚àà))


 ùíá-monotone : 1 ‚â§·µ£ fst z ‚Üí ‚àÄ x y ‚Üí x ‚â§·µ£ y ‚Üí ùíá x ‚â§·µ£ ùíá y
 ùíá-monotone 1‚â§z x y x‚â§y =
  ‚â°‚Üí‚â§·µ£ ((‚â°Cont‚ÇÇ (cont‚ÇÇ‚àò (contNE‚ÇÇ maxR) ùíá-cont ùíá-cont)
    (cont‚àò‚ÇÇ ùíá-cont (contNE‚ÇÇ maxR) )
    (‚Ñö.elimBy‚â§
       (Œª u u' X ‚Üí max·µ£Comm _ _ ‚àô‚àô X ‚àô‚àô cong ùíá (max·µ£Comm _ _))
       Œª u u' u‚â§u' ‚Üí
         cong‚ÇÇ max·µ£ (ùíá-rat _) (ùíá-rat _)
          ‚àô‚àô ‚â§·µ£‚Üí‚â° (^‚Ñö-MonotoneR u u' u‚â§u' 1‚â§z) ‚àô
           cong (fst ‚àò (z ^‚Ñö_)) (sym (‚Ñö.‚â§‚Üímax u u' u‚â§u')) ‚àô‚àô
          sym (ùíá-rat _))
        x y)
   ‚àô cong ùíá (‚â§·µ£‚Üí‚â° x‚â§y))


 opaque
  unfolding _<·µ£_
  ùíá-monotone-str : 1 <·µ£ fst z ‚Üí ‚àÄ x y ‚Üí x <·µ£ y ‚Üí ùíá x <·µ£ ùíá y
  ùíá-monotone-str 1<z x y = PT.rec (isProp<·µ£ _ _)
     Œª ((q , q') , (‚â§q , q<q' , q'‚â§)) ‚Üí
       isTrans‚â§<·µ£ _ _ _ (ùíá-monotone (<·µ£Weaken‚â§·µ£ _ _ 1<z) x (rat q) ‚â§q)
         (isTrans<‚â§·µ£ _ _ _ (
            subst2 _<·µ£_ (sym (ùíá-rat _)) (sym (ùíá-rat _))
             (^‚Ñö-StrictMonotoneR 1<z q q' q<q'))
           (ùíá-monotone (<·µ£Weaken‚â§·µ£ _ _ 1<z) (rat q') y q'‚â§))

 module _ (n : ‚Ñï) where


  incr^ : 1 <·µ£ fst z ‚Üí isIncrasing‚Ñô·µ£
            (interval‚Ñô (rat (‚Ñö.- fromNat (suc n))) (rat (fromNat (suc n))))
            (Œª x _ ‚Üí fst (fst (fl‚Çô n)) x)
  incr^ 1<z x x‚àà y y‚àà x<y =
    subst2 _<·µ£_
      (sym (fl‚Çô‚â°ùíá x n x‚àà))
      (sym (fl‚Çô‚â°ùíá y n y‚àà))
      (ùíá-monotone-str 1<z  x y x<y)


  nondecr^ : 1 ‚â§·µ£ fst z ‚Üí isNondecrasing‚Ñô·µ£
      (interval‚Ñô (rat (‚Ñö.- [ pos (suc n) / 1+ 0 ]))
       (rat [ pos (suc n) / 1+ 0 ]))
      (Œª x _ ‚Üí fst (fst (fl‚Çô n)) x)
  nondecr^ 1‚â§z x x‚àà y y‚àà x‚â§y =
    subst2 _‚â§·µ£_
      (sym (fl‚Çô‚â°ùíá x n x‚àà))
      (sym (fl‚Çô‚â°ùíá y n y‚àà))
      (ùíá-monotone 1‚â§z x y x‚â§y)



 open expPreDer Z public
 open expPreDer' z z‚â§Z 1/Z‚â§z public

 opaque
  unfolding _+·µ£_
  expDerAt0 : derivativeOf ùíá at 0 is preLn
  expDerAt0 Œµ =
   PT.rec
     squash‚ÇÅ
     (Œª (Œµ' , 0<Œµ' , <Œµ) ‚Üí
       let Œµ'‚Çä = (Œµ' , ‚Ñö.<‚Üí0< _ (<·µ£‚Üí<‚Ñö _ _ 0<Œµ'))
           N = fst (seqŒî-Œ¥ Z Œµ'‚Çä)
           X =  seqŒî Œµ'‚Çä
       in  ‚à£ ‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ 1 / 2+ (suc N) ] , _) ,
              (Œª r 0ÔºÉr ‚à£r‚à£<1/N ‚Üí
                let d‚â§lnSeq : differenceAt ùíá 0 r 0ÔºÉr ‚â§·µ£ lnSeq z (suc N)
                    d‚â§lnSeq = ‚â§ContWPÔºÉ‚â§ [ 1 / 2+ suc N ] (‚Ñö.0<pos 0 (2+ (suc N)))
                              (IsContinuousWithPred-differenceAt 0 _ ùíá-cont)
                              ((AsContinuousWithPred _ _
                               (IsContinuousConst (lnSeq z (suc N)))))
                              (Œª u u‚àà u‚â§ ‚Üí
                                subst2 _‚â§·µ£_
                                 ((cong‚ÇÇ _¬∑·µ£_ (cong‚ÇÇ _-·µ£_
                              (cong (fst ‚àò (z ^‚Ñö_)) (sym (‚Ñö.+IdL _)) ‚àô sym (ùíá-rat _))
                              (sym (ùíá-rat _)))
                                 ((cong‚ÇÇ inv‚Ñù (ùêë'.+IdR' _ _ (-·µ£-rat 0)) (toPathP (isPropÔºÉ _ _ _ _))))))
                                 (cong‚ÇÇ _¬∑·µ£_
                                   refl ((inv‚Ñù‚Çä-rat _ ‚àô cong rat
                               (cong (fst ‚àò inv‚Ñö‚Çä) (‚Ñö‚Çä‚â° {y = [ 1 / 2+ (suc N) ] , _ }
                                  (‚Ñö.+IdR _))))))
                                 ( (slope-monotoneÔºÉ ((z)) 0 u
                                   0 [ 1 / 2+ (suc N) ]
                                   u‚àà (‚Ñö.0<pos 0 _) (‚Ñö.isRefl‚â§ 0) u‚â§))

                                   )
                              r 0ÔºÉr
                              (isTrans‚â§·µ£ _ _ _ (‚â§abs·µ£ r)
                                 (isTrans‚â°‚â§·µ£ _ _ _ (cong abs·µ£ (sym (ùêë'.+IdR' _ _ (-·µ£-rat 0)))
                                  ‚àô minusComm-abs·µ£ _ _) (<·µ£Weaken‚â§·µ£ (abs·µ£ (0 -·µ£ r)) _ ‚à£r‚à£<1/N)))


                    lnSeq'‚â§d : lnSeq' z (suc N) ‚â§·µ£ differenceAt ùíá 0 r 0ÔºÉr
                    lnSeq'‚â§d = ‚â§ContWPÔºÉ‚â§' (‚Ñö.- [ 1 / 2+ suc N ])
                                   ((‚Ñö.minus-< 0 [ 1 / 2+ suc N ] (‚Ñö.0<pos 0 (2+ (suc N)))))
                               ((AsContinuousWithPred _ _
                               (IsContinuousConst (lnSeq' z (suc N)))))
                               (IsContinuousWithPred-differenceAt 0 _ ùíá-cont)
                                (Œª u u‚àà u‚â§ ‚Üí subst2 _‚â§·µ£_
                                   ((cong‚ÇÇ _¬∑·µ£_ refl ((inv‚Ñù‚Çä-rat _ ‚àô cong rat
                                     (cong (fst ‚àò inv‚Ñö‚Çä)
                                       (‚Ñö‚Çä‚â° {x = (0 ‚Ñö.- (‚Ñö.- [ 1 / 2+ suc N ])) , _}
                                            {y = [ 1 / 2+ (suc N) ] , _ }
                                         (‚Ñö.+IdL _ ‚àô ‚Ñö.-Invol _)))))))
                                   (sym (-·µ£¬∑-·µ£ _ _) ‚àô cong‚ÇÇ _¬∑·µ£_
                                     (-[x-y]‚â°y-x _ _ ‚àô
                                       cong‚ÇÇ _-·µ£_ (sym (ùíá-rat _) ‚àô cong ùíá (sym (+IdL _)))
                                         (sym (ùíá-rat _)))
                                     (-inv‚Ñù _ _ ‚àô cong‚ÇÇ inv‚Ñù (cong -·µ£_ (+IdL _) ‚àô -·µ£Invol _)
                                       (toPathP (isPropÔºÉ _ _ _ _))))

                                   (slope-monotoneÔºÉ' z
                                     (‚Ñö.- [ 1 / 2+ (suc N) ]) 0 u 0
                                     ((‚Ñö.minus-< 0 [ 1 / 2+ suc N ] (‚Ñö.0<pos 0 (2+ (suc N)))))
                                     (isSymÔºÉ _ _ u‚àà) u‚â§ (‚Ñö.isRefl‚â§ 0))
                                     )
                                r 0ÔºÉr
                              (isTrans‚â§·µ£ _ _ _
                                (isTrans‚â°‚â§·µ£ _ _ _
                                 (sym (-·µ£-rat _))
                                 (-·µ£‚â§·µ£ _ _ (<·µ£Weaken‚â§·µ£ (abs·µ£ (0 -·µ£ r)) _ ‚à£r‚à£<1/N)))
                                (‚â§·µ£-·µ£ _ _ (isTrans‚â§‚â°·µ£ _ _ _ (‚â§abs·µ£ (-·µ£ r))
                                  (cong abs·µ£ (sym (+IdL _)) ‚àô sym (-·µ£Invol _)))))


                in isTrans‚â§<·µ£ _ _ _
                     (interval‚Ñô‚Üídist< _ _ _ _
                        ((lnSeq'‚â§preLn _) , (preLn‚â§lnSeq _))
                        (lnSeq'‚â§d , d‚â§lnSeq))
                     (isTrans<·µ£ _ _ _ (X (suc N) ‚Ñï.‚â§-refl) <Œµ)

                 ) ‚à£‚ÇÅ )
     (dense‚Ñöin‚Ñù 0 _ (snd Œµ))

  ùíá¬∑ : ‚àÄ x y ‚Üí ùíá x ¬∑·µ£ ùíá y ‚â° ùíá (x +·µ£ y)
  ùíá¬∑ = ‚â°Cont‚ÇÇ
       (cont‚ÇÇ‚àò IsContinuous‚ÇÇ¬∑·µ£ ùíá-cont ùíá-cont )
       (cont‚àò‚ÇÇ ùíá-cont (contNE‚ÇÇ sumR))
       Œª u u' ‚Üí cong‚ÇÇ _¬∑·µ£_ (ùíá-rat _) (ùíá-rat _)
          ‚àô cong fst (^‚Ñö-+ _ _ _) ‚àô sym (ùíá-rat _)


 differenceAtùíá-Œî : ‚àÄ x r 0ÔºÉr ‚Üí ùíá x ¬∑·µ£ differenceAt ùíá 0 r 0ÔºÉr ‚â° (differenceAt ùíá x r 0ÔºÉr)
 differenceAtùíá-Œî x r 0ÔºÉr = ¬∑·µ£Assoc _ _ _ ‚àô
   cong (_Ôºè·µ£[ r , 0ÔºÉr ]) (ùêë'.¬∑DistR- _ _ _ ‚àô
     cong‚ÇÇ _-·µ£_
       (ùíá¬∑ _ (0 +·µ£ r) ‚àô cong ùíá (cong (x +·µ£_) (+IdL r)))
       (ùíá¬∑ _ _ ‚àô cong ùíá (+IdR x)))


 expDerA : ‚àÄ x ‚Üí derivativeOf ùíá at x is (ùíá x ¬∑·µ£ preLn)
 expDerA x =
  subst (at (rat [ pos zero / 1+ zero ]) limitOf_is (ùíá x ¬∑·µ£ preLn))
   (funExt‚ÇÇ Œª r 0ÔºÉr ‚Üí differenceAtùíá-Œî _ _ _ )
   (¬∑-lim _ _ _ _ _ (const-lim (ùíá x) 0) expDerAt0)


seq-^-intervals : Seq‚äÜ
seq-^-intervals .Seq‚äÜ.ùï° Z = interval‚Ñô (rat [ 1 / (fromNat (suc (suc Z))) ]) (fromNat (suc (suc Z)))

seq-^-intervals .Seq‚äÜ.ùï°‚äÜ Z x (‚â§x , x‚â§) =
  isTrans‚â§·µ£ _ _ _  (‚â§‚Ñö‚Üí‚â§·µ£ _ _ ((invEq (‚Ñö.inv‚Ñö‚Çä-‚â§-inv‚Ñö‚Çä
     ([ 1 / (2+ (suc Z)) ] , _) _) w))) ‚â§x
  , isTrans‚â§·µ£ _ _ _ x‚â§ (‚â§‚Ñö‚Üí‚â§·µ£ _ _ w)

 where
  w = (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _ (‚Ñï.‚â§-suc (‚Ñï.‚â§-refl {suc (suc Z)}))))

seq-^-intervals‚ààPos : seq-^-intervals Seq‚äÜ.s‚äá pred0<
seq-^-intervals‚ààPos x 0<x =
  PT.map2 (Œª (1+ n , N) (1+ n' , N') ‚Üí
        ‚Ñï.max n n'
            ,
              fst (inv‚Ñù‚Çä-‚â§-inv‚Ñù‚Çä (x , 0<x) (_ , <‚Ñö‚Üí<·µ£ _ _ (‚Ñö.0<pos _ _)))
              (isTrans‚â§·µ£ _ _ _
               (isTrans‚â§·µ£ _ _ _                 (‚â§abs·µ£ _) (<·µ£Weaken‚â§·µ£ _ _ N'))
               (isTrans‚â§‚â°·µ£ _ _ _
                 (((‚â§‚Ñö‚Üí‚â§·µ£ (fromNat (suc n')) (fromNat (suc (suc (‚Ñï.max n n'))))
                      ((‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _
                       (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _ (‚Ñï.‚â§-suc (‚Ñï.right-‚â§-max {suc n'} {suc n}))))))))
                        (sym (inv‚Ñù‚Çä-rat _))))

              ,
                isTrans‚â§·µ£ _ _ _
             (isTrans‚â§·µ£ _ _ _
                 (‚â§abs·µ£ _) (<·µ£Weaken‚â§·µ£ _ _ N))

                 (((‚â§‚Ñö‚Üí‚â§·µ£ (fromNat (suc n)) _
                      (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _ (‚Ñï.‚â§-suc (‚Ñï.left-‚â§-max {suc n} {suc n'})))))))
               )
    (getClamps x) (getClamps (fst (inv‚Ñù‚Çä (x , 0<x))))



-- -- -- -- -- -- -- FnWith


Seq-^ : Seq‚äÜ‚Üí ((‚Ñù ‚Üí ‚Ñù‚Çä) √ó ‚Ñù) seq-^-intervals
Seq-^ .Seq‚äÜ‚Üí.fun x Z (‚â§x , x‚â§) = F.ùíá‚Çä , F.preLn
 where
 module F = BDL (x , isTrans<‚â§·µ£ _ _ _ (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.0<pos _ _)) ‚â§x) Z x‚â§ ‚â§x
Seq-^ .Seq‚äÜ‚Üí.fun‚äÜ x n m (‚â§x , x‚â§) (‚â§x' , x‚â§') n<m = cong‚ÇÇ _,_
  (funExt (‚Ñù‚Çä‚â° ‚àò (‚â°Continuous _ _ F.ùíá-cont F'.ùíá-cont
       Œª r ‚Üí F.ùíá-rat r ‚àô‚àô cong (fst ‚àò (_^‚Ñö r)) (‚Ñù‚Çä‚â° refl) ‚àô‚àô sym (F'.ùíá-rat r))))
        Œª i ‚Üí fromCauchySequence'-‚â°-lem (lnSeq (x , xp i))
              (icP i) (icP' i) i

 where
 module F = BDL _ n x‚â§ ‚â§x
 module F' = BDL _ m x‚â§' ‚â§x'

 0<x = isTrans<‚â§·µ£ _ _ _ (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.0<pos _ _)) ‚â§x
 0<x' = isTrans<‚â§·µ£ _ _ _ (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.0<pos _ _)) ‚â§x'
 xp : 0<x ‚â° 0<x'
 xp = isProp<·µ£ 0 x 0<x 0<x'

 icP : PathP (Œª i ‚Üí IsCauchySequence' (lnSeq (x , xp i))) F.ca-lnSeq _
 icP = toPathP refl

 icP' : PathP (Œª i ‚Üí IsCauchySequence' (lnSeq (x , xp i))) _ F'.ca-lnSeq
 icP' = symP (toPathP refl)








open ‚Ñö.HLP

module Seq-^-FI = Seq‚äÜ‚Üí.FromIntersection Seq-^
   (isSet√ó (isSet‚Üí isSet‚Ñù‚Çä) isSet‚Ñù) pred0< seq-^-intervals‚ààPos

module Pos^ where
 open Seq-^-FI


 ^-c : ‚àÄ x ‚Üí 0 <·µ£ x  ‚Üí ‚Ñù ‚Üí ‚Ñù‚Çä
 ^-c x 0<x = fst (‚à©$ x 0<x)

 _^·µ£_ : ‚Ñù‚Çä ‚Üí ‚Ñù ‚Üí ‚Ñù‚Çä
 (x , 0<x) ^·µ£ y = fst (‚à©$ x 0<x) y


 ^·µ£-mon-str : ‚àÄ x
   ‚Üí 1 <·µ£ fst x
   ‚Üí ‚àÄ y y'
   ‚Üí y <·µ£ y'
   ‚Üí fst (x ^·µ£ y) <·µ£ fst (x ^·µ£ y')
 ^·µ£-mon-str x 1<x y y'  y<y' =
  ‚à©$-elimProp (fst x) (snd x)
    {Œª (f , _) ‚Üí fst (f y) <·µ£ fst (f y')}
    (Œª _ ‚Üí isProp<·µ£ _ _)
    (Œª n x‚àà‚Çô ‚Üí BDL.ùíá-monotone-str (fst x , _) n (snd x‚àà‚Çô) (fst x‚àà‚Çô)
         1<x y y' y<y')

 ln-c : ‚àÄ x ‚Üí 0 <·µ£ x ‚Üí ‚Ñù
 ln-c x 0<x = snd (‚à©$ x 0<x)

 ln : ‚Ñù‚Çä ‚Üí ‚Ñù
 ln (x , 0<x) = snd (‚à©$ x 0<x)

 ln-1‚â°0 : ln 1 ‚â° 0
 ln-1‚â°0 =
   let 1r : ‚Ñù‚Çä
       1r = fromNat 1
   in ‚à©$-elimProp (fst 1r) (snd 1r)
             {Œª (_ , lnx) ‚Üí lnx ‚â° 0}
             (Œª _ ‚Üí isSet‚Ñù _ _)
             Œª Z x‚àà ‚Üí
                 congS (Œª 0<1 ‚Üí BDL.preLn (rat [ pos (suc zero) / 1+ zero ] , 0<1)
                        Z (snd x‚àà) (fst x‚àà))
                         (isProp<·µ£ _ _ _ _)
                ‚àô sym (expPreDer.0=preLn Z (snd x‚àà) (fst x‚àà))

 ln-cont : IsContinuousWithPred pred0< (curry ln)
 ln-cont x Œµ 0<x = w
  where
  ww : (Z : ‚Ñï) (x‚àà : x ‚àà Seq‚äÜ.ùï° seq-^-intervals Z) ‚Üí
        ‚àÉ-syntax ‚Ñö‚Çä
        (Œª Œ¥ ‚Üí
           (v : ‚Ñù) (v‚ààP : 0 <·µ£ v) ‚Üí
           x ‚àº[ Œ¥ ] v ‚Üí Seq‚äÜ‚Üí.fun Seq-^ x Z x‚àà .snd ‚àº[ Œµ ] curry ln v v‚ààP)
  ww Z x‚àà =
    let (N , X) = seqŒî-Œ¥ (suc Z) (/4‚Çä Œµ)
        uuu = seq-^-intervals .Seq‚äÜ.ùï°‚äÜ Z x x‚àà
        Œ¥Z : ‚Ñö‚Çä
        Œ¥Z = ‚Ñö.<‚Üí‚Ñö‚Çä [ 1 / fromNat (suc (suc (suc Z))) ] [ 1 / fromNat (suc (suc Z)) ]
              (fst (‚Ñö.inv‚Ñö‚Çä-<-inv‚Ñö‚Çä (fromNat (suc (suc Z))) (fromNat (suc (suc (suc Z)))))
                (‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _ ((invEq (‚Ñ§.pos-<-pos‚âÉ‚Ñï< _ _) ‚Ñï.‚â§-refl ))))
    in PT.map
        (Œª (Œ¥ , D) ‚Üí
          (‚Ñö.min‚Çä Œ¥ Œ¥Z) ,
            (Œª v 0<v x‚àºv ‚Üí
               let ca' = expPreDer.expPreDer'.preLn‚àº (suc Z)
                   uvu = isTrans‚â°‚â§·µ£ (rat [ pos 1 / 2+ suc Z ]) _ _
                           (sym (Lùêë.lem--079 {rat [ pos 1 / 2+ Z ]}) ‚àô
                             cong‚ÇÇ _-·µ£_ refl (-·µ£-rat‚ÇÇ _ _)
                            ) (‚â§·µ£Monotone+·µ£ _ _ _ _
                          (fst x‚àà) (-·µ£‚â§·µ£ _ _ (isTrans‚â§·µ£ _ _ _ (isTrans‚â§·µ£ _ _ _
                            (‚â§abs·µ£ _) (<·µ£Weaken‚â§·µ£ _ _ (fst (‚àº‚âÉabs<Œµ _ _ _)
                                   x‚àºv))) (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.min‚â§' _ _)))))
                   uuuV : v ‚àà seq-^-intervals .Seq‚äÜ.ùï° (suc Z)
                   uuuV = isTrans‚â§‚â°·µ£ _ _ _ uvu Lùêë.lem--079
                        , (isTrans‚â§‚â°·µ£ _ _ _
                            (isTrans‚â§·µ£ _ _ _
                             (a-b‚â§c‚áía‚â§c+b _ _ _
                               (isTrans‚â§·µ£ _ _ _ (‚â§abs·µ£ _)
                                (isTrans‚â§·µ£ _ _ _ (<·µ£Weaken‚â§·µ£ _ _ (fst (‚àº‚âÉabs<Œµ _ _ _)
                                   (sym‚àº _ _ _ x‚àºv)))
                                    (‚â§‚Ñö‚Üí‚â§·µ£ _ _
                                      (‚Ñö.isTrans‚â§ _ _ _ (‚Ñö.min‚â§' _ _)
                                       (‚Ñö.‚â§-‚Ñö‚Çä [ 1 / fromNat (suc (suc Z)) ]
                                        1 ([ 1 / fromNat (suc (suc (suc Z))) ] , _)
                                         (fst (‚Ñö.inv‚Ñö‚Çä-‚â§-inv‚Ñö‚Çä 1 (fromNat (suc (suc Z))))
                                           (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _
                                              (invEq (‚Ñ§.pos-‚â§-pos‚âÉ‚Ñï‚â§ _ _)
                                                (‚Ñï.suc-‚â§-suc ‚Ñï.zero-‚â§))))))))))
                             (‚â§·µ£-o+ _ _ 1 (snd x‚àà)))
                            (+·µ£-rat _ _ ‚àô  cong rat (‚Ñö.‚Ñï+‚Üí‚Ñö+ _ _)))
                   ‚â°Œµ = dist‚Ñö! (fst Œµ) ¬∑[ ((ge[ ‚Ñö.[ 1 / 4 ] ]
                               +ge ge[ ‚Ñö.[ 1 / 2 ] ])
                            +ge  ge[ ‚Ñö.[ 1 / 4 ] ]
                            ) ‚â° ge1 ]
                   qqq : BDL.preLn (x , _) (suc Z) (snd (Seq‚äÜ.ùï°‚äÜ seq-^-intervals Z x x‚àà))
                          (fst (Seq‚äÜ.ùï°‚äÜ seq-^-intervals Z x x‚àà))
                          ‚àº[ ((/4‚Çä Œµ) ‚Ñö‚Çä+ /2‚Çä Œµ) ‚Ñö‚Çä+ (/4‚Çä Œµ) ]
                          BDL.preLn (v , _) (suc Z) _ _
                   qqq = (triangle‚àº (triangle‚àº (sym‚àº _ _ _
                             (ca' (x , isTrans<‚â§·µ£ _ _ _ (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.0<pos _ _)) (fst uuu))
                              (snd uuu) (fst uuu) _ _ ‚Ñï.‚â§-refl))
                         ((D v (isTrans<‚â§·µ£ _ _ _ (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.0<pos _ _)) (fst uuuV))
                            (‚àº-monotone‚â§ (‚Ñö.min‚â§ _ _) x‚àºv))))
                          ((ca' (v , _) (snd uuuV) (fst uuuV) _ _ ‚Ñï.‚â§-refl)))
               in ((cong snd (2c x (suc Z) Z uuu _))
                    subst‚àº[ ‚Ñö‚Çä‚â° ‚â°Œµ ]
                      (cong snd (sym (‚à©$-‚àà‚Çô v _ (suc Z) uuuV)))
                      )
                      qqq))
        (lnSeqCont (suc N) x (/2‚Çä Œµ) _)

  w : _
  w = ‚à©$-elimProp x 0<x
    {Œª (_ , lnx) ‚Üí ‚àÉ-syntax ‚Ñö‚Çä
      (Œª Œ¥ ‚Üí (v : ‚Ñù) (v‚ààP : 0 <·µ£ v) ‚Üí
        x ‚àº[ Œ¥ ] v ‚Üí lnx ‚àº[ Œµ ] curry ln v v‚ààP)}
    (Œª _ ‚Üí squash‚ÇÅ)
    ww



 ^-rat : ‚àÄ x y ‚Üí fst (x ^·µ£ (rat y)) ‚â° fst (x ^‚Ñö y)
 ^-rat x =
   ‚à©$-elimProp (fst x) (snd x)
    {Œª (f , _) ‚Üí ‚àÄ y ‚Üí fst (f (rat y)) ‚â° fst (x ^‚Ñö y)}
     (Œª _ ‚Üí isPropŒ† Œª _ ‚Üí isSet‚Ñù _ _)
     (Œª n (‚â§x , x‚â§) q ‚Üí
          BDL.ùíá-rat _ n x‚â§ ‚â§x q ‚àô cong (Œª x ‚Üí fst (x ^‚Ñö q)) (‚Ñù‚Çä‚â° refl))


 ln-inv : ‚àÄ x ‚Üí ln (inv‚Ñù‚Çä x) ‚â° -·µ£ (ln x)
 ln-inv (x , 0<x) =
   let (1/x , 0<1/x) = inv‚Ñù‚Çä (x , 0<x)
   in ‚à©$-elimProp2 1/x 0<1/x x 0<x
        {Œª (_ , ln1/x) (_ , lnx) ‚Üí ln1/x ‚â° -·µ£ lnx}
        (Œª _ _ ‚Üí isSet‚Ñù _ _)
        Œª Z x‚àà y‚àà ‚Üí
          congS (Œª zz ‚Üí BDL.preLn (1/x , zz) Z (snd x‚àà) (fst x‚àà))
            (isProp<·µ£ 0 _ _ _)  ‚àô expPreDer.preLn-inv Z _
            (snd y‚àà) (fst y‚àà) (snd x‚àà) (fst x‚àà)
           ‚àô congS (Œª zz ‚Üí -·µ£ (BDL.preLn (x , zz) Z (snd y‚àà) (fst y‚àà)))
            (isProp<·µ£ 0 _ _ _)

 cont-^ : ‚àÄ (x : ‚Ñù‚Çä) ‚Üí IsContinuous (fst ‚àò x ^·µ£_)
 cont-^ (x , 0<x) =
    ‚à©$-elimProp x 0<x  {Œª (f , _) ‚Üí IsContinuous (fst ‚àò f)}
      (Œª _ ‚Üí isPropIsContinuous _)
      Œª Z (‚â§x , x‚â§) ‚Üí BDL.ùíá-cont _ Z x‚â§ ‚â§x



 -- slope-monotone-^·µ£ :   (a b a' b' : ‚Ñù‚Çä)
 --  ‚Üí (a<b : fst a <·µ£ fst b) ‚Üí (a'<b' : fst a' <·µ£ fst b')
 --  ‚Üí (a‚â§a' : fst a ‚â§·µ£ fst a') ‚Üí  (b‚â§b' : fst b ‚â§·µ£ fst b') ‚Üí
 --  ‚àÄ y ‚Üí 1 ‚â§·µ£ y ‚Üí
 --  (((fst (b ^·µ£ y)) -·µ£ (fst (a ^·µ£ y)))
 --    Ôºè·µ£‚Çä (_ , x<y‚Üí0<y-x _ _ a<b ))
 --      ‚â§·µ£
 --  (((fst (b' ^·µ£ y)) -·µ£ (fst (a' ^·µ£ y)))
 --    Ôºè·µ£‚Çä (_ , x<y‚Üí0<y-x _ _ a'<b' ))
 -- slope-monotone-^·µ£ a b a' b' a<b a'<b' a‚â§a' b‚â§b' =
 --   (‚â§ContPos' {1}
 --    (IsContinuous‚àò _ _ (IsContinuous¬∑·µ£R _)
 --      (cont‚ÇÇ+·µ£ _ _
 --        (cont-^ _)
 --        (IsContinuous‚àò _ _
 --          IsContinuous-·µ£
 --           (cont-^ _))))
 --    (IsContinuous‚àò _ _ (IsContinuous¬∑·µ£R _)
 --      (cont‚ÇÇ+·µ£ _ _
 --        (cont-^ _)
 --        (IsContinuous‚àò _ _
 --          IsContinuous-·µ£
 --           (cont-^ _))))
 --    Œª q 1‚â§q ‚Üí
 --      subst2 _‚â§·µ£_
 --        (cong‚ÇÇ (Œª u v ‚Üí ((u -·µ£ v) Ôºè·µ£‚Çä
 --         (fst b +·µ£ -·µ£ fst a , x<y‚Üí0<y-x (fst a) (fst b) a<b)))
 --        (sym (^-rat _ _)) (sym (^-rat _ _)))
 --        ((cong‚ÇÇ (Œª u v ‚Üí ((u -·µ£ v) Ôºè·µ£‚Çä
 --         (fst b' +·µ£ -·µ£ fst a' , x<y‚Üí0<y-x (fst a') (fst b') a'<b')))
 --        (sym (^-rat _ _)) (sym (^-rat _ _))))
 --        (slope-monotone-^‚Ñö a b a' b' a<b a'<b' a‚â§a' b‚â§b' q 1‚â§q))

 -- ^-cont : ‚àÄ (y : ‚Ñù) ‚Üí IsContinuousWithPred pred0< (curry (fst ‚àò (_^·µ£ y)))
 -- ^-cont  y = {! !}

 -- factor-x·µÉ-x·µá'·µ£ : ‚àÄ x a b ‚Üí fst (x ^·µ£ a) -·µ£ fst (x ^·µ£ b) ‚â°
 --                         fst (x ^·µ£ a) ¬∑·µ£ (1 -·µ£ fst (x ^·µ£ (b -·µ£ a)))
 -- factor-x·µÉ-x·µá'·µ£ x a b = {!!}

 -- ^-monotone-lemma‚Ñö : ‚àÄ (x : ‚Ñö‚Çä) y (Œ¥ : ‚Ñö‚Çä) ‚Üí fst ((‚Ñö‚Çä‚Üí‚Ñù‚Çä x) ^‚Ñö y) ‚àà
 --                        interval‚Ñô (min·µ£ (fst ((‚Ñö‚Çä‚Üí‚Ñù‚Çä x) ^‚Ñö (y ‚Ñö.+ (fst Œ¥))))
 --                                      (fst ((‚Ñö‚Çä‚Üí‚Ñù‚Çä x) ^‚Ñö (y ‚Ñö.+ (fst Œ¥)))))
 --                                  (max·µ£ (fst ((‚Ñö‚Çä‚Üí‚Ñù‚Çä x) ^‚Ñö (y ‚Ñö.+ (fst Œ¥))))
 --                                      (fst ((‚Ñö‚Çä‚Üí‚Ñù‚Çä x) ^‚Ñö (y ‚Ñö.+ (fst Œ¥)))))
 -- ^-monotone-lemma‚Ñö = {!!}

 -- ^-monotone-lemma : ‚àÄ x y Œ¥ ‚Üí fst (x ^·µ£ y) ‚àà
 --                        interval‚Ñô (min·µ£ (fst (x ^·µ£ (y -·µ£ Œ¥)))
 --                                      (fst (x ^·µ£ (y +·µ£ Œ¥))))
 --                                  (max·µ£ (fst (x ^·µ£ (y -·µ£ Œ¥)))
 --                                      (fst (x ^·µ£ (y +·µ£ Œ¥))))
 -- ^-monotone-lemma = {!!}
 -- -- ^-strictMonotone : ‚àÄ x x' y ‚Üí 0 <·µ£ y ‚Üí fst x <·µ£ fst x'
 -- --   ‚Üí fst (x ^·µ£ y) <·µ£ fst (x' ^·µ£ y)
 -- -- ^-strictMonotone = {!!}

--  ^-cont : ‚àÄ (y : ‚Ñù) ‚Üí IsContinuousWithPred pred0< (curry (fst ‚àò (_^·µ£ y)))
--  ^-cont y u Œµ 0<u =
--    PT.rec
--      squash‚ÇÅ
--       (Œª (Œ¥y , Xy) ‚Üí
--         PT.rec2 squash‚ÇÅ
--           (Œª (Œ¥y- , (<Œ¥y- , Œ¥y-< )) (Œ¥y+ , <Œ¥y+ , Œ¥y+< )
--              ‚Üí PT.map2
--               (Œª (Œ¥x- , Xx-) (Œ¥x+ , Xx+ ) ‚Üí
--                 let Œ¥‚Çä = ‚Ñö.min‚Çä (‚Ñö.min‚Çä Œ¥x- Œ¥x+) Œ¥y
--                     Xy- = subst ((fst ((u , 0<u) ^·µ£ y))  ‚àº[ /4‚Çä Œµ ]_)
--                             (^-rat _ _)
--                              (Xy (rat Œ¥y-)
--                              {!!})
--                     Xy+ = subst ((fst ((u , 0<u) ^·µ£ y))  ‚àº[ /4‚Çä Œµ ]_)
--                             (^-rat _ _)
--                              (Xy (rat Œ¥y+) {!!})
--                 in Œ¥‚Çä ,
--                   Œª v 0<v u‚àºv ‚Üí
--                    let Y : fst ((u , 0<u) ^·µ£ y) ‚àº[ _ ]
--                             fst ((v , 0<v) ^·µ£ rat Œ¥y-)
--                        Y = triangle‚àº Xy-
--                           (subst ((fst ((u , 0<u) ^‚Ñö Œ¥y-))  ‚àº[ /4‚Çä Œµ ]_)
--                             (sym (^-rat _ _))
--                              ((Xx- v 0<v {!!})) )
--                    in {!!}
--                  )
--               (IsContinuous^‚Ñö Œ¥y- u (/4‚Çä Œµ) 0<u)
--               (IsContinuous^‚Ñö Œ¥y+ u (/4‚Çä Œµ) 0<u)
--              )
--           (dense‚Ñöin‚Ñù (y -·µ£ rat (fst Œ¥y)) y {!!})
--           (dense‚Ñöin‚Ñù y (y +·µ£ rat (fst Œ¥y)) {!!}))
--       (cont-^ (u , 0<u) y (/4‚Çä Œµ))
-- --     PT.map
-- --       {!!}
-- --       (dense‚Ñöin‚Ñù 0 (fst Œ¥·µ£) (snd Œ¥·µ£))


   -- Seq‚äÜ.elimProp-‚à© Seq‚äÜ-abs<N
   --    ‚ä§Pred y tt Seq‚äÜ-abs<N-s‚äá-‚ä§Pred
   --    (Œª (y : ‚Ñù) ‚Üí IsContinuousWithPred pred0< (curry (fst ‚àò (_^·µ£ y))))
   --    (Œª _ ‚Üí isPropŒ†3 Œª _ _ _ ‚Üí squash‚ÇÅ)
   --    Œª n y‚àà u Œµ u‚ààP ‚Üí PT.map2
   --     (Œª (Œ¥ , X) (Œ¥' , X') ‚Üí
   --       ‚Ñö.min‚Çä Œ¥ Œ¥' ,
   --        Œª v 0<v u‚àºv ‚Üí
   --          let B  = fst (‚àº‚âÉabs<Œµ _ _ _)
   --                     $ X  v 0<v (‚àº-monotone‚â§ (‚Ñö.min‚â§ _ _ ) u‚àºv)
   --              B' = fst (‚àº‚âÉabs<Œµ _ _ _)
   --                     $ X' v 0<v (‚àº-monotone‚â§ (‚Ñö.min‚â§' _ _) u‚àºv)
   --          in invEq (‚àº‚âÉabs<Œµ _ _ _)
   --               (isTrans‚â§<·µ£ _ _ _
   --                 (^B-Œ¥-lemma n y (u , _) (v , 0<v)
   --                  (ointerval‚Ñô‚äÜinterval‚Ñô _ _ _ y‚àà))
   --                 (max<-lem _ _ _
   --                   B
   --                   B')))
   --     (IsContinuous^‚Ñö (fromNat (suc n)) u Œµ u‚ààP)
   --     (IsContinuous^‚Ñö (fromNeg (suc n)) u Œµ u‚ààP)



 ^-der : ‚àÄ x ‚Üí ‚àÄ y ‚Üí derivativeOf (fst ‚àò x ^·µ£_) at y
               is (fst (x ^·µ£ y) ¬∑·µ£ ln x)
 ^-der (x , 0<x) = ‚à©$-elimProp x 0<x
       {Œª (g , d) ‚Üí (y : ‚Ñù) ‚Üí
         derivativeOf (fst ‚àò g) at y is (fst (g y) ¬∑·µ£ d)}
      (Œª _ ‚Üí isPropŒ†2 Œª _ _ ‚Üí squash‚ÇÅ)
       (Œª n (a , b) ‚Üí BDL.expDerA (x , _) n b a)

 ^·µ£0 : ‚àÄ x ‚Üí fst (x ^·µ£ 0) ‚â° 1
 ^·µ£0 x = ^-rat x 0

 ^·µ£1 : ‚àÄ x ‚Üí fst (x ^·µ£ 1) ‚â° fst x
 ^·µ£1 x = ^-rat x 1 ‚àô ^‚Åø-1 _

 ^·µ£[1/n] : ‚àÄ x n‚Çä ‚Üí fst (x ^·µ£ rat [ 1 / n‚Çä ]) ‚â° fst (root n‚Çä x)
 ^·µ£[1/n] x n‚Çä =  ^-rat x [ 1 / n‚Çä ] ‚àô ^‚Åø-1 _

 1<a‚Üí0<ln[a] : ‚àÄ a ‚Üí (1 <·µ£ fst a) ‚Üí 0 <·µ£ ln a
 1<a‚Üí0<ln[a] (a , 0<a) 1<a =
    ‚à©$-elimProp a 0<a
             {Œª (_ , lna) ‚Üí 0 <·µ£ lna}
               (Œª _ ‚Üí isProp<·µ£ _ _)
               Œª _ _ ‚Üí BDL.0<preLn _ _ _ _ 1<a

 ^·µ£+ : ‚àÄ x y y' ‚Üí x ^·µ£ (y +·µ£ y') ‚â° (x ^·µ£ y) ‚Çä¬∑·µ£ (x ^·µ£ y')
 ^·µ£+ (x , 0<x) y y' =
   ‚à©$-elimProp x 0<x
    {Œª (f , _) ‚Üí f (y +·µ£ y') ‚â° f y ‚Çä¬∑·µ£ f y'}
    (Œª _ ‚Üí isSet‚Ñù‚Çä _ _ )
    Œª n x‚àà ‚Üí ‚Ñù‚Çä‚â° (sym (BDL.ùíá¬∑ _ _ _  _ y y'))

open Pos^ public


root‚Çô‚Üí1 : ‚àÄ x (Œ± : ‚Ñù) ‚Üí 1 <·µ£ Œ± ‚Üí
         ‚àÉ[ N ‚àà ‚Ñï ]
           (‚àÄ n ‚Üí N ‚Ñï.< n ‚Üí fst (root (1+ n) x) <·µ£ Œ±)
root‚Çô‚Üí1 x Œ± 1<Œ± =
  PT.rec squash‚ÇÅ w
    (IsContinuousLim _ 0 (cont-^ x) (Œ± -·µ£ 1 , x<y‚Üí0<y-x _ _ 1<Œ±))
 where
 w : Œ£ ‚Ñù‚Çä
      (Œª Œ¥ ‚Üí
         (r : ‚Ñù) (xÔºÉr : 0 ÔºÉ r) ‚Üí
         abs·µ£ (0 -·µ£ r) <·µ£ fst Œ¥ ‚Üí
         abs·µ£ (fst (x ^·µ£ 0) -·µ£ fst (x ^·µ£ r))
         <·µ£ Œ± -·µ£ 1) ‚Üí
      ‚àÉ ‚Ñï (Œª N ‚Üí (n : ‚Ñï) ‚Üí N ‚Ñï.< n ‚Üí fst (root (1+ n) x) <·µ£ Œ±)
 w ((Œ¥·µ£ , 0<Œ¥·µ£) , X) =
    PT.map
      (Œª (Œ¥ , 0<Œ¥ , Œ¥<Œ¥·µ£) ‚Üí
        let 1/Œ¥ = (inv‚Ñö‚Çä (Œ¥ , ‚Ñö.<‚Üí0< _ (<·µ£‚Üí<‚Ñö _ _ 0<Œ¥)))
            ((1+ k) , Y) = ‚Ñö.bound‚Ñï (fst 1/Œ¥)
        in suc k , Œª n <n ‚Üí
            <-+o-cancel _ _ (-·µ£ 1)
              (isTrans‚â§<·µ£ _ _ _
                (‚â§abs·µ£ _) (isTrans‚â°<·µ£ _ _ _
               (cong abs·µ£ (cong‚ÇÇ _-·µ£_
                (sym (^·µ£[1/n] x (1+ n)))
                (sym (^·µ£0 x)))
                ‚àô minusComm-abs·µ£ _ _) (X (rat [ 1 / 1+ n ])
            (inl (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.0<pos _ _)))
             (isTrans‚â°<·µ£ _ _ _ (
              cong abs·µ£ (+IdL _) ‚àô sym (-abs·µ£ _)
                ‚àô abs·µ£Pos _ (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.0<pos _ _))) (isTrans<·µ£ _ _ _
              (<‚Ñö‚Üí<·µ£ [ 1 / 1+ n ] Œ¥
                (subst2 ‚Ñö._<_
                  refl
                  (‚Ñö.inv‚Ñö‚Çä-invol _)
                  (fst (‚Ñö.inv‚Ñö‚Çä-<-inv‚Ñö‚Çä 1/Œ¥ (fromNat (suc n)) )
                   (‚Ñö.isTrans< _ _ _
                     (‚Ñö.isTrans‚â§< _ _ _ (‚Ñö.‚â§abs (fst 1/Œ¥)) Y)
                     (‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _ (invEq (‚Ñ§.pos-<-pos‚âÉ‚Ñï< _ _)
                      (‚Ñï.‚â§-suc <n) )))))) Œ¥<Œ¥·µ£)))))
        )
      (dense‚Ñöin‚Ñù 0 Œ¥·µ£ 0<Œ¥·µ£)

-- clamp : ‚Ñö ‚Üí ‚Ñö ‚Üí ‚Ñö ‚Üí ‚Ñö
-- clamp d u x = ‚Ñö.min (‚Ñö.max d x) u


‚Ñö-clamp-<-cases : ‚àÄ L L' x y ‚Üí L ‚Ñö.< L' ‚Üí x ‚Ñö.< y ‚Üí
                    (‚Ñö.clamp L L' x ‚â° ‚Ñö.clamp L L' y) ‚äé
                       (‚Ñö.clamp L L' x ‚Ñö.< ‚Ñö.clamp L L' y)
‚Ñö-clamp-<-cases L L' x y L<L' x<y =
  w (‚Ñö.Dichotomy‚Ñö y L) (‚Ñö.Dichotomy‚Ñö L' x)
 where
 w : _ ‚Üí _ ‚Üí _
 w _ (inl L'‚â§x) = inl (‚Ñö.minComm _ _ ‚àô ‚Ñö.‚â§‚Üímin _ _ (‚Ñö.isTrans‚â§ _ _ _ L'‚â§x (‚Ñö.‚â§max' _ _))
      ‚àô sym ((‚Ñö.minComm _ _ ‚àô ‚Ñö.‚â§‚Üímin _ _
       (‚Ñö.isTrans‚â§ _ _ _ (‚Ñö.isTrans‚â§ _ _ _ L'‚â§x (‚Ñö.<Weaken‚â§ _ _ x<y)) (‚Ñö.‚â§max' _ _)))))
 w (inl y‚â§L) _ = inl
   (cong (flip ‚Ñö.min _) (‚Ñö.maxComm _ _ ‚àô
    (‚Ñö.‚â§‚Üímax _ _ (‚Ñö.isTrans‚â§ _ _ _  (‚Ñö.<Weaken‚â§ _ _ x<y) y‚â§L)))
     ‚àô cong (flip ‚Ñö.min _) (sym (‚Ñö.‚â§‚Üímax _ _ y‚â§L) ‚àô ‚Ñö.maxComm _ _))

 w (inr L<y) (inr x<L') = inr
  (‚Ñö.isTrans‚â§< _ _ _
    (‚Ñö.min‚â§ _ _)
      (‚Ñö.isTrans<‚â§ (‚Ñö.max L x) (‚Ñö.min y L') _
        (<·µ£‚Üí<‚Ñö _ _ (<min-lem (rat y) (rat L') (max·µ£ (rat L) (rat x))
             (max<-lem _ _ _ (<‚Ñö‚Üí<·µ£ _ _ L<y) (<‚Ñö‚Üí<·µ£ _ _ x<y))
             (max<-lem _ _ _ ((<‚Ñö‚Üí<·µ£ _ _ L<L')) (<‚Ñö‚Üí<·µ£ _ _ x<L'))))
        (‚Ñö.‚â°Weaken‚â§ _ _ (cong (flip ‚Ñö.min L') (sym (‚Ñö.‚â§‚Üímax L y (‚Ñö.<Weaken‚â§ _ _ L<y)))))))

‚Ñö-clamp-<-cases·µ£ : ‚àÄ L L' x y ‚Üí L ‚Ñö.< L' ‚Üí  x ‚Ñö.< y ‚Üí
                    (clamp·µ£ (rat L) (rat L') (rat x)
                      ‚â° clamp·µ£ (rat L) (rat L') (rat y)) ‚äé
                       (clamp·µ£ (rat L) (rat L') (rat x)
                        <·µ£ clamp·µ£ (rat L) (rat L') (rat y))
‚Ñö-clamp-<-cases·µ£ L L' x y L<L' x<y =
 (‚äé.map (cong rat) (<‚Ñö‚Üí<·µ£ _ _)
    (‚Ñö-clamp-<-cases L L' x y L<L' x<y))

eventually-lnSeq[x]<lnSeq'[x+Œî] : ‚àÄ (x Œî : ‚Ñù‚Çä) ‚Üí 1 <·µ£ fst x ‚Üí
  ‚àÉ[ k ‚àà ‚Ñï ] lnSeq x k <·µ£ lnSeq' (x ‚Çä+·µ£ Œî) k
eventually-lnSeq[x]<lnSeq'[x+Œî] x Œî 1<x =
   PT.map w
     (root‚Çô‚Üí1 x Œ± 1<Œ±)

 where


 0<1-1/[x+Œî] = (isTrans<‚â°·µ£ _ _ _
          (invEq (inv‚Ñù‚Çä-<-inv‚Ñù‚Çä _ 1)
            (isTrans‚â°<·µ£ _ _ _
              (sym (+IdR _))
              (<·µ£Monotone+·µ£ _ _ _ _ 1<x (snd Œî)))) (cong fst inv‚Ñù‚Çä1) )


 0<1-1/x = (isTrans<‚â°·µ£ _ _ _
          (invEq (inv‚Ñù‚Çä-<-inv‚Ñù‚Çä _ 1)
            (isTrans‚â°<·µ£ _ _ _
              (sym (+IdR _) ‚àô (+·µ£-rat _ _))
              1<x)) (cong fst inv‚Ñù‚Çä1) )


 Œ± : ‚Ñù
 Œ± = (1 -·µ£ fst (inv‚Ñù‚Çä (x ‚Çä+·µ£ Œî)))
      Ôºè·µ£‚Çä (_ , x<y‚Üí0<y-x _ _ 0<1-1/x)

 1<Œ± : 1 <·µ£ Œ±
 1<Œ± = invEq (1<x/y‚âÉy<x _ _)
   (<·µ£-o+ _ _ 1
     (-·µ£<·µ£ _ _ (invEq (inv‚Ñù‚Çä-<-inv‚Ñù‚Çä _ _)
       (isTrans‚â°<·µ£ _ _ _
         (sym (+IdR _))
         (<·µ£-o+ _ _ (fst x) (snd Œî))))))



 w : Œ£ ‚Ñï
      (Œª N ‚Üí (n : ‚Ñï) ‚Üí N ‚Ñï.< n ‚Üí fst (root (1+ n) x) <·µ£ Œ±) ‚Üí
      Œ£ ‚Ñï (Œª k ‚Üí lnSeq x k <·µ£ lnSeq' (x ‚Çä+·µ£ Œî) k)
 w (K , X) =
   K , <·µ£-¬∑·µ£o _ _ (_ , <‚Ñö‚Üí<·µ£ _ _ (‚Ñö.0<pos _ _))
     (isTrans<‚â§·µ£ _ _ _
       (isTrans‚â°<·µ£ _ _ _
         (cong‚ÇÇ _-·µ£_
           (^‚Åø-1 _ ‚àô sym (¬∑IdL _))
           (cong fst (sym (‚Çô‚àö1 _) ‚àô‚àô
             cong (root _) (‚Ñù‚Çä‚â° (sym (x¬∑inv‚Ñù‚Çä[x] _) ‚àô ¬∑·µ£Comm _ _))
              ‚àô‚àô sym (¬∑DistRoot _ _ _)))
           ‚àô sym (ùêë'.¬∑DistL- _ _ _))
         (<·µ£-o¬∑·µ£ _ _
           (_ , x<y‚Üí0<y-x (fst (root (1+ (suc K)) (inv‚Ñù‚Çä x))) 1
              (isTrans<‚â°·µ£ _ _ _
               (‚Çô‚àö-StrictMonotone {inv‚Ñù‚Çä x} {1}  (1+ suc K)
                 (invEq (1/x<1‚âÉ1<x x) 1<x))
               (cong fst (‚Çô‚àö1 _))))
           (X (suc K) (‚Ñï.‚â§-refl {suc K}))))
       from-concave)

  where

  from-concave :
    (1 -·µ£ fst (root (2+ K) (inv‚Ñù‚Çä x))) ¬∑·µ£ Œ± ‚â§·µ£
     1 -·µ£ fst ((x ‚Çä+·µ£ Œî) ^‚Ñö (‚Ñö.- [ 1 / 2+ K ]))
  from-concave = isTrans‚â°‚â§·µ£ (_ ¬∑·µ£ Œ±) _ _
        (cong‚ÇÇ (_¬∑·µ£_) (cong‚ÇÇ _-·µ£_ (cong fst (sym (‚Çô‚àö1 _)))
         refl) (¬∑·µ£Comm _ _) ‚àô ¬∑·µ£Assoc _ _ _ ‚àô ¬∑·µ£Comm _ _ )
        (isTrans‚â§‚â°·µ£ _ _ _ (fst (z‚â§x/y‚Çä‚âÉy‚Çä¬∑z‚â§x _ _ _) (slope-monotone-‚Çô‚àö (suc K)
         (inv‚Ñù‚Çä (x ‚Çä+·µ£ Œî)) 1
         (inv‚Ñù‚Çä x) 1
         0<1-1/[x+Œî]
         0<1-1/x
         (invEq (inv‚Ñù‚Çä-‚â§-inv‚Ñù‚Çä _ _)
           (isTrans‚â°‚â§·µ£ _ _ _ (sym (+IdR _))
            (‚â§·µ£-o+ _ _ (fst x) (<·µ£Weaken‚â§·µ£ _ _ (snd Œî)))))
            (‚â§·µ£-refl 1)))
            (cong‚ÇÇ _-·µ£_ (cong fst (‚Çô‚àö1 _))
            (sym (^‚Åø-1 _) ‚àô
             cong fst (sym (^‚Ñö-minus' _ _)))))




monotoneStrictPreLn : ‚àÄ Z ‚Üí (z z' : ‚Ñù‚Çä) ‚Üí 1 <·µ£ fst z ‚Üí
         (z‚â§Z : fst z ‚â§·µ£ fromNat (suc (suc Z)))
         (1/Z‚â§z :  rat [ 1 / fromNat (suc (suc Z)) ] ‚â§·µ£ fst z)
         (z'‚â§Z : fst z' ‚â§·µ£ fromNat (suc (suc Z)))
         (1/Z‚â§z' :  rat [ 1 / fromNat (suc (suc Z)) ] ‚â§·µ£ fst z')
         ‚Üí fst z <·µ£ fst z'
         ‚Üí expPreDer.expPreDer'.preLn Z z z‚â§Z 1/Z‚â§z  <·µ£
           expPreDer.expPreDer'.preLn Z z' z'‚â§Z 1/Z‚â§z'
monotoneStrictPreLn Z z z' 1<z z‚â§Z 1/Z‚â§z z'‚â§Z 1/Z‚â§z' z<z' =
  PT.rec (isProp<·µ£ _ _)
    (Œª (K , X) ‚Üí
       isTrans<‚â§·µ£ _ _ _
         (isTrans‚â§<·µ£ _ _ _
           (BDL.preLn‚â§lnSeq z Z z‚â§Z 1/Z‚â§z K) X)

         ((isTrans‚â°‚â§·µ£ _ _ _
          (cong (Œª zz ‚Üí lnSeq' zz K) (‚Ñù‚Çä‚â° Lùêë.lem--05) )
          (BDL.lnSeq'‚â§preLn z' Z z'‚â§Z 1/Z‚â§z' K)))
          )
    (eventually-lnSeq[x]<lnSeq'[x+Œî]
      z (fst z' +·µ£ -·µ£ fst z , x<y‚Üí0<y-x _ _ z<z' )
      1<z)


ln-mon-str-1< :
   ‚àÄ (y y' : ‚Ñù‚Çä)
   ‚Üí 1 <·µ£ fst y
   ‚Üí fst y <·µ£ fst y'
   ‚Üí ln y <·µ£ ln y'
ln-mon-str-1< y y' 1<y y<y' =
 Seq-^-FI.‚à©$-elimProp2  (fst y) (snd y) (fst y') (snd y')
  {B = Œª (_ , ln-y) (_ , ln-y') ‚Üí ln-y <·µ£ ln-y'}
  (Œª _ _ ‚Üí isProp<·µ£ _ _)
  Œª Z x‚àà y‚àà ‚Üí monotoneStrictPreLn Z (fst y , _) (fst y' , _)
    1<y (snd x‚àà) (fst x‚àà) (snd y‚àà) (fst y‚àà) y<y'


-- opaque
--  unfolding _+·µ£_
invLipPreLn : ‚àÄ Z ‚Üí ‚àÉ[ K ‚àà _ ]
              Invlipschitz-‚Ñù‚Üí‚Ñù‚Ñô K
               ((interval‚Ñô (rat [ 1 / fromNat (suc (suc Z)) ])
              (fromNat (suc (suc Z)))))
              Œª x (‚â§x , x‚â§) ‚Üí
                expPreDer.expPreDer'.preLn Z
                  (x , isTrans<‚â§·µ£ _ _ _ (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.0<pos _ _)) ‚â§x)
                 x‚â§ ‚â§x
invLipPreLn Z =
   PT.map
     ww
     (dense‚Ñöin‚Ñù _ _ (snd K·µ£))

  where


   Z<SZ : fst (fromNat (suc (suc Z))) ‚Ñö.<
       fst (fromNat (suc (suc (suc Z))))
   Z<SZ =
                (‚Ñö.<‚Ñ§‚Üí<‚Ñö (pos (suc (suc Z))) (pos (suc (suc (suc Z))))
                (invEq (‚Ñ§.pos-<-pos‚âÉ‚Ñï< _ _)
                  (‚Ñï.‚â§-refl {(suc (suc (suc Z)))})))
   1<Z : [ pos 1 / 1+ 0 ] ‚Ñö.< [ pos (suc (suc Z)) / 1+ 0 ]
   1<Z =
                (‚Ñö.<‚Ñ§‚Üí<‚Ñö (pos (suc zero)) (pos (suc (suc Z)))
                (invEq (‚Ñ§.pos-<-pos‚âÉ‚Ñï< _ _)
                  (‚Ñï.suc-‚â§-suc (‚Ñï.suc-‚â§-suc ‚Ñï.zero-‚â§))))

   [1/3+Z]‚â§[2+Z] : rat [ pos 1 / 2+ suc Z ] ‚â§·µ£ rat [ pos (suc (suc Z)) / 1+ 0 ]
   [1/3+Z]‚â§[2+Z] = isTrans‚â§·µ£ _ 1 _
     (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (fst (‚Ñö.inv‚Ñö‚Çä-‚â§-inv‚Ñö‚Çä 1 (fromNat (suc (suc (suc Z)))))
       ((‚Ñö.<Weaken‚â§ _ _
        (‚Ñö.isTrans< 1 (fst (fromNat (suc (suc Z)))) _ 1<Z (Z<SZ))))
       ))
     (<·µ£Weaken‚â§·µ£ _ _ (<‚Ñö‚Üí<·µ£ _ _ 1<Z))

   2+Z‚àà : (fromNat (suc (suc Z))) ‚àà
            ((interval‚Ñô (rat [ 1 / fromNat (suc (suc (suc Z))) ])
               (fromNat (suc (suc (suc Z))))))
   2+Z‚àà = [1/3+Z]‚â§[2+Z] , (<·µ£Weaken‚â§·µ£ _ _ (<‚Ñö‚Üí<·µ£ _ _ Z<SZ))


   3+Z‚àà : rat ([ (pos (suc (suc (suc Z)))) / 1 ]) ‚àà
            ((interval‚Ñô (rat [ 1 / fromNat (suc (suc (suc Z))) ])
               (fromNat (suc (suc (suc Z))))))
   3+Z‚àà =
             (‚â§‚Ñö‚Üí‚â§·µ£ _ _
                (‚Ñö.isTrans‚â§ _ 1 [ pos (suc (suc (suc Z))) / (1+ 0) ]
                  (fst (‚Ñö.inv‚Ñö‚Çä-‚â§-inv‚Ñö‚Çä 1 (fromNat (suc (suc (suc Z)))))
                   ((‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ (pos _) (invEq (‚Ñ§.pos-‚â§-pos‚âÉ‚Ñï‚â§ _ _)
                (‚Ñï.suc-‚â§-suc ‚Ñï.zero-‚â§)))))
                  ((‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ (pos (suc (suc (suc Z)))) (invEq (‚Ñ§.pos-‚â§-pos‚âÉ‚Ñï‚â§ _ _)
                (‚Ñï.suc-‚â§-suc ‚Ñï.zero-‚â§)))))) , (‚â§·µ£-refl _)



   SSSZ‚Çä SSZ‚Çä : ‚Ñù‚Çä
   SSSZ‚Çä = (‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ (pos (suc (suc (suc Z)))) / 1 ] , _))
   SSZ‚Çä = (‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ (pos (suc (suc Z))) / 1 ] , _))

   K·µ£ : ‚Ñù‚Çä
   K·µ£ =
         BDL.preLn SSSZ‚Çä (suc Z) (snd 3+Z‚àà) (fst 3+Z‚àà)
          +·µ£ -·µ£

          BDL.preLn SSZ‚Çä (suc Z) (snd 2+Z‚àà) (fst 2+Z‚àà)
          ,
          x<y‚Üí0<y-x
           (BDL.preLn (‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ (pos (suc (suc Z))) / 1 ] , _)) (suc Z) (snd 2+Z‚àà) (fst 2+Z‚àà))
           (BDL.preLn (‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ (pos (suc (suc (suc Z)))) / 1 ] , _))  (suc Z) (snd 3+Z‚àà)
         (fst 3+Z‚àà))
           (monotoneStrictPreLn (suc Z)
             (‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ (pos (suc (suc Z))) / 1 ] , _))
             (‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ (pos (suc (suc (suc Z)))) / 1 ] , _))
             (<‚Ñö‚Üí<·µ£ _ _ 1<Z)
             (snd 2+Z‚àà) (fst 2+Z‚àà)
             (snd 3+Z‚àà) (fst 3+Z‚àà)
             (<‚Ñö‚Üí<·µ£ _ _ Z<SZ))

   ww : Œ£ ‚Ñö (Œª q ‚Üí (rat [ pos 0 / 1+ 0 ] <·µ£ rat q) √ó (rat q <·µ£ K·µ£ .fst)) ‚Üí
         Œ£ ‚Ñö‚Çä
         (Œª K ‚Üí
            Invlipschitz-‚Ñù‚Üí‚Ñù‚Ñô K
            (interval‚Ñô (rat [ pos 1 / 2+ Z ])
             (rat [ pos (suc (suc Z)) / 1+ 0 ]))
            Œª x (x‚â§ , ‚â§x) ‚Üí expPreDer.expPreDer'.preLn Z
                  (x , isTrans<‚â§·µ£ _ _ _ (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.0<pos _ _)) x‚â§)
                 ‚â§x x‚â§)
   ww (K , 0<K , K<K·µ£) =  (inv‚Ñö‚Çä K‚Çä) , zzz

    where
    K‚Çä : ‚Ñö‚Çä
    K‚Çä = (K , ‚Ñö.<‚Üí0< _ (<·µ£‚Üí<‚Ñö _ _ 0<K))
    zzz : Invlipschitz-‚Ñù‚Üí‚Ñù‚Ñô (inv‚Ñö‚Çä K‚Çä)
      (interval‚Ñô (rat [ pos 1 / 2+ Z ])
       (rat [ pos (suc (suc Z)) / 1+ 0 ]))
      (Œª x (‚â§x , x‚â§) ‚Üí
         BDL.preLn
         (x ,
          isTrans<‚â§·µ£ (rat [ pos 0 / 1+ 0 ]) (rat [ pos 1 / 2+ Z ]) x
          (<‚Ñö‚Üí<·µ£ [ pos 0 / 1+ 0 ] [ pos 1 / 2+ Z ] (‚Ñö.0<pos 0 (2+ Z)))
          ‚â§x)
         Z x‚â§ ‚â§x )
    zzz u u‚àà v v‚àà Œµ lnU‚àºlnV =
     invEq (‚àº‚âÉabs<Œµ _ _ _)
              (isTrans<‚â°·µ£ _ _ _
               (isTrans‚â§<·µ£ _ _ _
                 zzzz
                 (isTrans<‚â°·µ£ _ _ _
                  (<·µ£‚ÇäMonotone¬∑·µ£ _ _ _ _
                  (<·µ£Weaken‚â§·µ£ _ _ (snd (inv‚Ñù‚Çä K·µ£)))
                  (0‚â§abs·µ£ _)
                  (invEq (inv‚Ñù‚Çä-<-inv‚Ñù‚Çä K·µ£ _)
                    K<K·µ£) lnuv<)
                     (cong‚ÇÇ _¬∑·µ£_
                      (inv‚Ñù‚Çä-rat _)
                      refl))
                 )
               (sym (rat¬∑·µ£rat _ _)))
     where
      u‚Çä = _
      v‚Çä = _

      lnU = BDL.preLn u‚Çä Z (snd u‚àà) (fst u‚àà)
      lnV = BDL.preLn v‚Çä Z (snd v‚àà) (fst v‚àà)




      clp : ‚Ñù ‚Üí ‚Ñù
      clp = clamp·µ£ (rat [ 1 / (1+  (suc Z)) ])
                   (rat [ pos (suc (suc Z)) / 1 ])

      1/SSZ<SSZ = (‚Ñö.isTrans< _ 1 _
                ((fst (‚Ñö.inv‚Ñö‚Çä-<-inv‚Ñö‚Çä 1
                   (([ pos (suc (suc Z)) / 1 ] , _))
                   )
                  (1<Z)))
                ((1<Z)))


      1/SSZ‚â§SSZ = ‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.<Weaken‚â§ _ _ 1/SSZ<SSZ)

      0<clp : ‚àÄ x ‚Üí 0 <·µ£ clp x
      0<clp x = isTrans<‚â§·µ£ _ _ _ (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.0<pos _ _))
         (‚â§clamp·µ£ (rat [ 1 / (1+  (suc Z)) ]) _ x 1/SSZ‚â§SSZ)

      clpCount : IsContinuous clp
      clpCount = IsContinuousClamp
         (rat [ 1 / (1+  (suc Z)) ])
                   (rat [ pos (suc (suc Z)) / 1 ])

      -- lnX : ‚Ñù ‚Üí ‚Ñù
      -- lnX x = BDL.preLn (clp x , 0<clp x) Z
      --    (clamp‚â§·µ£ (rat [ 1 / fromNat (suc (suc Z)) ]) _ x)

      --    (‚â§clamp·µ£ (rat [ 1 / fromNat (suc (suc Z)) ]) _ x
      --       (isTrans‚â§·µ£ _ 1 _
      --           (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (fst (‚Ñö.inv‚Ñö‚Çä-‚â§-inv‚Ñö‚Çä 1 (fromNat (suc (suc Z))))
      --             (‚Ñö.<Weaken‚â§ _ _ 1<Z)))
      --           (<·µ£Weaken‚â§·µ£ _ _ (<‚Ñö‚Üí<·µ£ _ _ 1<Z))))

      lnX' : ‚Ñù ‚Üí ‚Ñù
      lnX' x = ln (clp x , 0<clp x)

      lnX'‚Çô : ‚àÄ (x : ‚Ñù‚Çä) 0<x
              (x‚àà : fst x ‚àà (interval‚Ñô (rat [ 1 /  (2+ (suc Z)) ])
                        (rat [ pos (suc (suc (suc Z))) / 1 ]))) ‚Üí
                ln x ‚â° BDL.preLn
                         (fst x , 0<x) (suc Z) (snd x‚àà) (fst x‚àà)
      lnX'‚Çô x 0<x x‚àà =
        cong snd (Seq-^-FI.‚à©$-‚àà‚Çô (fst x) (snd x) (suc Z) x‚àà)
        ‚àô cong (Œª 0<x ‚Üí BDL.preLn
                         (fst x , 0<x) (suc Z) (snd x‚àà) (fst x‚àà))
                         (isProp<·µ£ _ _ _ _)

      clp‚â° : ‚àÄ u ‚Üí u ‚àà ((interval‚Ñô (rat [ 1 /  (1+ (suc Z)) ])
               (rat [ pos (suc (suc Z)) / 1 ]))) ‚Üí clp u ‚â° u
      clp‚â° u u‚àà = sym (‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â° _ _ u u‚àà)

      lnX'Cont : IsContinuous lnX'
      lnX'Cont = IsContinuousWithPred‚àòIsContinuous
       _ _ _ 0<clp
       ln-cont clpCount

      lnuv< = fst (‚àº‚âÉabs<Œµ _ _ _) lnU‚àºlnV

      zzzz= : ‚àÄ x y ‚Üí clamp·µ£ (rat [ pos 1 / 2+ Z ])
       (rat [ pos (suc (suc Z)) / 1+ 0 ]) (rat x)
       ‚â°
       clamp·µ£ (rat [ pos 1 / 2+ Z ]) (rat [ pos (suc (suc Z)) / 1+ 0 ])
       (rat y) ‚Üí
       fst K·µ£ ¬∑·µ£ abs·µ£ (clp (rat x) -·µ£ clp (rat y)) ‚â§·µ£
       abs·µ£ (lnX' (rat x) -·µ£ lnX' (rat y))
      zzzz= x y p =
       ‚â°·µ£Weaken‚â§·µ£ _ _
                 (ùêë'.0RightAnnihilates' _ _
                   (cong abs·µ£ (ùêë'.+InvR' _ _ p) ‚àô abs·µ£-rat 0)
                   ‚àô sym (abs·µ£-rat 0) ‚àô
                   cong abs·µ£ (sym (ùêë'.+InvR' _ _
                     (ll))))

         where

         ll : ln (clp (rat x) , 0<clp (rat x))  ‚â° ln (clp (rat y) , 0<clp (rat y))
         ll = cong ln (‚Ñù‚Çä‚â° p)

      zzzz< : ‚àÄ x y ‚Üí clamp·µ£ (rat [ pos 1 / 2+ Z ])
       (rat [ pos (suc (suc Z)) / 1+ 0 ]) (rat x)
       <·µ£
       clamp·µ£ (rat [ pos 1 / 2+ Z ]) (rat [ pos (suc (suc Z)) / 1+ 0 ])
       (rat y) ‚Üí
       fst K·µ£ ¬∑·µ£ abs·µ£ (clp (rat x) -·µ£ clp (rat y)) ‚â§·µ£
       abs·µ£ (lnX' (rat x) -·µ£ lnX' (rat y))
      zzzz< x y x<y =
       isTrans‚â°‚â§·µ£
         (fst K·µ£ ¬∑·µ£ abs·µ£ (clp (rat x) -·µ£ clp (rat y)))
         (abs·µ£ (clp (rat x) -·µ£ clp (rat y)) ¬∑·µ£ fst K·µ£)
         (abs·µ£ (lnX' (rat x) -·µ£ lnX' (rat y)))
        (¬∑·µ£Comm _ _) (fst (z‚â§x/y‚Çä‚âÉy‚Çä¬∑z‚â§x _ _ _)
          (subst2  _‚â§·µ£_
           (cong‚ÇÇ _¬∑·µ£_ refl
             (cong (fst ‚àò inv‚Ñù‚Çä)
              (‚Ñù‚Çä‚â° {_ , _} {_ , isTrans<‚â°·µ£ _ _ _ dec‚Ñö<·µ£?
               (sym (cong (rat ‚àò [_/ 1 ]) hhhh))} (-·µ£-rat‚ÇÇ _ _ ‚àô cong rat (‚Ñö.‚Ñ§-‚Üí‚Ñö- _ _
               ‚àô cong ([_/ 1 ]) (cong‚ÇÇ ‚Ñ§._+_ (‚Ñ§.pos+ _ _) refl ‚àô sym (‚Ñ§.+Assoc 1 (pos ((suc (suc Z))))
                    (‚Ñ§.- (pos (suc (suc Z)))))
                ‚àô ùêô'.+IdR' _ _ refl )) ))
             ‚àô cong (fst ‚àò inv‚Ñù‚Çä) (‚Ñù‚Çä‚â° (cong rat (cong [_/ 1 ] hhhh))) ‚àô cong fst inv‚Ñù‚Çä1 )
             ‚àô (¬∑IdR _) )
           (cong‚ÇÇ {y = abs·µ£ (lnX' (rat x) +·µ£ -·µ£ lnX' (rat y))} _¬∑·µ£_
             ( sym (abs·µ£NonNeg _ (x‚â§y‚Üí0‚â§y-x _ _
              (expPreDer.monotonePreLn (suc Z)
               (clp (rat x) , 0<clp (rat x))
               (clp (rat y) , 0<clp (rat y))
                (snd x*‚àà) (fst x*‚àà) (snd y*‚àà) (fst y*‚àà) (<·µ£Weaken‚â§·µ£ _ _ x<y))))
               ‚àô cong abs·µ£ (cong‚ÇÇ (Œª u v ‚Üí u +·µ£ -·µ£ v)
               (sym (lnX'‚Çô ((clp (rat y)) , 0<clp (rat y)) _ _)) --(sym (lnX'‚Çô _ _ _))
               ((sym (lnX'‚Çô (clp (rat x) , 0<clp (rat x)) _ _))) --
                )
                 ‚àô minusComm-abs·µ£ (lnX' (rat y)) (lnX' (rat x)))

             (cong (fst ‚àò inv‚Ñù‚Çä)
               (‚Ñù‚Çä‚â° {_} {_ , isTrans<‚â§·µ£ _ _ _ (x<y‚Üí0<y-x _ _ x<y)
                     (isTrans‚â§‚â°·µ£ _ _ _ (‚â§abs·µ£ _) (minusComm-abs·µ£ _ _))}
                  (sym (abs·µ£Pos _ (x<y‚Üí0<y-x _ _ x<y))
                 ‚àô minusComm-abs·µ£ _ _))))
           zzWW)) --
         where

         hhhh : 1 ‚Ñ§.+ ‚Ñ§.pred‚Ñ§ (pos (suc (suc Z)) ‚Ñ§.+negsuc Z) ‚â° pos 1
         hhhh = ùêô'.+IdR' _ _ (cong {y = 1} ‚Ñ§.pred‚Ñ§
          ((cong (‚Ñ§._+ ‚Ñ§.negsuc Z) (‚Ñ§.pos+ _ _) ‚àô
           sym (‚Ñ§.+Assoc 1 (pos (suc Z)) (‚Ñ§.negsuc Z))) ‚àô
            ùêô'.+IdR' _ _ (‚Ñ§.-Cancel (pos (suc Z))) ))

         SSZ‚â§SSSZ : [ pos (suc (suc Z)) / 1 ] ‚Ñö.‚â§ [ pos (suc (suc (suc Z))) / 1 ]
         SSZ‚â§SSSZ = (‚Ñö.<Weaken‚â§ [ pos (suc (suc Z)) / 1 ] [ pos (suc (suc (suc Z))) / 1 ] Z<SZ)

         1/SSSZ‚â§1/SSZ : rat [ pos 1 / 2+ suc Z ] ‚â§·µ£ rat [ pos 1 / 2+ Z ]
         1/SSSZ‚â§1/SSZ = ‚â§‚Ñö‚Üí‚â§·µ£ _ _
           (‚Ñö.inv‚Ñö‚â§inv‚Ñö ([ pos (suc (suc (suc Z))) / 1 ] , _)
            ([ pos (suc (suc Z)) / 1 ] , _) SSZ‚â§SSSZ)

         x*‚àà : clp (rat x) ‚àà  (interval‚Ñô (rat [ 1 /  (2+ (suc Z)) ])
                        (rat [ pos (suc (suc (suc Z))) / 1 ]))
         x*‚àà =
          let (‚â§x , x‚â§) = ((clamp·µ£‚àà‚Ñöinterval‚Ñô _ _ 1/SSZ‚â§SSZ (rat x)))
          in isTrans‚â§·µ£ _ _ _ 1/SSSZ‚â§1/SSZ ‚â§x , isTrans‚â§·µ£ _ _ _ x‚â§
            (‚â§‚Ñö‚Üí‚â§·µ£ _ _ SSZ‚â§SSSZ)

         y*‚àà : clp (rat y) ‚àà (interval‚Ñô (rat [ 1 /  (2+ (suc Z)) ])
                        (rat [ pos (suc (suc (suc Z))) / 1 ]))
         y*‚àà =
          let (‚â§y , y‚â§) = ((clamp·µ£‚àà‚Ñöinterval‚Ñô _ _ 1/SSZ‚â§SSZ (rat y)))
          in (isTrans‚â§·µ£ _ _ _ 1/SSSZ‚â§1/SSZ ‚â§y) ,
               isTrans‚â§·µ£ _ _ _ y‚â§ ((‚â§‚Ñö‚Üí‚â§·µ£ _ _ SSZ‚â§SSSZ))



         zzWW : _ ‚â§·µ£ _
         zzWW =
          (expPreDer.slope-monotone-preLn
             (suc Z) (clp (rat x) , 0<clp (rat x)) (clp (rat y) , 0<clp (rat y))
              SSZ‚Çä SSSZ‚Çä
              (snd x*‚àà) (fst x*‚àà)
              (snd y*‚àà) (fst y*‚àà)
              (snd 2+Z‚àà) (fst 2+Z‚àà)
              (snd 3+Z‚àà) (fst 3+Z‚àà)
              x<y (<‚Ñö‚Üí<·µ£ _ _ Z<SZ) (snd ((clamp·µ£‚àà‚Ñöinterval‚Ñô _ _ 1/SSZ‚â§SSZ (rat x)))) (snd y*‚àà))

      opaque
       unfolding _+·µ£_
       zzzz* : fst K·µ£ ¬∑·µ£ abs·µ£ (clp u -·µ£ clp v) ‚â§·µ£ abs·µ£ (lnX' u -·µ£ lnX' v)
       zzzz* =
         ‚â§Cont‚ÇÇ
            {Œª u v ‚Üí fst K·µ£ ¬∑·µ£ abs·µ£ (clp u -·µ£ clp v)}
            {Œª u v ‚Üí abs·µ£ (lnX' u -·µ£ lnX' v)}
            (cont‚àò‚ÇÇ (IsContinuous‚àò _ _
               (IsContinuous¬∑·µ£L (fst K·µ£))
               IsContinuousAbs·µ£)
              (cont‚ÇÇ‚àò  (contNE‚ÇÇ sumR)
                clpCount
                (IsContinuous‚àò _ _
                  IsContinuous-·µ£ clpCount)) )
            (cont‚àò‚ÇÇ IsContinuousAbs·µ£
              (cont‚ÇÇ‚àò  (contNE‚ÇÇ sumR)
                lnX'Cont
                (IsContinuous‚àò _ _
                  IsContinuous-·µ£ lnX'Cont)
                ))
            (‚Ñö.elimBy‚â°‚äé<
               (Œª x y X ‚Üí
                 subst2 (_‚â§·µ£_ ‚àò (fst K·µ£ ¬∑·µ£_))
                   ((minusComm-abs·µ£ (clp (rat x)) (clp (rat y))))
                   (minusComm-abs·µ£ (lnX' (rat x)) (lnX' (rat y)))
                   X)
               (Œª x ‚Üí ‚â°·µ£Weaken‚â§·µ£ _ _
                    (ùêë'.0RightAnnihilates' _ _ (cong abs·µ£ (+-·µ£ _)
                      ‚àô abs·µ£-rat 0)
                     ‚àô‚àô sym (abs·µ£-rat 0)
                     ‚àô‚àô cong abs·µ£ ((sym (+-·µ£ (lnX' (rat x)))))))
               Œª x y ‚Üí
                  ‚äé.rec
                   (zzzz= x y)
                   (zzzz< x y)
                   ‚àò ‚Ñö-clamp-<-cases·µ£ ([ 1 /  (1+ (suc Z)) ])
                          ([ pos (suc (suc Z)) / 1 ])
                          x y 1/SSZ<SSZ)
            u v

      zzzz : abs·µ£ (u -·µ£ v) ‚â§·µ£
             inv‚Ñù‚Çä K·µ£ .fst ¬∑·µ£ abs·µ£ (lnU -·µ£ lnV)
      zzzz =
        isTrans‚â§‚â°·µ£ _ _ _
          (invEq (z‚â§x/y‚Çä‚âÉy‚Çä¬∑z‚â§x _ _ _)
            (isTrans‚â§‚â°·µ£ _ _ _
              (isTrans‚â°‚â§·µ£ _ _ _
                (cong‚ÇÇ (Œª u v ‚Üí fst K·µ£ ¬∑·µ£ abs·µ£ (u -·µ£ v))
                  (‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â° _ _ u u‚àà)
                  (‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â° _ _ v v‚àà))
                zzzz*)
              (cong abs·µ£
                (cong‚ÇÇ _-·µ£_
                  (cong ln
                      ((‚Ñù‚Çä‚â°
                         {clp u , 0<clp u} {u , snd u‚Çä}
                        (sym (‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â° _ _ u u‚àà))))
         ‚àô‚àô cong snd (Seq-^-FI.‚à©$-‚àà‚Çô u (snd u‚Çä) Z u‚àà)
         ‚àô‚àô cong (Œª 0<u ‚Üí BDL.preLn (u , 0<u) Z (snd u‚àà) (fst u‚àà))
               (isProp<·µ£ 0 u _ _))

                  (cong ln
                      ((‚Ñù‚Çä‚â°
                         {clp v , 0<clp v} {v , snd v‚Çä}
                        (sym (‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â° _ _ v v‚àà))))
         ‚àô‚àô cong snd (Seq-^-FI.‚à©$-‚àà‚Çô v (snd v‚Çä) Z v‚àà)
         ‚àô‚àô cong (Œª 0<v ‚Üí BDL.preLn (v , 0<v) Z (snd v‚àà) (fst v‚àà))
               (isProp<·µ£ 0 v _ _))
                  ))))
          (¬∑·µ£Comm _ _)

^·µ£¬∑ : (x : ‚Ñù‚Çä) (a b : ‚Ñù) ‚Üí
      fst ((x ^·µ£ a) ^·µ£ b) ‚â° fst (x ^·µ£ (a ¬∑·µ£ b))
^·µ£¬∑ x a  =
   ‚â°Continuous _ _
      (cont-^ _)
       (IsContinuous‚àò _ _ (cont-^ x)
         (IsContinuous¬∑·µ£L a))
     Œª b' ‚Üí
      ^-rat _ _ ‚àô
         ‚â°Continuous _ _
           (IsContinuousWithPred‚àòIsContinuous _ _
             _ (Œª v ‚Üí snd (x ^·µ£ v)) (IsContinuous^‚Ñö b') (cont-^ x))
           (IsContinuous‚àò _ _ (cont-^ x)
         (IsContinuous¬∑·µ£R (rat b')))
           (Œª a' ‚Üí
           (cong (fst ‚àò _^‚Ñö b') (‚Ñù‚Çä‚â° (^-rat x a')))
             ‚àô cong fst (^‚Ñö-¬∑ x a' b') ‚àô
             sym (^-rat _ _) ‚àô cong (fst ‚àò (x ^·µ£_)) (rat¬∑·µ£rat _ _))
           a

inj-ln : ‚àÄ x y ‚Üí ln x ‚â° ln y ‚Üí x ‚â° y
inj-ln (x , 0<x) (y , 0<y) =
  Seq-^-FI.‚à©$-elimProp2 x 0<x y 0<y
   {Œª (_ , ln-x) (_ , ln-y) ‚Üí ln-x ‚â° ln-y ‚Üí (x , 0<x) ‚â° (y , 0<y) }
   (Œª _ _ ‚Üí isPropŒ† Œª _ ‚Üí isSet‚Ñù‚Çä _ _)
   Œª Z x‚àà y‚àà p ‚Üí
     PT.rec (isSet‚Ñù‚Çä _ _)
       (Œª (_ , isLip) ‚Üí
         ‚Ñù‚Çä‚â° (Invlipschitz-‚Ñù‚Üí‚Ñù‚Üíinjective-interval _ _ _ _ isLip x x‚àà y y‚àà
          p))
      (invLipPreLn Z)

ln[a^b‚Çä]‚â°b‚Çä¬∑ln[a] : ‚àÄ a (b : ‚Ñù‚Çä) ‚Üí ln (a ^·µ£ (fst b)) ‚â° fst b ¬∑·µ£ ln a
ln[a^b‚Çä]‚â°b‚Çä¬∑ln[a] a (b , 0<b) =
   limitUniq _ _ _ _ (zz b) (zz' b 0<b) ‚àô ¬∑·µ£Comm _ _
  where
  zz : ‚àÄ b ‚Üí derivativeOf (fst ‚àò a ^·µ£_  ‚àò (b ¬∑·µ£_)) at 0 is
        (ln (a ^·µ£ b))
  zz b = substDer
     (Œª r ‚Üí ^·µ£¬∑ _ _ _)
     (subst (derivativeOf (fst ‚àò (a ^·µ£ b) ^·µ£_ ) at 0 is_)
     ((ùêë'.¬∑IdL' _ _ (^·µ£0 _))) (^-der (a ^·µ£ b) 0))

  zz'' : ‚àÄ b (0<b : 0 <·µ£ b) ‚Üí derivativeOf (fst ‚àò a ^·µ£_  ‚àò (b ¬∑·µ£_))
                at 0 Ôºè·µ£‚Çä (b , 0<b) is (b ¬∑·µ£ (fst (a ^·µ£ 0) ¬∑·µ£ ln a))
  zz'' b 0<b = derivative-‚àò¬∑ _ _ _ (b , 0<b) (^-der a 0)

  zz' : ‚àÄ b (0<b : 0 <·µ£ b) ‚Üí derivativeOf (fst ‚àò a ^·µ£_  ‚àò (b ¬∑·µ£_)) at 0 is (ln a ¬∑·µ£ b)
  zz' b 0<b = subst2 (derivativeOf (fst ‚àò a ^·µ£_  ‚àò (b ¬∑·µ£_)) at_is_)
         (ùêë'.0LeftAnnihilates _) (cong (b ¬∑·µ£_) (ùêë'.¬∑IdL' _ _ (^·µ£0 a)) ‚àô ¬∑·µ£Comm _ _) (zz'' b 0<b)

ln[a^b]‚â°b¬∑ln[a] : ‚àÄ a b ‚Üí ln (a ^·µ£ b) ‚â° b ¬∑·µ£ ln a
ln[a^b]‚â°b¬∑ln[a] a =
  ‚â°Continuous _ _
    (IsContinuousWithPred‚àòIsContinuous
     _ _ _
      (Œª x ‚Üí snd (a ^·µ£ x))
      ln-cont
      (cont-^ a)) (IsContinuous¬∑·µ£R _)
    (‚Ñö.byTrichotomy 0 ww)

  where
  ww : ‚Ñö.TrichotomyRec 0 (Œª z ‚Üí ln (a ^·µ£ rat z) ‚â° rat z ¬∑·µ£ ln a)
  ww .‚Ñö.TrichotomyRec.lt-case b b<0 =
    cong ln (‚Ñù‚Çä‚â° (^-rat _ _ ‚àô‚àô cong fst (^‚Ñö-minus _ _) ‚àô‚àô sym (^-rat _ _)))
     ‚àô‚àô ln[a^b‚Çä]‚â°b‚Çä¬∑ln[a] (inv‚Ñù‚Çä a) (rat (‚Ñö.- b) ,
      <‚Ñö‚Üí<·µ£ _ _ (‚Ñö.minus-< _ _ b<0) ) ‚àô‚àô
       (cong‚ÇÇ _¬∑·µ£_ (sym (-·µ£-rat b)) (ln-inv a) ‚àô  -·µ£¬∑-·µ£ _ _)
  ww .‚Ñö.TrichotomyRec.eq-case = (cong ln (‚Ñù‚Çä‚â° (^·µ£0 _)) ‚àô ln-1‚â°0)
    ‚àô sym (ùêë'.0LeftAnnihilates (ln a))
  ww .‚Ñö.TrichotomyRec.gt-case b 0<b =
    ln[a^b‚Çä]‚â°b‚Çä¬∑ln[a] a (rat b , <‚Ñö‚Üí<·µ£ _ _ 0<b)
