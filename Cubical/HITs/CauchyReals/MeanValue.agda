{-# OPTIONS --safe #-}

module Cubical.HITs.CauchyReals.MeanValue where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Equiv.Properties
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Function
open import Cubical.Foundations.Transport
open import Cubical.Foundations.Powerset
open import Cubical.Functions.FunExtEquiv

open import Cubical.Data.Bool as ùüö hiding (_‚â§_)
open import Cubical.Data.Nat as ‚Ñï hiding (_¬∑_;_+_)
import Cubical.Data.Nat.Mod as ‚Ñï
import Cubical.Data.Nat.Order as ‚Ñï
open import Cubical.Data.Empty as ‚ä•
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Int as ‚Ñ§ using (pos)
import Cubical.Data.Int.Order as ‚Ñ§
open import Cubical.Data.Sigma
open import Cubical.Data.Fin

open import Cubical.HITs.PropositionalTruncation as PT

open import Cubical.Data.NatPlusOne

open import Cubical.Data.Rationals as ‚Ñö using (‚Ñö ; [_/_])
open import Cubical.Data.Rationals.Order as ‚Ñö using
  ( _‚Ñö‚Çä+_ ; 0<_ ; ‚Ñö‚Çä ; _‚Ñö‚Çä¬∑_ ; ‚Ñö‚Çä‚â°)
open import Cubical.Data.Rationals.Order.Properties as ‚Ñö
 using (inv‚Ñö‚Çä;/2‚Çä;/3‚Çä;/4‚Çä;x/2<x;inv‚Ñö;_‚Ñö^‚Åø_;_‚Ñö‚Çä^‚Åø_)


open import Cubical.HITs.CauchyReals.Base
open import Cubical.HITs.CauchyReals.Lems
open import Cubical.HITs.CauchyReals.Closeness
open import Cubical.HITs.CauchyReals.Lipschitz
open import Cubical.HITs.CauchyReals.Order
open import Cubical.HITs.CauchyReals.Continuous
open import Cubical.HITs.CauchyReals.Multiplication
open import Cubical.HITs.CauchyReals.Inverse
open import Cubical.HITs.CauchyReals.Sequence
open import Cubical.HITs.CauchyReals.Derivative
open import Cubical.HITs.CauchyReals.Integration
open import Cubical.HITs.CauchyReals.Exponentiation
open import Cubical.HITs.CauchyReals.ExponentiationDer

open import Cubical.Tactics.CommRingSolver



Dichotomy‚Ñù' : ‚àÄ x y z ‚Üí x <·µ£ z ‚Üí
              ‚à• (y <·µ£ z) ‚äé (x <·µ£ y) ‚à•‚ÇÅ
Dichotomy‚Ñù' x y z x<z =
  PT.map2
   (Œª (q  , x<q  , q<x+Œî)
      (q' , y-Œî<q' , q'<y)
     ‚Üí ‚äé.map
         (Œª q'‚â§q ‚Üí
           isTrans<·µ£ _ _ _
             (a-b<c‚áía<c+b _ _ _ y-Œî<q')
             (isTrans<‚â°·µ£ _ _ _
               (<·µ£-+o _ _ _
                 ((isTrans‚â§<·µ£ _ _ _ (‚â§‚Ñö‚Üí‚â§·µ£ q' _ q'‚â§q)
                  q<x+Œî )))
               ((sym (+·µ£Assoc _ _ _)  ‚àô
                cong (x +·µ£_) (sym (¬∑DistL+ _ _ _) ‚àô
                 ùêë'.¬∑IdR' _ _ (+·µ£-rat _ _ ‚àô dec‚Ñö‚â°·µ£?) ))
                ‚àô Lùêë.lem--05 {x} {z})))
         (Œª q<q' ‚Üí
           isTrans<·µ£ _ _ _ (isTrans<·µ£ _ _ _
               x<q
               (<‚Ñö‚Üí<·µ£ q _ q<q'))
             q'<y)
         (‚Ñö.Dichotomy‚Ñö q' q))
    (dense‚Ñöin‚Ñù x (x +·µ£ (fst Œî‚Çä))
      (isTrans‚â°<·µ£ _ _ _
        (sym (+IdR x)) (<·µ£-o+ _ _ _ (snd Œî‚Çä))))
    (dense‚Ñöin‚Ñù (y -·µ£ (fst Œî‚Çä)) y
      (isTrans<‚â°·µ£ _ _ _
         (<·µ£-o+ _ _ _
           (isTrans<‚â°·µ£ _ _ _ (-·µ£<·µ£ _ _ (snd Œî‚Çä)) (-·µ£-rat 0)))
         (+IdR y)))

 where
 Œî‚Çä : ‚Ñù‚Çä
 Œî‚Çä = (z -·µ£ x , x<y‚Üí0<y-x _ _ x<z) ‚Çä¬∑·µ£ ‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ 1 / 2 ] , _)

Bishop-Proposition7 : ‚àÄ n (f : Fin n ‚Üí ‚Ñù)
 ‚Üí 0 <·µ£ foldlFin {n = n} (Œª a k ‚Üí a +·µ£ f k) 0 (idfun _)
 ‚Üí ‚àÉ[ k ‚àà Fin n ] 0 <·µ£ f k
Bishop-Proposition7 zero f x = ‚ä•.rec (isIrrefl<·µ£ 0 x)
Bishop-Proposition7 (suc n) f x =
  PT.rec squash‚ÇÅ
  (Œª (Œµ , 0<Œµ , Œµ<‚àë) ‚Üí
    let Œµ‚Çä = (Œµ , ‚Ñö.<‚Üí0< Œµ (<·µ£‚Üí<‚Ñö 0 Œµ 0<Œµ))
    in PT.rec squash‚ÇÅ
          (‚äé.rec
            (Œª f0<Œµ/2 ‚Üí
              let zz = isTrans<‚â°·µ£ _ _ _ (isTrans<·µ£ _ _ _
                       (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä (/2‚Çä Œµ‚Çä))) (isTrans‚â°<·µ£ _ _ _
                        (sym Lùêë.lem--04 ‚àô
                          cong‚ÇÇ _+·µ£_ refl (+·µ£-rat _ _
                           ‚àô cong rat (‚Ñö.Œµ/2+Œµ/2‚â°Œµ Œµ)))
                        (<·µ£Monotone+·µ£ _ _ _ _
                         (-·µ£<·µ£ _ _ f0<Œµ/2)
                         (isTrans<‚â°·µ£ _ _ _ Œµ<‚àë
                           (foldFin+0·µ£ n (fsuc) (f) _
                            ‚àô cong‚ÇÇ _+·µ£_ (+IdL _) refl)))))
                          (Lùêë.lem--04 ‚àô foldFin+map n 0 f fsuc (idfun _))
                  z = Bishop-Proposition7 n (f ‚àò fsuc) zz
              in PT.map ((_ ,_) ‚àò snd) z)
            (‚à£_‚à£‚ÇÅ ‚àò (_ ,_)))
         ((Dichotomy‚Ñù' 0 (f fzero) (rat (fst (/2‚Çä Œµ‚Çä))) (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä (/2‚Çä Œµ‚Çä))) )))
  (dense‚Ñöin‚Ñù 0 _ x)




-- uDerivativeOf‚Ñô‚Üíat : ‚àÄ P f f' x x‚àà
--    ‚Üí uDerivativeOf‚Ñô P , f is f'
--    ‚Üí derivativeOf‚Ñô P , f at (x , x‚àà) is (f' x x‚àà)
-- uDerivativeOf‚Ñô‚Üíat P f f' x x‚àà X Œµ =
--   PT.map (Œª  Œª X' h h‚àà 0ÔºÉh ‚à£h‚à£<Œµ
--     ‚Üí X' x x‚àà h h‚àà 0ÔºÉh
--       (isTrans‚â°<·µ£ _ _ _
--         (-abs·µ£ h ‚àô cong abs·µ£ (sym (+IdL _)))
--         ‚à£h‚à£<Œµ)) {!X ?!}


Fin-‚àÄA‚äé‚àÉB : ‚àÄ n ‚Üí (A B : Fin n ‚Üí Type‚ÇÄ)
           ‚Üí (‚àÄ k ‚Üí ‚à• A k ‚äé B k ‚à•‚ÇÅ)
           ‚Üí ‚à• (‚àÄ k ‚Üí A k) ‚äé Œ£ _ B ‚à•‚ÇÅ

Fin-‚àÄA‚äé‚àÉB zero A B ab? = ‚à£ inl (‚ä•.rec ‚àò ¬¨Fin0) ‚à£‚ÇÅ
Fin-‚àÄA‚äé‚àÉB (suc n) A B ab? =
  PT.map2
     (‚äé.rec (Œª a0 ‚Üí
       ‚äé.map (Œª ‚àÄkA ‚Üí
              Œª { (zero , _) ‚Üí subst A (to‚Ñï-injective refl) a0
                ; (suc k , l , p) ‚Üí
                  subst A (to‚Ñï-injective refl) (‚àÄkA (k , l ,
                    injSuc (sym (+-suc _ _) ‚àô p)))
                })
        Œª (k , bk) ‚Üí _ , bk) (Œª b0 _ ‚Üí inr (_ , b0)))
    (ab? fzero)
    (Fin-‚àÄA‚äé‚àÉB n (A ‚àò fsuc) (B ‚àò fsuc) (ab? ‚àò fsuc))

Œµ<abs‚ÜíŒµ<‚äé<-Œµ : ‚àÄ (Œµ : ‚Ñù‚Çä) x ‚Üí fst Œµ <·µ£ abs·µ£ x ‚Üí
                        (x <·µ£ -·µ£ (fst Œµ)) ‚äé (fst Œµ <·µ£ x)
Œµ<abs‚ÜíŒµ<‚äé<-Œµ Œµ x Œµ<‚à£x‚à£ =

   ‚äé.map (Œª x<0 ‚Üí isTrans‚â°<·µ£ _ _ _
        (sym (-·µ£Invol _) ‚àô
         cong -·µ£_ (sym (abs·µ£Neg _ x<0))) (-·µ£<·µ£ _ _ Œµ<‚à£x‚à£))
      (Œª 0<x ‚Üí isTrans<‚â°·µ£ _ _ _ Œµ<‚à£x‚à£ (abs·µ£Pos _ 0<x))
   (invEq (ÔºÉ‚âÉ0<dist x 0)
      (isTrans<‚â°·µ£ _ _ _
        (isTrans<·µ£ _ _ _ (snd Œµ) Œµ<‚à£x‚à£)
        (cong abs·µ£ (sym (ùêë'.+IdR' _ _ (-·µ£-rat 0))))))
 where
 -Œµ<Œµ = isTrans<·µ£ _ _ _
    (isTrans<‚â°·µ£ _ _ _
      (-·µ£<·µ£ _ _ (snd Œµ))
      (-·µ£-rat 0))
    (snd Œµ)

equalPartitionStrict‚àÉ : ‚àÄ a b ‚Üí a <·µ£ b ‚Üí (Œµ : ‚Ñö‚Çä) ‚Üí
 ‚àÉ[ pa ‚àà Partition[ a , b ] ] (isStrictPartition pa √ó mesh‚â§·µ£ pa (rat (fst Œµ)))
equalPartitionStrict‚àÉ a b a<b Œµ =
  PT.map2 w
    (dense‚Ñöin‚Ñù a (a +·µ£ fst Œ∑)
      (isTrans‚â°<·µ£ _ _ _
        (sym (+IdR a)) (<·µ£-o+ _ _ _ (snd Œ∑))))
    (dense‚Ñöin‚Ñù (b -·µ£ fst Œ∑) b
     ((isTrans<‚â°·µ£ _ _ _
         (<·µ£-o+ _ _ _
           (isTrans<‚â°·µ£ _ _ _ (-·µ£<·µ£ _ _ (snd Œ∑)) (-·µ£-rat 0)))
         (+IdR b))))

  where
  Œî‚Çä : ‚Ñù‚Çä
  Œî‚Çä = _ , x<y‚Üí0<y-x _ _ a<b
  Œ∑ : ‚Ñù‚Çä
  Œ∑ = min·µ£‚Çä (Œî‚Çä ‚Çä¬∑·µ£ (‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ 1 / 2 ] , _))) (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ)

  w : _
  w (a' , a<a' , a'<a+Œ∑) (b' , b-Œ∑<b' , b'<b) =
    w' , ww' , www'
   where
   h = min‚â§·µ£ (fst (Œî‚Çä ‚Çä¬∑·µ£ (‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ 1 / 2 ] , _)))) (fst (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ))
   a'<b' = <·µ£‚Üí<‚Ñö _ _
     (isTrans<·µ£ _ _ _
       a'<a+Œ∑
       (isTrans‚â§<·µ£ _ _ _
         (a+b‚â§c‚áíb‚â§c-b _ _ _
           (isTrans‚â°‚â§·µ£ _ _ _
             (+·µ£Comm _ _
              ‚àô sym (+·µ£Assoc _ _ _))
              (b‚â§c-b‚áía+b‚â§c _ _ _
               (isTrans‚â§‚â°·µ£ _ _ _
                   (‚â§·µ£Monotone+·µ£ _ _ _ _ h h)
                   (sym
                    (¬∑DistL+ (fst Œî‚Çä) (rat [ 1 / 2 ]) (rat [ 1 / 2 ]))
                    ‚àô ùêë'.¬∑IdR' _ _ (+·µ£-rat _ _ ‚àô
                     dec‚Ñö‚â°·µ£?))))))
         b-Œ∑<b'))
   rtp = RefinableTaggedPartition[_,_].tpTP
     (rtp-1/n a' b' (‚Ñö.<Weaken‚â§ a' b' a'<b')) Œµ

   module eqp = Partition[_,_] (fst (fst rtp))
   w' : Partition[ a , b ]
   w' .len = suc (suc eqp.len)
   w' .pts = eqp.pts'
   w' .a‚â§pts k = isTrans‚â§·µ£ _ _ _
       (<·µ£Weaken‚â§·µ£ _ _ a<a') (eqp.a‚â§pts' k)
   w' .pts‚â§b k = isTrans‚â§·µ£ _ _ _ (eqp.pts'‚â§b k)
         (<·µ£Weaken‚â§·µ£ _ _ b'<b)
   w' .pts‚â§pts = eqp.pts'‚â§pts'

   hlpr : ‚àÄ k k< k<' ‚Üí pts' w' (suc k , k<) ‚â° eqp.pts' (k , k<')
   hlpr k (zero , p) (l , p') =
     ‚ä•.rec (znots (inj-m+
         (+-zero k ‚àô injSuc (injSuc p) ‚àô sym p' ‚àô +-comm l (suc k)
       ‚àô sym (+-suc k l))))
   hlpr k k<@(suc l , snd‚ÇÅ) k<' =
    cong {x = k , _} {(k , k<')}
      eqp.pts' (to‚Ñï-injective refl)

   ww' : isStrictPartition w'
   ww' (zero , zero , p) = ‚ä•.rec (znots (injSuc p))
   ww' (zero , suc l , p) = a<a'
   ww' (suc zero , zero , p) = ‚ä•.rec (znots (injSuc (injSuc p)))
   ww' (suc (suc k) , zero , p) = b'<b
   ww' (suc k , suc l , p) =
     subst2 _<·µ£_
       (sym (hlpr k (snd (finj (suc k , suc l , p))) _))
       (sym (hlpr (suc k) (snd (fsuc (suc k , suc l , p)))
           (snd (fsuc (k , l , _)))))
       (Integration.isStrictEqualPartition (rat a') (rat b')
        _ (<‚Ñö‚Üí<·µ£ _ _ a'<b')
        _
         (k , l , injSuc (sym (+-suc _ _) ‚àô injSuc p)))

   www' : mesh‚â§·µ£ w' (rat (fst Œµ))
   www' (zero , zero , p) = ‚ä•.rec (znots (injSuc p))
   www' (zero , suc l , p) =
     isTrans‚â§·µ£ _ _ _
       (<·µ£Weaken‚â§·µ£ _ _ (a<c+b‚áía-c<b _ _ _ a'<a+Œ∑))
       (min‚â§·µ£' (fst (Œî‚Çä ‚Çä¬∑·µ£ (‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ 1 / 2 ] , _)))) (fst (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ)))
   www' (suc zero , zero , p) = ‚ä•.rec (znots (injSuc (injSuc p)))
   www' (suc (suc k) , zero , p) =
     isTrans‚â§·µ£ _ _ _
       (<·µ£Weaken‚â§·µ£ _ _ (a-b<c‚áía-c<b _ _ _ b-Œ∑<b'))
       (min‚â§·µ£' (fst (Œî‚Çä ‚Çä¬∑·µ£ (‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ 1 / 2 ] , _)))) (fst (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ)))
   www' (suc k , suc l , p) =
     isTrans‚â°‚â§·µ£ _ _ _
       (cong‚ÇÇ _-·µ£_
         (hlpr (suc k) (snd (fsuc (suc k , suc l , p)))
           (snd (fsuc (k , l , _))))
         (hlpr k (snd (finj (suc k , suc l , p))) _))
       (snd rtp (k , l , injSuc (sym (+-suc _ _) ‚àô injSuc p)))


allOnOneSideLemma : ‚àÄ n (Œµ : ‚Ñù‚Çä) (f : Fin (suc n) ‚Üí ‚Ñù)
            ‚Üí (‚àÄ k ‚Üí abs·µ£ (f (fsuc k) -·µ£ f (finj k)) <·µ£ fst Œµ )
            ‚Üí (‚àÄ k ‚Üí (f k <·µ£ -·µ£ (fst Œµ  ¬∑·µ£ rat [ 1 / 2 ]))
                ‚äé (fst Œµ ¬∑·µ£ rat [ 1 / 2 ] <·µ£ f k))

            ‚Üí (‚àÄ k ‚Üí f k <·µ£ -·µ£ (fst Œµ  ¬∑·µ£ rat [ 1 / 2 ])) ‚äé
              (‚àÄ k ‚Üí fst Œµ  ¬∑·µ£ rat [ 1 / 2 ] <·µ£ f k)
allOnOneSideLemma zero Œµ f fŒî f‚äé =
  ‚äé.map
    (Œª f0 k ‚Üí isTrans‚â°<·µ£ _ _ _ (cong f (sym (snd (isContrFin1) k) )) f0)
    (Œª f0 k ‚Üí isTrans<‚â°·µ£ _ _ _ f0 (cong f (snd (isContrFin1) k)))
    (f‚äé fzero)
allOnOneSideLemma (suc n) Œµ f fŒî f‚äé =
  ‚äé.map
    (Œª fs ‚Üí ‚äé.rec
           (Œª f0< ‚Üí
             Œª { (zero , p) ‚Üí
                   isTrans‚â°<·µ£ _ _ _ (cong f (to‚Ñï-injective refl)) f0<
               ; (suc k , p) ‚Üí
                  isTrans‚â°<·µ£ _ _ _ (cong f (to‚Ñï-injective refl))
                   (fs (k , ‚Ñï.pred-‚â§-pred p))})
           (Œª <f0 _ ‚Üí
              ‚ä•.rec
                 (isAsym<·µ£ (fst Œµ)
                           (abs·µ£ (f (fsuc fzero) -·µ£ f (finj fzero)))
                   (isTrans<‚â§·µ£ _ _ _
                     (isTrans‚â°<·µ£ _ _ _
                     ((sym (ùêë'.¬∑IdR' _ _ (+·µ£-rat _ _ ‚àô
                       dec‚Ñö‚â°·µ£?))
                      ‚àô ¬∑DistL+ _ _ _ )
                      ‚àô cong‚ÇÇ _+·µ£_
                        (sym (-·µ£Invol _))
                        refl)
                      (<·µ£Monotone+·µ£ _ _ _ _ (-·µ£<·µ£ _ _ (fs fzero)) (<f0)))
                      (isTrans‚â§‚â°·µ£ _ _ _
                        (‚â§abs·µ£ _)
                        (cong abs·µ£ (+·µ£Comm _ _)
                          ‚àô minusComm-abs·µ£ _ _)))
                     (fŒî fzero)
                     ))
       (f‚äé (finj fzero)))
    (Œª fs ‚Üí ‚äé.rec
           (Œª f0< ‚Üí ‚ä•.rec
                 ((isAsym<·µ£ (fst Œµ)
                           (abs·µ£ (f (fsuc fzero) -·µ£ f (finj fzero)))
                  ((isTrans<‚â§·µ£ _ _ _
                     (isTrans‚â°<·µ£ _ _ _
                     ((sym (ùêë'.¬∑IdR' _ _ (+·µ£-rat _ _ ‚àô
                       dec‚Ñö‚â°·µ£?))
                      ‚àô ¬∑DistL+ _ _ _ )
                      ‚àô cong‚ÇÇ _+·µ£_ refl
                              (sym (-·µ£Invol _))
                        )
                          (isTrans<‚â°·µ£ _ _ _
                           (<·µ£Monotone+·µ£ _ _ _ _
                           (fs fzero) (-·µ£<·µ£ _ _  (f0<)))
                           (+·µ£Comm _ _ ‚àô
                             cong‚ÇÇ _+·µ£_
                              (cong (-·µ£_ ‚àò f) (to‚Ñï-injective refl))
                               refl)))
                      (isTrans‚â§‚â°·µ£ _ _ _
                        (‚â§abs·µ£ _)
                        (cong abs·µ£ (+·µ£Comm _ _))))))
                           (fŒî fzero)))
           (Œª <f0 ‚Üí
               Œª { (zero , p) ‚Üí
                     isTrans<‚â°·µ£ _ _ _ <f0 (cong f (to‚Ñï-injective refl))
                 ; (suc k , p) ‚Üí
                   isTrans<‚â°·µ£ _ _ _ (fs (k , ‚Ñï.pred-‚â§-pred p))
                      (cong f (to‚Ñï-injective refl))})
       (f‚äé fzero))
    (allOnOneSideLemma n Œµ (f ‚àò fsuc)
      ((Œª {a} ‚Üí isTrans‚â°<·µ£ _ _ _
       (cong (Œª ffa ‚Üí abs·µ£ (f (fsuc (fsuc a)) -·µ£ f ffa))
         (to‚Ñï-injective refl) ))
       ‚àò (fŒî ‚àò fsuc))
       (f‚äé ‚àò fsuc))


Rolle'sTheorem : ‚àÄ a b ‚Üí a <·µ£ b ‚Üí ‚àÄ a‚àà b‚àà f f'
  ‚Üí IsUContinuous‚Ñô (interval‚Ñô a b) f'
  ‚Üí uDerivativeOf‚Ñô (interval‚Ñô a b) , f is f'
  ‚Üí f a a‚àà ‚â° f b b‚àà
  ‚Üí ‚àÄ (Œµ : ‚Ñö‚Çä) ‚Üí ‚àÉ[ (x‚ÇÄ , x‚àà) ‚àà Œ£ _ (_‚àà interval‚Ñô a b) ]
            abs·µ£ (f' x‚ÇÄ x‚àà) <·µ£ rat (fst Œµ)
Rolle'sTheorem a b a<b a‚àà b‚àà f f' ucf udf fa‚â°fb Œµ =
  PT.rec squash‚ÇÅ (w (ucf Œµ)) (udf (/2‚Çä Œµ))

 where
 w : _ ‚Üí _ ‚Üí _
 w (Œ¥ , X) (Œ¥' , X') = PT.rec squash‚ÇÅ ww
   (equalPartitionStrict‚àÉ a b a<b Œ¥‚äìŒ¥')
  where
  Œ¥‚äìŒ¥' = ‚Ñö.min‚Çä (/2‚Çä Œ¥) (/2‚Çä Œ¥')


  ww : _
  ww (pa , str-pa , mesh-pa) =
    PT.rec squash‚ÇÅ
      (‚äé.rec (‚àÄcase ‚àò (Œµ<abs‚ÜíŒµ<‚äé<-Œµ (‚Ñö‚Çä‚Üí‚Ñù‚Çä (/2‚Çä Œµ)) _ ‚àò_))
             (‚à£_‚à£‚ÇÅ ‚àò (_ ,_) ‚àò snd))
     (Fin-‚àÄA‚äé‚àÉB (suc (suc Pa.len))
       _ _
        Œª k ‚Üí PT.map (Iso.fun ‚äé-swap-Iso) (Dichotomy‚Ñù'
                        (rat (fst (/2‚Çä Œµ)))
                   (abs·µ£ (f' (Pa.pts' (finj k))
                     (Pa.a‚â§pts' (finj k) , Pa.pts'‚â§b (finj k))))
                   ((rat (fst Œµ)))
                   (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.x/2<x Œµ))))
   where
   module Pa = Partition[_,_] pa



   z : ‚àÄ f f' ‚Üí f a a‚àà ‚â° f b b‚àà ‚Üí
          ((x : ‚Ñù) (x‚àà : x ‚àà interval‚Ñô a b) (h : ‚Ñù)
           (h‚àà : x +·µ£ h ‚àà interval‚Ñô a b) (0ÔºÉh : rat [ pos 0 / 1+ 0 ] ÔºÉ h) ‚Üí
           abs·µ£ h <·µ£ rat (fst Œ¥') ‚Üí
           abs·µ£ (f' x x‚àà -·µ£ differenceAt‚Ñô (interval‚Ñô a b) f x h 0ÔºÉh x‚àà h‚àà) <·µ£
           rat (fst (/2‚Çä Œµ)))
        ‚Üí ‚àÉ-syntax (Fin (suc (suc Pa.len)))
        (Œª k ‚Üí (-·µ£ rat (fst Œµ))
          <·µ£ f' (Pa.pts' (finj k)) (Pa.a‚â§pts' (finj k) , Pa.pts'‚â§b (finj k)))
   z f f' fa‚â°fb X' = PT.map
          (map-snd
           Œª {l} X ‚Üí 0<y-x‚Üíx<y _ _
             (isTrans<‚â°·µ£ _ _ _
              (isTrans‚â°<·µ£ _ _ _ (sym (ùêë'.0LeftAnnihilates _))
              (invEq (z/y<x‚Çä‚âÉz<y‚Çä¬∑x _ _ (_ , x<y‚Üí0<y-x _ _ (str-pa l)))
                (isTrans<‚â°·µ£ _ _ _ X
                (¬∑·µ£Comm _ _))))
                (cong‚ÇÇ _+·µ£_ refl
                 (sym (-·µ£Invol _)))))
        (Bishop-Proposition7 (suc (suc Pa.len))
        (Œª k ‚Üí (f' (Pa.pts' (finj k))
                     (Pa.a‚â§pts' (finj k) , Pa.pts'‚â§b (finj k))
                    +·µ£ rat (fst Œµ))
             ¬∑·µ£ (Pa.pts' (fsuc k) -·µ£ Pa.pts' (finj k)))
        (isTrans‚â°<·µ£ _ _ _
           (sym (ùêë'.+InvR' _ _ (sym fa‚â°fb))
             ‚àô cong‚ÇÇ _-·µ£_
                (cong (f b) (‚àà-isProp (interval‚Ñô a b) _ _ _))
                (cong (f a) (‚àà-isProp (interval‚Ñô a b) _ _ _))
             ‚àô sym (deltas-sum (suc (suc Pa.len))
               Œª k ‚Üí f (Pa.pts' k) (Pa.a‚â§pts' k , Pa.pts'‚â§b k)))
           (foldFin+< (suc Pa.len) 0 0
             _ _ (idfun _) (idfun _) (‚â§·µ£-refl 0)
             <f)))

    where
    <f : (k : Fin (suc (suc Pa.len))) ‚Üí
          f (Pa.pts' (fsuc k)) _ -·µ£ f (Pa.pts' (finj k)) _
          <·µ£
          (f' (Pa.pts' (finj k)) _ +·µ£ rat (fst Œµ))
          ¬∑·µ£
          (Pa.pts' (fsuc k) -·µ£ Pa.pts' (finj k))
    <f k = isTrans<·µ£ _ _ _ (isTrans<‚â°·µ£ _ _ _
      (fst (z/y<x‚Çä‚âÉz<y‚Çä¬∑x _ _ _) fromX') (¬∑·µ£Comm _ _))
           (<·µ£-¬∑·µ£o _ _
             (_ , x<y‚Üí0<y-x _ _ (str-pa k))
             (<·µ£-o+ _ _ _ (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.x/2<x Œµ))))
     where
     fromX' : _ <·µ£ f' (Pa.pts' (finj k)) _ +·µ£ rat (fst (/2‚Çä Œµ))
     fromX' = (isTrans‚â°<·µ£ _ _ _
       (cong‚ÇÇ _¬∑·µ£_
         (cong‚ÇÇ _-·µ£_
           (cong (uncurry f)
             (Œ£‚â°Prop (‚àà-isProp (interval‚Ñô a b)) (sym Lùêë.lem--05)) )
           refl)
        (inv‚Ñù‚Çä‚â°inv‚Ñù (_ , x<y‚Üí0<y-x _ _ (str-pa k)) _))
       (isTrans<‚â°·µ£ _ _ _ (a-b<c‚áía<c+b _ _ _
        (isTrans‚â§<·µ£ _ _ _
         (‚â§abs·µ£ _)
         (isTrans‚â°<·µ£ _ _ _
          (minusComm-abs·µ£ _ _)
            (X' (Pa.pts' (finj k)) (Pa.a‚â§pts' (finj k) , Pa.pts'‚â§b (finj k))
        (Pa.pts' (fsuc k) -·µ£ Pa.pts' (finj k))
        (subst-‚àà (interval‚Ñô a b)
          (sym Lùêë.lem--05)
           (Pa.a‚â§pts' (fsuc k) , Pa.pts'‚â§b (fsuc k)))
        (invEq (ÔºÉŒî _ _) (inl (str-pa k)))
        (isTrans‚â°<·µ£ _ _ _
          (abs·µ£NonNeg _ (x‚â§y‚Üí0‚â§y-x _ _ (Pa.pts'‚â§pts' k)))
          (isTrans‚â§<·µ£ _ _ _
            (isTrans‚â§·µ£ _ _ _
              (mesh-pa k)
              (‚â§‚Ñö‚Üí‚â§·µ£ (fst Œ¥‚äìŒ¥')  (fst (/2‚Çä Œ¥'))
                (‚Ñö.min‚â§' (fst (/2‚Çä Œ¥)) (fst (/2‚Çä Œ¥')))))
            (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.x/2<x Œ¥'))))))))
            (+·µ£Comm _ _)))


   z' : ‚àÉ-syntax (Fin (suc (suc Pa.len)))
        (Œª k ‚Üí f' (Pa.pts' (finj k)) _ <·µ£ rat (fst Œµ))
   z' = PT.map (map-snd (<·µ£-·µ£ _ _))
          (z (Œª x x‚àà ‚Üí -·µ£ (f x x‚àà))
               (Œª x x‚àà ‚Üí -·µ£ (f' x x‚àà))
                (cong -·µ£_ fa‚â°fb)
                 Œª x x‚àà h h‚àà 0ÔºÉh h<Œ¥' ‚Üí
                  isTrans‚â°<·µ£ _ _ _
                     (cong abs·µ£ (sym (-·µ£Distr _ _)) ‚àô
                      sym (-abs·µ£ _)
                        ‚àô cong (abs·µ£ ‚àò (f' x x‚àà +·µ£_))
                          (cong (_¬∑·µ£ inv‚Ñù h 0ÔºÉh)
                            (sym (-·µ£Distr _ _))
                            ‚àô -·µ£¬∑ _ _) )
                     (X' x x‚àà h h‚àà 0ÔºÉh h<Œ¥'))


   ‚àÄcase : ((a‚ÇÅ : Fin (suc (suc Pa.len))) ‚Üí
            (f' (Pa.pts' (finj a‚ÇÅ)) _ <·µ£ -·µ£ fst (‚Ñö‚Çä‚Üí‚Ñù‚Çä (/2‚Çä Œµ)))
            ‚äé
            (fst (‚Ñö‚Çä‚Üí‚Ñù‚Çä (/2‚Çä Œµ)) <·µ£ f' (Pa.pts' (finj a‚ÇÅ)) _)) ‚Üí
            ‚àÉ (Œ£ ‚Ñù (_‚àà interval‚Ñô a b))
            (Œª v ‚Üí abs·µ£ (f' (v .fst) (v .snd)) <·µ£ rat (fst Œµ))
   ‚àÄcase =
        ‚äé.rec
          (Œª ‚àÄf< ‚Üí PT.map
              (Œª (k , U) ‚Üí
                _ ,
                 isTrans‚â°<·µ£ _ _ _
                   (abs-max _)
                    (max<-lem _ _ _
                      (isTrans<·µ£ _ _ _ (‚àÄf< k)
                        (isTrans<·µ£ _ 0 _
                          (isTrans<‚â°·µ£ _ _ _
                            (-·µ£<·µ£ _ _
                              (snd ((‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ) ‚Çä¬∑·µ£ ‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ 1 / 2 ] , _))))
                           (-·µ£-rat 0)) (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ))))
                      (isTrans<‚â°·µ£ _ _ _ (-·µ£<·µ£ _ _ U) (-·µ£Invol _))))
              (z f f' fa‚â°fb X'))
          (Œª ‚àÄ<f ‚Üí PT.map
             (Œª (k , U) ‚Üí
                _ ,
                 isTrans‚â°<·µ£ _ _ _
                   (abs-max _)
                    (max<-lem _ _ _ U
                      (isTrans<·µ£ _ _ _
                        (-·µ£<·µ£ _ _ (‚àÄ<f k))
                        ((isTrans<·µ£ _ 0 _
                          (isTrans<‚â°·µ£ _ _ _
                            (-·µ£<·µ£ _ _
                              (snd ((‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ) ‚Çä¬∑·µ£ ‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ 1 / 2 ] , _))))
                           (-·µ£-rat 0)) (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ)))))))
             z')
     ‚àò  allOnOneSideLemma (suc Pa.len) (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ) _
             (fst (‚àº‚âÉabs<Œµ _ _ Œµ) ‚àò
               Œª k ‚Üí (X _ _ _ _
                (invEq (‚àº‚âÉabs<Œµ _ _ Œ¥)
                  (isTrans‚â§<·µ£ _ _ _
                    (isTrans‚â°‚â§·µ£ _ _ _
                      (cong {x = finj (fsuc k)} {(fsuc (finj k))}
                       (Œª aa ‚Üí abs·µ£ (Pa.pts' aa
                         +·µ£ -·µ£ Pa.pts' (finj (finj k))))
                         (to‚Ñï-injective refl)
                        ‚àô abs·µ£Pos _ (x<y‚Üí0<y-x _ _
                        (str-pa (finj k))))
                      (mesh-pa (finj k)))
                    (<‚Ñö‚Üí<·µ£ _ _
                     (‚Ñö.isTrans‚â§< (fst Œ¥‚äìŒ¥') _ _
                       (‚Ñö.min‚â§ (fst (/2‚Çä Œ¥)) (fst (/2‚Çä Œ¥')))
                       (‚Ñö.x/2<x Œ¥))
                     )))))
     ‚àò (‚äé.map (flip (isTrans<‚â°·µ£ _ _ _) (cong -·µ£_ (rat¬∑·µ£rat (fst Œµ) _)))
              (isTrans‚â°<·µ£ _ _ _ (sym (rat¬∑·µ£rat (fst Œµ) _)))
         ‚àò_)

meanValue : ‚àÄ a b ‚Üí a <·µ£ b ‚Üí ‚àÄ a‚àà b‚àà f f'
       ‚Üí  IsUContinuous‚Ñô (interval‚Ñô a b) f'
       ‚Üí  uDerivativeOf‚Ñô (interval‚Ñô a b) , f is f'
       ‚Üí (Œµ : ‚Ñö‚Çä) ‚Üí
          ‚àÉ[ (x‚ÇÄ , x‚àà) ‚àà Œ£ _ (_‚àà interval‚Ñô a b) ]
           abs·µ£ ((f b b‚àà -·µ£ f a a‚àà)  -·µ£ f' x‚ÇÄ x‚àà ¬∑·µ£ (b -·µ£ a)) <·µ£ rat (fst Œµ)
meanValue a b a<b a‚àà b‚àà f f' ucf udf =
  PT.rec (isPropŒ† Œª _ ‚Üí squash‚ÇÅ) (Œª uch' ‚Üí Rolle'sTheorem a b a<b a‚àà b‚àà
     h h' uch' udh ha‚â°hb)
      uch


 where
  h h' : (x : ‚Ñù) ‚Üí x ‚àà interval‚Ñô a b ‚Üí ‚Ñù
  h x x‚àà = ((x -·µ£ a) ¬∑·µ£ (f b b‚àà -·µ£ f a a‚àà))
                -·µ£ f x x‚àà ¬∑·µ£ (b -·µ£ a)

  h' x x‚àà = (f b b‚àà -·µ£ f a a‚àà) -·µ£ f' x x‚àà ¬∑·µ£ (b -·µ£ a)

  uch : ‚à• IsUContinuous‚Ñô (interval‚Ñô a b) h' ‚à•‚ÇÅ
  uch = PT.map (Œª z ‚Üí IsUContinuous‚àò‚Ñô (interval‚Ñô a b)
       (IsUContinuous‚àò (IsUContinuous+·µ£L (f b b‚àà -·µ£ f a a‚àà))
          (subst IsUContinuous (funExt Œª x ‚Üí ¬∑-·µ£ _ _)
            z))
       ucf) (IsUContinuous¬∑·µ£R (-·µ£ (b -·µ£ a)))

  udh0 : _
  udh0 = +uDerivative‚Ñô (interval‚Ñô a b)
    (Œª x _ ‚Üí ((x -·µ£ a) ¬∑·µ£ (f b b‚àà -·µ£ f a a‚àà)))
     (Œª _ _ ‚Üí (f b b‚àà -·µ£ f a a‚àà))
    _ _
    (subst2 (uDerivativeOf‚Ñô (interval‚Ñô a b) ,_is_)
      (funExt‚ÇÇ Œª x x‚àà ‚Üí ¬∑·µ£Comm _ _)
      (funExt‚ÇÇ Œª x x‚àà ‚Üí ùêë'.¬∑IdR' _ _ (+IdR 1))
      (C¬∑uDerivative‚Ñô (interval‚Ñô a b)
       _ _ _ (+uDerivative‚Ñô (interval‚Ñô a b)
        _ _ _ _
        (uDerivative‚Ñô-id (interval‚Ñô a b))
        (uDerivative‚Ñô-const (interval‚Ñô a b) (-·µ£ a))) ))
    (C¬∑uDerivative‚Ñô (interval‚Ñô a b) (-·µ£ (b -·µ£ a))
     _ _
     udf)

  udh : uDerivativeOf‚Ñô interval‚Ñô a b , h is h'
  udh = subst2 (uDerivativeOf‚Ñô (interval‚Ñô a b) ,_is_)
           (funExt‚ÇÇ Œª x x‚àà ‚Üí
            cong‚ÇÇ _+·µ£_ refl (-·µ£¬∑ _ _ ‚àô cong -·µ£_ (¬∑·µ£Comm _ _)))
           (funExt‚ÇÇ Œª x x‚àà ‚Üí
            cong‚ÇÇ _+·µ£_ refl (-·µ£¬∑ _ _ ‚àô cong -·µ£_ (¬∑·µ£Comm _ _)))
           udh0


  ha‚â°hb : h a a‚àà ‚â° h b b‚àà
  ha‚â°hb = ùêë'.+IdL' _ _ (ùêë'.0LeftAnnihilates' _ _ (+-·µ£ a))
    ‚àô sym (-·µ£¬∑ _ _)
    ‚àô cong (_¬∑·µ£ (b -·µ£ a)) (sym Lùêë.lem--063)
    ‚àô ùêë'.¬∑DistL- (f b b‚àà -·µ£ f a a‚àà) (f b b‚àà) (b -·µ£ a)
    ‚àô cong‚ÇÇ _-·µ£_ (¬∑·µ£Comm _ _) refl

nullDerivative‚Üíconst : ‚àÄ a b a‚àà b‚àà ‚Üí a <·µ£ b ‚Üí ‚àÄ f
       ‚Üí uDerivativeOf‚Ñô (interval‚Ñô a b) , f is (Œª _ _ ‚Üí 0)
       ‚Üí f a a‚àà ‚â° f b b‚àà
nullDerivative‚Üíconst a b a‚àà b‚àà a<b f udf  =
  eq‚Ñù _ _ Œª Œµ ‚Üí
    PT.rec (isProp‚àº _ _ _)
      (Œª (_ , X) ‚Üí
        sym‚àº _ _ _ (invEq (‚àº‚âÉabs<Œµ _ _ _)
          (isTrans‚â°<·µ£ _ _ _
            (cong abs·µ£
              (sym (ùêë'.+IdR' _ _
                (cong -·µ£_ (ùêë'.0LeftAnnihilates (b -·µ£ a))
                 ‚àô -·µ£-rat 0))))
            X)))
      (meanValue a b a<b a‚àà b‚àà f
        (Œª _ _ ‚Üí 0) (Œª Œµ‚ÇÅ ‚Üí 1 , Œª _ _ _ _ _ ‚Üí refl‚àº _ _) udf Œµ)

