{-# OPTIONS --safe --lossy-unification #-}

module Cubical.HITs.CauchyReals.Order where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Structure
open import Cubical.Foundations.Function
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Powerset

open import Cubical.Data.Bool as ùüö hiding (_‚â§_)
open import Cubical.Data.Nat as ‚Ñï hiding (_¬∑_;_+_)
open import Cubical.Data.Empty as ‚ä•
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Int as ‚Ñ§
import Cubical.Data.Int.Order as ‚Ñ§
open import Cubical.Data.Sigma
open import Cubical.Relation.Nullary

open import Cubical.HITs.PropositionalTruncation as PT
open import Cubical.HITs.SetQuotients as SQ renaming (_/_ to _//_)


open import Cubical.Data.Rationals as ‚Ñö using (‚Ñö ; [_/_])
open import Cubical.Data.Rationals.Order as ‚Ñö using
  ( _‚Ñö‚Çä+_ ; 0<_ ; ‚Ñö‚Çä ; _‚Ñö‚Çä¬∑_ ; ‚Ñö‚Çä‚â°)
open import Cubical.Data.Rationals.Order.Properties as ‚Ñö
 using (inv‚Ñö‚Çä;/2‚Çä;/3‚Çä;/4‚Çä)

open import Cubical.Data.NatPlusOne

open import Cubical.Data.NatPlusOne
open import Cubical.Foundations.Path
open import Cubical.Foundations.CartesianKanOps

open import Cubical.Relation.Binary

open import Cubical.HITs.CauchyReals.Base
open import Cubical.HITs.CauchyReals.Lems
open import Cubical.HITs.CauchyReals.Closeness
open import Cubical.HITs.CauchyReals.Lipschitz



sumR : NonExpanding‚ÇÇ ‚Ñö._+_
sumR .NonExpanding‚ÇÇ.cL q r s =
 ‚Ñö.‚â°Weaken‚â§  (‚Ñö.abs ((q ‚Ñö.+ s) ‚Ñö.- (r ‚Ñö.+ s))) (‚Ñö.abs (q ‚Ñö.- r))
  (sym $ cong ‚Ñö.abs (lem--036 {q} {r} {s}))
sumR .NonExpanding‚ÇÇ.cR q r s =
   ‚Ñö.‚â°Weaken‚â§ (‚Ñö.abs ((q ‚Ñö.+ r) ‚Ñö.- (q ‚Ñö.+ s))) (‚Ñö.abs (r ‚Ñö.- s))
   (sym $ cong ‚Ñö.abs (lem--037 {r} {s} {q}))

infix  8 -·µ£_
infixl 6 _+·µ£_ _-·µ£_


opaque
 _+·µ£_ : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù
 _+·µ£_ = NonExpanding‚ÇÇ.go sumR

 +·µ£-‚àº : ‚àÄ u v r Œµ ‚Üí u ‚àº[ Œµ ] v ‚Üí (u +·µ£ r) ‚àº[ Œµ ] (v +·µ£ r)
 +·µ£-‚àº u v r =
   NonExpanding‚ÇÇ.go‚àºL sumR r u v

 +·µ£-rat : ‚àÄ p q ‚Üí rat p +·µ£ rat q ‚â° rat (p ‚Ñö.+ q)
 +·µ£-rat p q = refl


 +·µ£Comm : ‚àÄ x y ‚Üí x +·µ£ y ‚â° y +·µ£ x
 +·µ£Comm x y =
   nonExpanding‚ÇÇExt ‚Ñö._+_ (flip ‚Ñö._+_)
     sumR (NonExpanding‚ÇÇ-flip ‚Ñö._+_ sumR) ‚Ñö.+Comm x y ‚àô
    (NonExpanding‚ÇÇ-flip-go ‚Ñö._+_ sumR
      (NonExpanding‚ÇÇ-flip ‚Ñö._+_ sumR) x y )



 +·µ£Assoc : ‚àÄ x y z ‚Üí  x +·µ£ (y +·µ£ z) ‚â° (x +·µ£ y) +·µ£ z
 +·µ£Assoc x y z =
   (fst (‚àº‚âÉ‚â° _ _)) (NonExpanding‚ÇÇ-Lemmas.gAssoc‚àº _
     sumR +·µ£Comm ‚Ñö.+Assoc x y z)


minR : NonExpanding‚ÇÇ ‚Ñö.min
minR = w

 where

 w' : (q r s : ‚Ñö) ‚Üí ‚Ñö.abs (‚Ñö.min q s ‚Ñö.- ‚Ñö.min r s) ‚Ñö.‚â§ ‚Ñö.abs (q ‚Ñö.- r)
 w' q r s =
  let s' = ‚Ñö.min r q
  in subst (‚Ñö._‚â§ (‚Ñö.abs (q ‚Ñö.- r)))
     (cong {x = ‚Ñö.min (‚Ñö.max s' q) s ‚Ñö.-
                   ‚Ñö.min (‚Ñö.max s' r) s}
           {y = ‚Ñö.min q s ‚Ñö.- ‚Ñö.min r s}
            ‚Ñö.abs
       (cong‚ÇÇ (Œª q' r' ‚Üí ‚Ñö.min q' s ‚Ñö.-
                   ‚Ñö.min r' s)
                 (‚Ñö.maxComm s' q ‚àô‚àô
                   cong (‚Ñö.max q) (‚Ñö.minComm r q)
                  ‚àô‚àô ‚Ñö.maxAbsorbLMin q r )
             ((‚Ñö.maxComm s' r ‚àô ‚Ñö.maxAbsorbLMin r q )
               ))) (‚Ñö.clampDist s' s r q)


 w : NonExpanding‚ÇÇ ‚Ñö.min
 w .NonExpanding‚ÇÇ.cL = w'
 w .NonExpanding‚ÇÇ.cR q r s =
   subst2 (Œª u v ‚Üí ‚Ñö.abs (u ‚Ñö.- v) ‚Ñö.‚â§ ‚Ñö.abs (r ‚Ñö.- s))
        (‚Ñö.minComm r q) (‚Ñö.minComm s q) (w' r s q)



maxR : NonExpanding‚ÇÇ ‚Ñö.max
maxR = w
 where

 h : ‚àÄ q r s ‚Üí  ‚Ñö.min (‚Ñö.max s q) (‚Ñö.max s (‚Ñö.max r q)) ‚â° ‚Ñö.max q s
 h q r s = cong (‚Ñö.min (‚Ñö.max s q)) (cong (‚Ñö.max s) (‚Ñö.maxComm r q)
             ‚àô ‚Ñö.maxAssoc s q r) ‚àô
      ‚Ñö.minAbsorbLMax (‚Ñö.max s q) r ‚àô ‚Ñö.maxComm s q

 w' : (q r s : ‚Ñö) ‚Üí ‚Ñö.abs (‚Ñö.max q s ‚Ñö.- ‚Ñö.max r s) ‚Ñö.‚â§ ‚Ñö.abs (q ‚Ñö.- r)
 w' q r s =
  let s' = ‚Ñö.max s (‚Ñö.max r q)
  in subst (‚Ñö._‚â§ (‚Ñö.abs (q ‚Ñö.- r)))
       ( cong {x = ‚Ñö.min (‚Ñö.max s q) s' ‚Ñö.-
                   ‚Ñö.min (‚Ñö.max s r) s'}
           {y = ‚Ñö.max q s ‚Ñö.- ‚Ñö.max r s}
            ‚Ñö.abs
            (cong‚ÇÇ ‚Ñö._-_
              (h q r s)
              (cong (‚Ñö.min (‚Ñö.max s r))
                 (cong (‚Ñö.max s) (‚Ñö.maxComm r q))
                ‚àô h r q s)) )
       (‚Ñö.clampDist s s' r q )

 w : NonExpanding‚ÇÇ ‚Ñö.max
 w .NonExpanding‚ÇÇ.cL = w'
 w .NonExpanding‚ÇÇ.cR q r s =
   subst2 (Œª u v ‚Üí ‚Ñö.abs (u ‚Ñö.- v) ‚Ñö.‚â§ ‚Ñö.abs (r ‚Ñö.- s))
        (‚Ñö.maxComm r q) (‚Ñö.maxComm s q)
         (w' r s q)

min·µ£ = NonExpanding‚ÇÇ.go minR
max·µ£ = NonExpanding‚ÇÇ.go maxR

clamp·µ£ : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù
clamp·µ£ d u x = min·µ£ (max·µ£ d x) u

clamp·µ£-rat : ‚àÄ a b x ‚Üí clamp·µ£ (rat a) (rat b) (rat x) ‚â° rat (‚Ñö.clamp a b x)
clamp·µ£-rat a b x = refl

Lipschitz-‚Ñù‚Üí‚Ñù-1‚ÜíNonExpanding : ‚àÄ f
  ‚Üí Lipschitz-‚Ñù‚Üí‚Ñù 1 f ‚Üí ‚ü® NonExpanding‚Çö f ‚ü©
Lipschitz-‚Ñù‚Üí‚Ñù-1‚ÜíNonExpanding f x _ _ _ =
  subst‚àº (‚Ñö.¬∑IdL _) ‚àòS x _ _ _


max·µ£Comm : ‚àÄ x y ‚Üí NonExpanding‚ÇÇ.go maxR x y ‚â° NonExpanding‚ÇÇ.go maxR y x
max·µ£Comm x y =
  nonExpanding‚ÇÇExt ‚Ñö.max (flip ‚Ñö.max)
    maxR (NonExpanding‚ÇÇ-flip ‚Ñö.max maxR) ‚Ñö.maxComm x y ‚àô
   (NonExpanding‚ÇÇ-flip-go ‚Ñö.max maxR
     (NonExpanding‚ÇÇ-flip ‚Ñö.max maxR) x y )

min·µ£Comm : ‚àÄ x y ‚Üí NonExpanding‚ÇÇ.go minR x y ‚â° NonExpanding‚ÇÇ.go minR y x
min·µ£Comm x y =
  nonExpanding‚ÇÇExt ‚Ñö.min (flip ‚Ñö.min)
    minR (NonExpanding‚ÇÇ-flip ‚Ñö.min minR) ‚Ñö.minComm x y ‚àô
   (NonExpanding‚ÇÇ-flip-go ‚Ñö.min minR
     (NonExpanding‚ÇÇ-flip ‚Ñö.min minR) x y )



clamp-lim : ‚àÄ d u x y ‚Üí
         clamp·µ£ d u (lim x y) ‚â° lim (Œª Œµ ‚Üí clamp·µ£ d u (x Œµ)) _
clamp-lim d u x y = cong (flip min·µ£ u) (max·µ£Comm _ _)
  ‚àô congLim' _ _ _ Œª _ ‚Üí cong (flip min·µ£ u) (max·µ£Comm _ _)



inj-rat : ‚àÄ q r ‚Üí rat q ‚â° rat r ‚Üí q ‚â° r
inj-rat q r x with (‚Ñö.discrete‚Ñö q r)
... | yes p = p
... | no ¬¨p =
  let (zz , zz') = ‚àº‚Üí‚àº' (rat q) (rat r) _
           $ invEq (‚àº‚âÉ‚â° (rat q) (rat r)) x (‚Ñö.abs (q ‚Ñö.- r) ,
               ‚Ñö.‚â†‚Üí0<abs q r ¬¨p)
  in ‚ä•.rec (‚Ñö.isIrrefl< (‚Ñö.abs (q ‚Ñö.- r))
        (‚Ñö.absFrom<√ó< (‚Ñö.abs (q ‚Ñö.- r)) (q ‚Ñö.- r)
          zz zz'))



max·µ£Idem : ‚àÄ x ‚Üí max·µ£ x x ‚â° x
max·µ£Idem = Elim‚Ñù-Prop.go w
 where
 w : Elim‚Ñù-Prop (Œª z ‚Üí max·µ£ z z ‚â° z)
 w .Elim‚Ñù-Prop.ratA = cong rat ‚àò ‚Ñö.maxIdem
 w .Elim‚Ñù-Prop.limA x p x‚ÇÅ =
   snd (NonExpanding‚ÇÇ.Œ≤-lim-lim/2 maxR x p x p)
    ‚àô eq‚Ñù _ _
       Œª Œµ ‚Üí lim-lim _ _ _ (/2‚Çä Œµ)
                 (/2‚Çä (/2‚Çä Œµ)) _ _
                   (subst ‚Ñö.0<_ (cong‚ÇÇ ‚Ñö._-_
                            (‚Ñö.¬∑IdR (fst Œµ))
                            (cong (fst Œµ ‚Ñö.¬∑_) ‚Ñö.dec‚Ñö? ‚àô‚àô
                               ‚Ñö.¬∑DistL+ (fst Œµ) _ _  ‚àô‚àô
                                cong ((fst (/2‚Çä Œµ) ‚Ñö.+_))
                                  (‚Ñö.¬∑Assoc (fst Œµ) ‚Ñö.[ 1 / 2 ]
                                     ‚Ñö.[ 1 / 2 ])))
                     (snd (‚Ñö.<‚Üí‚Ñö‚Çä ((fst Œµ) ‚Ñö.¬∑ (‚Ñö.[ 3 / 4 ]))
                         (fst Œµ ‚Ñö.¬∑ 1)
                       (‚Ñö.<-o¬∑ _ _ (fst Œµ)
                         (‚Ñö.0<‚Ñö‚Çä Œµ) ‚Ñö.dec‚Ñö<?))))
                  (invEq (‚àº‚âÉ‚â°  _ _ ) (x‚ÇÅ (/2‚Çä (/2‚Çä Œµ))) _)

 w .Elim‚Ñù-Prop.isPropA _ = isSet‚Ñù _ _

infix 4 _‚â§·µ£_ _<·µ£_

open ‚Ñö.HLP

opaque

 _‚â§·µ£_ : ‚Ñù ‚Üí ‚Ñù ‚Üí Type
 u ‚â§·µ£ v = max·µ£ u v ‚â° v

 ‚â§·µ£‚Üí‚â° : ‚àÄ {u v} ‚Üí u ‚â§·µ£ v ‚Üí max·µ£ u v ‚â° v
 ‚â§·µ£‚Üí‚â° p = p

 ‚â°‚Üí‚â§·µ£ : ‚àÄ {u v} ‚Üí max·µ£ u v ‚â° v ‚Üí u ‚â§·µ£ v
 ‚â°‚Üí‚â§·µ£ p = p

 ‚â§‚Ñö‚Üí‚â§·µ£ : ‚àÄ q r ‚Üí q ‚Ñö.‚â§ r ‚Üí rat q ‚â§·µ£ rat r
 ‚â§‚Ñö‚Üí‚â§·µ£ q r x = cong rat (‚Ñö.‚â§‚Üímax q r x)

 ‚â§·µ£‚Üí‚â§‚Ñö : ‚àÄ q r ‚Üí rat q ‚â§·µ£ rat r ‚Üí q ‚Ñö.‚â§ r
 ‚â§·µ£‚Üí‚â§‚Ñö q r x = subst (q ‚Ñö.‚â§_) (inj-rat _ _ x) (‚Ñö.‚â§max q r)


 ‚â§·µ£‚âÉ‚â§‚Ñö : ‚àÄ q r ‚Üí (rat q ‚â§·µ£ rat r) ‚âÉ (q ‚Ñö.‚â§ r)
 ‚â§·µ£‚âÉ‚â§‚Ñö q r = propBiimpl‚ÜíEquiv
  (isSet‚Ñù _ _) (‚Ñö.isProp‚â§ _ _)
   (‚â§·µ£‚Üí‚â§‚Ñö q r) (‚â§‚Ñö‚Üí‚â§·µ£ q r)


 ‚â§·µ£-refl : ‚àÄ x ‚Üí x ‚â§·µ£ x
 ‚â§·µ£-refl x = max·µ£Idem x


 _Œ£<·µ£_ : ‚Ñù ‚Üí ‚Ñù ‚Üí Type
 u Œ£<·µ£ v = Œ£[ (q , r) ‚àà (‚Ñö √ó ‚Ñö) ] (u ‚â§·µ£ rat q) √ó (q ‚Ñö.< r) √ó (rat r ‚â§·µ£ v)


 _<·µ£_ : ‚Ñù ‚Üí ‚Ñù ‚Üí Type
 u <·µ£ v = ‚àÉ[ (q , r) ‚àà (‚Ñö √ó ‚Ñö) ] (u ‚â§·µ£ rat q) √ó (q ‚Ñö.< r) √ó (rat r ‚â§·µ£ v)

 <·µ£-impl : ‚àÄ u v ‚Üí (u <·µ£ v) ‚âÉ (‚àÉ[ (q , r) ‚àà (‚Ñö √ó ‚Ñö) ] (u ‚â§·µ£ rat q) √ó (q ‚Ñö.< r) √ó (rat r ‚â§·µ£ v))
 <·µ£-impl _ _ = idEquiv _

 isProp‚â§·µ£ : ‚àÄ x y ‚Üí isProp (x ‚â§·µ£ y)
 isProp‚â§·µ£ _ _ = isSet‚Ñù _ _

 isProp<·µ£ : ‚àÄ x y ‚Üí isProp (x <·µ£ y)
 isProp<·µ£ _ _ = squash‚ÇÅ


 <‚Ñö‚Üí<·µ£ : ‚àÄ q r ‚Üí q ‚Ñö.< r ‚Üí rat q <·µ£ rat r
 <‚Ñö‚Üí<·µ£ x y x<y =
   let y-x : ‚Ñö‚Çä
       y-x = ‚Ñö.<‚Üí‚Ñö‚Çä x y x<y

       x' = x ‚Ñö.+ fst (/3‚Çä (y-x))
       y' = x' ‚Ñö.+ fst (/3‚Çä (y-x))
   in ‚à£ (x' , y') ,
           ‚â§‚Ñö‚Üí‚â§·µ£ x x' (
              subst (‚Ñö._‚â§ x') (‚Ñö.+IdR x)
                    (‚Ñö.‚â§-o+ 0 (fst (/3‚Çä (y-x))) x
                     (‚Ñö.0‚â§‚Ñö‚Çä (/3‚Çä (y-x)))) )
         , subst (‚Ñö._< y') (‚Ñö.+IdR x')
                    (‚Ñö.<-o+ 0 (fst (/3‚Çä (y-x))) x'
                     (‚Ñö.0<‚Ñö‚Çä (/3‚Çä (y-x))))
         , ‚â§‚Ñö‚Üí‚â§·µ£ y' y
             (subst2 (‚Ñö._‚â§_) (‚Ñö.+IdR y')
                (lem--048 {x} {y} {‚Ñö.[ 1 / 3 ]}
                  ‚àô‚àô
                   cong {x = ‚Ñö.[ 1 / 3 ] ‚Ñö.+ ‚Ñö.[ 1 / 3 ] ‚Ñö.+ ‚Ñö.[ 1 / 3 ]}
                     {1} (Œª a ‚Üí x ‚Ñö.+ a ‚Ñö.¬∑ (y ‚Ñö.- x))
                    ‚Ñö.dec‚Ñö?
                   ‚àô‚àô (cong (x ‚Ñö.+_) (‚Ñö.¬∑IdL (y ‚Ñö.- x))
                       ‚àô lem--05))
               ((‚Ñö.‚â§-o+ 0 (fst (/3‚Çä (y-x))) y'
                     (‚Ñö.0‚â§‚Ñö‚Çä (/3‚Çä (y-x))))))  ‚à£‚ÇÅ

 <·µ£‚Üí<‚Ñö : ‚àÄ q r ‚Üí rat q <·µ£ rat r ‚Üí q ‚Ñö.< r
 <·µ£‚Üí<‚Ñö = ElimProp2.go w
  where
  w : ElimProp2 (Œª z z‚ÇÅ ‚Üí rat z <·µ£ rat z‚ÇÅ ‚Üí z ‚Ñö.< z‚ÇÅ)
  w .ElimProp2.isPropB _ _ = isProp‚Üí (‚Ñö.isProp< _ _)
  w .ElimProp2.f x y =
   PT.rec (‚Ñö.isProp< _ _)
    Œª ((x' , y') , a , b , c) ‚Üí
      ‚Ñö.isTrans<‚â§ _//_.[ x ] y' _//_.[ y ]
       (‚Ñö.isTrans‚â§< _//_.[ x ] x' y' (‚â§·µ£‚Üí‚â§‚Ñö _ _ a) b)
         (‚â§·µ£‚Üí‚â§‚Ñö _ _ c)

 <·µ£‚âÉ<‚Ñö : ‚àÄ q r ‚Üí (rat q <·µ£ rat r) ‚âÉ (q ‚Ñö.< r)
 <·µ£‚âÉ<‚Ñö q r = propBiimpl‚ÜíEquiv
  squash‚ÇÅ (‚Ñö.isProp< _ _)
   (<·µ£‚Üí<‚Ñö q r) (<‚Ñö‚Üí<·µ£ q r)


 max·µ£Assoc : ‚àÄ x y z ‚Üí max·µ£ x (max·µ£ y z) ‚â° max·µ£ (max·µ£ x y) z
 max·µ£Assoc x y z =
   (fst (‚àº‚âÉ‚â° _ _)) (NonExpanding‚ÇÇ-Lemmas.gAssoc‚àº _
     maxR max·µ£Comm ‚Ñö.maxAssoc x y z)

 min·µ£Assoc : ‚àÄ x y z ‚Üí min·µ£ x (min·µ£ y z) ‚â° min·µ£ (min·µ£ x y) z
 min·µ£Assoc x y z =
   (fst (‚àº‚âÉ‚â° _ _)) (NonExpanding‚ÇÇ-Lemmas.gAssoc‚àº _
     minR min·µ£Comm ‚Ñö.minAssoc x y z)

 isTrans‚â§·µ£ : ‚àÄ x y z ‚Üí x ‚â§·µ£ y ‚Üí y ‚â§·µ£ z ‚Üí x ‚â§·µ£ z
 isTrans‚â§·µ£ x y z u v = ((cong (max·µ£ x) (sym v)
   ‚àô max·µ£Assoc x y z) ‚àô cong (flip max·µ£ z) u) ‚àô v


 isTrans<·µ£ : ‚àÄ x y z ‚Üí x <·µ£ y ‚Üí y <·µ£ z ‚Üí x <·µ£ z
 isTrans<·µ£ x y z =
  PT.map2 Œª ((q , r) , (u , v , w))
            ((q' , r') , (u' , v' , w')) ‚Üí
             ((q , r')) ,
              (u , ‚Ñö.isTrans< q q' r' (‚Ñö.isTrans<‚â§ q r q' v
                       (‚â§·µ£‚Üí‚â§‚Ñö r q' (isTrans‚â§·µ£ _ _ _ w u')))
                         v' , w')


 isTrans‚â§<·µ£ : ‚àÄ x y z ‚Üí x ‚â§·µ£ y ‚Üí y <·µ£ z ‚Üí x <·µ£ z
 isTrans‚â§<·µ£ x y z u =
  PT.map $ map-snd Œª (v , v' , v'')
    ‚Üí isTrans‚â§·µ£ x y _ u v  , v' , v''

 isTrans<‚â§·µ£ : ‚àÄ x y z ‚Üí x <·µ£ y ‚Üí y ‚â§·µ£ z ‚Üí x <·µ£ z
 isTrans<‚â§·µ£ x y z = flip Œª u ‚Üí
  PT.map $ map-snd Œª (v , v' , v'')
    ‚Üí v  , v' , isTrans‚â§·µ£ _ y z v'' u

 isTrans‚â§‚â°·µ£ : ‚àÄ x y z ‚Üí x ‚â§·µ£ y ‚Üí y ‚â° z ‚Üí x ‚â§·µ£ z
 isTrans‚â§‚â°·µ£ x y z p q = subst (x ‚â§·µ£_) q p

 isTrans‚â°‚â§·µ£ : ‚àÄ x y z ‚Üí x ‚â° y ‚Üí y ‚â§·µ£ z ‚Üí x ‚â§·µ£ z
 isTrans‚â°‚â§·µ£ x y z p q = subst (_‚â§·µ£ z) (sym p) q

 isTrans<‚â°·µ£ : ‚àÄ x y z ‚Üí x <·µ£ y ‚Üí y ‚â° z ‚Üí x <·µ£ z
 isTrans<‚â°·µ£ x y z p q = subst (x <·µ£_) q p

 isTrans‚â°<·µ£ : ‚àÄ x y z ‚Üí x ‚â° y ‚Üí y <·µ£ z ‚Üí x <·µ£ z
 isTrans‚â°<·µ£ x y z p q = subst (_<·µ£ z) (sym p) q

 <·µ£Weaken‚â§·µ£ : ‚àÄ m n ‚Üí m <·µ£ n ‚Üí m ‚â§·µ£ n
 <·µ£Weaken‚â§·µ£ m n = PT.rec (isSet‚Ñù _ _)
  Œª ((q , q') , x , x' , x'')
    ‚Üí isTrans‚â§·µ£ _ _ _ x (isTrans‚â§·µ£ _ _ _ (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.<Weaken‚â§ _ _ x')) x'')

 ‚â°·µ£Weaken‚â§·µ£ : ‚àÄ m n ‚Üí m ‚â° n ‚Üí m ‚â§·µ£ n
 ‚â°·µ£Weaken‚â§·µ£ m n p = cong (flip max·µ£ n) p ‚àô ‚â§·µ£-refl n


 isAsym<·µ£ : BinaryRelation.isAsym _<·µ£_
 isAsym<·µ£ x y =
   PT.rec2 (isProp‚ä•)
    Œª ((q , q') , x , x' , x'')
       ((r , r') , y , y' , y'') ‚Üí
        let q<r = ‚Ñö.isTrans<‚â§ _ _ _ x' (‚â§·µ£‚Üí‚â§‚Ñö _ _ (isTrans‚â§·µ£ _ _ _ x'' y))
            r<q = ‚Ñö.isTrans<‚â§ _ _ _ y' (‚â§·µ£‚Üí‚â§‚Ñö _ _ (isTrans‚â§·µ£ _ _ _ y'' x))
        in ‚Ñö.isAsym< _ _ q<r r<q


 -·µ£R : Œ£ (‚Ñù ‚Üí ‚Ñù) (Lipschitz-‚Ñù‚Üí‚Ñù (1 , tt))
 -·µ£R = fromLipschitz (1 , _)
   ((rat ‚àò ‚Ñö.-_ ) , Œª q r Œµ x x‚ÇÅ ‚Üí
     subst‚àº {Œµ = Œµ} (sym $ ‚Ñö.¬∑IdL (fst Œµ))
      (rat-rat _ _ _ (subst ((‚Ñö.- fst Œµ) ‚Ñö.<_)
        (‚Ñö.-Distr q (‚Ñö.- r))
        (‚Ñö.minus-< (q ‚Ñö.- r) (fst Œµ) x‚ÇÅ)) (
        ‚Ñö.minus-<' (fst Œµ) ((‚Ñö.- q) ‚Ñö.- (‚Ñö.- r))
         (subst ((‚Ñö.- fst Œµ) ‚Ñö.<_)
          (sym (‚Ñö.-[x-y]‚â°y-x r q) ‚àô
            cong (‚Ñö.-_) (‚Ñö.+Comm r (‚Ñö.- q) ‚àô
              cong ((‚Ñö.- q) ‚Ñö.+_) (sym $ ‚Ñö.-Invol r))) x))))

 -·µ£_ : ‚Ñù ‚Üí ‚Ñù
 -·µ£_ = fst -·µ£R

 -·µ£-rat : ‚àÄ q ‚Üí -·µ£ (rat q) ‚â° rat (‚Ñö.- q)
 -·µ£-rat q = refl



 -·µ£-lip : Lipschitz-‚Ñù‚Üí‚Ñù 1 -·µ£_
 -·µ£-lip = snd -·µ£R

_-·µ£_ : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù
x -·µ£ y = x +·µ£ (-·µ£ y)

x-·µ£y‚â°x+·µ£[-·µ£y] : ‚àÄ x y ‚Üí x -·µ£ y ‚â° x +·µ£ -·µ£ y
x-·µ£y‚â°x+·µ£[-·µ£y] x y = refl


-·µ£-rat‚ÇÇ : ‚àÄ u q ‚Üí (rat u) -·µ£ (rat q) ‚â° rat (u ‚Ñö.- q)
-·µ£-rat‚ÇÇ u q = cong (rat u +·µ£_) (-·µ£-rat q) ‚àô +·µ£-rat _ _


opaque
 unfolding -·µ£_ _+·µ£_
 +-·µ£ : ‚àÄ x ‚Üí x -·µ£ x ‚â° 0
 +-·µ£ = fst (‚àº‚âÉ‚â° _ _) ‚àò Elim‚Ñù-Prop.go w
  where
  w : Elim‚Ñù-Prop Œª z ‚Üí (Œµ : ‚Ñö‚Çä) ‚Üí (z -·µ£ z) ‚àº[ Œµ ] 0 --(Œª z ‚Üí (z +·µ£ (-·µ£ z)) ‚â° 0)
  w .Elim‚Ñù-Prop.ratA x = invEq (‚àº‚âÉ‚â° _ _) (cong rat (‚Ñö.+InvR x)) --
  w .Elim‚Ñù-Prop.limA x p x‚ÇÅ Œµ =

     lim-rat _ _ _ (/4‚Çä Œµ) _ (dist‚Ñö0<! Œµ (ge1 +ge (neg-ge ge[ ‚Ñö.[ 1 / 4 ] ])))
       (subst‚àº (dist‚Ñö! (fst Œµ) ¬∑[ ge[ ‚Ñö.[ 1 / 2 ] ] +ge ge[ ‚Ñö.[ 1 / 4 ] ]
              ‚â° (ge1 +ge (neg-ge ge[ ‚Ñö.[ 1 / 4 ] ]))  ]) (triangle‚àº
         (NonExpanding‚ÇÇ.go‚àºR sumR (x (/4‚Çä Œµ)) (-·µ£ lim x p)
          (-·µ£ x (/4‚Çä Œµ)) (/2‚Çä Œµ) (subst‚àº (‚Ñö.¬∑IdL (fst (/2‚Çä Œµ)) ) $
           snd -·µ£R (lim x p) (x (/4‚Çä Œµ)) (/2‚Çä Œµ)
           (subst‚àº (cong fst (‚Ñö./4‚Çä+/4‚Çä‚â°/2‚Çä Œµ))
            $ sym‚àº _ _ _ $ ùï£-lim-self x p (/4‚Çä Œµ) (/4‚Çä Œµ))))
         (x‚ÇÅ ((/4‚Çä Œµ)) (/4‚Çä Œµ) )))

  w .Elim‚Ñù-Prop.isPropA _ = isPropŒ† Œª _ ‚Üí isProp‚àº _ _ _



 abs-dist : ‚àÄ q r ‚Üí ‚Ñö.abs (‚Ñö.abs' q ‚Ñö.- ‚Ñö.abs' r) ‚Ñö.‚â§ ‚Ñö.abs (q ‚Ñö.- r)
 abs-dist =
   ‚Ñö.elimBy‚â°‚äé<'
     (Œª x y ‚Üí subst2 ‚Ñö._‚â§_ (‚Ñö.absComm- _ _) (‚Ñö.absComm- _ _))
     (Œª x ‚Üí ‚Ñö.‚â°Weaken‚â§ _ _ (cong ‚Ñö.abs (‚Ñö.+InvR (‚Ñö.abs' x) ‚àô sym (‚Ñö.+InvR x))))
     Œª x Œµ ‚Üí subst (‚Ñö.abs (‚Ñö.abs' x ‚Ñö.- ‚Ñö.abs' (x ‚Ñö.+ fst Œµ)) ‚Ñö.‚â§_)
       (sym (‚Ñö.-[x-y]‚â°y-x x (x ‚Ñö.+ fst Œµ)) ‚àô sym (‚Ñö.absNeg (x ‚Ñö.- (x ‚Ñö.+ fst Œµ))
          ((subst {x = ‚Ñö.- (fst Œµ) } {(x ‚Ñö.- (x ‚Ñö.+ fst Œµ))}
            (‚Ñö._< 0) lem--050 (‚Ñö.-‚Ñö‚Çä<0 Œµ)))))

       ((‚Ñö.absFrom‚â§√ó‚â§ ((x ‚Ñö.+ fst Œµ) ‚Ñö.- x)
         (‚Ñö.abs' x ‚Ñö.- ‚Ñö.abs' (x ‚Ñö.+ fst Œµ))
          (subst2
              {x = (‚Ñö.abs (fst Œµ ‚Ñö.+ x)) ‚Ñö.+
                      ((‚Ñö.- ‚Ñö.abs' (x ‚Ñö.+ fst Œµ)) ‚Ñö.- fst Œµ)}
              {y = ‚Ñö.- ((x ‚Ñö.+ fst Œµ) ‚Ñö.- x)}
             ‚Ñö._‚â§_ (cong (‚Ñö._+ ((‚Ñö.- ‚Ñö.abs' (x ‚Ñö.+ fst Œµ)) ‚Ñö.- fst Œµ))
                       (Œª i ‚Üí ‚Ñö.abs'‚â°abs (‚Ñö.+Comm (fst Œµ) x i) i) ‚àô
                           lem--051 )
                        (Œª i ‚Üí lem--052 {fst Œµ} {‚Ñö.abs'‚â°abs x i}
                                {‚Ñö.abs' (x ‚Ñö.+ fst Œµ)} i) $
            ‚Ñö.‚â§-+o (‚Ñö.abs (fst Œµ ‚Ñö.+ x)) (fst Œµ ‚Ñö.+ ‚Ñö.abs x)
            ((‚Ñö.- ‚Ñö.abs' (x ‚Ñö.+ fst Œµ)) ‚Ñö.- fst Œµ)
              (‚Ñö.abs+pos (fst Œµ) x (‚Ñö.0<‚Ñö‚Çä Œµ)))
          (subst2 {x = ‚Ñö.abs (x ‚Ñö.+ fst Œµ ‚Ñö.+ (‚Ñö.- fst Œµ)) ‚Ñö.+
                      (‚Ñö.- ‚Ñö.abs' (x ‚Ñö.+ fst Œµ))}
                   {‚Ñö.abs' x ‚Ñö.- ‚Ñö.abs' (x ‚Ñö.+ fst Œµ)}
             ‚Ñö._‚â§_ (cong ((‚Ñö._+
                  (‚Ñö.- ‚Ñö.abs' (x ‚Ñö.+ fst Œµ))))
                    (congS ‚Ñö.abs (sym (lem--034 {x} {fst Œµ}))
                      ‚àô ‚Ñö.abs'‚â°abs _))
                   ((Œª i ‚Üí ‚Ñö.abs'‚â°abs (x ‚Ñö.+ fst Œµ) i
                    ‚Ñö.+ (‚Ñö.absNeg (‚Ñö.- fst Œµ) (‚Ñö.-‚Ñö‚Çä<0 Œµ) i) ‚Ñö.+
                       (‚Ñö.- ‚Ñö.abs' (x ‚Ñö.+ fst Œµ))) ‚àô
                        lem--053)
            $ ‚Ñö.‚â§-+o (‚Ñö.abs (x ‚Ñö.+ fst Œµ ‚Ñö.+ (‚Ñö.- fst Œµ)))
                  (‚Ñö.abs (x ‚Ñö.+ fst Œµ) ‚Ñö.+ ‚Ñö.abs (‚Ñö.- fst Œµ))
             (‚Ñö.- ‚Ñö.abs' (x ‚Ñö.+ fst Œµ))
             (‚Ñö.abs+‚â§abs+abs (x ‚Ñö.+ fst Œµ) (‚Ñö.- (fst Œµ))))))



 abs·µ£L : Œ£ (‚Ñù ‚Üí ‚Ñù) (Lipschitz-‚Ñù‚Üí‚Ñù 1)
 abs·µ£L = fromLipschitz 1 (rat ‚àò ‚Ñö.abs' , h )
  where
  h : Lipschitz-‚Ñö‚Üí‚Ñù 1 (Œª x ‚Üí rat (‚Ñö.abs' x))
  h q r Œµ x x‚ÇÅ = subst‚àº {Œµ = Œµ} (sym (‚Ñö.¬∑IdL (fst Œµ)))
     (rat-rat-fromAbs _ _ _ (
       ‚Ñö.isTrans‚â§< _ _ (fst Œµ) ((abs-dist q r))
         (‚Ñö.absFrom<√ó< (fst Œµ) (q ‚Ñö.- r) x x‚ÇÅ)))

 abs·µ£ : ‚Ñù ‚Üí ‚Ñù
 abs·µ£ = fst abs·µ£L

 abs·µ£0 : abs·µ£ 0 ‚â° 0
 abs·µ£0 = refl


 abs·µ£-lip : Lipschitz-‚Ñù‚Üí‚Ñù 1 abs·µ£
 abs·µ£-lip = snd abs·µ£L

 abs·µ£-rat' : ‚àÄ q ‚Üí abs·µ£ (rat q) ‚â° rat (‚Ñö.abs' q)
 abs·µ£-rat' q = refl

 abs·µ£-rat : ‚àÄ q ‚Üí abs·µ£ (rat q) ‚â° rat (‚Ñö.abs q)
 abs·µ£-rat q = cong rat (sym (‚Ñö.abs'‚â°abs q))

 abs·µ£-nonExpanding : ‚ü® NonExpanding‚Çö abs·µ£ ‚ü©
 abs·µ£-nonExpanding u v Œµ x =
   subst‚àº (‚Ñö.¬∑IdL _) $ snd abs·µ£L u v Œµ x

 lim‚â§rat‚Üí‚àº : ‚àÄ x y r ‚Üí (lim x y ‚â§·µ£ rat r)
                     ‚âÉ (‚àÄ (Œµ : ‚Ñö‚Çä) ‚Üí ‚àÉ[ Œ¥ ‚àà _ ]
                          Œ£ _ Œª v ‚Üí
                            (max·µ£ (x Œ¥) (rat r))
                               ‚àº'[ (fst Œµ ‚Ñö.- fst Œ¥ , v) ] (rat r) )
 lim‚â§rat‚Üí‚àº x y r =
   invEquiv (‚àº‚âÉ‚â° (max·µ£ (lim x y) (rat r)) (rat r) ) ‚àô‚Çë
     equivŒ†Cod Œª Œµ ‚Üí
       propBiimpl‚ÜíEquiv (isProp‚àº _ _ _) squash‚ÇÅ
        (‚àº‚Üí‚àº' (max·µ£ (lim x y) (rat r)) (rat r) Œµ)
        (‚àº'‚Üí‚àº (max·µ£ (lim x y) (rat r)) (rat r) Œµ)




 max·µ£-lem : ‚àÄ u v r Œµ ‚Üí u ‚àº[ Œµ ] v ‚Üí
                    (((Œµ‚ÇÅ : ‚Ñö‚Çä) ‚Üí
                       max·µ£ v (rat r) ‚àº[ Œµ‚ÇÅ ] rat r)) ‚Üí
                       max·µ£ u (rat r) ‚àº[ Œµ ] rat r
 max·µ£-lem u v r Œµ xx x =
    subst (NonExpanding‚ÇÇ.go maxR u (rat r) ‚àº[ Œµ ]_)
       (fst (‚àº‚âÉ‚â° (NonExpanding‚ÇÇ.go maxR v (rat r)) (rat r)) x )
         (NonExpanding‚ÇÇ.go‚àºL maxR (rat r) u v Œµ xx)

 0‚â§abs·µ£ : ‚àÄ x ‚Üí 0 ‚â§·µ£ abs·µ£ x
 0‚â§abs·µ£ = Elim‚Ñù-Prop.go w
  where

  w : Elim‚Ñù-Prop (Œª z ‚Üí 0 ‚â§·µ£ abs·µ£ z)
  w .Elim‚Ñù-Prop.ratA q = ‚â§‚Ñö‚Üí‚â§·µ£ 0 (‚Ñö.abs' q)
    (subst (0 ‚Ñö.‚â§_) (‚Ñö.abs'‚â°abs q) (‚Ñö.0‚â§abs q))
  w .Elim‚Ñù-Prop.limA x p x‚ÇÅ =
   let y0 = _
       zz0 = NonExpanding‚ÇÇ.Œ≤-rat-lim maxR 0 (Œª q ‚Üí (abs·µ£ (x (‚Ñö.inv‚Ñö‚Çä 1 ‚Ñö‚Çä¬∑ q))))
                y0 _

       zz = sym (congLim' _ _ _
                 Œª q ‚Üí
                    sym $ x‚ÇÅ (‚Ñö.inv‚Ñö‚Çä ([ pos 1 / (1+ 0) ] , tt) ‚Ñö‚Çä¬∑ q))
   in _‚àô_ {x = max·µ£ 0 (lim (Œª q ‚Üí (abs·µ£ (x (‚Ñö.inv‚Ñö‚Çä 1 ‚Ñö‚Çä¬∑ q)))) y0)}
        zz0 zz

  w .Elim‚Ñù-Prop.isPropA _ = isSet‚Ñù _ _


 -·µ£Invol : ‚àÄ x ‚Üí -·µ£ (-·µ£ x) ‚â° x
 -·µ£Invol = Elim‚Ñù-Prop.go w
  where
  w : Elim‚Ñù-Prop Œª x ‚Üí -·µ£ (-·µ£ x) ‚â° x
  w .Elim‚Ñù-Prop.ratA x = cong rat (‚Ñö.-Invol x)
  w .Elim‚Ñù-Prop.limA x p x‚ÇÅ =
    congLim _ _ _ _
      Œª q ‚Üí x‚ÇÅ _ ‚àô cong x (‚Ñö‚Çä‚â° (Œª i ‚Üí ‚Ñö.¬∑IdL (‚Ñö.¬∑IdL (fst q) i) i))
  w .Elim‚Ñù-Prop.isPropA x = isSet‚Ñù (-·µ£ (-·µ£ x)) x


 -·µ£Distr : ‚àÄ x y ‚Üí -·µ£ (x +·µ£ y) ‚â° (-·µ£ x) +·µ£ (-·µ£ y)
 -·µ£Distr = Elim‚Ñù-Prop2Sym.go w
  where
  w : Elim‚Ñù-Prop2Sym (Œª z z‚ÇÅ ‚Üí (-·µ£ (z +·µ£ z‚ÇÅ)) ‚â° ((-·µ£ z) +·µ£ (-·µ£ z‚ÇÅ)))
  w .Elim‚Ñù-Prop2Sym.rat-ratA r q = cong rat (‚Ñö.-Distr r q)
  w .Elim‚Ñù-Prop2Sym.rat-limA r x y x‚ÇÅ =
    cong (-·µ£_) (snd (NonExpanding‚ÇÇ.Œ≤-rat-lim' sumR r x y))
     ‚àô fromLipshitzNEŒ≤ _ _ (Œª q ‚Üí (rat r) +·µ£ (x q))
          (fst (NonExpanding‚ÇÇ.Œ≤-rat-lim' sumR r x y))
     ‚àô  (congLim _ _ _ _ Œª q ‚Üí x‚ÇÅ _ ‚àô
       cong (Œª q' ‚Üí (-·µ£ rat r) +·µ£ (-·µ£ x q')) (sym (‚Ñö‚Çä‚â° $ ‚Ñö.¬∑IdL _)))
     ‚àô cong ((rat (‚Ñö.- r)) +·µ£_) (sym (fromLipshitzNEŒ≤ _ _ x y))

  w .Elim‚Ñù-Prop2Sym.lim-limA x y x' y' x‚ÇÅ =
     cong (-·µ£_) (snd (NonExpanding‚ÇÇ.Œ≤-lim-lim/2 sumR x y x' y'))  ‚àô
      fromLipshitzNEŒ≤ _ _ (Œª q ‚Üí (x (‚Ñö./2‚Çä q)) +·µ£ (x' (‚Ñö./2‚Çä q)))
       (fst (NonExpanding‚ÇÇ.Œ≤-lim-lim/2 sumR x y x' y')) ‚àô
      congLim _ _ _ _ (Œª q ‚Üí x‚ÇÅ _ _)
      ‚àô sym (snd (NonExpanding‚ÇÇ.Œ≤-lim-lim/2 sumR _ _ _ _))
       ‚àô cong‚ÇÇ _+·µ£_ (sym (fromLipshitzNEŒ≤ _ _ x y))
            ((sym (fromLipshitzNEŒ≤ _ _ x' y')))
  w .Elim‚Ñù-Prop2Sym.isSymA x y p =
   cong (-·µ£_) (+·µ£Comm y x)
    ‚àô‚àô p  ‚àô‚àô
     +·µ£Comm (-·µ£ x) (-·µ£ y)
  w .Elim‚Ñù-Prop2Sym.isPropA x y = isSet‚Ñù (-·µ£ (x +·µ£ y)) ((-·µ£ x) +·µ£ (-·µ£ y))

 -abs·µ£ : ‚àÄ x ‚Üí abs·µ£ x ‚â° abs·µ£ (-·µ£ x)
 -abs·µ£ = Elim‚Ñù-Prop.go w
  where
  w : Elim‚Ñù-Prop Œª x ‚Üí abs·µ£ x ‚â° abs·µ£ (-·µ£ x)
  w .Elim‚Ñù-Prop.ratA x = cong rat (‚Ñö.-abs' x)
  w .Elim‚Ñù-Prop.limA x p x‚ÇÅ =
   let yy = _
   in congLim  (Œª v‚ÇÅ ‚Üí
                   Elim‚Ñù.go
                   yy
                   (x (‚Ñö.inv‚Ñö‚Çä 1 ‚Ñö‚Çä¬∑ v‚ÇÅ))) _
                   (Œª x‚ÇÇ ‚Üí Elim‚Ñù.go yy
                             (Elim‚Ñù.go
                              _
                              (x (1 ‚Ñö‚Çä¬∑ (1 ‚Ñö‚Çä¬∑ x‚ÇÇ))))) _
       Œª q ‚Üí _‚àô_ {y = Elim‚Ñù.go yy (x (1 ‚Ñö‚Çä¬∑ (1 ‚Ñö‚Çä¬∑ q)))}
        (cong (Elim‚Ñù.go yy ‚àò x) ((‚Ñö‚Çä‚â° (sym (‚Ñö.¬∑IdL _)))) ) (x‚ÇÅ _)

  w .Elim‚Ñù-Prop.isPropA x = isSet‚Ñù (abs·µ£ x) (abs·µ£ (-·µ£ x))



 -[x-y]‚â°y-x : ‚àÄ x y ‚Üí -·µ£ ( x +·µ£ (-·µ£ y) ) ‚â° y +·µ£ (-·µ£ x)
 -[x-y]‚â°y-x x y =
      -·µ£Distr x (-·µ£ y)
      ‚àô Œª i ‚Üí +·µ£Comm (-·µ£ x) (-·µ£Invol y i) i


 minusComm-abs·µ£ : ‚àÄ x y ‚Üí abs·µ£ (x +·µ£ (-·µ£ y)) ‚â° abs·µ£ (y +·µ£ (-·µ£ x))
 minusComm-abs·µ£ x y = -abs·µ£ _ ‚àô cong abs·µ£ (-[x-y]‚â°y-x x y)


 dense‚Ñöin‚Ñù : ‚àÄ u v ‚Üí u <·µ£ v ‚Üí ‚àÉ[ q ‚àà ‚Ñö ] ((u <·µ£ rat q) √ó (rat q <·µ£ v))
 dense‚Ñöin‚Ñù u v =
   PT.map Œª ((u , v) , (z , (z' , z''))) ‚Üí
             u ‚Ñö.+ ((v ‚Ñö.- u) ‚Ñö.¬∑ [ 1 / 2 ]) ,
               ‚à£ (u , u ‚Ñö.+ ((v ‚Ñö.- u) ‚Ñö.¬∑ [ 1 / 4 ]))
                 , (z , ((
                      let zz' = ‚Ñö.<-¬∑o u v [ pos 1 / 1+ 3 ]
                                 (‚Ñö.0<‚Üí< [ pos 1 / 1+ 3 ] _ ) z'

                      in subst (‚Ñö._<
                               u ‚Ñö.+ (v ‚Ñö.- u) ‚Ñö.¬∑ [ pos 1 / 1+ 3 ])
                                (cong (u ‚Ñö.+_)
                                  (‚Ñö.¬∑AnnihilL [ pos 1 / 1+ 3 ]) ‚àô ‚Ñö.+IdR u) $
                            ‚Ñö.‚â§<Monotone+ u u ([ pos 0 / 1+ 0 ]
                               ‚Ñö.¬∑ [ pos 1 / 1+ 3 ])
                            ((v ‚Ñö.- u) ‚Ñö.¬∑ [ pos 1 / 1+ 3 ])
                              (‚Ñö.isRefl‚â§ u) (
                               ‚Ñö.<-¬∑o 0 (v ‚Ñö.- u)
                                  [ pos 1 / 1+ 3 ]
                                   (‚Ñö.dec‚Ñö<? {0} {[ pos 1 / 1+ 3 ]})
                                    (‚Ñö.<‚Üí<minus u v z')))
                     , ‚â§‚Ñö‚Üí‚â§·µ£ _ _
                        (‚Ñö.‚â§-o+
                          ((v ‚Ñö.- u) ‚Ñö.¬∑ [ pos 1 / 1+ 3 ])
                          ((v ‚Ñö.- u) ‚Ñö.¬∑ [ pos 1 / 1+ 1 ])
                           u (‚Ñö.‚â§-o¬∑ [ pos 1 / 1+ 3 ]
                              [ pos 1 / 1+ 1 ] (v ‚Ñö.- u)
                               (‚Ñö.0‚â§‚Ñö‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä u v z'))
                                (‚Ñö.dec‚Ñö‚â§? {[ pos 1 / 1+ 3 ]}
                                           {[ pos 1 / 1+ 1 ]}))))) ‚à£‚ÇÅ
                 , ‚à£ (v ‚Ñö.- ((v ‚Ñö.- u) ‚Ñö.¬∑ [ 1 / 4 ]) , v) ,
                   (‚â§‚Ñö‚Üí‚â§·µ£ _ _
                      (subst
                        {x = (u ‚Ñö.+ (v ‚Ñö.- u) ‚Ñö.¬∑ [ pos 3 / 1+ 3 ])}
                        {(v ‚Ñö.- ((v ‚Ñö.- u) ‚Ñö.¬∑ [ pos 1 / 1+ 3 ]))}
                        (u ‚Ñö.+ (v ‚Ñö.- u) ‚Ñö.¬∑ [ pos 1 / 1+ 1 ] ‚Ñö.‚â§_)
                         ((cong (u ‚Ñö.+_) (‚Ñö.¬∑DistR+ _ _ _ ‚àô ‚Ñö.+Comm _ _)
                           ‚àô ‚Ñö.+Assoc _ _ _) ‚àô‚àô
                             (cong‚ÇÇ ‚Ñö._+_
                               dist‚Ñö! u ¬∑[
                                (ge1 +ge ((neg-ge ge1) ¬∑ge
                                         ge[ [ pos 3 / 1+ 3 ] ]))
                                      ‚â° (neg-ge ((neg-ge ge1) ¬∑ge
                                         ge[ [ pos 1 / 1+ 3 ] ]))   ]
                              dist‚Ñö! v ¬∑[ (( ge[ [ pos 3 / 1+ 3 ] ]))
                                      ‚â° (ge1 +ge neg-ge (
                                         ge[ [ pos 1 / 1+ 3 ] ]))   ])
                             ‚àô‚àô (‚Ñö.+Comm _ _ ‚àô sym (‚Ñö.+Assoc v
                                    (‚Ñö.- (v ‚Ñö.¬∑ [ 1 / 4 ]))
                                     (‚Ñö.- ((‚Ñö.- u) ‚Ñö.¬∑ [ 1 / 4 ])))
                               ‚àô cong (‚Ñö._+_ v)
                                   (sym (‚Ñö.¬∑DistL+ -1 _ _)) ‚àô cong (‚Ñö._-_ v)
                              (sym (‚Ñö.¬∑DistR+ v (‚Ñö.- u) [ 1 / 4 ])) ))
                          (‚Ñö.‚â§-o+
                            ((v ‚Ñö.- u) ‚Ñö.¬∑ [ pos 1 / 1+ 1 ])
                            ((v ‚Ñö.- u) ‚Ñö.¬∑ [ pos 3 / 1+ 3 ]) u
                             (‚Ñö.‚â§-o¬∑ [ pos 1 / 1+ 1 ] [ pos 3 / 1+ 3 ]
                               (v ‚Ñö.- u) ((‚Ñö.0‚â§‚Ñö‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä u v z')))
                                 ((‚Ñö.dec‚Ñö‚â§? {[ pos 1 / 1+ 1 ]}
                                           {[ pos 3 / 1+ 3 ]})))
                                   )) , (
                    subst ((v ‚Ñö.- ((v ‚Ñö.- u) ‚Ñö.¬∑ [ pos 1 / 1+ 3 ])) ‚Ñö.<_)
                     (‚Ñö.+IdR v) (‚Ñö.<-o+ (‚Ñö.- ((v ‚Ñö.- u) ‚Ñö.¬∑ [ 1 / 4 ])) 0 v
                        (‚Ñö.-‚Ñö‚Çä<0 (‚Ñö.<‚Üí‚Ñö‚Çä u v z' ‚Ñö‚Çä¬∑ ([ pos 1 / 1+ 3 ] , _)))) , z'')) ‚à£‚ÇÅ




‚Ñù‚Çä : Type
‚Ñù‚Çä = Œ£ _ Œª r ‚Üí 0 <·µ£ r

‚Ñù‚ÇÄ‚Çä : Type
‚Ñù‚ÇÄ‚Çä = Œ£ _ Œª r ‚Üí 0 ‚â§·µ£ r


isSet‚Ñù‚Çä : isSet ‚Ñù‚Çä
isSet‚Ñù‚Çä = isSetŒ£ isSet‚Ñù (Œª _ ‚Üí isProp‚ÜíisSet (isProp<·µ£ _ _))

isSet‚Ñù‚ÇÄ‚Çä : isSet ‚Ñù‚ÇÄ‚Çä
isSet‚Ñù‚ÇÄ‚Çä = isSetŒ£ isSet‚Ñù (Œª _ ‚Üí isProp‚ÜíisSet (isProp‚â§·µ£ _ _))


‚Ñù‚Çä‚â° : {x y : ‚Ñù‚Çä} ‚Üí fst x ‚â° fst y ‚Üí x ‚â° y
‚Ñù‚Çä‚â° = Œ£‚â°Prop Œª _ ‚Üí isProp<·µ£ _ _


‚Ñù‚ÇÄ‚Çä‚â° : {x y : ‚Ñù‚ÇÄ‚Çä} ‚Üí fst x ‚â° fst y ‚Üí x ‚â° y
‚Ñù‚ÇÄ‚Çä‚â° = Œ£‚â°Prop Œª _ ‚Üí isProp‚â§·µ£ _ _


‚Ñö‚Çä‚Üí‚Ñù‚Çä : ‚Ñö‚Çä ‚Üí ‚Ñù‚Çä
‚Ñö‚Çä‚Üí‚Ñù‚Çä (x , y) = rat x , <‚Ñö‚Üí<·µ£ 0 x (‚Ñö.0<‚Üí< x y)

dec‚Ñö‚â°·µ£? : ‚àÄ {x y} ‚Üí {ùüö.True (‚Ñö.discrete‚Ñö x y)} ‚Üí  (rat x ‚â° rat y)
dec‚Ñö‚â°·µ£? {x} {y} {p} = cong rat (‚Ñö.dec‚Ñö? {x} {y} {p})

dec‚Ñö<·µ£? : ‚àÄ {x y} ‚Üí {ùüö.True (‚Ñö.<Dec x y)} ‚Üí  (rat x <·µ£ rat y)
dec‚Ñö<·µ£? {x} {y} {p} = <‚Ñö‚Üí<·µ£ x y (‚Ñö.dec‚Ñö<? {x} {y} {p})

dec‚Ñö‚â§·µ£? : ‚àÄ {x y} ‚Üí {ùüö.True (‚Ñö.‚â§Dec x y)} ‚Üí  (rat x ‚â§·µ£ rat y)
dec‚Ñö‚â§·µ£? {x} {y} {p} = ‚â§‚Ñö‚Üí‚â§·µ£ x y (‚Ñö.dec‚Ñö‚â§? {x} {y} {p})

instance
  fromNat‚Ñù‚Çä : HasFromNat ‚Ñù‚Çä
  fromNat‚Ñù‚Çä = record {
     Constraint = Œª { zero ‚Üí ‚ä• ; _ ‚Üí Unit }
   ; fromNat = Œª { zero {{()}}  ; (suc n) ‚Üí
     (rat [ pos (suc n) / 1 ]) , <‚Ñö‚Üí<·µ£ _ _
       (‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _ (‚Ñ§.suc-‚â§-suc ‚Ñ§.zero-‚â§pos)) }}


fromNat+·µ£ : ‚àÄ n m ‚Üí fromNat n +·µ£ fromNat m ‚â° fromNat (n ‚Ñï.+ m)
fromNat+·µ£ n m = +·µ£-rat _ _ ‚àô cong rat (‚Ñö.‚Ñï+‚Üí‚Ñö+ n m)

isIncrasing : (‚Ñù ‚Üí ‚Ñù) ‚Üí Type‚ÇÄ
isIncrasing f = ‚àÄ x y ‚Üí x <·µ£ y ‚Üí f x <·µ£ f y

isPropIsIncrasing : ‚àÄ f ‚Üí isProp (isIncrasing f)
isPropIsIncrasing f = isPropŒ†3 Œª _ _ _ ‚Üí isProp<·µ£ _ _


‚Ñöinterval‚Ñô : ‚Ñö ‚Üí ‚Ñö ‚Üí ‚Ñô ‚Ñö
‚Ñöinterval‚Ñô a b x = ((a ‚Ñö.‚â§ x) √ó (x ‚Ñö.‚â§ b)) ,
  isProp√ó (‚Ñö.isProp‚â§ _ _)  (‚Ñö.isProp‚â§ _ _)


interval‚Ñô : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñô ‚Ñù
interval‚Ñô a b x = ((a ‚â§·µ£ x) √ó (x ‚â§·µ£ b)) ,
  isProp√ó (isProp‚â§·µ£ _ _ )  (isProp‚â§·µ£ _ _ )



ointerval‚Ñô : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñô ‚Ñù
ointerval‚Ñô a b x = ((a <·µ£ x) √ó (x <·µ£ b)) ,
  isProp√ó (isProp<·µ£ _ _ )  (isProp<·µ£ _ _ )


pred< : ‚Ñù ‚Üí ‚Ñô ‚Ñù
pred< x y = (y <·µ£ x) , isProp<·µ£ _ _

pred‚â§ : ‚Ñù ‚Üí ‚Ñô ‚Ñù
pred‚â§ x y = (y ‚â§·µ£ x) , isProp‚â§·µ£ _ _

pred‚â• : ‚Ñù ‚Üí ‚Ñô ‚Ñù
pred‚â• x y = (x ‚â§·µ£ y) , isProp‚â§·µ£ _ _

pred> : ‚Ñù ‚Üí ‚Ñô ‚Ñù
pred> x y = (x <·µ£ y) , isProp<·µ£ _ _

pred‚â§< : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñô ‚Ñù
pred‚â§< a b x = ((a ‚â§·µ£ x) √ó (x <·µ£ b)) , isProp√ó (isProp‚â§·µ£ _ _) (isProp<·µ£ _ _)

pred<‚â§ : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñô ‚Ñù
pred<‚â§ a b x = ((a <·µ£ x) √ó (x ‚â§·µ£ b)) , isProp√ó (isProp<·µ£ _ _) (isProp‚â§·µ£ _ _)
