{-# OPTIONS --safe --lossy-unification #-}

module Cubical.HITs.CauchyReals.Sequence where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Function
open import Cubical.Foundations.Transport
open import Cubical.Foundations.Structure
open import Cubical.Foundations.Powerset

import Cubical.Functions.Logic as L


open import Cubical.Data.Bool as ùüö hiding (_‚â§_)
open import Cubical.Data.Nat as ‚Ñï hiding (_¬∑_;_+_)
import Cubical.Data.Nat.Mod as ‚Ñï
import Cubical.Data.Nat.Order as ‚Ñï
open import Cubical.Data.Empty as ‚ä•
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Int as ‚Ñ§ using (pos)
import Cubical.Data.Int.Order as ‚Ñ§
open import Cubical.Data.Sigma

open import Cubical.HITs.PropositionalTruncation as PT

open import Cubical.Data.NatPlusOne

open import Cubical.Data.Rationals as ‚Ñö using (‚Ñö ; [_/_])
open import Cubical.Data.Rationals.Order as ‚Ñö using
  ( _‚Ñö‚Çä+_ ; 0<_ ; ‚Ñö‚Çä ; _‚Ñö‚Çä¬∑_ ; ‚Ñö‚Çä‚â°)
open import Cubical.Data.Rationals.Order.Properties as ‚Ñö
 using (inv‚Ñö‚Çä;/2‚Çä;/3‚Çä;/4‚Çä;x/2<x;inv‚Ñö;_‚Ñö^‚Åø_;_‚Ñö‚Çä^‚Åø_)


open import Cubical.HITs.CauchyReals.Base
open import Cubical.HITs.CauchyReals.Lems
open import Cubical.HITs.CauchyReals.Closeness
open import Cubical.HITs.CauchyReals.Lipschitz
open import Cubical.HITs.CauchyReals.Order
open import Cubical.HITs.CauchyReals.Continuous
open import Cubical.HITs.CauchyReals.Multiplication
open import Cubical.HITs.CauchyReals.Inverse


Lipschitz-‚Ñö‚Üí‚Ñù‚Ñô : ‚Ñö‚Çä ‚Üí (P : ‚Ñô ‚Ñù) ‚Üí (‚àÄ x ‚Üí rat x ‚àà P  ‚Üí ‚Ñù) ‚Üí Type
Lipschitz-‚Ñö‚Üí‚Ñù‚Ñô L P f =
  (‚àÄ q q‚àà r r‚àà ‚Üí (Œµ : ‚Ñö‚Çä) ‚Üí
    ‚Ñö.abs (q ‚Ñö.- r) ‚Ñö.< (fst Œµ) ‚Üí abs·µ£ (f q q‚àà -·µ£ f r r‚àà)
     <·µ£ rat (fst (L ‚Ñö‚Çä¬∑ Œµ  )))


extend-Lipshitz‚Ñö‚Üí‚Ñù : ‚àÄ L ‚Üí  ‚àÄ a b ‚Üí (a ‚Ñö.‚â§ b) ‚Üí ‚àÄ f ‚Üí
        Lipschitz-‚Ñö‚Üí‚Ñù‚Ñô L (interval‚Ñô (rat a) (rat b)) f ‚Üí
        Œ£[ f' ‚àà (‚Ñö ‚Üí ‚Ñù) ]
          (Lipschitz-‚Ñö‚Üí‚Ñù L f' √ó (‚àÄ x x‚àà ‚Üí f' x ‚â° f x x‚àà ))

extend-Lipshitz‚Ñö‚Üí‚Ñù L a b a‚â§b f li =
 (Œª x ‚Üí f (‚Ñö.clamp a b x) (‚àà‚Ñöinterval‚Ñô‚Üí‚ààinterval‚Ñô _ _ _
  (clam‚àà‚Ñöinterval‚Ñô a b a‚â§b x))) ,
   w , (Œª x x‚àà ‚Üí cong (uncurry f)
    (Œ£‚â°Prop (‚àà-isProp (interval‚Ñô (rat a) (rat b) ‚àò rat))
    (‚Ñö.inClamps a b x (‚â§·µ£‚Üí‚â§‚Ñö _ _ (fst x‚àà)) (‚â§·µ£‚Üí‚â§‚Ñö _ _ (snd x‚àà)) )))

 where
 w : Lipschitz-‚Ñö‚Üí‚Ñù L
       (Œª x ‚Üí
          f (‚Ñö.clamp a b x)
          (‚àà‚Ñöinterval‚Ñô‚Üí‚ààinterval‚Ñô a b (‚Ñö.clamp a b x)
           (clam‚àà‚Ñöinterval‚Ñô a b a‚â§b x)))
 w q r Œµ u v = invEq (‚àº‚âÉabs<Œµ _ _ _)
  (li _ _
   _ _ Œµ (‚Ñö.isTrans‚â§<
    (‚Ñö.abs (‚Ñö.clamp a b q ‚Ñö.- ‚Ñö.clamp a b r)) (‚Ñö.abs (q ‚Ñö.- r)) (fst Œµ)
    (‚Ñö.clampDist a b r q) (‚Ñö.absFrom<√ó< (fst Œµ) (q ‚Ñö.- r) u v)))


LLipschitz-‚Ñö‚Üí‚Ñù : (‚Ñö ‚Üí ‚Ñù) ‚Üí Type
LLipschitz-‚Ñö‚Üí‚Ñù f =
  (‚àÄ x ‚Üí ‚àÉ[ (L , Œµ) ‚àà (‚Ñö‚Çä √ó ‚Ñö‚Çä) ]
    ‚àÄ q r¬†‚Üí abs·µ£ (rat q -·µ£ x) <·µ£ rat (fst Œµ)
          ‚Üí abs·µ£ (rat r -·µ£ x) <·µ£ rat (fst Œµ)
            ‚Üí f q ‚àº[ L ‚Ñö‚Çä¬∑ Œµ  ] f r)


Dichotomy‚Ñù : ‚àÄ (Œµ : ‚Ñö‚Çä) x y ‚Üí
    ‚ü® ((x  <·µ£ y +·µ£ rat (fst Œµ)) , isProp<·µ£ _ _)
       L.‚äî ((y <·µ£ x +·µ£ rat (fst Œµ)) , isProp<·µ£ _ _) ‚ü©
Dichotomy‚Ñù Œµ x x' =
     (PT.map2
         (Œª (r , x<r , r<x+Œµ/2) (r' , x'-Œµ/2<r' , r'<x') ‚Üí
           ‚äé.map

              (Œª r‚â§r' ‚Üí isTrans<·µ£ _ _ _
                 x<r (isTrans‚â§<·µ£ _ _ _
                   (‚â§‚Ñö‚Üí‚â§·µ£ r r' r‚â§r') r'<x'))
              (Œª r'<r ‚Üí
                 isTrans<·µ£ _ _ _
                  (isTrans<·µ£ _ _ _ x'-Œµ/2<r' (<‚Ñö‚Üí<·µ£ r' r r'<r))
                  r<x+Œµ/2 )
             (‚Ñö.Dichotomy‚Ñö r r'))
        (dense‚Ñöin‚Ñù x (x +·µ£ rat (fst (Œµ)))
          (‚â§Weaken<+·µ£ _ _ (‚Ñö‚Çä‚Üí‚Ñù‚Çä (Œµ)) (‚â§·µ£-refl _)))
        (dense‚Ñöin‚Ñù x' (x' +·µ£ rat (fst (Œµ)))
         ((‚â§Weaken<+·µ£ _ _ (‚Ñö‚Çä‚Üí‚Ñù‚Çä (Œµ)) (‚â§·µ£-refl _)))))

-- Dichotomy‚Ñù' : ‚àÄ x ‚Üí
--     ‚ü® ((x ‚â§·µ£ 0) , isProp‚â§·µ£ _ _)
--        L.‚äî ((0 ‚â§·µ£ x) , isProp‚â§·µ£ _ _) ‚ü©
-- Dichotomy‚Ñù' = Elim‚Ñù-Prop.go w
--  where
--  w : Elim‚Ñù-Prop _
--  w .Elim‚Ñù-Prop.ratA x =
--    PT.map (‚äé.map (‚â§‚Ñö‚Üí‚â§·µ£ _ _) (‚â§‚Ñö‚Üí‚â§·µ£ _ _))
--      (‚Ñö.isStronglyConnected‚â§ x 0)
--  w .Elim‚Ñù-Prop.limA x p X = {!!}
--   where
--   ww : {!!}
--   ww = {!X!}
--  w .Elim‚Ñù-Prop.isPropA x = snd
--     (((x ‚â§·µ£ 0) , isProp‚â§·µ£ _ _)
--        L.‚äî ((0 ‚â§·µ£ x) , isProp‚â§·µ£ _ _))

Seq : Type
Seq = ‚Ñï ‚Üí ‚Ñù

/n·µ£-L : (n : ‚Ñï‚Çä‚ÇÅ) ‚Üí Œ£ _ (Lipschitz-‚Ñù‚Üí‚Ñù _)
/n·µ£-L n = (fromLipschitz ([ 1 / n ] , _)
  (_ , Lipschitz-rat‚àò ([ 1 / n ] , _) (‚Ñö._¬∑ [ 1 / n ])
   Œª q r Œµ x ‚Üí
     subst (‚Ñö._< ([ 1 / n ]) ‚Ñö.¬∑ (fst Œµ))
      (sym (‚Ñö.pos¬∑abs [ 1 / n ] (q ‚Ñö.- r)
       (‚Ñö.<Weaken‚â§ 0 [ 1 / n ]
           ( (‚Ñö.0<‚Üí< [ 1 / n ] _))))
       ‚àô cong ‚Ñö.abs (‚Ñö.¬∑Comm _ _ ‚àô ‚Ñö.¬∑DistR+ q (‚Ñö.- r) [ 1 / n ]
        ‚àô cong ((q ‚Ñö.¬∑ [ 1 / n ]) ‚Ñö.+_)
            (sym (‚Ñö.¬∑Assoc -1 r [ 1 / n ]))))
      (‚Ñö.<-o¬∑ (‚Ñö.abs (q ‚Ñö.- r)) (fst Œµ) [ 1 / n ]
       ((‚Ñö.0<‚Üí< [ 1 / n ] _))
       x)))

/n·µ£ : ‚Ñï‚Çä‚ÇÅ ‚Üí ‚Ñù ‚Üí ‚Ñù
/n·µ£ = fst ‚àò /n·µ£-L

/n·µ£-Ôºè·µ£ : ‚àÄ n x (p : 0 ÔºÉ fromNat (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï n))
            ‚Üí /n·µ£ n x ‚â° (x Ôºè·µ£[ fromNat (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï n) , p ] )
/n·µ£-Ôºè·µ£ n x p = ‚â°Continuous _ _
  (Lipschitz‚ÜíIsContinuous _ (fst (/n·µ£-L n)) (snd (/n·µ£-L n)))
   (IsContinuous¬∑·µ£R _)
  (Œª r ‚Üí cong rat (cong (r ‚Ñö.¬∑_) (cong [ 1 /_] (sym (¬∑‚Çä‚ÇÅ-identityÀ° _))))
    ‚àô rat¬∑·µ£rat _ _ ‚àô
      cong (rat r ¬∑·µ£_) (sym (inv‚Ñù-rat _ _ (fst (ratÔºÉ _ _) p)) )) x

/n·µ£-pos : ‚àÄ n x ‚Üí 0 <·µ£ x ‚Üí 0 <·µ£ /n·µ£ n x
/n·µ£-pos n x 0<x = subst (0 <·µ£_) (sym (/n·µ£-Ôºè·µ£ _ _ _))
                     (‚Ñù‚Çä¬∑ (_ , 0<x) (_ , inv‚Ñù-pos _
                         (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.0<‚Üí< _ tt))))

seqSumUpTo : (‚Ñï ‚Üí ‚Ñù) ‚Üí ‚Ñï ‚Üí  ‚Ñù
seqSumUpTo s zero = 0
seqSumUpTo s (suc n) = s zero +·µ£ seqSumUpTo (s ‚àò suc) n

seqSumUpToConst : ‚àÄ x n ‚Üí seqSumUpTo (const x) n ‚â° x ¬∑·µ£ fromNat n
seqSumUpToConst x zero = sym (ùêë'.0RightAnnihilates x)
seqSumUpToConst x (suc n) =
 cong‚ÇÇ (_+·µ£_) (sym (¬∑IdR x)) (seqSumUpToConst x n) ‚àô
   sym (¬∑DistL+ x 1 (fromNat n))
    ‚àô cong ((x ¬∑·µ£_))
     (+·µ£-rat _ _ ‚àô cong rat (‚Ñö.‚Ñï+‚Üí‚Ñö+ _ _))

seqSumUpTo¬∑ : ‚àÄ s r n ‚Üí seqSumUpTo s n ¬∑·µ£ r ‚â° seqSumUpTo ((_¬∑·µ£ r) ‚àò s) n
seqSumUpTo¬∑ s r zero = ùêë'.0LeftAnnihilates r
seqSumUpTo¬∑ s r (suc n) =
  ¬∑DistR+ (s zero) (seqSumUpTo (s ‚àò suc) n) r ‚àô
   cong ((s zero ¬∑·µ£ r) +·µ£_) (seqSumUpTo¬∑ (s ‚àò suc) r n)

seqSumUpTo‚â§ : ‚àÄ s s' ‚Üí (‚àÄ n ‚Üí s n ‚â§·µ£ s' n) ‚Üí
  ‚àÄ n ‚Üí seqSumUpTo s n ‚â§·µ£ seqSumUpTo s' n
seqSumUpTo‚â§ s s' X zero = ‚â§·µ£-refl _
seqSumUpTo‚â§ s s' X (suc n) =
  ‚â§·µ£Monotone+·µ£ _ _ _ _ (X 0) (seqSumUpTo‚â§ _ _ (X ‚àò suc) n)


seqSumUpTo' : (‚Ñï ‚Üí ‚Ñù) ‚Üí ‚Ñï ‚Üí  ‚Ñù
seqSumUpTo' s zero = 0
seqSumUpTo' s (suc n) = seqSumUpTo' s n +·µ£ s n

seqŒ£ : Seq ‚Üí Seq
seqŒ£ = seqSumUpTo'

seqŒ£' : Seq ‚Üí Seq
seqŒ£' = seqSumUpTo


seqSumUpTo-suc : ‚àÄ f n ‚Üí seqSumUpTo f n +·µ£ f n ‚â°
      f zero +·µ£ seqSumUpTo (Œª x ‚Üí f (suc x)) n
seqSumUpTo-suc f zero = +·µ£Comm _ _
seqSumUpTo-suc f (suc n) =
  sym (+·µ£Assoc _ _ _) ‚àô
    cong ((f zero) +·µ£_ ) (seqSumUpTo-suc _ _)

seqSumUpTo‚â°seqSumUpTo' : ‚àÄ f n ‚Üí seqSumUpTo' f n ‚â° seqSumUpTo f n
seqSumUpTo‚â°seqSumUpTo' f zero = refl
seqSumUpTo‚â°seqSumUpTo' f (suc n) =
 cong (_+·µ£ (f n)) (seqSumUpTo‚â°seqSumUpTo' (f) n) ‚àô
   seqSumUpTo-suc f n

<-¬∑sk-cancel : ‚àÄ {m n k} ‚Üí m ‚Ñï.¬∑ suc k ‚Ñï.< n ‚Ñï.¬∑ suc k ‚Üí m ‚Ñï.< n
<-¬∑sk-cancel {n = zero} x = ‚ä•.rec (‚Ñï.¬¨-<-zero x)
<-¬∑sk-cancel {zero} {n = suc n} x = ‚Ñï.suc-‚â§-suc (‚Ñï.zero-‚â§ {n})
<-¬∑sk-cancel {suc m} {n = suc n} {k} x =
  ‚Ñï.suc-‚â§-suc {suc m} {n}
    (<-¬∑sk-cancel {m} {n} {k}
     (‚Ñï.‚â§-k+-cancel (subst (‚Ñï._‚â§ (k ‚Ñï.+ n ‚Ñï.¬∑ suc k))
       (sym (‚Ñï.+-suc _ _)) (‚Ñï.pred-‚â§-pred x))))

2‚â§x‚Üí1<quotient[x/2] : ‚àÄ n ‚Üí 0 ‚Ñï.< (‚Ñï.quotient (2 ‚Ñï.+ n) / 2)
2‚â§x‚Üí1<quotient[x/2] n =
 let z : 0 ‚Ñï.<
             ((‚Ñï.quotient (2 ‚Ñï.+ n) / 2) ‚Ñï.¬∑ 2)
     z = subst (0 ‚Ñï.<_) (‚Ñï.¬∑-comm _ _)
          (‚Ñï.‚â§<-trans ‚Ñï.zero-‚â§ (‚Ñï.<-k+-cancel (subst (‚Ñï._< 2 ‚Ñï.+
             (2 ‚Ñï.¬∑ (‚Ñï.quotient (2 ‚Ñï.+ n) / 2)))
           (‚Ñï.‚â°remainder+quotient 2 (2 ‚Ñï.+ n))
             (‚Ñï.<-+k {k = 2 ‚Ñï.¬∑ (‚Ñï.quotient (2 ‚Ñï.+ n) / 2)}
              (‚Ñï.mod< 1 (2 ‚Ñï.+ n))))))
 in <-¬∑sk-cancel {0} {‚Ñï.quotient (2 ‚Ñï.+ n) / 2 } {k = 1}
     z



open ‚Ñï.Minimal

-- invFac‚Ñï : ‚àÄ n ‚Üí Œ£ _ (Least (Œª k ‚Üí n ‚Ñï.< 2 !))
-- invFac‚Ñï = {!!}

log2‚Ñï : ‚àÄ n ‚Üí Œ£ _ (Least (Œª k ‚Üí n ‚Ñï.< 2 ^ k))
log2‚Ñï n = w n n ‚Ñï.‚â§-refl
 where

  w : ‚àÄ N n ‚Üí n ‚Ñï.‚â§ N
          ‚Üí Œ£ _ (Least (Œª k ‚Üí n ‚Ñï.< 2 ^ k))
  w N zero x = 0 , (‚Ñï.‚â§-refl , Œª k' q ‚Üí ‚ä•.rec (‚Ñï.¬¨-<-zero q))
  w N (suc zero) x = 1 , (‚Ñï.‚â§-refl ,
     Œª { zero q ‚Üí ‚Ñï.<-asym (‚Ñï.suc-‚â§-suc ‚Ñï.‚â§-refl)
      ; (suc k') q ‚Üí ‚ä•.rec (‚Ñï.¬¨-<-zero (‚Ñï.pred-‚â§-pred q))})
  w zero (suc (suc n)) x = ‚ä•.rec (‚Ñï.¬¨-<-zero x)
  w (suc N) (suc (suc n)) x =
   let (k , (X , Lst)) = w N
          (‚Ñï.quotient 2 ‚Ñï.+ n / 2)
          (‚Ñï.‚â§-trans (‚Ñï.pred-‚â§-pred (‚Ñï.2‚â§x‚Üíquotient[x/2]<x n))
             (‚Ñï.pred-‚â§-pred x))
       z = ‚Ñï.‚â°remainder+quotient 2 (2 ‚Ñï.+ n)
       zz = ‚Ñï.<-+-‚â§ X X
       zzz : suc (suc n) ‚Ñï.< (2 ^ suc k)
       zzz = subst2 (‚Ñï._<_)
           (‚Ñï.+-comm _ _
              ‚àô sym (‚Ñï.+-assoc ((‚Ñï.remainder 2 ‚Ñï.+ n / 2)) _ _)
               ‚àô cong ((‚Ñï.remainder 2 ‚Ñï.+ n / 2) ‚Ñï.+_)
             ((cong ((‚Ñï.quotient 2 ‚Ñï.+ n / 2) ‚Ñï.+_)
              (sym (‚Ñï.+-zero (‚Ñï.quotient 2 ‚Ñï.+ n / 2)))))
             ‚àô z)
           (cong ((2 ^ k) ‚Ñï.+_) (sym (‚Ñï.+-zero (2 ^ k))))
           (‚Ñï.‚â§<-trans
             (‚Ñï.‚â§-k+ (‚Ñï.‚â§-+k (‚Ñï.pred-‚â§-pred (‚Ñï.mod< 1 (2 ‚Ñï.+ n))))) zz)
   in (suc k)
       , zzz
        , Œª { zero 0'<sk 2+n<2^0' ‚Üí
                ‚ä•.rec (‚Ñï.¬¨-<-zero (‚Ñï.pred-‚â§-pred 2+n<2^0'))
            ; (suc k') k'<sk 2+n<2^k' ‚Üí
               Lst k' (‚Ñï.pred-‚â§-pred k'<sk)
                (<-¬∑sk-cancel {k = 1}
                    (subst2 ‚Ñï._<_ (‚Ñï.¬∑-comm _ _) (‚Ñï.¬∑-comm _ _)
                      (‚Ñï.‚â§<-trans (_ , z)
                         2+n<2^k' )))}





0<x^‚Åø : ‚àÄ x n ‚Üí 0 <·µ£ x ‚Üí 0 <·µ£ (x ^‚Åø n)
0<x^‚Åø x zero x‚ÇÅ = dec‚Ñö<·µ£?
0<x^‚Åø x (suc n) x‚ÇÅ = ‚Ñù‚Çä¬∑ (_ , 0<x^‚Åø x n x‚ÇÅ) (_ , x‚ÇÅ)

0‚â§x^‚Åø : ‚àÄ x n ‚Üí 0 ‚â§·µ£ x ‚Üí 0 ‚â§·µ£ (x ^‚Åø n)
0‚â§x^‚Åø x zero _ = dec‚Ñö‚â§·µ£?
0‚â§x^‚Åø x (suc n) 0‚â§x =
 isTrans‚â°‚â§·µ£ _ _ _ (sym (ùêë'.0RightAnnihilates _))
   (‚â§·µ£-o¬∑·µ£ 0 _ _ (0‚â§x^‚Åø x n 0‚â§x) 0‚â§x)


opaque
 unfolding _<·µ£_
 ^‚Åø-inv‚Ñù : ‚àÄ n x 0ÔºÉx 0ÔºÉx^ ‚Üí
             ((inv‚Ñù x 0ÔºÉx) ^‚Åø n) ‚â° (inv‚Ñù (x ^‚Åø n) (0ÔºÉx^))
 ^‚Åø-inv‚Ñù zero x _ _ = sym (inv‚Ñù1 _)
 ^‚Åø-inv‚Ñù (suc n) x 0ÔºÉx _ =
   cong (_¬∑·µ£ inv‚Ñù x _) (^‚Åø-inv‚Ñù n x _ z) ‚àô
     sym (inv‚Ñù¬∑ _ _ _ _ _)
  where

  z' : ‚àÄ n ‚Üí x <·µ£ 0 ‚Üí 0 ÔºÉ (x ^‚Åø n)
  z' zero _ = inl dec‚Ñö<·µ£?
  z' (suc n) x<0 =
   ‚äé.rec (Œª p ‚Üí inr
      (isTrans‚â°<·µ£ _ _ _
       (sym (-·µ£¬∑-·µ£ _ _) ‚àô -·µ£¬∑ _ _)
       (isTrans<‚â°·µ£ _ _ _ (-·µ£<·µ£ _ _ (<·µ£‚ÇäMonotone¬∑·µ£ _ _ _ _
        (‚â§·µ£-refl 0) (‚â§·µ£-refl _ )
      p 0<-x)) (cong (-·µ£_) (sym (rat¬∑·µ£rat 0 0)))) ))
     (Œª p ‚Üí
       inl (isTrans‚â°<·µ£ _ _ _ (rat¬∑·µ£rat 0 0)
          (isTrans<‚â°·µ£ _ _ _
             (<·µ£‚ÇäMonotone¬∑·µ£ _ _ _ _
               (‚â§·µ£-refl 0) (‚â§·µ£-refl 0)
               (-·µ£<·µ£ _ _ p) 0<-x)
                          (-·µ£¬∑-·µ£ _ _))))
     (z' n x<0)
   where
    0<-x : 0 <·µ£ -·µ£ x
    0<-x = -·µ£<·µ£ _ _ x<0

  z : 0 ÔºÉ (x ^‚Åø n)
  z = ‚äé.rec (inl ‚àò 0<x^‚Åø x n)
        (z' n) 0ÔºÉx

^‚ÅøDist¬∑·µ£ : ‚àÄ n x y ‚Üí
            ((x ¬∑·µ£ y) ^‚Åø n) ‚â° (x ^‚Åø n) ¬∑·µ£ (y ^‚Åø n)
^‚ÅøDist¬∑·µ£ zero x y = rat¬∑·µ£rat _ _
^‚ÅøDist¬∑·µ£ (suc n) x y =
   cong (_¬∑·µ£ (x ¬∑·µ£ y)) (^‚ÅøDist¬∑·µ£ n x y)
 ‚àô (sym (¬∑·µ£Assoc _ _ _)
     ‚àô‚àô cong ((x ^‚Åø n) ¬∑·µ£_)
       ((¬∑·µ£Assoc _ _ _)
     ‚àô‚àô cong (_¬∑·µ£ y) (¬∑·µ£Comm _ _)
     ‚àô‚àô sym (¬∑·µ£Assoc _ _ _))
     ‚àô‚àô ¬∑·µ£Assoc _ _ _)



Ôºè^‚Åø : ‚àÄ n x y 0ÔºÉy 0ÔºÉy^‚Åø ‚Üí
         (x ^‚Åø n) Ôºè·µ£[ y ^‚Åø n , 0ÔºÉy^‚Åø ] ‚â°
           ((x Ôºè·µ£[ y , 0ÔºÉy ]) ^‚Åø n)
Ôºè^‚Åø n x y 0ÔºÉy 0ÔºÉy^‚Åø =
  cong ((x ^‚Åø n) ¬∑·µ£_) (sym (^‚Åø-inv‚Ñù n y _ _))
    ‚àô sym (^‚ÅøDist¬∑·µ£ n _ _)


geometricProgression : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñï ‚Üí ‚Ñù
geometricProgression a r zero = a
geometricProgression a r (suc n) =
  (geometricProgression a r n) ¬∑·µ£ r

geometricProgressionClosed : ‚àÄ a r n ‚Üí
 geometricProgression a r n ‚â° a ¬∑·µ£ (r ^‚Åø n)
geometricProgressionClosed a r zero = sym (¬∑IdR a)
geometricProgressionClosed a r (suc n) =
  cong (_¬∑·µ£ r) (geometricProgressionClosed a r n) ‚àô
   sym (¬∑·µ£Assoc _ _ _)

geometricProgression-suc : ‚àÄ a r n ‚Üí
   geometricProgression a r (suc n) ‚â°
    geometricProgression (a ¬∑·µ£ r) r n
geometricProgression-suc a r zero = refl
geometricProgression-suc a r (suc n) =
  cong (_¬∑·µ£ r) (geometricProgression-suc a r n)


geometricProgression-suc' : ‚àÄ a r n ‚Üí
   geometricProgression a r (suc n) ‚â°
    geometricProgression (a) r n  ¬∑·µ£ r
geometricProgression-suc' a r _ = refl

S‚Çô : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñï ‚Üí ‚Ñù
S‚Çô a r = seqSumUpTo (geometricProgression a r)


S‚Çô-suc : ‚àÄ a r n ‚Üí S‚Çô a r (suc n) ‚â° (a +·µ£ (S‚Çô a r n ¬∑·µ£ r ))
S‚Çô-suc a r n = cong (a +·µ£_) (sym (seqSumUpTo¬∑ (geometricProgression a r) r n) )


S‚ÇôLem' : ‚àÄ a n r ‚Üí (S‚Çô a r n) ¬∑·µ£ (1 +·µ£ (-·µ£ r))  ‚â°
                   a ¬∑·µ£ (1 +·µ£ (-·µ£ (r ^‚Åø n)))
S‚ÇôLem' a n r =
 let z : S‚Çô a r n +·µ£ geometricProgression a r n
            ‚â° (a +·µ£ (S‚Çô a r n ¬∑·µ£ r))
     z = cong (_+·µ£ (geometricProgression a r n))
           (sym (seqSumUpTo‚â°seqSumUpTo' (geometricProgression a r) n))
            ‚àô‚àô seqSumUpTo‚â°seqSumUpTo' (geometricProgression a r) _
          ‚àô‚àô S‚Çô-suc a r n
     z' = ((sym (+IdR _) ‚àô cong ((S‚Çô a r n +·µ£ (-·µ£ (S‚Çô a r n ¬∑·µ£ r))) +·µ£_)
             (sym (+-·µ£ (geometricProgression a r n))))
           ‚àô ùêë'.+ShufflePairs _ _ _ _ )
         ‚àô‚àô cong‚ÇÇ _+·µ£_ z (
           (+·µ£Comm (-·µ£ (S‚Çô a r n ¬∑·µ£ r))
              (-·µ£ (geometricProgression a r n)))) ‚àô‚àô
            (ùêë'.+ShufflePairs _ _ _ _ ‚àô
              cong ((a +·µ£ (-·µ£ (geometricProgression a r n))) +·µ£_)
             ( (+-·µ£ (S‚Çô a r n ¬∑·µ£ r))) ‚àô +IdR _)
 in (¬∑DistL+ (S‚Çô a r n) 1 (-·µ£ r)
      ‚àô cong‚ÇÇ _+·µ£_ (¬∑IdR (S‚Çô a r n)) (ùêë'.-DistR¬∑ (S‚Çô a r n) r))
      ‚àô‚àô z' ‚àô‚àô (cong‚ÇÇ _+·µ£_ (sym (¬∑IdR a))
       (cong (-·µ£_) (geometricProgressionClosed a r n) ‚àô
        sym (ùêë'.-DistR¬∑ _ _))
     ‚àô sym (¬∑DistL+ a 1 (-·µ£ ((r ^‚Åø (n))))))

S‚ÇôLem : ‚àÄ a r (0ÔºÉ1-r : 0 ÔºÉ (1 +·µ£ (-·µ£ r))) n ‚Üí
              (S‚Çô a r n)   ‚â°
                   a ¬∑·µ£ ((1 +·µ£ (-·µ£ (r ^‚Åø n)))
                     Ôºè·µ£[ (1 +·µ£ (-·µ£ r)) , 0ÔºÉ1-r ])
S‚ÇôLem a r 0ÔºÉ1-r n =
     x¬∑y‚â°z‚Üíx‚â°z/y (S‚Çô a r n)
       (a ¬∑·µ£ (1 +·µ£ (-·µ£ (r ^‚Åø n))))
        _ 0ÔºÉ1-r (S‚ÇôLem' a n r)
      ‚àô sym (¬∑·µ£Assoc _ _ _)

S‚Çô-sup : ‚àÄ a r n ‚Üí (0 <·µ£ a) ‚Üí (0 <·µ£ r) ‚Üí (r<1 : r <·µ£ 1) ‚Üí
                (S‚Çô a r n)
                <·µ£ (a ¬∑·µ£ (inv‚Ñù (1 +·µ£ (-·µ£ r)) (inl (x<y‚Üí0<y-x _ _ r<1))))
S‚Çô-sup a r n a<0 0<r r<1  =
   isTrans‚â§<·µ£ _ _ _ (‚â°·µ£Weaken‚â§·µ£ _ _ (S‚ÇôLem a r _ n))
     (<·µ£-o¬∑·µ£ _ _ (a , a<0)
      (isTrans<‚â§·µ£ _ _ _
          (<·µ£-¬∑·µ£o (1 +·µ£ (-·µ£ (r ^‚Åø n))) 1
            (inv‚Ñù (1 +·µ£ (-·µ£ r)) (inl (x<y‚Üí0<y-x _ _ r<1)) ,
              0<1/x _ _ (( (x<y‚Üí0<y-x _ _ r<1))))
            (isTrans<‚â§·µ£ _ _ _
               (<·µ£-o+ _ _ 1 (-·µ£<·µ£ 0 (r ^‚Åø n) (0<x^‚Åø r n 0<r)))
               (‚â°·µ£Weaken‚â§·µ£ _ _ ((ùêë'.+IdR' _ _ (-·µ£-rat 0)))) ))
          (‚â°·µ£Weaken‚â§·µ£ _ _ (¬∑IdL _ ) )))

Seq<‚ÜíŒ£< : (s s' : Seq) ‚Üí ‚àÄ n ‚Üí
  (‚àÄ m ‚Üí m ‚Ñï.‚â§ n  ‚Üí s m <·µ£ s' m) ‚Üí
   seqSumUpTo s (suc n) <·µ£ seqSumUpTo s' (suc n)
Seq<‚ÜíŒ£< s s' zero x = subst2 _<·µ£_
  (sym (+IdR _)) (sym (+IdR _)) (x 0 ‚Ñï.‚â§-refl)
Seq<‚ÜíŒ£< s s' (suc n) x =
 <·µ£Monotone+·µ£ _ _ _ _
  (x 0 ‚Ñï.zero-‚â§) (Seq<‚ÜíŒ£< (s ‚àò suc) (s' ‚àò suc) n
   (Œª m x‚ÇÅ ‚Üí x (suc m) (‚Ñï.suc-‚â§-suc x‚ÇÅ )))



Seq<‚ÜíŒ£<-+1 : (s s' : Seq) ‚Üí
  (s 0 ‚â§·µ£ s' 0) ‚Üí
  (‚àÄ n ‚Üí s (suc n) <·µ£ s' (suc n)) ‚Üí
   ‚àÄ n ‚Üí seqSumUpTo s (suc (suc n)) <·µ£ seqSumUpTo s' (suc (suc n))
Seq<‚ÜíŒ£<-+1 s s' x0 x n = ‚â§<·µ£Monotone+·µ£ _ _ _ _
  x0 (Seq<‚ÜíŒ£< (s ‚àò suc) (s' ‚àò suc) n (const ‚àò x))

Seq‚â§‚ÜíŒ£‚â§ : (s s' : Seq) ‚Üí
  (‚àÄ n ‚Üí s n ‚â§·µ£ s' n) ‚Üí
   ‚àÄ n ‚Üí seqSumUpTo s n ‚â§·µ£ seqSumUpTo s' n
Seq‚â§‚ÜíŒ£‚â§ s s' x zero = ‚â§·µ£-refl _
Seq‚â§‚ÜíŒ£‚â§ s s' x (suc n) = ‚â§·µ£Monotone+·µ£ _ _ _ _
 (x 0) (Seq‚â§‚ÜíŒ£‚â§ (s ‚àò suc) (s' ‚àò suc) (x ‚àò suc) n)

Seq‚â§‚ÜíŒ£‚â§-upto : (s s' : Seq) ‚Üí ‚àÄ N ‚Üí
  (‚àÄ n ‚Üí n ‚Ñï.< N ‚Üí s n ‚â§·µ£ s' n) ‚Üí
   seqSumUpTo s N ‚â§·µ£ seqSumUpTo s' N
Seq‚â§‚ÜíŒ£‚â§-upto s s' zero x = ‚â§·µ£-refl _
Seq‚â§‚ÜíŒ£‚â§-upto s s' (suc N) x = ‚â§·µ£Monotone+·µ£ _ _ _ _
 (x 0 ‚Ñï.zero-<-suc) (Seq‚â§‚ÜíŒ£‚â§-upto (s ‚àò suc) (s' ‚àò suc) N
   Œª n u ‚Üí x (suc n) (‚Ñï.suc-‚â§-suc u))


Seq'‚â§‚ÜíŒ£‚â§ : (s s' : Seq) ‚Üí
  (‚àÄ n ‚Üí s n ‚â§·µ£ s' n) ‚Üí
   ‚àÄ n ‚Üí seqSumUpTo' s n ‚â§·µ£ seqSumUpTo' s' n
Seq'‚â§‚ÜíŒ£‚â§ s s' x zero = ‚â§·µ£-refl _
Seq'‚â§‚ÜíŒ£‚â§ s s' x (suc n) =
 ‚â§·µ£Monotone+·µ£ _ _ _ _
 (Seq'‚â§‚ÜíŒ£‚â§ s s' x n)  (x n)

0‚â§seqŒ£ : ‚àÄ s ‚Üí (‚àÄ n ‚Üí 0 ‚â§·µ£ s n)
            ‚Üí ‚àÄ n ‚Üí 0 ‚â§·µ£ seqŒ£ s n
0‚â§seqŒ£ s x zero = ‚â§·µ£-refl _
0‚â§seqŒ£ s x (suc n) =
  isTrans‚â°‚â§·µ£ _ _ _
    (sym (+·µ£-rat _ _)) (‚â§·µ£Monotone+·µ£ _ _ _ _ (0‚â§seqŒ£ s x n) (x n))

0‚â§seqŒ£' : ‚àÄ s ‚Üí (‚àÄ n ‚Üí 0 ‚â§·µ£ s n)
            ‚Üí ‚àÄ n ‚Üí 0 ‚â§·µ£ seqŒ£' s n
0‚â§seqŒ£' s x zero = ‚â§·µ£-refl _
0‚â§seqŒ£' s x (suc n) =
  isTrans‚â°‚â§·µ£ _ _ _
    (sym (+·µ£-rat _ _))
    $ ‚â§·µ£Monotone+·µ£ _ _ _ _ (x 0) (0‚â§seqŒ£' (s ‚àò suc) (x ‚àò suc) n)

0<seqŒ£' : ‚àÄ s ‚Üí (‚àÄ n ‚Üí 0 <·µ£ s n)
            ‚Üí ‚àÄ n ‚Üí 0 <·µ£ seqŒ£' s (suc n)
0<seqŒ£' s x zero = isTrans<‚â°·µ£ _ _ _ (x 0) (sym (+IdR (s 0)))
0<seqŒ£' s x (suc n) =
    isTrans‚â°<·µ£ _ _ _
    (sym (+·µ£-rat _ _))
    $ <·µ£Monotone+·µ£ _ _ _ _ (x 0) (0<seqŒ£' (s ‚àò suc) (x ‚àò suc) n)


seriesDiff : (s : Seq)  ‚Üí
  ‚àÄ N n ‚Üí (seqŒ£ s (n ‚Ñï.+ N) +·µ£ (-·µ£ seqŒ£ s N)) ‚â°
     seqŒ£ (s ‚àò (‚Ñï._+ N)) n
seriesDiff s N zero = +-·µ£ (seqŒ£ s N)
seriesDiff s N (suc n) =
  cong (_+·µ£ _) (+·µ£Comm _ _) ‚àô‚àô
  sym (+·µ£Assoc _ _ _) ‚àô‚àô
   cong (s (n ‚Ñï.+ N) +·µ£_) (seriesDiff s N n)
    ‚àô +·µ£Comm (s (n ‚Ñï.+ N)) (seqŒ£ (s ‚àò (‚Ñï._+ N)) n)

opaque
 unfolding -·µ£_
 0ÔºÉ¬∑ : ‚àÄ x y ‚Üí 0 ÔºÉ x ‚Üí 0 ÔºÉ y ‚Üí 0 ÔºÉ (x ¬∑·µ£ y)
 0ÔºÉ¬∑ x y =
  ‚äé.rec (Œª 0<x ‚Üí ‚äé.rec
         (Œª 0<y ‚Üí inl (isTrans‚â°<·µ£ _ _ _ (rat¬∑·µ£rat _ _)
             (<·µ£‚ÇäMonotone¬∑·µ£ _ _ _ _
               (‚â§·µ£-refl _) (‚â§·µ£-refl _) 0<x 0<y)))
             Œª y<0 ‚Üí inr (
               let z = isTrans‚â°<·µ£ _ _ _ (rat¬∑·µ£rat _ _) $
                        <·µ£‚ÇäMonotone¬∑·µ£ _ _ _ _
                         (‚â§·µ£-refl _) (‚â§·µ£-refl _) 0<x (-·µ£<·µ£ _ _ y<0)
               in isTrans‚â°<·µ£ _ _ _ (cong (x ¬∑·µ£_) (sym (-·µ£Invol _))
                     ‚àô  (¬∑-·µ£ _ _)) (-·µ£<·µ£ _ _ z)))
        Œª x<0 ‚Üí ‚äé.rec
          (Œª 0<y ‚Üí inr (
               let z = isTrans‚â°<·µ£ _ _ _ (rat¬∑·µ£rat _ _) $
                        <·µ£‚ÇäMonotone¬∑·µ£ _ _ _ _
                         (‚â§·µ£-refl _) (‚â§·µ£-refl _) (-·µ£<·µ£ _ _  x<0) 0<y
               in isTrans‚â°<·µ£ _ _ _ (sym (-·µ£Invol _)
                  ‚àô cong (-·µ£_) (sym (-·µ£¬∑ _ _))) (-·µ£<·µ£ _ _ z)))
          Œª y<0 ‚Üí inl
             let z = isTrans‚â°<·µ£ _ _ _ (rat¬∑·µ£rat _ _) $
                        <·µ£‚ÇäMonotone¬∑·µ£ _ _ _ _
                         (‚â§·µ£-refl _) (‚â§·µ£-refl _) (-·µ£<·µ£ _ _  x<0) (-·µ£<·µ£ _ _  y<0)
               in isTrans<‚â°·µ£ _ _ _ z (-·µ£¬∑-·µ£ x y)

ÔºÉŒî : ‚àÄ x y ‚Üí (0 ÔºÉ (x -·µ£ y)) ‚âÉ y ÔºÉ x
ÔºÉŒî x y = ‚äé.‚äé-equiv
  (invEquiv (x<y‚âÉ0<y-x _ _))
  (invEquiv (x<y‚âÉx-y<0 _ _))

inv‚Ñù<inv‚Ñù-pos : ‚àÄ x y ‚Üí ‚àÄ 0<x 0<y ‚Üí
                   (x <·µ£ y) ‚âÉ (inv‚Ñù y (inl 0<y) <·µ£ inv‚Ñù x (inl 0<x))
inv‚Ñù<inv‚Ñù-pos x y 0<x 0<y =
 z<x‚âÉy‚Çä¬∑z<y‚Çä¬∑x y x (inv‚Ñù y (inl 0<y) ¬∑·µ£ inv‚Ñù x (inl 0<x) ,
   ‚Ñù‚Çä¬∑ (inv‚Ñù y (inl 0<y) , inv‚Ñù-pos y 0<y)
       (inv‚Ñù x (inl 0<x) , inv‚Ñù-pos x 0<x))
  ‚àô‚Çë substEquiv' (_<·µ£ (inv‚Ñù y (inl 0<y) ¬∑·µ£ inv‚Ñù x (inl 0<x) ¬∑·µ£ y))
      (sym (¬∑·µ£Assoc _ _ _) ‚àô‚àô
       cong (inv‚Ñù y (inl 0<y) ¬∑·µ£_)
        (¬∑·µ£Comm _ _ ‚àô x¬∑inv‚Ñù[x] _ _)
        ‚àô‚àô ¬∑IdR _)
  ‚àô‚Çë substEquiv' (inv‚Ñù y (inl 0<y) <·µ£_)
    (cong (_¬∑·µ£ y) (¬∑·µ£Comm _ _)
     ‚àô ((sym (¬∑·µ£Assoc _ _ _) ‚àô‚àô
       cong (inv‚Ñù x (inl 0<x) ¬∑·µ£_)
        (¬∑·µ£Comm _ _ ‚àô x¬∑inv‚Ñù[x] _ _)
        ‚àô‚àô ¬∑IdR _)))

1<x/y : ‚àÄ x y ‚Üí (0 <·µ£ x) ‚Üí (0<y : 0 <·µ£ y)  ‚Üí
  (y <·µ£ x) ‚âÉ (1 <·µ£ (x Ôºè·µ£[ y , inl 0<y ]))
1<x/y x y 0<x 0<y =
  ((substEquiv' (_<·µ£ x) (sym (¬∑IdR y))) ‚àô‚Çë
    substEquiv' (y ¬∑·µ£ 1 <·µ£_)
     (sym ([x/y]¬∑y·µ£ _ _ (inl 0<y)) ‚àô ¬∑·µ£Comm _ _ )
    ‚àô‚Çë invEquiv (z<x‚âÉy‚Çä¬∑z<y‚Çä¬∑x (x Ôºè·µ£[ y , inl 0<y ]) 1 (y , 0<y)))

x/y<1 : ‚àÄ x y ‚Üí (0 <·µ£ x) ‚Üí (0<y : 0 <·µ£ y)  ‚Üí
  (x <·µ£ y) ‚âÉ ((x Ôºè·µ£[ y , inl 0<y ]) <·µ£ 1)
x/y<1 x y 0<x 0<y =
  (((substEquiv' (x <·µ£_) (sym (¬∑IdR y))) ‚àô‚Çë
    substEquiv' (_<·µ£ (y ¬∑·µ£ 1))
     (sym ([x/y]¬∑y·µ£ _ _ (inl 0<y)) ‚àô ¬∑·µ£Comm _ _ ))
    ‚àô‚Çë invEquiv (z<x‚âÉy‚Çä¬∑z<y‚Çä¬∑x 1 (x Ôºè·µ£[ y , inl 0<y ]) (y , 0<y)))

-- x/y‚â§z : ‚àÄ x y z ‚Üí (0 ‚â§·µ£ x) ‚Üí (0<y : 0 <·µ£ y)  ‚Üí
--   (x ‚â§·µ£ z ¬∑·µ£ y) ‚âÉ ((x Ôºè·µ£[ y , inl 0<y ]) ‚â§·µ£ z)
-- x/y‚â§z x y z 0‚â§x 0<y = {!!}
--   -- (((substEquiv' (x <·µ£_) (sym (¬∑IdR y))) ‚àô‚Çë
--   --   substEquiv' (_<·µ£ (y ¬∑·µ£ 1))
--   --    (sym ([x/y]¬∑y·µ£ _ _ (inl 0<y)) ‚àô ¬∑·µ£Comm _ _ ))
--   --   ‚àô‚Çë invEquiv (z<x‚âÉy‚Çä¬∑z<y‚Çä¬∑x 1 (x Ôºè·µ£[ y , inl 0<y ]) (y , 0<y)))

-- x‚â§z/y : ‚àÄ x y z ‚Üí (0 ‚â§·µ£ x) ‚Üí (0<y : 0 <·µ£ y)  ‚Üí
--   (x ¬∑·µ£ y ‚â§·µ£ z) ‚âÉ (x ‚â§·µ£ (z  Ôºè·µ£[ y , inl 0<y ]))
-- x‚â§z/y x y z 0‚â§x 0<y = {!!}
--   -- (((substEquiv' (x <·µ£_) (sym (¬∑IdR y))) ‚àô‚Çë
--   --   substEquiv' (_<·µ£ (y ¬∑·µ£ 1))
--   --    (sym ([x/y]¬∑y·µ£ _ _ (inl 0<y)) ‚àô ¬∑·µ£Comm _ _ ))
--   --   ‚àô‚Çë invEquiv (z<x‚âÉy‚Çä¬∑z<y‚Çä¬∑x 1 (x Ôºè·µ£[ y , inl 0<y ]) (y , 0<y)))


1ÔºÉx/y : ‚àÄ x y ‚Üí (0 <·µ£ x) ‚Üí (0<y : 0 <·µ£ y)  ‚Üí
  (y ÔºÉ x) ‚âÉ 1 ÔºÉ (x Ôºè·µ£[ y , inl 0<y ])
1ÔºÉx/y x y 0<x 0<y =
 ‚äé.‚äé-equiv
  (1<x/y x y 0<x 0<y)
  (x/y<1 x y 0<x 0<y)



1<^ : ‚àÄ x  ‚Üí ‚àÄ n ‚Üí (1 <·µ£ x) ‚Üí (1 <·µ£ (x ^‚Åø (suc n)))
1<^ x zero = subst (1 <·µ£_) (sym (¬∑IdR _) ‚àô  ¬∑·µ£Comm _ _)
1<^ x (suc n) 1<x =
 isTrans‚â°<·µ£ _ _ _ (sym (¬∑IdR _))
   (<·µ£‚ÇäMonotone¬∑·µ£ _ _ _ _
     dec‚Ñö‚â§·µ£? dec‚Ñö‚â§·µ£?  (1<^ x (n) 1<x) 1<x)

^<1 : ‚àÄ x ‚Üí 0 ‚â§·µ£ x  ‚Üí ‚àÄ n ‚Üí (x <·µ£ 1) ‚Üí ((x ^‚Åø (suc n)) <·µ£ 1)
^<1 x _ zero = subst (_<·µ£ 1) (sym (¬∑IdR _) ‚àô  ¬∑·µ£Comm _ _)
^<1 x 0‚â§x (suc n) x<1 =
 isTrans<‚â°·µ£ _ _ _
   (<·µ£‚ÇäMonotone¬∑·µ£ _ _ _ _
     (0‚â§x^‚Åø _ _ 0‚â§x) 0‚â§x (^<1 x 0‚â§x n x<1) x<1)
   (¬∑IdR _)


^‚â§1 : ‚àÄ x ‚Üí 0 ‚â§·µ£ x  ‚Üí ‚àÄ n ‚Üí (x ‚â§·µ£ 1) ‚Üí ((x ^‚Åø n) ‚â§·µ£ 1)
^‚â§1 x _  zero _ = ‚â§·µ£-refl 1
^‚â§1 x 0‚â§x (suc n) x‚â§1 =
 isTrans‚â§‚â°·µ£ _ _ _
   (‚â§·µ£‚ÇäMonotone¬∑·µ£ _ _ _ _
     dec‚Ñö‚â§·µ£? 0‚â§x ((^‚â§1 _ 0‚â§x n x‚â§1)) x‚â§1)
   (¬∑IdR _)




1ÔºÉ^ : ‚àÄ x ‚Üí 0 ‚â§·µ£ x ‚Üí ‚àÄ n ‚Üí (1 ÔºÉ x) ‚Üí (1 ÔºÉ (x ^‚Åø (suc n)))
1ÔºÉ^ x 0‚â§x n = ‚äé.map (1<^ x n) (^<1 x 0‚â§x n)

-- b‚Åø-a‚Åø : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñï ‚Üí ‚Ñù
-- b‚Åø-a‚Åø a b n = (b -·µ£ a) ¬∑·µ£ seqŒ£ (Œª k ‚Üí b ^‚Åø k ¬∑·µ£ (a ^‚Åø (n ‚à∏ suc k))) n


^‚Åø-StrictMonotone : ‚àÄ {x y : ‚Ñù} (n : ‚Ñï) ‚Üí (0 ‚Ñï.< n)
 ‚Üí 0 ‚â§·µ£ x ‚Üí 0 ‚â§·µ£ y ‚Üí x <·µ£ y ‚Üí (x ^‚Åø n) <·µ£ (y ^‚Åø n)

^‚Åø-StrictMonotone {x} {y} 0 0<n 0‚â§x 0‚â§y x<y = ‚ä•.rec (‚Ñï.¬¨-<-zero 0<n)
^‚Åø-StrictMonotone {x} {y} 1 0<n 0‚â§x 0‚â§y x<y =
  subst2 _<·µ£_ (sym (¬∑IdL _)) (sym (¬∑IdL _)) x<y
^‚Åø-StrictMonotone {x} {y} (suc (suc n)) 0<n 0‚â§x 0‚â§y x<y =
  <·µ£‚ÇäMonotone¬∑·µ£ _ _ _ _
    (0‚â§x^‚Åø _ _ 0‚â§x)
    0‚â§x
    ((^‚Åø-StrictMonotone (suc n) (‚Ñï.suc-‚â§-suc (‚Ñï.zero-‚â§ {n})) 0‚â§x 0‚â§y x<y))
    x<y

^‚Åø-Monotone : ‚àÄ {x y : ‚Ñù} (n : ‚Ñï)
 ‚Üí 0 ‚â§·µ£ x ‚Üí x ‚â§·µ£ y ‚Üí (x ^‚Åø n) ‚â§·µ£ (y ^‚Åø n)
^‚Åø-Monotone zero _ _ = ‚â§·µ£-refl _
^‚Åø-Monotone (suc n) 0‚â§x x‚â§y =
   ‚â§·µ£‚ÇäMonotone¬∑·µ£ _ _ _ _
    (0‚â§x^‚Åø _ n (isTrans‚â§·µ£ _ _ _ 0‚â§x x‚â§y)) 0‚â§x (^‚Åø-Monotone n 0‚â§x x‚â§y) x‚â§y



‚Ñö^‚Åø-Monotone : ‚àÄ {x y : ‚Ñö} (n : ‚Ñï) ‚Üí 0 ‚Ñö.‚â§ x ‚Üí 0 ‚Ñö.‚â§ y ‚Üí x ‚Ñö.‚â§ y
 ‚Üí (x ‚Ñö^‚Åø n) ‚Ñö.‚â§ (y ‚Ñö^‚Åø n)
‚Ñö^‚Åø-Monotone zero 0‚â§x 0‚â§y x‚â§y = ‚Ñö.isRefl‚â§ 1
‚Ñö^‚Åø-Monotone {x} {y} (suc n) 0‚â§x 0‚â§y x‚â§y =
  ‚Ñö.‚â§Monotone¬∑-onNonNeg _ _ _ _
    (‚Ñö^‚Åø-Monotone n 0‚â§x 0‚â§y x‚â§y)
    x‚â§y
    (‚Ñö.0‚â§‚Ñö^‚Åø x 0‚â§x n)
    0‚â§x

‚Ñö^‚Åø-StrictMonotone : ‚àÄ {x y : ‚Ñö} (n : ‚Ñï) ‚Üí (0 ‚Ñï.< n) ‚Üí 0 ‚Ñö.‚â§ x ‚Üí 0 ‚Ñö.‚â§ y ‚Üí x ‚Ñö.< y ‚Üí (x ‚Ñö.‚Ñö^‚Åø n) ‚Ñö.< (y ‚Ñö.‚Ñö^‚Åø n)
‚Ñö^‚Åø-StrictMonotone {x} {y} 0 0<n 0‚â§x 0‚â§y x<y = ‚ä•.rec (‚Ñï.¬¨-<-zero 0<n)
‚Ñö^‚Åø-StrictMonotone {x} {y} 1 0<n 0‚â§x 0‚â§y x<y =
  subst2 ‚Ñö._<_ (sym (‚Ñö.¬∑IdL _)) (sym (‚Ñö.¬∑IdL _)) x<y
‚Ñö^‚Åø-StrictMonotone {x} {y} (suc (suc n)) 0<n 0‚â§x 0‚â§y x<y =
  ‚Ñö.<Monotone¬∑-onPos _ _ _ _
    (‚Ñö^‚Åø-StrictMonotone (suc n) (‚Ñï.suc-‚â§-suc (‚Ñï.zero-‚â§ {n})) 0‚â§x 0‚â§y x<y)
    x<y
    (‚Ñö.0‚â§‚Ñö^‚Åø x 0‚â§x (suc n))
    0‚â§x


‚Ñö^‚Åø-Monotone‚Åª¬π : ‚àÄ {x y : ‚Ñö} (n : ‚Ñï) ‚Üí (0 ‚Ñï.< n) ‚Üí 0 ‚Ñö.‚â§ x ‚Üí 0 ‚Ñö.‚â§ y
 ‚Üí (x ‚Ñö^‚Åø n) ‚Ñö.‚â§ (y ‚Ñö^‚Åø n) ‚Üí x ‚Ñö.‚â§ y
‚Ñö^‚Åø-Monotone‚Åª¬π n 0<n 0‚â§x 0‚â§y x‚Åø‚â§y‚Åø =
 ‚Ñö.‚âÆ‚Üí‚â• _ _ (‚Ñö.‚â§‚Üí‚âØ _ _ x‚Åø‚â§y‚Åø ‚àò ‚Ñö^‚Åø-StrictMonotone n 0<n 0‚â§y 0‚â§x  )

^‚Åø-StrictMonotoneR : ‚àÄ {x : ‚Ñù} (m n : ‚Ñï)
 ‚Üí 1 <·µ£ x ‚Üí m ‚Ñï.< n ‚Üí (x ^‚Åø m) <·µ£ (x ^‚Åø n)
^‚Åø-StrictMonotoneR m zero x x‚ÇÅ = ‚ä•.rec (‚Ñï.¬¨-<-zero x‚ÇÅ)
^‚Åø-StrictMonotoneR {x} zero (suc n) 1<x m<n = 1<^ x n 1<x
^‚Åø-StrictMonotoneR (suc m) (suc n) 1<x sm<sn =
 <·µ£-¬∑·µ£o _ _ (_ , isTrans<·µ£ 0 1 _ (<‚Ñö‚Üí<·µ£ _ _ ‚Ñö.dec‚Ñö<?) 1<x)
  (^‚Åø-StrictMonotoneR m n 1<x (‚Ñï.pred‚Ñï-‚â§-pred‚Ñï sm<sn))

IsContinuous^‚Åø : ‚àÄ n ‚Üí IsContinuous (_^‚Åø n)
IsContinuous^‚Åø zero = IsContinuousConst _
IsContinuous^‚Åø (suc n) = cont‚ÇÇ¬∑·µ£ _ _ (IsContinuous^‚Åø n) IsContinuousId



module b‚Åø-a‚Åø n'  where

 n = suc (suc n')

 n·µ£‚Çä : ‚Ñù‚Çä
 n·µ£‚Çä = fromNat n


 module factor a b (0<a : 0 <·µ£ a) (0<b : 0 <·µ£ b) where



  0ÔºÉb : 0 ÔºÉ b
  0ÔºÉb = inl 0<b
  r = (a Ôºè·µ£[ b , 0ÔºÉb ])

  S = S‚Çô (b ^‚Åø (suc n')) r n


  0<r : 0 <·µ£ r
  0<r = isTrans<‚â°·µ£ _ _ _
   (  (fst (0<x‚âÉ0<y‚Çä¬∑x a (inv‚Ñù‚Çä (b , 0<b))) 0<a))
      (¬∑·µ£Comm _ _ ‚àô
        cong (a ¬∑·µ£_) (inv‚Ñù‚Çä‚â°inv‚Ñù _ _ ))


  0<S : 0 <·µ£ S
  0<S = 0<seqŒ£' (geometricProgression (b ^‚Åø (suc n')) r)
        (Œª n ‚Üí subst (0 <·µ£_)
           (sym (geometricProgressionClosed (b ^‚Åø (suc n')) r n))
            (‚Ñù‚Çä¬∑ (_ , (0<x^‚Åø b (suc n') 0<b)) (_ , (0<x^‚Åø r n 0<r))))
        (suc n')

  S‚Çä : ‚Ñù‚Çä
  S‚Çä = S , 0<S

  0‚â§r : 0 ‚â§·µ£ r
  0‚â§r = <·µ£Weaken‚â§·µ£ _ _ 0<r



  [b-a]¬∑S‚â°b‚Åø-a‚Åø : (b -·µ£ a) ¬∑·µ£ S‚Çô ((b ^‚Åø (suc n'))) r n ‚â° (b ^‚Åø n) -·µ£ (a ^‚Åø n)
  [b-a]¬∑S‚â°b‚Åø-a‚Åø =
     ¬∑·µ£Comm _ _ ‚àô cong ((S‚Çô ((b ^‚Åø (suc n'))) r n) ¬∑·µ£_)
        (cong‚ÇÇ _+·µ£_ (sym (¬∑IdL b)) (cong (-·µ£_) (sym ([x/y]¬∑y·µ£ a b 0ÔºÉb))
         ‚àô sym (-·µ£¬∑ _ _)) ‚àô sym (¬∑DistR+ _ _ _))
       ‚àô ¬∑·µ£Assoc _ _ _ ‚àô cong (_¬∑·µ£ b) (S‚ÇôLem' (b ^‚Åø (suc n')) n r)
        ‚àô  cong (_¬∑·µ£ b) (¬∑·µ£Comm _ _)
       ‚àô sym (¬∑·µ£Assoc _ _ _)
       ‚àô ¬∑DistR+ _ _ _
       ‚àô cong‚ÇÇ _+·µ£_ (¬∑IdL _)
          (-·µ£¬∑ _ _ ‚àô cong (-·µ£_)
           (sym (x/y‚â°z‚Üíx‚â°z¬∑y _ _ _ _ (Ôºè^‚Åø n _ _ _ (inl (0<x^‚Åø b n 0<b))))) )

  module _ A B (0<A : 0 <·µ£ A) (A<b : A <·µ£ b)
    (0<B : 0 <·µ£ B) (A<B : A <·µ£ B) (b‚â§B : b ‚â§·µ£ B) (a<b : a <·µ£ b) where

   aÔºÉb : a ÔºÉ b
   aÔºÉb = inl a<b


   p : 0 ÔºÉ ((1 -·µ£ (r ^‚Åø n)) ¬∑·µ£ b )
   p = 0ÔºÉ¬∑ _ _ (invEq (ÔºÉŒî _ _)
     (isSymÔºÉ _ _ (1ÔºÉ^ _ (
       <·µ£Weaken‚â§·µ£ _ _ (isTrans<‚â°·µ£ _ _ _
        (fst (0<x‚âÉ0<y‚Çä¬∑x a (inv‚Ñù‚Çä (b , 0<b))) 0<a) (¬∑·µ£Comm _ _ ‚àô
           cong (a ¬∑·µ£_) (inv‚Ñù‚Çä‚â°inv‚Ñù _ _))))
       _ ((fst (1ÔºÉx/y _ _ 0<a 0<b) (isSymÔºÉ _ _ (aÔºÉb))))))) 0ÔºÉb


   r<1 : r <·µ£ 1
   r<1 = fst (x/y<1 a b 0<a 0<b) a<b


   S‚â§B‚Åø¬∑n : S ‚â§·µ£ ((B ^‚Åø (suc n')) ¬∑·µ£ (fromNat n))
   S‚â§B‚Åø¬∑n =
       (isTrans‚â§‚â°·µ£ _ _ _ (Seq‚â§‚ÜíŒ£‚â§ (geometricProgression (b ^‚Åø (suc n')) r)
      (const (B ^‚Åø (suc n')))
       (Œª m ‚Üí
         isTrans‚â°‚â§·µ£ _ _ _
           (geometricProgressionClosed _ _ _)
            (isTrans‚â§‚â°·µ£ _ _ _ (
             isTrans‚â§·µ£ _ _ _
              (‚â§·µ£-¬∑·µ£o _ _ _  (0‚â§x^‚Åø _ _ 0‚â§r) (
                ^‚Åø-Monotone (suc n')
                 (<·µ£Weaken‚â§·µ£ _ _ 0<b) b‚â§B))
                 (‚â§·µ£-o¬∑·µ£ (r ^‚Åø m) 1 (B ^‚Åø (suc n'))
                  (0‚â§x^‚Åø _ _ (<·µ£Weaken‚â§·µ£ _ _ 0<B))
                    (^‚â§1 _ 0‚â§r m (<·µ£Weaken‚â§·µ£ _ _  r<1))))
                (¬∑IdR _)))
       (suc (suc n')))
       ((seqSumUpToConst (B ^‚Åø (suc n')) n)))



   A‚Åø‚â§S : (A ^‚Åø suc n') ‚â§·µ£ S
   A‚Åø‚â§S = <·µ£Weaken‚â§·µ£ _ _ $
     isTrans<‚â§·µ£ _ _ _
      (^‚Åø-StrictMonotone (suc n') (‚Ñï.suc-‚â§-suc (‚Ñï.zero-‚â§ {n'}))
          (<·µ£Weaken‚â§·µ£ _ _ 0<A) (<·µ£Weaken‚â§·µ£ _ _ 0<b) A<b)
           (isTrans‚â°‚â§·µ£ _ _ _  (sym (+IdR _)) (‚â§·µ£-o+ 0 _ _
                  (0‚â§seqŒ£' (Œª x ‚Üí geometricProgression ((b ^‚Åø n') ¬∑·µ£ b) r (suc x))
                       (Œª n ‚Üí isTrans‚â§‚â°·µ£ _ _ _
                          (<·µ£Weaken‚â§·µ£ _ _ (‚Ñù‚Çä¬∑ (_ , 0<x^‚Åø _ _ 0<b)
                               (_ , 0<x^‚Åø _ _ 0<r)))
                           ((sym (geometricProgressionClosed
                           ((b ^‚Åø n') ¬∑·µ£ b) r (suc n)))))
                        (suc n'))))
 open factor public


^‚ÅøMonotone‚Åª¬π : ‚àÄ {x y : ‚Ñù} (n : ‚Ñï) ‚Üí (0 ‚Ñï.< n) ‚Üí 0 <·µ£ x ‚Üí 0 <·µ£ y
 ‚Üí (x ^‚Åø n) ‚â§·µ£ (y ^‚Åø n) ‚Üí x ‚â§·µ£ y
^‚ÅøMonotone‚Åª¬π zero 0<n 0‚â§x 0‚â§y x‚Åø‚â§y‚Åø = ‚ä•.rec (‚Ñï.¬¨-<-zero 0<n)
^‚ÅøMonotone‚Åª¬π (suc zero) 0<n 0‚â§x 0‚â§y x‚Åø‚â§y‚Åø =
  subst2 _‚â§·µ£_ (¬∑IdL _) (¬∑IdL _) x‚Åø‚â§y‚Åø
^‚ÅøMonotone‚Åª¬π {x} {y} (suc (suc n)) 0<n 0<x 0<y x‚Åø<y‚Åø =
 let z = isTrans‚â§‚â°·µ£ _ _ _ (x‚â§y‚Üí0‚â§y-x _ _ x‚Åø<y‚Åø)
          (sym $ b‚Åø-a‚Åø.[b-a]¬∑S‚â°b‚Åø-a‚Åø n x y 0<x 0<y)
 in invEq (x‚â§y‚âÉ0‚â§y-x x y)
      ((invEq (z‚â§x‚âÉy‚Çä¬∑z‚â§y‚Çä¬∑x (y -·µ£ x) 0
          ((b‚Åø-a‚Åø.S n x y 0<x 0<y ,
                  b‚Åø-a‚Åø.0<S n x y 0<x 0<y)))
         (subst2 _‚â§·µ£_
           (sym (ùêë'.0RightAnnihilates (b‚Åø-a‚Åø.S n x y 0<x 0<y)))
            (¬∑·µ£Comm (y -·µ£ x) _) z)))


^‚ÅøStrictMonotone‚Åª¬π : ‚àÄ {x y : ‚Ñù} (n : ‚Ñï) ‚Üí (0 ‚Ñï.< n) ‚Üí 0 <·µ£ x ‚Üí 0 <·µ£ y
 ‚Üí (x ^‚Åø n) <·µ£ (y ^‚Åø n) ‚Üí x <·µ£ y
^‚ÅøStrictMonotone‚Åª¬π zero 0<n 0‚â§x 0‚â§y x‚Åø<y‚Åø = ‚ä•.rec (‚Ñï.¬¨-<-zero 0<n)
^‚ÅøStrictMonotone‚Åª¬π (suc zero) 0<n 0‚â§x 0‚â§y x‚Åø<y‚Åø =
  subst2 _<·µ£_ (¬∑IdL _) (¬∑IdL _) x‚Åø<y‚Åø
^‚ÅøStrictMonotone‚Åª¬π {x} {y} (suc (suc n)) 0<n 0<x 0<y x‚Åø<y‚Åø =
 let z = isTrans<‚â°·µ£ _ _ _ (x<y‚Üí0<y-x _ _ x‚Åø<y‚Åø)
          (sym $ b‚Åø-a‚Åø.[b-a]¬∑S‚â°b‚Åø-a‚Åø n x y 0<x 0<y)
 in 0<y-x‚Üíx<y _ _
      (invEq (z<x‚âÉy‚Çä¬∑z<y‚Çä¬∑x (y -·µ£ x) 0
          ((b‚Åø-a‚Åø.S n x y 0<x 0<y ,
                  b‚Åø-a‚Åø.0<S n x y 0<x 0<y)))
         (subst2 _<·µ£_
           (sym (ùêë'.0RightAnnihilates (b‚Åø-a‚Åø.S n x y 0<x 0<y)))
            (¬∑·µ£Comm (y -·µ£ x) _) z))


_~seq_ : Seq ‚Üí Seq ‚Üí Type
s ~seq s' = ‚àÄ (Œµ : ‚Ñö‚Çä) ‚Üí Œ£[ N ‚àà ‚Ñï ] (‚àÄ m n ‚Üí N ‚Ñï.< n ‚Üí N ‚Ñï.< m ‚Üí
   abs·µ£ ((s n) +·µ£ (-·µ£ (s' m))) <·µ£ rat (fst Œµ)   )


IsCauchySequence : Seq ‚Üí Type
IsCauchySequence s =
  ‚àÄ (Œµ : ‚Ñù‚Çä) ‚Üí Œ£[ N ‚àà ‚Ñï ] (‚àÄ m n ‚Üí N ‚Ñï.< n ‚Üí N ‚Ñï.< m ‚Üí
    abs·µ£ ((s n) +·µ£ (-·µ£ (s m))) <·µ£ fst Œµ)


IsCauchySequence' : Seq ‚Üí Type
IsCauchySequence' s =
  ‚àÄ (Œµ : ‚Ñö‚Çä) ‚Üí Œ£[ N ‚àà ‚Ñï ] (‚àÄ m n ‚Üí N ‚Ñï.< n ‚Üí N ‚Ñï.< m ‚Üí
    abs·µ£ ((s n) +·µ£ (-·µ£ (s m))) <·µ£ rat (fst Œµ)   )


IsCauchySequence'-via-~seq : ‚àÄ s s' ‚Üí s ~seq s' ‚Üí IsCauchySequence' s ‚Üí IsCauchySequence' s'
IsCauchySequence'-via-~seq s s' s~s' icS Œµ =
  let (N , X) = icS (/2‚Çä Œµ)
      (M , Y) = s~s' (/2‚Çä Œµ)
  in M , (Œª m n <m <n ‚Üí
     let zz = Y m n <m <n
         yy = Y n n <m <m
         uu = isTrans‚â°<·µ£ _ _ _ (cong abs·µ£ (sym Lùêë.lem--060))
                (isTrans‚â§<·µ£ _ _ _
                 (abs·µ£-triangle _ _)
                  (<·µ£Monotone+·µ£ _ _ _ _ (isTrans‚â°<·µ£ _ _ _ (minusComm-abs·µ£ _ _) yy) zz))
      in isTrans<‚â°·µ£ _ _ _ uu (+·µ£-rat _ _ ‚àô cong rat (‚Ñö.Œµ/2+Œµ/2‚â°Œµ _)))



IsCauchySequence'‚Ñö : (‚Ñï ‚Üí ‚Ñö) ‚Üí Type
IsCauchySequence'‚Ñö s =
  ‚àÄ (Œµ : ‚Ñö‚Çä) ‚Üí Œ£[ N ‚àà ‚Ñï ] (‚àÄ m n ‚Üí N ‚Ñï.< n ‚Üí N ‚Ñï.< m ‚Üí
    ‚Ñö.abs ((s n) ‚Ñö.- (s m)) ‚Ñö.< (fst Œµ)   )


IsConvSeries : Seq ‚Üí Type
IsConvSeries s =
    ‚àÄ (Œµ : ‚Ñù‚Çä) ‚Üí
     Œ£[ N ‚àà ‚Ñï ] ‚àÄ n m ‚Üí
       abs·µ£ (seqŒ£ (s ‚àò (‚Ñï._+ (n ‚Ñï.+ (suc N)))) m) <·µ£ fst Œµ

IsConvSeries' : Seq ‚Üí Type
IsConvSeries' s =
    ‚àÄ (Œµ : ‚Ñö‚Çä) ‚Üí
     Œ£[ N ‚àà ‚Ñï ] ‚àÄ n m ‚Üí
       abs·µ£ (seqŒ£ (s ‚àò (‚Ñï._+ (n ‚Ñï.+ (suc N)))) m) <·µ£ rat (fst Œµ)


IsoIsConvSeriesIsCauchySequenceSum : (s : Seq) ‚Üí
  Iso (IsConvSeries s) (IsCauchySequence (seqŒ£ s))
IsoIsConvSeriesIsCauchySequenceSum s =
   codomainIsoDep Œª Œµ ‚Üí
     Œ£-cong-iso-snd Œª N ‚Üí
        isProp‚ÜíIso (isPropŒ†2 Œª _ _ ‚Üí isProp<·µ£ _ _)
         (isPropŒ†4 Œª _ _ _ _ ‚Üí isProp<·µ£ _ _ )
         (Œª f ‚Üí ‚Ñï.elimBy‚â§
           (Œª n n' X <n <n' ‚Üí subst (_<·µ£ fst Œµ)
             (minusComm-abs·µ£ _ _) (X <n' <n))
           Œª n n' n‚â§n' N<n' N<n ‚Üí
              subst ((_<·µ£ fst Œµ) ‚àò abs·µ£)
                 (cong (Œª x ‚Üí seqŒ£ (s ‚àò (‚Ñï._+ x)) (n' ‚à∏ n))
                    (‚Ñï.[n-m]+m (suc N) n N<n)
                   ‚àô‚àô sym (seriesDiff s n (n' ‚à∏ n)) ‚àô‚àô
                   cong (_+·µ£ (-·µ£ seqŒ£ s n))
                     (cong (seqŒ£ s)
                       (‚Ñï.[n-m]+m n n' n‚â§n')))
                 (f (n ‚à∏ (suc N)) (n' ‚à∏ n)))
         Œª f n m ‚Üí
           subst ((_<·µ£ fst Œµ) ‚àò abs·µ£)
             (seriesDiff s (n ‚Ñï.+ suc N) m)
               (f (n ‚Ñï.+ (suc N)) (m ‚Ñï.+ (n ‚Ñï.+ suc N))
               (subst (N ‚Ñï.<_) (sym (‚Ñï.+-assoc _ _ _))
                 (‚Ñï.‚â§SumRight {suc N} {m ‚Ñï.+ n}))
               (‚Ñï.‚â§SumRight {suc N} {n}))


IsConvSeries‚âÉIsCauchySequenceSum : (s : Seq) ‚Üí
  IsConvSeries s ‚âÉ IsCauchySequence (seqŒ£ s)
IsConvSeries‚âÉIsCauchySequenceSum s =
  isoToEquiv (IsoIsConvSeriesIsCauchySequenceSum s)

IsoIsConvSeries'IsCauchySequenceSum' : (s : Seq) ‚Üí
  Iso (IsConvSeries' s) (IsCauchySequence' (seqŒ£ s))
IsoIsConvSeries'IsCauchySequenceSum' s =
 codomainIsoDep Œª Œµ ‚Üí
     Œ£-cong-iso-snd Œª N ‚Üí
        isProp‚ÜíIso (isPropŒ†2 Œª _ _ ‚Üí isProp<·µ£ _ _)
         (isPropŒ†4 Œª _ _ _ _ ‚Üí isProp<·µ£ _ _)

         (Œª f ‚Üí ‚Ñï.elimBy‚â§
           (Œª n n' X <n <n' ‚Üí subst (_<·µ£ rat (fst Œµ))
             (minusComm-abs·µ£ _ _) (X <n' <n))
           Œª n n' n‚â§n' N<n' N<n ‚Üí
              subst ((_<·µ£ rat (fst Œµ)) ‚àò abs·µ£)
                 (cong (Œª x ‚Üí seqŒ£ (s ‚àò (‚Ñï._+ x)) (n' ‚à∏ n))
                    (‚Ñï.[n-m]+m (suc N) n N<n)
                   ‚àô‚àô sym (seriesDiff s n (n' ‚à∏ n)) ‚àô‚àô
                   cong (_+·µ£ (-·µ£ seqŒ£ s n))
                     (cong (seqŒ£ s)
                       (‚Ñï.[n-m]+m n n' n‚â§n')))
                 (f (n ‚à∏ (suc N)) (n' ‚à∏ n)))
         Œª f n m ‚Üí
           subst ((_<·µ£ rat (fst Œµ)) ‚àò abs·µ£)
             (seriesDiff s (n ‚Ñï.+ suc N) m)
               (f (n ‚Ñï.+ (suc N)) (m ‚Ñï.+ (n ‚Ñï.+ suc N))
               (subst (N ‚Ñï.<_) (sym (‚Ñï.+-assoc _ _ _))
                 (‚Ñï.‚â§SumRight {suc N} {m ‚Ñï.+ n}))
               (‚Ñï.‚â§SumRight {suc N} {n}))


IsConvSeries'‚âÉIsCauchySequence'Sum : (s : Seq) ‚Üí
  IsConvSeries' s ‚âÉ IsCauchySequence' (seqŒ£ s)
IsConvSeries'‚âÉIsCauchySequence'Sum s =
  isoToEquiv (IsoIsConvSeries'IsCauchySequenceSum' s)

isCauchyAprox : (‚Ñö‚Çä ‚Üí ‚Ñù) ‚Üí Type
isCauchyAprox f = (Œ¥ Œµ : ‚Ñö‚Çä) ‚Üí
  (abs·µ£ (f Œ¥ +·µ£ (-·µ£  f Œµ)) <·µ£ rat (fst (Œ¥ ‚Ñö‚Çä+ Œµ)))

lim' : ‚àÄ x ‚Üí isCauchyAprox x ‚Üí ‚Ñù
lim' x y = lim x Œª Œ¥ Œµ  ‚Üí (invEq (‚àº‚âÉabs<Œµ _ _ _)) (y Œ¥ Œµ)

-- HoTT 11.3.49

fromCauchySequence : ‚àÄ s ‚Üí IsCauchySequence s ‚Üí ‚Ñù
fromCauchySequence s ics =
  lim x y

 where
 x : ‚Ñö‚Çä ‚Üí ‚Ñù
 x q = s (suc (fst (ics (‚Ñö‚Çä‚Üí‚Ñù‚Çä q))))

 y : (Œ¥ Œµ : ‚Ñö‚Çä) ‚Üí x Œ¥ ‚àº[ Œ¥ ‚Ñö‚Çä+ Œµ ] x Œµ
 y Œ¥ Œµ = invEq (‚àº‚âÉabs<Œµ _ _ _)
    (ww (‚Ñï.Dichotomy‚Ñï Œ¥‚Çô Œµ‚Çô) )
  where
  Œ¥‚Çô = fst (ics (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œ¥))
  Œµ‚Çô = fst (ics (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ))

  ww : _ ‚äé _ ‚Üí abs·µ£ (x Œ¥ +·µ£ (-·µ£ x Œµ)) <·µ£ rat (fst (Œ¥ ‚Ñö‚Çä+ Œµ))
  ww (inl Œ¥‚Çô‚â§Œµ‚Çô) =
   let z = snd (ics (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œ¥)) (suc Œµ‚Çô) (suc Œ¥‚Çô)
              ‚Ñï.‚â§-refl  (‚Ñï.suc-‚â§-suc Œ¥‚Çô‚â§Œµ‚Çô )
   in isTrans<·µ£ (abs·µ£ (x Œ¥ +·µ£ (-·µ£ x Œµ)))
           (rat (fst (Œ¥))) (rat (fst (Œ¥ ‚Ñö‚Çä+ Œµ)))
           z (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.<+‚Ñö‚Çä' (fst Œ¥) (fst Œ¥) Œµ (‚Ñö.isRefl‚â§ (fst Œ¥))))
  ww (inr Œµ‚Çô<Œ¥‚Çô) =
    let z = snd (ics (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ)) (suc Œµ‚Çô) (suc Œ¥‚Çô)
               (‚Ñï.‚â§-suc Œµ‚Çô<Œ¥‚Çô) ‚Ñï.‚â§-refl
    in isTrans<·µ£ (abs·µ£ (x Œ¥ +·µ£ (-·µ£ x Œµ)))
           (rat (fst (Œµ))) (rat (fst (Œ¥ ‚Ñö‚Çä+ Œµ)))
           z ((<‚Ñö‚Üí<·µ£ _ _
               (subst ((fst Œµ) ‚Ñö.<_) (‚Ñö.+Comm _ _)
               (‚Ñö.<+‚Ñö‚Çä' (fst Œµ) (fst Œµ) Œ¥ (‚Ñö.isRefl‚â§ (fst Œµ))))))


-- TODO HoTT 11.3.50.


fromCauchySequence'-isCA : ‚àÄ s ‚Üí (ics : IsCauchySequence' s) ‚Üí
      (Œ¥ Œµ : ‚Ñö‚Çä) ‚Üí s (suc (fst (ics Œ¥)))  ‚àº[ Œ¥ ‚Ñö‚Çä+ Œµ ]
                    s (suc (fst (ics Œµ)))
fromCauchySequence'-isCA s ics Œ¥ Œµ = invEq (‚àº‚âÉabs<Œµ _ _ _)
    (ww (‚Ñï.Dichotomy‚Ñï Œ¥‚Çô Œµ‚Çô) )
  where

  x : ‚Ñö‚Çä ‚Üí ‚Ñù
  x q = s (suc (fst (ics q)))

  Œ¥‚Çô = fst (ics Œ¥)
  Œµ‚Çô = fst (ics Œµ)

  ww : _ ‚äé _ ‚Üí abs·µ£ (x Œ¥ +·µ£ (-·µ£ x Œµ)) <·µ£ rat (fst (Œ¥ ‚Ñö‚Çä+ Œµ))
  ww (inl Œ¥‚Çô‚â§Œµ‚Çô) =
   let z = snd (ics Œ¥) (suc Œµ‚Çô) (suc Œ¥‚Çô)
              ‚Ñï.‚â§-refl  (‚Ñï.suc-‚â§-suc Œ¥‚Çô‚â§Œµ‚Çô )
   in isTrans<·µ£ (abs·µ£ (x Œ¥ +·µ£ (-·µ£ x Œµ)))
           (rat (fst (Œ¥))) (rat (fst (Œ¥ ‚Ñö‚Çä+ Œµ)))
           z (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.<+‚Ñö‚Çä' (fst Œ¥) (fst Œ¥) Œµ (‚Ñö.isRefl‚â§ (fst Œ¥))))
  ww (inr Œµ‚Çô<Œ¥‚Çô) =
    let z = snd (ics Œµ) (suc Œµ‚Çô) (suc Œ¥‚Çô)
               (‚Ñï.‚â§-suc Œµ‚Çô<Œ¥‚Çô) ‚Ñï.‚â§-refl
    in isTrans<·µ£ (abs·µ£ (x Œ¥ +·µ£ (-·µ£ x Œµ)))
           (rat (fst (Œµ))) (rat (fst (Œ¥ ‚Ñö‚Çä+ Œµ)))
           z ((<‚Ñö‚Üí<·µ£ _ _
               (subst ((fst Œµ) ‚Ñö.<_) (‚Ñö.+Comm _ _)
               (‚Ñö.<+‚Ñö‚Çä' (fst Œµ) (fst Œµ) Œ¥ (‚Ñö.isRefl‚â§ (fst Œµ))))))


fromCauchySequence' : ‚àÄ s ‚Üí IsCauchySequence' s ‚Üí ‚Ñù
fromCauchySequence' s ics =
  lim _ (fromCauchySequence'-isCA s ics)

open ‚Ñö.HLP


fromCauchySequence'-‚â°-lem : ‚àÄ s ics ics'
        ‚Üí  fromCauchySequence' s ics ‚â° fromCauchySequence' s ics'
fromCauchySequence'-‚â°-lem s ics ics' =
  eq‚Ñù _ _
    Œª Œµ ‚Üí
      let (n , N) = ics (/4‚Çä Œµ)
          (m , M) = ics' (/4‚Çä Œµ)
          n‚äîm = ‚Ñï.max (suc n) (suc m)
       in lim-lim _ _ _ (/4‚Çä Œµ) (/4‚Çä Œµ) _ _
           (dist‚Ñö0<! Œµ (
               ge1 +ge (neg-ge ((ge[ ‚Ñö.[ 1 / 4 ] ] +ge ge[ ‚Ñö.[ 1 / 4 ] ]))) ))
           (subst‚àº dist‚Ñö! (fst Œµ) ¬∑[ (ge[ ‚Ñö.[ 1 / 4 ] ] +ge ge[ ‚Ñö.[ 1 / 4 ] ]) ‚â°
               ge1 +ge (neg-ge ((ge[ ‚Ñö.[ 1 / 4 ] ] +ge ge[ ‚Ñö.[ 1 / 4 ] ]))) ]
          (triangle‚àº
            (invEq (‚àº‚âÉabs<Œµ _ _ (/4‚Çä Œµ)) (N n‚äîm (suc n) ‚Ñï.‚â§-refl ‚Ñï.left-‚â§-max))
            (invEq (‚àº‚âÉabs<Œµ _ _ (/4‚Çä Œµ)) (M (suc m) n‚äîm ‚Ñï.right-‚â§-max ‚Ñï.‚â§-refl))))

fromCauchySequence'‚â° : ‚àÄ s ics x
         ‚Üí ((‚àÄ (Œµ : ‚Ñö‚Çä) ‚Üí
             ‚àÉ[ N ‚àà ‚Ñï ] (‚àÄ n ‚Üí N ‚Ñï.< n ‚Üí
                  abs·µ£ ((s n) -·µ£ x) <·µ£ rat (fst Œµ))))
         ‚Üí fromCauchySequence' s ics ‚â° x
fromCauchySequence'‚â° s ics x p =
   eq‚Ñù _ _
  Œª Œµ ‚Üí PT.rec (isProp‚àº _ _ _)
    (Œª (N , X) ‚Üí
     let z = ‚Ñï.max (suc N) (suc (fst (ics (/4‚Çä Œµ))))
         uu = invEq (‚àº‚âÉabs<Œµ _ _ ((/4‚Çä Œµ))) ((X z ‚Ñï.left-‚â§-max))
         uuu = triangle‚àº (sym‚àº _ _ _
          (ùï£-lim-self _ (fromCauchySequence'-isCA s ics) (/4‚Çä Œµ) (/4‚Çä Œµ)))
            (triangle‚àº
          (invEq (‚àº‚âÉabs<Œµ _ _ (/4‚Çä Œµ))
            ((snd (ics (/4‚Çä Œµ))
              z ((suc (fst (ics (/4‚Çä Œµ))))) ‚Ñï.‚â§-refl
               ‚Ñï.right-‚â§-max))) uu)
     in subst‚àº (cong‚ÇÇ ‚Ñö._+_ (cong fst (‚Ñö./4‚Çä+/4‚Çä‚â°/2‚Çä Œµ))
        ((cong fst (‚Ñö./4‚Çä+/4‚Çä‚â°/2‚Çä Œµ))) ‚àô ‚Ñö.Œµ/2+Œµ/2‚â°Œµ _) uuu)
    (p (/4‚Çä Œµ))


-- fromCauchySequence'‚â§ : ‚àÄ s ics ‚Üí (‚àÄ n m ‚Üí n ‚Ñï.‚â§ m ‚Üí s m ‚â§·µ£ s n)
--     ‚Üí ‚àÄ n ‚Üí fromCauchySequence' s ics ‚â§·µ£ s n
-- fromCauchySequence'‚â§ s ics decr n =
--   {!!}

lim‚Çô‚Üí‚àû_is_ : Seq ‚Üí ‚Ñù ‚Üí Type
lim‚Çô‚Üí‚àû s is x =
  ‚àÄ (Œµ : ‚Ñù‚Çä) ‚Üí Œ£[ N ‚àà ‚Ñï ]
    (‚àÄ n ‚Üí N ‚Ñï.< n ‚Üí
      abs·µ£ ((s n) +·µ£ (-·µ£ x)) <·µ£ (fst Œµ))

lim'‚Çô‚Üí‚àû_is_ : Seq ‚Üí ‚Ñù ‚Üí Type
lim'‚Çô‚Üí‚àû s is x =
  ‚àÄ (Œµ : ‚Ñö‚Çä) ‚Üí Œ£[ N ‚àà ‚Ñï ]
    (‚àÄ n ‚Üí N ‚Ñï.< n ‚Üí
      abs·µ£ ((s n) +·µ£ (-·µ£ x)) <·µ£ (rat (fst Œµ)))


fromCauchySequence'-lim : ‚àÄ s ics ‚Üí lim'‚Çô‚Üí‚àû s is (fromCauchySequence' s ics)
fromCauchySequence'-lim s ics Œµ =
 let (N , X) = ics (/4‚Çä Œµ)
 in N , Œª n N<n ‚Üí
      let u = (ùï£-lim-self _ (fromCauchySequence'-isCA s ics) (/4‚Çä Œµ) (/4‚Çä Œµ))
          u' = fst (‚àº‚âÉabs<Œµ _ _ _)
               (triangle‚àº (invEq (‚àº‚âÉabs<Œµ _ _ (/4‚Çä Œµ)) ((X  _ _  N<n (‚Ñï.‚â§-refl {suc N})) )) u)
       in isTrans<·µ£ _ _ _ u'
            (<‚Ñö‚Üí<·µ£ _ _
              dist‚Ñö<! Œµ [ ge[ ‚Ñö.[ 1 / 4 ] ]
                            +ge  (ge[ ‚Ñö.[ 1 / 4 ] ] +ge ge[ ‚Ñö.[ 1 / 4 ] ]) < ge1 ])


Lim‚Çô‚Üí‚àû : Seq ‚Üí Type
Lim‚Çô‚Üí‚àû s = Œ£ _ (lim‚Çô‚Üí‚àû s is_)


Œµ<2‚Åø : (Œµ : ‚Ñö‚Çä) ‚Üí Œ£[ n ‚àà ‚Ñï ] fst Œµ ‚Ñö.< 2 ‚Ñö^‚Åø n
Œµ<2‚Åø Œµ = let n = fst (log2‚Ñï (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï  (fst (‚Ñö.ceil‚Ñö‚Çä Œµ)))) in n ,
         subst (fst Œµ ‚Ñö.<_) (sym (‚Ñö.fromNat-^ _ _))
          (‚Ñö.isTrans< _ _ (fromNat (2 ^ n))
                  ((snd (‚Ñö.ceil‚Ñö‚Çä Œµ)))
                   (‚Ñö.<‚Ñ§‚Üí<‚Ñö (‚Ñ§.pos (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï (fst (‚Ñö.ceil‚Ñö‚Çä Œµ))))
                     _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos  _ _
                    (fst (snd (log2‚Ñï (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï (fst (‚Ñö.ceil‚Ñö‚Çä Œµ)))))))))


1/2‚Åø<Œµ : (Œµ : ‚Ñö‚Çä) ‚Üí Œ£[ n ‚àà ‚Ñï ] [ 1 / 2 ] ‚Ñö^‚Åø n ‚Ñö.< fst Œµ
1/2‚Åø<Œµ Œµ =
 let (n , 1/Œµ<n) = Œµ<2‚Åø (inv‚Ñö‚Çä Œµ)
 in n , invEq (‚Ñö.inv‚Ñö‚Çä-<-inv‚Ñö‚Çä (([ 1 / 2 ] , _) ‚Ñö‚Çä^‚Åø n) Œµ)
         (subst (fst (inv‚Ñö‚Çä Œµ) ‚Ñö.<_)
           (sym (‚Ñö.inv‚Ñö‚Çä-‚Ñö^‚Åø ([ 1 / 2 ] , _) n)) 1/Œµ<n)




ratio‚ÜíseqLimit : ‚àÄ (s : Seq) ‚Üí (‚àÄ n ‚Üí Œ£[ r ‚àà ‚Ñö ] (s n ‚â° rat r))
  ‚Üí (sPos : ‚àÄ n ‚Üí rat 0 <·µ£ (s n))
  ‚Üí lim'‚Çô‚Üí‚àû (Œª n ‚Üí  s (suc n) Ôºè·µ£[ s n , inl ((sPos n)) ]) is 0
  ‚Üí lim'‚Çô‚Üí‚àû s is 0
ratio‚ÜíseqLimit s sRat sPos l (Œµ , 0<Œµ) =
 (uncurry w)
    (l ([ 1 / 2 ] , _))

 where
 opaque
  unfolding -·µ£_
  w : ‚àÄ N ‚Üí ((n : ‚Ñï) ‚Üí  N ‚Ñï.< n ‚Üí
           abs·µ£ ((s (suc n) Ôºè·µ£[ s n , inl (sPos n) ]) +·µ£ (-·µ£ 0)) <·µ£
           rat [ 1 / 2 ]) ‚Üí
        Œ£ ‚Ñï (Œª N ‚Üí (n : ‚Ñï) ‚Üí N ‚Ñï.< n ‚Üí abs·µ£ (s n +·µ£ (-·µ£ 0)) <·µ£ rat Œµ)
  w N f =
      let 0<s' = ((subst (0 <·µ£_) (snd (sRat (suc N))))
                    (sPos (suc N)))
          Œ¥‚Çä = (Œµ , 0<Œµ) ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä (fst (sRat (suc N)) ,
                  (‚Ñö.<‚Üí0< _  (<·µ£‚Üí<‚Ñö 0 _
                    0<s')))
          (m¬Ω , q) = 1/2‚Åø<Œµ Œ¥‚Çä
          pp : rat ([ 1 / 2 ] ‚Ñö^‚Åø m¬Ω)  <·µ£
                  ((rat Œµ ¬∑·µ£ inv‚Ñù (s (suc N)) (inl (sPos _))))
          pp = isTrans<‚â°·µ£ _ _ _ (<‚Ñö‚Üí<·µ£ _ _ q)
                  (rat¬∑·µ£rat _ _ ‚àô
                    cong (rat Œµ ¬∑·µ£_)
                      (cong rat (sym (‚Ñö.inv‚Ñö‚Çä‚â°inv‚Ñö _
                        (inl (<·µ£‚Üí<‚Ñö 0 _ 0<s'))))
                        ‚àô sym (inv‚Ñù-rat _ (inl 0<s') _) ‚àô
                        cong‚ÇÇ inv‚Ñù (sym (snd (sRat (suc N))))
                          (isProp‚ÜíPathP (Œª i ‚Üí isPropÔºÉ _ _)  _ _)))
          pp' = subst ((rat ([ ‚Ñ§.pos 1 / 1+ 1 ] ‚Ñö^‚Åø m¬Ω) ¬∑·µ£ s (suc N)) <·µ£_)
                   ([x/y]¬∑y·µ£ _ _ _) (<·µ£-¬∑·µ£o _ _ (s (suc N) , (sPos _)) pp)
          zzz : ‚àÄ m ‚Üí s (((suc (suc (m ‚Ñï.+ m¬Ω))) ‚Ñï.+ N))
                      ‚â§·µ£
                       s (suc N) ¬∑·µ£  (rat ([ ‚Ñ§.pos 1 / 1+ 1 ] ‚Ñö^‚Åø m¬Ω))
          zzz m  = isTrans‚â§·µ£ _ _ _ (g (m ‚Ñï.+ m¬Ω))
                      (‚â§·µ£-o¬∑·µ£ _ _ (s (suc N)) (<·µ£Weaken‚â§·µ£ _ _ (sPos _))
                        (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (subst2 ‚Ñö._‚â§_ (‚Ñö.¬∑-‚Ñö^‚Åø (suc m) m¬Ω [ 1 / 2 ])
                            (‚Ñö.¬∑IdL _)
                           (‚Ñö.‚â§-¬∑o (([ ‚Ñ§.pos 1 / 1+ 1 ] ‚Ñö^‚Åø (suc m)))
                                1 _ ((‚Ñö.0‚â§‚Ñö‚Çä (_ ‚Ñö‚Çä^‚Åø m¬Ω)))
                                   (‚Ñö.x^‚Åø‚â§1 [ ‚Ñ§.pos 1 / 1+ 1 ] (suc m)
                                     (ùüö.toWitness
                                        {Q = ‚Ñö.‚â§Dec 0  [ ‚Ñ§.pos 1 / 1+ 1 ]} tt)
                                     (ùüö.toWitness
                                        {Q = ‚Ñö.‚â§Dec [ ‚Ñ§.pos 1 / 1+ 1 ] 1} tt))
                                   ))) )
      in (1 ‚Ñï.+ m¬Ω) ‚Ñï.+ N ,
           Œª m <m ‚Üí
            isTrans‚â§<·µ£ _ _ _ (
                subst2 (_‚â§·µ£_)
                (cong s ((cong (‚Ñï._+ N) (cong suc (sym (+-suc _ _))
                 ‚àô sym (+-suc _ _)) ‚àô sym (‚Ñï.+-assoc _ _ N) )
                    ‚àô snd <m) ‚àô sym (abs·µ£Pos _ (sPos _))
                  ‚àô cong abs·µ£ (sym (+IdR (s m))) )
                  (¬∑·µ£Comm _ _)
                 (zzz (fst <m)) --(zzz m <m)
                 ) pp'
           --   (lower‚ÑöBound (Œµ ¬∑·µ£ inv‚Ñù (s (suc N)) (inl (sPos _)))
           -- (‚Ñù‚Çä¬∑ (Œµ , 0<Œµ) (_ , inv‚Ñù-pos (s (suc N)) (sPos _))))
   where

    f' : ((n : ‚Ñï) ‚Üí  N ‚Ñï.< n ‚Üí
           (s (suc n)) <·µ£
           s n ¬∑·µ£ rat [ 1 / 2 ])
    f' n n< =
     subst2 _<·µ£_
       ((congS (_¬∑·µ£ s n) (+IdR _) ‚àô
         [x/y]¬∑y·µ£ _ _ _)) (¬∑·µ£Comm _ _)
      (<·µ£-¬∑·µ£o _ _ (s n , sPos _)
       (isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _) (f n n<)))

    g : ‚àÄ m ‚Üí s ((suc (suc m)) ‚Ñï.+ N)
              ‚â§·µ£ (s (suc N)) ¬∑·µ£ rat ([ 1 / 2 ] ‚Ñö^‚Åø (suc m))
    g zero = subst (s (suc (suc N)) ‚â§·µ£_)
                 (cong ((s (suc N) ¬∑·µ£_) ‚àò rat) (sym (‚Ñö.¬∑IdR _)))
                  (<·µ£Weaken‚â§·µ£ _ _ (f' (suc N) (‚Ñï.‚â§-refl {suc N})))
    g (suc m) =
      isTrans‚â§·µ£ _ _ _ (<·µ£Weaken‚â§·µ£ _ _ (f' (2 ‚Ñï.+ m ‚Ñï.+ N)
       (subst (N ‚Ñï.<_)
         (cong suc (‚Ñï.+-suc _ _)) (‚Ñï.‚â§SumRight {suc N} {suc m})))) ww
     where
     ww : (s (suc (suc m) ‚Ñï.+ N) ¬∑·µ£ rat [ 1 / 2 ]) ‚â§·µ£
          (s (suc N) ¬∑·µ£ rat ([ 1 / 2 ] ‚Ñö^‚Åø suc (suc m)))

     ww =
        subst ((s (suc (suc m) ‚Ñï.+ N) ¬∑·µ£ rat [ 1 / 2 ]) ‚â§·µ£_)

          (sym (¬∑·µ£Assoc _ _ _) ‚àô
            cong (s (suc N) ¬∑·µ£_) (sym (rat¬∑·µ£rat _ _)))
             (‚â§·µ£-¬∑o _ _ [ 1 / 2 ] (‚Ñö.dec‚Ñö‚â§? {0} {[ 1 / 2 ]}) (g m))


-- TODO : generalize properly
ratioTest‚Çä : ‚àÄ (s : Seq) ‚Üí (sPos : ‚àÄ n ‚Üí rat 0 <·µ£ (s n))
     ‚Üí lim'‚Çô‚Üí‚àû s is 0
     ‚Üí (lim'‚Çô‚Üí‚àû (Œª n ‚Üí  s (suc n) Ôºè·µ£[ s n , inl ((sPos n)) ]) is 0)
     ‚Üí IsConvSeries' s
ratioTest‚Çä s sPos l' l Œµ‚Çä@(Œµ , 0<Œµ) =
  N , ww

 where
 ¬Ω·µ£ = (‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ 1 / 2 ] , _))
 N¬Ω = l ([ 1 / 2 ] , _)
 Œµ/2 : ‚Ñö‚Çä
 Œµ/2 = /2‚Çä Œµ‚Çä

 NŒµ = (l' Œµ/2)

 N : ‚Ñï
 N = suc (‚Ñï.max (suc (fst N¬Ω)) (fst NŒµ))

 ww : ‚àÄ m n ‚Üí abs·µ£ (seqŒ£ (Œª x ‚Üí s (x ‚Ñï.+ (m ‚Ñï.+ suc N))) n) <·µ£ (rat Œµ)
 ww m n = isTrans‚â§<·µ£ _ _ _
   (‚â°·µ£Weaken‚â§·µ£ _ _
     (abs·µ£NonNeg (seqŒ£ (Œª x ‚Üí s (x ‚Ñï.+ (m ‚Ñï.+ suc N))) n)
     (0‚â§seqŒ£ _ (Œª n ‚Üí <·µ£Weaken‚â§·µ£ _ _ (sPos (n ‚Ñï.+ (m ‚Ñï.+ suc N)))) _))) pp

  where
  opaque
   unfolding -·µ£_ _+·µ£_

   s' : Seq
   s' = s ‚àò (‚Ñï._+ (suc (m ‚Ñï.+ N)))


   f' : ((n : ‚Ñï) ‚Üí  N ‚Ñï.‚â§ n ‚Üí
          (s (suc n)) ‚â§·µ£
          s n ¬∑·µ£ rat [ 1 / 2 ])
   f' n n< =
      subst2 {x = ((s (suc n) Ôºè·µ£[ s n , inl (sPos n) ])
                     +·µ£ 0 ) ¬∑·µ£ s n }
         _‚â§·µ£_ (congS (_¬∑·µ£ s n) (+IdR _) ‚àô
           [x/y]¬∑y·µ£ _ _ _) (¬∑·µ£Comm _ _)
        ((<·µ£Weaken‚â§·µ£ _ _
           (<·µ£-¬∑·µ£o _ _ (s n , sPos _)
            (isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _)
              (snd N¬Ω n (
               ‚Ñï.<-trans (‚Ñï.left-‚â§-max {suc (fst N¬Ω)} {fst NŒµ})
                n<))))))


   p : ‚àÄ n ‚Üí s' n ‚â§·µ£ geometricProgression (s (m ‚Ñï.+ N)) (fst ¬Ω·µ£) n
   p zero =
      isTrans‚â§·µ£ _ _ _ ((f' (m ‚Ñï.+ N) (‚Ñï.‚â§SumRight {N} {m}) ))
              (subst ((s (m ‚Ñï.+ N) ¬∑·µ£ rat [ ‚Ñ§.pos 1 / 1+ 1 ]) ‚â§·µ£_)
                 (¬∑IdR _)
                  (‚â§·µ£-o¬∑·µ£ (fst ¬Ω·µ£) 1 (s (m ‚Ñï.+ N))
                    (<·µ£Weaken‚â§·µ£ _ _ (sPos _))
                   (‚â§‚Ñö‚Üí‚â§·µ£ _ _ ((ùüö.toWitness {Q = ‚Ñö.‚â§Dec ([ 1 / 2 ]) 1} _)))))

   p (suc n) =
     isTrans‚â§·µ£ _ _ _ (f' _
       (subst (N ‚Ñï.‚â§_) (sym (‚Ñï.+-assoc n (1 ‚Ñï.+ m) N))
         ‚Ñï.‚â§SumRight))
       (‚â§·µ£-¬∑o _ _ ([ 1 / 2 ]) ((ùüö.toWitness {Q = ‚Ñö.‚â§Dec 0 ([ 1 / 2 ])} _)) (p n))

   p' : ‚àÄ n ‚Üí seqSumUpTo' s' n ‚â§·µ£ seqSumUpTo' (geometricProgression (s (m ‚Ñï.+ N)) (fst ¬Ω·µ£)) n
   p' = Seq'‚â§‚ÜíŒ£‚â§ s' (geometricProgression (s (m ‚Ñï.+ N)) (fst ¬Ω·µ£))
         p

   s<Œµ : (s (m ‚Ñï.+ N)) <·µ£ rat (fst Œµ/2)
   s<Œµ = subst (_<·µ£ rat (fst Œµ/2)) (+IdR _)
            ((isTrans‚â§<·µ£ _ _ _
           (‚â§abs·µ£ ((s (m ‚Ñï.+ N)) +·µ£ (-·µ£ 0))) (snd NŒµ _
            (‚Ñï.‚â§<-trans ‚Ñï.right-‚â§-max ‚Ñï.‚â§SumRight))))


   pp : (seqŒ£ (Œª x ‚Üí s (x ‚Ñï.+ (m ‚Ñï.+ suc N))) n) <·µ£ (rat Œµ)
   pp =
       subst {x = ‚Ñï._+ suc (m ‚Ñï.+ N) } {y = Œª z ‚Üí z ‚Ñï.+ (m ‚Ñï.+ suc N)}
            (Œª h ‚Üí seqŒ£ (s ‚àòS h) n <·µ£ rat Œµ)

           (funExt (Œª x ‚Üí cong (x ‚Ñï.+_) (sym (‚Ñï.+-suc _ _)) ))
           (isTrans‚â§<·µ£ _ _ _ (p' n)
             (isTrans‚â§<·µ£ _ _ _
               (‚â°·µ£Weaken‚â§·µ£ _ _ (seqSumUpTo‚â°seqSumUpTo' _ _))
                 (isTrans<‚â§·µ£ _ _ _
                  (S‚Çô-sup (s (m ‚Ñï.+ N)) (fst ¬Ω·µ£)
                    n (sPos _) (snd ¬Ω·µ£)
                     (<‚Ñö‚Üí<·µ£ _ _ ((ùüö.toWitness {Q = ‚Ñö.<Dec [ 1 / 2 ] 1} tt))))
                 (isTrans‚â§·µ£ _ _ _
                   (‚â§·µ£‚ÇäMonotone¬∑·µ£ _ _ _ 2
                         (<·µ£Weaken‚â§·µ£ _ _ (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.0<‚Ñö‚Çä Œµ/2)))
                           (<·µ£Weaken‚â§·µ£ _ _
                              ((0<1/x _ _ (
                        <‚Ñö‚Üí<·µ£ _ _
                        (ùüö.toWitness {Q = ‚Ñö.<Dec 0 [ 1 / 2 ]} tt)))))

                     (<·µ£Weaken‚â§·µ£ _ _ s<Œµ)
                     (‚â°·µ£Weaken‚â§·µ£ _ _
                        (inv‚Ñù-rat _ _
                         (inl ((ùüö.toWitness {Q = ‚Ñö.<Dec 0 [ 1 / 2 ]} tt))))))
                         (‚â°·µ£Weaken‚â§·µ£ _ _ (sym (rat¬∑·µ£rat _  _) ‚àô
                           cong rat (sym (‚Ñö.¬∑Assoc _ _ _) ‚àô
                             cong (Œµ ‚Ñö.¬∑_) ‚Ñö.dec‚Ñö? ‚àô ‚Ñö.¬∑IdR _)))

                         ))))


expSeq : ‚Ñù ‚Üí Seq
expSeq x zero = 1
expSeq x (suc n) = /n·µ£ (1+ n) (expSeq x n ¬∑·µ£ x)

expSeq-rat : ‚àÄ (q : ‚Ñö) ‚Üí (n : ‚Ñï) ‚Üí Œ£[ r ‚àà ‚Ñö ] (expSeq (rat q) n ‚â° rat r)
expSeq-rat q zero = 1 , refl
expSeq-rat q (suc n) =
  let (e , p) = expSeq-rat q n
  in (e ‚Ñö.¬∑ q)  ‚Ñö.¬∑ [ 1 / (1+ n) ] ,
       cong (/n·µ£ (1+ n)) (cong (_¬∑·µ£ (rat q)) p ‚àô sym (rat¬∑·µ£rat _ _))

expSeries-rat : ‚àÄ (q : ‚Ñö) ‚Üí (n : ‚Ñï) ‚Üí
  Œ£[ r ‚àà ‚Ñö ] (seqŒ£ (expSeq (rat q)) n ‚â° rat r)
expSeries-rat q zero = 0 , refl
expSeries-rat q (suc n) =
  let (e , p) = expSeries-rat q n
      (e' , p') = expSeq-rat q n
  in (e ‚Ñö.+ e') , cong‚ÇÇ _+·µ£_ p p' ‚àô +·µ£-rat _ _

expSeqPos : ‚àÄ x ‚Üí 0 <·µ£ x ‚Üí ‚àÄ n ‚Üí 0 <·µ£ expSeq x n
expSeqPos x 0<x zero = dec‚Ñö<·µ£?
expSeqPos x 0<x (suc n) =
 /n·µ£-pos (1+ n) _ (‚Ñù‚Çä¬∑ (_ , expSeqPos x 0<x n) (_ , 0<x))

lim‚Çô‚Üí‚àû[expSeqRatio]=0 : ‚àÄ x ‚Üí ‚àÄ (0<x : 0 ‚Ñö.< x)  ‚Üí lim'‚Çô‚Üí‚àû
      (Œª n ‚Üí
         expSeq (rat x) (suc n) Ôºè·µ£[ expSeq (rat x) n ,
         inl (expSeqPos (rat x) (<‚Ñö‚Üí<·µ£ 0 x 0<x) n) ])
      is 0
lim‚Çô‚Üí‚àû[expSeqRatio]=0 x 0<x =
  subst (lim'‚Çô‚Üí‚àû_is 0)
    (funExt (w (rat x) (<‚Ñö‚Üí<·µ£ 0 x 0<x)))
    w'

 where
 opaque
  unfolding -·µ£_

  x‚Çä : ‚Ñö‚Çä
  x‚Çä = x , ‚Ñö.<‚Üí0< _ 0<x

  0<·µ£x : 0 <·µ£ rat x
  0<·µ£x = <‚Ñö‚Üí<·µ£ 0 x 0<x
  w : ‚àÄ x 0<x n ‚Üí (x ¬∑·µ£ rat ([ 1 / 1+ n ])) ‚â° (expSeq x (suc n) Ôºè·µ£[ expSeq x n ,
                     inl (expSeqPos x 0<x n) ])
  w x 0<x zero = cong‚ÇÇ {y = expSeq x 1} _¬∑·µ£_
         (( sym (¬∑IdR x) ‚àô
         (cong
             (x ¬∑·µ£_) (sym (inv‚Ñù-rat _
               (invEq (ratÔºÉ _ _) (inl (‚Ñö.dec‚Ñö<? {0} {1})))
                (inl (‚Ñö.dec‚Ñö<? {0} {1}))))) ‚àô sym (/n·µ£-Ôºè·µ£ 1 (x)
           (invEq (ratÔºÉ _ _) (inl (‚Ñö.dec‚Ñö<? {0} {1}))))
            ‚àô (cong (/n·µ£ 1) (sym (¬∑IdL x))) ) )
      (sym (inv‚Ñù-rat 1 (inl ((expSeqPos x 0<x zero)))
             ((inl (‚Ñö.dec‚Ñö<? {0} {1})))))

  w x 0<x (suc n) =
    let z = _
        z' = _
    in ((cong (x ¬∑·µ£_) ((sym (¬∑IdL _) ‚àô
          cong‚ÇÇ _¬∑·µ£_ (sym (x¬∑inv‚Ñù[x] _ _))
            (cong rat (sym (‚Ñö.fromNat-inv‚Ñö _
                 (inl (‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _ (‚Ñ§.suc-‚â§-suc ‚Ñ§.zero-‚â§pos )))))
              ‚àô sym (inv‚Ñù-rat _ _ _)))
                ‚àô sym (¬∑·µ£Assoc _ _ _))
          ‚àô ¬∑·µ£Assoc _ (expSeq x (suc n)) _)
            ‚àô cong‚ÇÇ (_¬∑·µ£_) (¬∑·µ£Comm _ _) (¬∑·µ£Comm z' z))
        ‚àô (¬∑·µ£Assoc _ z z'
          ‚àô cong (_Ôºè·µ£[ expSeq x (suc n) ,
                     inl (expSeqPos x 0<x (suc n)) ])
                      (sym (/n·µ£-Ôºè·µ£ (2+ n) (/n·µ£ (1+ n) (expSeq x n ¬∑·µ£ x) ¬∑·µ£ x)
                        (inl (<‚Ñö‚Üí<·µ£ 0 _ (‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _
                          (‚Ñ§.suc-‚â§-suc ‚Ñ§.zero-‚â§pos )))))))

  w' : lim'‚Çô‚Üí‚àû (Œª n ‚Üí (rat x ¬∑·µ£ rat ([ 1 / 1+ n ]))) is 0
  w' Œµ =
   let (cN , X) = ‚Ñö.ceil‚Ñö‚Çä (x‚Çä ‚Ñö‚Çä¬∑ (inv‚Ñö‚Çä Œµ))

       X'' = subst (‚Ñö._< [ pos (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï cN) / 1+ 0 ])
                (cong (x ‚Ñö.¬∑_) (sym (‚Ñö.inv‚Ñö‚Çä‚â°inv‚Ñö Œµ _) ))
              X
       X' : x ‚Ñö.¬∑ [ pos 1 / 1+ (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï cN) ] ‚Ñö.< fst Œµ

       X' = subst (‚Ñö._< fst Œµ)
              ((cong (x ‚Ñö.¬∑_) (‚Ñö.fromNat-inv‚Ñö _ _)))
             (‚Ñö.‚Ñö-x/y<z‚Üíx/z<y x [ pos (suc (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï cN)) / 1 ] (fst Œµ)
                         0<x (‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _ (‚Ñ§.suc-‚â§-suc ‚Ñ§.zero-‚â§pos))
                          (‚Ñö.0<‚Üí< _ (snd Œµ))
                          (‚Ñö.isTrans< _ [ pos ((‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï cN)) / 1+ 0 ] _
                            X'' (‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _ ‚Ñ§.isRefl‚â§ )))
   in (suc (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï cN)) , (Œª n' <n' ‚Üí
       let 0<n' = ‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _
              (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _ (‚Ñï.suc-‚â§-suc ‚Ñï.zero-‚â§))
       in isTrans‚â°<·µ£ _ _ _
           (cong abs·µ£ (+IdR _) ‚àô abs·µ£Pos _
             (‚Ñù‚Çä¬∑ (_ , <‚Ñö‚Üí<·µ£ 0 x 0<x)
                        (_ ,
                           <‚Ñö‚Üí<·µ£ _ _
                            (‚Ñö.inv‚Ñö-pos [ pos (suc n') / 1 ]
                             (inl 0<n') 0<n')))
                              ‚àô sym (rat¬∑·µ£rat _ _))
            (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.isTrans< _ _ _
              (‚Ñö.<-o¬∑ [ 1 / 1+ n' ]
                      [ 1 / 1+ (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï cN) ] x 0<x
                       ((‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _ (‚Ñï.‚â§-suc <n'))))
                           X')))


lim‚Çô‚Üí‚àû[expSeq]=0 : ‚àÄ x ‚Üí (0<x : 0 ‚Ñö.< x) ‚Üí  lim'‚Çô‚Üí‚àû expSeq (rat x) is 0
lim‚Çô‚Üí‚àû[expSeq]=0 x 0<x =
  ratio‚ÜíseqLimit _ (expSeq-rat x)
      (expSeqPos (rat x) _) (lim‚Çô‚Üí‚àû[expSeqRatio]=0 x 0<x)


expSeriesConvergesAt‚Ñö‚Çä : ‚àÄ x ‚Üí 0 ‚Ñö.< x ‚Üí IsConvSeries' (expSeq (rat x))
expSeriesConvergesAt‚Ñö‚Çä x 0<x =
 ratioTest‚Çä (expSeq (rat x)) (expSeqPos (rat x) (<‚Ñö‚Üí<·µ£ _ _ 0<x))
      (lim‚Çô‚Üí‚àû[expSeq]=0 x  0<x)
      (lim‚Çô‚Üí‚àû[expSeqRatio]=0 x 0<x)

exp‚Ñö‚Çä : ‚Ñö‚Çä ‚Üí ‚Ñù
exp‚Ñö‚Çä q = fromCauchySequence' _
  (fst (IsConvSeries'‚âÉIsCauchySequence'Sum (expSeq (rat (fst q))))
    (expSeriesConvergesAt‚Ñö‚Çä (fst q) (‚Ñö.0<‚Ñö‚Çä q)))


expSeriesVal : ‚Ñï ‚Üí ‚Ñö
expSeriesVal n = fst (expSeries-rat 1 n)

ùëí : ‚Ñù
ùëí = exp‚Ñö‚Çä 1
