{-# OPTIONS --safe --lossy-unification #-}

module Cubical.HITs.CauchyReals.Multiplication where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Structure
open import Cubical.Foundations.Function
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Powerset

open import Cubical.Data.Bool as ùüö hiding (_‚â§_)
open import Cubical.Data.Nat as ‚Ñï hiding (_¬∑_;_+_)
open import Cubical.Data.Nat.Order as ‚Ñï
open import Cubical.Data.Unit
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Int as ‚Ñ§ using (pos)
import Cubical.Data.Int.Order as ‚Ñ§
open import Cubical.Data.Sigma

open import Cubical.HITs.PropositionalTruncation as PT
open import Cubical.HITs.SetQuotients as SQ renaming (_/_ to _//_)

open import Cubical.Data.NatPlusOne

import Cubical.Algebra.CommRing as CR

open import Cubical.Data.Rationals as ‚Ñö using (‚Ñö ; [_/_])
open import Cubical.Data.Rationals.Order as ‚Ñö using
  ( _‚Ñö‚Çä+_ ; 0<_ ; ‚Ñö‚Çä ; _‚Ñö‚Çä¬∑_ ; ‚Ñö‚Çä‚â°)
open import Cubical.Data.Rationals.Order.Properties as ‚Ñö
 using (inv‚Ñö‚Çä;/2‚Çä;/3‚Çä;/4‚Çä)


open import Cubical.HITs.CauchyReals.Base
open import Cubical.HITs.CauchyReals.Lems
open import Cubical.HITs.CauchyReals.Closeness
open import Cubical.HITs.CauchyReals.Lipschitz
open import Cubical.HITs.CauchyReals.Order
open import Cubical.HITs.CauchyReals.Continuous

open import Cubical.HITs.SequentialColimit as SCL
open import Cubical.Data.Sequence

private
  variable
    ‚Ñì ‚Ñì' : Level

record Seq‚äÜ : Type‚ÇÅ where
 field
  ùï° : ‚Ñï ‚Üí ‚Ñô ‚Ñù
  ùï°‚äÜ : ‚àÄ n ‚Üí ùï° n ‚äÜ ùï° (suc n)


 ùï°‚äÜ+ : ‚àÄ n m ‚Üí ùï° n ‚äÜ ùï° (m ‚Ñï.+ n)
 ùï°‚äÜ+ n zero = ‚äÜ-refl _
 ùï°‚äÜ+ n (suc m) x = ùï°‚äÜ _ x ‚àò ùï°‚äÜ+ n m x

 ùï°‚äÜ' : ‚àÄ n m ‚Üí n ‚Ñï.‚â§ m ‚Üí ùï° n ‚äÜ ùï° m
 ùï°‚äÜ' n m (k , p) x = subst (Œª l ‚Üí x ‚àà ùï° l) p ‚àò ùï°‚äÜ+ _ _ x

 _s‚äá_ : ‚Ñô ‚Ñù ‚Üí Type‚ÇÄ
 _s‚äá_ P = ‚àÄ x ‚Üí x ‚àà P ‚Üí ‚àÉ[ n ‚àà ‚Ñï ] x ‚àà ùï° n


 _s‚äÜ_ : ‚Ñô ‚Ñù ‚Üí Type‚ÇÄ
 _s‚äÜ_ P = ‚àÄ n ‚Üí ùï° n ‚äÜ P


 elimProp-‚à© : ‚àÄ P ‚Üí ‚àÄ x ‚Üí x ‚àà P  ‚Üí (P‚äá : _s‚äá_ P) ‚Üí (A : ‚Ñù ‚Üí Type)
    ‚Üí (‚àÄ x ‚Üí isProp (A x))
    ‚Üí (‚àÄ n ‚Üí x ‚àà ùï° n ‚Üí A x)
    ‚Üí A x
 elimProp-‚à© P x x‚ààP P‚äá A propA a  =
   PT.rec (propA _)
     (Œª (n , x‚àà‚Çô) ‚Üí a n x‚àà‚Çô)
     (P‚äá x x‚ààP)

 elimProp-‚à©' : ‚àÄ P ‚Üí ‚àÄ x x‚ààP  ‚Üí (_s‚äá_ P) ‚Üí (s‚äÜP : _s‚äÜ_ P)
   ‚Üí (A : ‚àÄ x ‚Üí x ‚àà P  ‚Üí Type)
    ‚Üí (‚àÄ x‚àà ‚Üí isProp (A x x‚àà))
    ‚Üí (‚àÄ n x‚àà‚Çô ‚Üí A x (s‚äÜP n x x‚àà‚Çô ))
    ‚Üí A x x‚ààP
 elimProp-‚à©' P x x‚ààP P‚äá Ps‚äÜ A propA a  =
   PT.rec (propA _)
     (Œª (n , x‚àà‚Çô) ‚Üí subst (A x) (‚àà-isProp P x _ _) (a n x‚àà‚Çô))
     (P‚äá x x‚ààP)


 elemùï°-Seq : Sequence ‚Ñì-zero
 elemùï°-Seq .Sequence.obj n = Œ£ _ (_‚àà ùï° n)
 elemùï°-Seq .Sequence.map = map-snd (ùï°‚äÜ _ _)

 elemùï°-Seq* : ‚Ñù ‚Üí Sequence ‚Ñì-zero
 elemùï°-Seq* x .Sequence.obj n = x ‚àà ùï° n
 elemùï°-Seq* x .Sequence.map = ùï°‚äÜ _ _

 -- module _ P (s‚äáP : _s‚äá_ P) (s‚äÜP : _s‚äÜ_ P) where

 --  toSC : ‚àÄ x ‚Üí ‚àÉ[ n ‚àà ‚Ñï ] x ‚àà ùï° n ‚Üí ElemLim-ùï°
 --  toSC x = {!s‚äáP x!}

 --  fromSC : ElimData elemùï°-Seq (Œª _ ‚Üí Œ£ ‚Ñù (_‚àà P))
 --  fromSC .ElimData.inclP {k} = map-snd (s‚äÜP k _)
 --  fromSC .ElimData.pushP _ = Œ£‚â°Prop (snd ‚àò P) refl


 --  isoElemP : Iso (Œ£ _ (_‚àà P)) ElemLim-ùï°
 --  isoElemP .Iso.fun (x , x‚àà) = toSC x (s‚äáP x x‚àà)
 --  isoElemP .Iso.inv = SCL.elim _ _ fromSC
 --  isoElemP .Iso.rightInv = {!!}
 --  isoElemP .Iso.leftInv = {!!}

open Seq‚äÜ

‚ÑùU : ‚Ñô ‚Ñù
‚ÑùU x .fst = Unit
‚ÑùU x .snd = isPropUnit

Seq‚äÜ-<N : Seq‚äÜ
Seq‚äÜ-<N .Seq‚äÜ.ùï° n x = (x <·µ£ fromNat (suc n)) , isProp<·µ£ _ _
Seq‚äÜ-<N .Seq‚äÜ.ùï°‚äÜ n x x‚àà =
  isTrans<·µ£ _ _ _ x‚àà
   (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _ ‚Ñ§.isRefl‚â§))

Seq‚äÜ-abs<N : Seq‚äÜ
Seq‚äÜ-abs<N .Seq‚äÜ.ùï° n x =
   (fromNeg (suc n) <·µ£ x) √ó (x <·µ£ fromNat (suc n)) ,
     isProp√ó (isProp<·µ£ _ _) (isProp<·µ£ _ _)
Seq‚äÜ-abs<N .Seq‚äÜ.ùï°‚äÜ n x (<x , x<) =
  isTrans<·µ£ _ _ _
   (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _ ‚Ñ§.isRefl‚â§)) <x
   , isTrans<·µ£ _ _ _ x<
   (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _ ‚Ñ§.isRefl‚â§))



record Seq‚äÜ‚Üí (A : Type ‚Ñì) (s : Seq‚äÜ) : Type ‚Ñì where
 field
  fun : ‚àÄ x n ‚Üí x ‚àà ùï° s n ‚Üí A
  fun‚äÜ : ‚àÄ x n m x‚àà x‚àà' ‚Üí n ‚Ñï.< m ‚Üí fun x n x‚àà ‚â° fun x m x‚àà'

 module FromIntersection (isSetA : isSet A) P (s‚äÜP : s s‚äá P) where

  2c : ‚àÄ x n n' n‚àà n‚àà' ‚Üí fun x n n‚àà ‚â° fun x n' n‚àà'
  2c x = ‚Ñï.elimBy‚â§ (Œª n n' X n‚àà n'‚àà  ‚Üí sym (X n'‚àà n‚àà))
         Œª n n' ‚Üí ‚äé.rec (Œª n<n' _ _ ‚Üí fun‚äÜ _ _ _ _ _ n<n')
           (Œª p _ _ ‚Üí cong (uncurry (fun x))
           (Œ£‚â°Prop (Œª n ‚Üí ‚àà-isProp (ùï° s n) x) p)) ‚àò ‚â§-split

  ‚à©$ : ‚àÄ x ‚Üí x ‚àà P  ‚Üí A
  ‚à©$ x x‚àà =
    PT.rec‚ÜíSet isSetA (Œª (n , n‚àà) ‚Üí fun x n n‚àà)
       (Œª (n , n‚àà) (n' , n'‚àà) ‚Üí 2c x n n' n‚àà n'‚àà) (s‚äÜP x x‚àà)


  -- it shouulb by possisble also for hSet
  ‚à©$-elimProp : ‚àÄ x x‚àà ‚Üí {B : A ‚Üí Type ‚Ñì}
     ‚Üí (‚àÄ a ‚Üí isProp (B a))
     ‚Üí (‚àÄ n x‚àà ‚Üí B (fun x n x‚àà))
     ‚Üí B (‚à©$ x x‚àà)
  ‚à©$-elimProp x x‚àà {B} isPropB g =
    PT.elim (isPropB ‚àò PT.rec‚ÜíSet isSetA (Œª (n , n‚àà) ‚Üí fun x n n‚àà)
       (Œª (n , n‚àà) (n' , n'‚àà) ‚Üí 2c x n n' n‚àà n'‚àà))
      (uncurry g)
      (s‚äÜP x x‚àà)


  ‚à©$-lem : ‚àÄ x x‚àà ‚Üí ‚àÉ[ n ‚àà ‚Ñï ] Œ£ _ Œª x‚ààùï° ‚Üí ‚à©$ x x‚àà ‚â° fun x n x‚ààùï°
  ‚à©$-lem x x‚àà = ‚à©$-elimProp x x‚àà
    {B = Œª a ‚Üí ‚àÉ[ n ‚àà ‚Ñï ] Œ£ _ Œª x‚ààùï° ‚Üí a ‚â° fun x n x‚ààùï°} (Œª _ ‚Üí squash‚ÇÅ)
   Œª n x‚àà' ‚Üí ‚à£ n , x‚àà' , refl ‚à£‚ÇÅ

  ‚à©$-‚àà‚Çô : ‚àÄ x x‚àà n (x‚àà‚Çô : x ‚àà ùï° s n)
             ‚Üí ‚à©$ x x‚àà ‚â° fun x n x‚àà‚Çô
  ‚à©$-‚àà‚Çô x x‚àà = ‚à©$-elimProp x x‚àà
              {Œª y ‚Üí ‚àÄ n ‚Üí (x‚àà‚Çô : x ‚àà ùï° s n)
             ‚Üí y ‚â° fun x n x‚àà‚Çô} (Œª _ ‚Üí isPropŒ†2 Œª _ _ ‚Üí isSetA _ _)
               Œª _ _ _ _ ‚Üí 2c x _ _ _ _


  -- it shouulb by possisble also for hSet
  ‚à©$-elimProp2 : ‚àÄ x x‚àà y y‚àà ‚Üí {B : A ‚Üí A ‚Üí Type ‚Ñì}
     ‚Üí (‚àÄ a a' ‚Üí isProp (B a a'))
     ‚Üí (‚àÄ n x‚àà y‚àà ‚Üí B (fun x n x‚àà) (fun y n y‚àà))
     ‚Üí B (‚à©$ x x‚àà) (‚à©$ y y‚àà)
  ‚à©$-elimProp2 x x‚àà y y‚àà {B} isPropB g =
    PT.elim2 (Œª z z' ‚Üí
      isPropB
       (PT.rec‚ÜíSet isSetA (Œª (n , n‚àà) ‚Üí fun x n n‚àà)
       (Œª (n , n‚àà) (n' , n'‚àà) ‚Üí 2c x n n' n‚àà n'‚àà) z)
       (PT.rec‚ÜíSet isSetA (Œª (n , n‚àà) ‚Üí fun y n n‚àà)
       (Œª (n , n‚àà) (n' , n'‚àà) ‚Üí 2c y n n' n‚àà n'‚àà) z'))

      (Œª (n , x‚àà) (m , y‚àà) ‚Üí
        subst2 B (2c _ _ _ _ _) (2c _ _ _ _ _)
         (g (‚Ñï.max n m) (ùï°‚äÜ' s _ _ ‚Ñï.left-‚â§-max x x‚àà) (ùï°‚äÜ' s _ _ ‚Ñï.right-‚â§-max y y‚àà)))
      (s‚äÜP x x‚àà) (s‚äÜP y y‚àà)


‚à©$-cont : ‚àÄ P s ‚Üí (‚àÄ n ‚Üí ‚ü® openPred (Seq‚äÜ.ùï° s n) ‚ü©) ‚Üí ‚àÄ r s‚äáP
    ‚Üí (‚àÄ n ‚Üí IsContinuousWithPred (ùï° s n) (flip (Seq‚äÜ‚Üí.fun r) n))
    ‚Üí IsContinuousWithPred P
   (Seq‚äÜ‚Üí.FromIntersection.‚à©$ {A = ‚Ñù} {s = s} r isSet‚Ñù P s‚äáP)

‚à©$-cont P s op r s‚äáP c‚Çô x Œµ x‚àà =
 PT.rec squash‚ÇÅ (Œª (n , p , q) ‚Üí
   PT.map2 (Œª (Œ¥ , X) (Œ∑ , Y) ‚Üí
        ‚Ñö.min‚Çä Œ¥ Œ∑ , Œª v v‚àà x‚àºv ‚Üí
          let z = Y v (X v (‚àº-monotone‚â§ (‚Ñö.min‚â§ _ _) x‚àºv))
                           (‚àº-monotone‚â§ (‚Ñö.min‚â§' _ _) x‚àºv)
          in subst2 _‚àº[ Œµ ]_
               (sym (Seq‚äÜ‚Üí.FromIntersection.‚à©$-‚àà‚Çô {A = ‚Ñù} {s = s} r isSet‚Ñù P s‚äáP
                _ _ _ _))
               (sym (Seq‚äÜ‚Üí.FromIntersection.‚à©$-‚àà‚Çô {A = ‚Ñù} {s = s} r isSet‚Ñù P s‚äáP
                _ _ _ _)) z)
     (op n x p) (c‚Çô n x Œµ p))

  (Seq‚äÜ‚Üí.FromIntersection.‚à©$-lem {A = ‚Ñù} {s = s} r isSet‚Ñù P s‚äáP
     x x‚àà)

‚à©$-cont' : ‚àÄ P s ‚Üí (‚àÄ n x ‚Üí
               x ‚àà (ùï° s n) ‚Üí
               ‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ] (‚àÄ y ‚Üí x ‚àº[ Œ¥ ] y ‚Üí y ‚àà (ùï° s (suc n))  )) ‚Üí ‚àÄ r s‚äáP
    ‚Üí (‚àÄ n ‚Üí IsContinuousWithPred (ùï° s n) (flip (Seq‚äÜ‚Üí.fun r) n))
    ‚Üí IsContinuousWithPred P
   (Seq‚äÜ‚Üí.FromIntersection.‚à©$ {A = ‚Ñù} {s = s} r isSet‚Ñù P s‚äáP)

‚à©$-cont' P s op r s‚äáP c‚Çô x Œµ x‚àà =
 PT.rec squash‚ÇÅ (Œª (n , p , q) ‚Üí
   PT.map2 (Œª (Œ¥ , X) (Œ∑ , Y) ‚Üí
        ‚Ñö.min‚Çä Œ¥ Œ∑ , Œª v v‚àà x‚àºv ‚Üí
          let z = Y v (X v (‚àº-monotone‚â§ (‚Ñö.min‚â§ _ _) x‚àºv))
                           (‚àº-monotone‚â§ (‚Ñö.min‚â§' _ _) x‚àºv)
          in subst2 _‚àº[ Œµ ]_
               (sym (Seq‚äÜ‚Üí.FromIntersection.‚à©$-‚àà‚Çô {A = ‚Ñù} {s = s} r isSet‚Ñù P s‚äáP
                _ _ _ _))
               (sym (Seq‚äÜ‚Üí.FromIntersection.‚à©$-‚àà‚Çô {A = ‚Ñù} {s = s} r isSet‚Ñù P s‚äáP
                _ _ _ _)) z)
     (op n x p) (c‚Çô (suc n) x Œµ (ùï°‚äÜ s n x p)))

  (Seq‚äÜ‚Üí.FromIntersection.‚à©$-lem {A = ‚Ñù} {s = s} r isSet‚Ñù P s‚äáP
     x x‚àà)


‚à©$-cont'' : ‚àÄ P s ‚Üí (‚àÄ n x ‚Üí
               x ‚àà (ùï° s n) ‚Üí
               ‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ] (‚àÄ y ‚Üí y ‚àà P ‚Üí x ‚àº[ Œ¥ ] y ‚Üí y ‚àà (ùï° s (suc n))  )) ‚Üí ‚àÄ r s‚äáP
    ‚Üí (‚àÄ n ‚Üí IsContinuousWithPred (ùï° s n) (flip (Seq‚äÜ‚Üí.fun r) n))
    ‚Üí IsContinuousWithPred P
   (Seq‚äÜ‚Üí.FromIntersection.‚à©$ {A = ‚Ñù} {s = s} r isSet‚Ñù P s‚äáP)

‚à©$-cont'' P s op r s‚äáP c‚Çô x Œµ x‚àà =
 PT.rec squash‚ÇÅ (Œª (n , p , q) ‚Üí
   PT.map2 (Œª (Œ¥ , X) (Œ∑ , Y) ‚Üí
        ‚Ñö.min‚Çä Œ¥ Œ∑ , Œª v v‚àà x‚àºv ‚Üí
          let z = Y v (X v v‚àà (‚àº-monotone‚â§ (‚Ñö.min‚â§ _ _) x‚àºv))
                           (‚àº-monotone‚â§ (‚Ñö.min‚â§' _ _) x‚àºv)
          in subst2 _‚àº[ Œµ ]_
               (sym (Seq‚äÜ‚Üí.FromIntersection.‚à©$-‚àà‚Çô {A = ‚Ñù} {s = s} r isSet‚Ñù P s‚äáP
                _ _ _ _))
               (sym (Seq‚äÜ‚Üí.FromIntersection.‚à©$-‚àà‚Çô {A = ‚Ñù} {s = s} r isSet‚Ñù P s‚äáP
                _ _ _ _)) z)
     (op n x p) (c‚Çô (suc n) x Œµ (ùï°‚äÜ s n x p)))

  (Seq‚äÜ‚Üí.FromIntersection.‚à©$-lem {A = ‚Ñù} {s = s} r isSet‚Ñù P s‚äáP
     x x‚àà)


infixl 7 _¬∑·µ£_



open ‚Ñö.HLP


-- HoTT (11.3.46)
opaque
 unfolding _<·µ£_ abs·µ£ -·µ£_
 sq·µ£' : Œ£ (‚Ñù ‚Üí ‚Ñù) IsContinuous
 sq·µ£'  = (Œª r ‚Üí f r (getClamps r))
   , Œª u Œµ ‚Üí
      PT.elim2 {P = Œª gcr _ ‚Üí
         ‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ] (‚àÄ v ‚Üí u ‚àº[ Œ¥ ] v
             ‚Üí f u gcr ‚àº[ Œµ ] (f v (getClamps v)))}
        (Œª _ _ ‚Üí squash‚ÇÅ)
        (Œª (1+ n , nL) (1+ n' , n'L) ‚Üí
         let L = (2 ‚Ñö‚Çä¬∑ fromNat (suc (suc n')))
             1<L : pos 1 ‚Ñ§.<
                ‚Ñö.‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§
                 (fst
                  (‚Ñ§.0<‚Üí‚Ñï‚Çä‚ÇÅ (2 ‚Ñ§.¬∑ (pos (suc (suc n'))))
                   (‚Ñö.¬∑0< 2 (fromNat (suc (suc n')))
                    tt tt)))
             1<L = subst (1 ‚Ñ§.<_)
                    (‚Ñ§.pos¬∑pos 2 (suc (suc n')) ‚àô (snd
                  (‚Ñ§.0<‚Üí‚Ñï‚Çä‚ÇÅ (2 ‚Ñ§.¬∑ (pos (suc (suc n'))))
                   (‚Ñö.¬∑0< 2 (fromNat (suc (suc n')))
                    tt tt))) )
                     (‚Ñ§.suc-‚â§-suc
                       (‚Ñ§.suc-‚â§-suc (‚Ñ§.zero-‚â§pos
                         {l = (n' ‚Ñï.+ suc (suc (n' ‚Ñï.+ zero)))} )))

             Œ¥ = (inv‚Ñö‚Çä L) ‚Ñö‚Çä¬∑ Œµ
         in ‚à£ Œ¥ , (Œª v ‚Üí
               PT.elim {P = Œª gcv ‚Üí u ‚àº[ Œ¥ ] v ‚Üí f' u (1+ n , nL) ‚àº[ Œµ ] f v gcv}
                (Œª _ ‚Üí isPropŒ† Œª _ ‚Üí isProp‚àº _ _ _ )
                  (uncurry (Œª (1+ n*) n*L u‚àºv ‚Üí
                      let z = snd (clampedSq (suc n')) u v
                                    Œ¥ u‚àºv
                          zz : abs·µ£ (v +·µ£ (-·µ£ u)) <·µ£ rat (fst Œµ)

                          zz =
                            subst2 (_<·µ£_)
                              (minusComm-abs·µ£ u v)
                               (cong rat (‚Ñö.¬∑IdL (fst Œµ)))
                                  (isTrans<·µ£ _ _ _
                                   (fst (‚àº‚âÉabs<Œµ _ _ _) u‚àºv)
                                   (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.<-¬∑o _ 1 (fst Œµ)
                                    (‚Ñö.0<‚Ñö‚Çä Œµ)
                                      (subst (1 ‚Ñ§.<_)
                                        (sym (‚Ñ§.¬∑IdL _))
                                         1<L ))))
                          zz* = (sym (abs·µ£NonNeg (abs·µ£ u +·µ£ rat (fst Œµ))
                                 (subst (_‚â§·µ£ (abs·µ£ u +·µ£ rat (fst Œµ)))
                                  (+IdR 0)
                                   (‚â§·µ£Monotone+·µ£ 0 (abs·µ£ u)
                                     0 (rat (fst Œµ))
                                      (0‚â§abs·µ£ u)
                                       (‚â§‚Ñö‚Üí‚â§·µ£ _ _ $ ‚Ñö.0‚â§‚Ñö‚Çä Œµ)))))
                          zz' : abs·µ£ v ‚â§·µ£ abs·µ£ (abs·µ£ u +·µ£ rat (fst Œµ))
                          zz' =
                             subst2 (_‚â§·µ£_)
                               (cong abs·µ£ (lem--05·µ£ _ _))
                               zz*
                               (isTrans‚â§·µ£
                                (abs·µ£ (u +·µ£ (v +·µ£ (-·µ£ u))))
                                 (abs·µ£ u +·µ£ abs·µ£ (v +·µ£ (-·µ£ u)))
                                 _
                                (abs·µ£-triangle u (v +·µ£ (-·µ£ u)))
                                (‚â§·µ£-o+ _ _ (abs·µ£ u)
                                  (<·µ£Weaken‚â§·µ£ _ _ zz)))
                      in ( 2co (1+ n') (1+ n) u
                         (isTrans‚â§<·µ£ (abs·µ£ u) _ _
                           (subst2 (_‚â§·µ£_)
                             (+IdR (abs·µ£ u))
                             zz*
                             (‚â§·µ£Monotone+·µ£
                               (abs·µ£ u) (abs·µ£ u)
                                0 (rat (fst Œµ))
                                (‚â§·µ£-refl (abs·µ£ u))
                                ((‚â§‚Ñö‚Üí‚â§·µ£ _ _ $ ‚Ñö.0‚â§‚Ñö‚Çä Œµ)))) n'L) nL
                          subst‚àº[ ‚Ñö‚Çä‚â° (‚Ñö.y¬∑[x/y] L (fst Œµ)) ]
                          2co (1+ n') (1+ n*) v

                           ((isTrans‚â§<·µ£ (abs·µ£ v) _ _
                             zz' n'L))
                             n*L)
                       z))
                        (getClamps v))   ‚à£‚ÇÅ)
        (getClamps u) (getClamps (abs·µ£ u +·µ£ rat (fst Œµ)))
  where

  2co : ‚àÄ n n' r
     ‚Üí (abs·µ£ r <·µ£ fromNat (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï n))
     ‚Üí (abs·µ£ r <·µ£ fromNat (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï n'))
     ‚Üí fst (clampedSq (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï n)) r ‚â° fst (clampedSq (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï n')) r

  2co (1+ n) (1+ n') = Elim‚Ñù-Prop.go w
   where
   w : Elim‚Ñù-Prop
         (Œª z ‚Üí
            abs·µ£ z <·µ£ fromNat (suc n) ‚Üí
            abs·µ£ z <·µ£ fromNat (suc n') ‚Üí
            fst (clampedSq (suc n)) z ‚â° fst (clampedSq (suc n')) z)
   w .Elim‚Ñù-Prop.ratA q n< n<' =
     let Œî : ‚Ñï ‚Üí ‚Ñö‚Çä
         Œî n = ‚Ñö.<‚Üí‚Ñö‚Çä
              ([ 1 / 4 ])
              ([ pos (suc (suc (n))) / 1 ])

              ((<Œî (suc (n))))
         q* : ‚Ñï ‚Üí ‚Ñö
         q* n = ‚Ñö.clamp (‚Ñö.- (fst (Œî n))) (fst (Œî n)) q
         q‚ÇÅ = q* n
         q‚ÇÇ = q* n'

         -Œî‚ÇÅ‚â§q : ‚àÄ n ‚Üí abs·µ£ (rat q) <·µ£ rat [ pos (suc n) / 1+ 0 ]
              ‚Üí ‚Ñö.- (fst (Œî n)) ‚Ñö.‚â§ q
         -Œî‚ÇÅ‚â§q n n< = subst (‚Ñö.- fst (Œî n) ‚Ñö.‚â§_) (‚Ñö.-Invol q)
          (‚Ñö.minus-‚â§ (‚Ñö.- q) (fst (Œî n))
            (‚Ñö.isTrans‚â§ _ _ _ (
             subst (‚Ñö.- q ‚Ñö.‚â§_) (sym (‚Ñö.-abs q) ‚àô
                ‚Ñö.abs'‚â°abs q) (‚Ñö.‚â§abs (‚Ñö.- q))) (abs'q‚â§Œî‚ÇÅ q n n<)))

         q‚ÇÅ= : ‚àÄ n n< ‚Üí q* n ‚â° q
         q‚ÇÅ= n n< = ‚Ñö.inClamps (‚Ñö.- (fst (Œî n))) (fst (Œî n)) q
            (-Œî‚ÇÅ‚â§q n n<) (‚Ñö.isTrans‚â§ q (‚Ñö.abs' q) (fst (Œî n))
                  (subst (q ‚Ñö.‚â§_) (‚Ñö.abs'‚â°abs q)
                     (‚Ñö.‚â§abs q)) (abs'q‚â§Œî‚ÇÅ q n n<))
         z : q‚ÇÅ ‚Ñö.¬∑ q‚ÇÅ
              ‚â° q‚ÇÇ ‚Ñö.¬∑ q‚ÇÇ
         z = cong‚ÇÇ ‚Ñö._¬∑_ (q‚ÇÅ= n n<) (q‚ÇÅ= n n<)
               ‚àô sym (cong‚ÇÇ ‚Ñö._¬∑_ (q‚ÇÅ= n' n<') (q‚ÇÅ= n' n<'))
     in cong rat z
   w .Elim‚Ñù-Prop.limA x p R n< n<' =
     eq‚Ñù _ _
           (Œª Œµ ‚Üí PT.rec (isProp‚àº _ _ _) (ww Œµ) <n‚äì)


    where

    n‚äì n‚äî : ‚Ñï
    n‚äì = ‚Ñï.min n n'
    n‚äî = ‚Ñï.max n n'

    <n‚äì : abs·µ£ (lim x p) <·µ£ rat [ pos (suc n‚äì) / 1+ 0 ]
    <n‚äì =
     let z = <min-rr _ _ _ n< n<'
     in subst (abs·µ£ (lim x p) <·µ£_)
       (cong (rat ‚àò [_/ 1+ 0 ]) (
        cong‚ÇÇ ‚Ñ§.min (cong (1 ‚Ñ§.+_) (‚Ñ§.¬∑IdR (pos n))
          ‚àô sym (‚Ñ§.pos+ 1 n)) ((cong (1 ‚Ñ§.+_) (‚Ñ§.¬∑IdR (pos n'))
          ‚àô sym (‚Ñ§.pos+ 1 n')))
         ‚àô ‚Ñ§.min-pos-pos (suc n) (suc n'))) z

    ww : ‚àÄ Œµ ‚Üí abs·µ£ (lim x p) Œ£<·µ£
                rat [ pos (suc n‚äì) / 1+ 0 ]
             ‚Üí fst (clampedSq (suc n)) (lim x p) ‚àº[ Œµ ]
                 fst (clampedSq (suc n')) (lim x p)
    ww Œµ ((q , q') , lx‚â§q , q<q' , q'‚â§n) =
     lim-lim _ _ Œµ Œ¥ Œ∑ _ _ 0<Œµ-[Œ¥+Œ∑] ll
     where
      Œî Œ∏ : ‚Ñö‚Çä
      Œî = ‚Ñö.<‚Üí‚Ñö‚Çä q q' q<q'
      Œ∏ = ‚Ñö.min‚Çä (‚Ñö./3‚Çä Œµ) Œî

      3Œ∏‚â§Œµ : (fst Œ∏) ‚Ñö.+ ((fst Œ∏) ‚Ñö.+ (fst Œ∏)) ‚Ñö.‚â§ fst Œµ
      3Œ∏‚â§Œµ = subst2 ‚Ñö._‚â§_
         (3¬∑x‚â°x+[x+x] (fst Œ∏))
          (cong (3 ‚Ñö.¬∑_) (‚Ñö.¬∑Comm _ _) ‚àô ‚Ñö.y¬∑[x/y] 3 (fst Œµ))
        (‚Ñö.‚â§-o¬∑ ((‚Ñö.min (fst (‚Ñö./3‚Çä Œµ)) (fst Œî)))
                 (fst (‚Ñö./3‚Çä Œµ)) 3 ((‚Ñö.0‚â§‚Ñö‚Çä 3)) (‚Ñö.min‚â§ (fst (‚Ñö./3‚Çä Œµ)) (fst Œî)))

      Œ¥ Œ∑ œÖ : ‚Ñö‚Çä
      Œ¥ = (([ pos (suc (suc n)) / 1+ (suc n‚äî) ] , _)
                                     ‚Ñö‚Çä¬∑ Œ∏)
      Œ∑ = (([ pos (suc (suc n')) / 1+ (suc n‚äî) ] , _)
                                     ‚Ñö‚Çä¬∑ Œ∏)
      œÖ = inv‚Ñö‚Çä (2 ‚Ñö‚Çä¬∑ fromNat (suc (suc n‚äî))) ‚Ñö‚Çä¬∑ Œ∏

      ŒΩ-Œ¥Œ∑ : ‚àÄ n* ‚Üí fst (inv‚Ñö‚Çä (2 ‚Ñö‚Çä¬∑ fromNat (suc (suc n‚äî))) ‚Ñö‚Çä¬∑ Œ∏)
             ‚â° fst (inv‚Ñö‚Çä (2 ‚Ñö‚Çä¬∑ fromNat (suc (suc n*))) ‚Ñö‚Çä¬∑
             ((([ pos (suc (suc n*)) / 1+ (suc n‚äî) ] , _)
                                     ‚Ñö‚Çä¬∑ Œ∏)))
      ŒΩ-Œ¥Œ∑ n* = cong (‚Ñö._¬∑ fst Œ∏)
          (cong (fst ‚àò inv‚Ñö‚Çä)
               (cong {x = fromNat (suc (suc n‚äî)) , _}
                     {y = fromNat (suc (suc n*)) ‚Ñö‚Çä¬∑
                          ([ pos (suc (suc n‚äî)) / 2+ n* ] , _)}
                (2 ‚Ñö‚Çä¬∑_) (‚Ñö‚Çä‚â° (sym (m¬∑n/m _ _))) ‚àô
             ‚Ñö‚Çä‚â° (‚Ñö.¬∑Assoc 2 _ _))
           ‚àô cong fst (sym (‚Ñö.inv‚Ñö‚ÇäDist¬∑ _
              ([ pos (suc (suc n‚äî)) / 1+ (suc n*) ] , _))))
            ‚àô sym (‚Ñö.¬∑Assoc (fst (inv‚Ñö‚Çä (2 ‚Ñö‚Çä¬∑ fromNat (suc (suc n*)))))
              [ pos (suc (suc n*)) / 1+ (suc n‚äî) ] (fst Œ∏))

      0<Œµ-[Œ¥+Œ∑] : 0< (fst Œµ ‚Ñö.- (fst Œ¥ ‚Ñö.+ fst Œ∑))
      0<Œµ-[Œ¥+Œ∑] = snd (‚Ñö.<‚Üí‚Ñö‚Çä (fst Œ¥ ‚Ñö.+ fst Œ∑) (fst Œµ)
           (‚Ñö.isTrans<‚â§ _ _ _
              ( let z = ((‚Ñö.‚â§Monotone+
                       (fst Œ¥) (fst Œ∏)
                       (fst Œ∑)  (fst Œ∏)
                         (subst (fst Œ¥ ‚Ñö.‚â§_) (‚Ñö.¬∑IdL (fst Œ∏))
                          (‚Ñö.‚â§-¬∑o ([ pos (suc (suc n)) / 1+ (suc n‚äî) ]) 1
                             (fst Œ∏) (‚Ñö.0‚â§‚Ñö‚Çä Œ∏)
                               (subst2 ‚Ñ§._‚â§_ (sym (‚Ñ§.¬∑IdR _))
                                (‚Ñ§.max-pos-pos (suc (suc n)) (suc (suc n'))
                                   ‚àô sym (‚Ñ§.¬∑IdL _))
                                   (‚Ñ§.‚â§max {pos (suc (suc n))}
                                      {pos (suc (suc n'))}))))
                         (subst (fst Œ∑ ‚Ñö.‚â§_) (‚Ñö.¬∑IdL (fst Œ∏))
                          ((‚Ñö.‚â§-¬∑o ([ pos (suc (suc n')) / 1+ (suc n‚äî) ]) 1
                             (fst Œ∏) (‚Ñö.0‚â§‚Ñö‚Çä Œ∏)
                              ((subst2 ‚Ñ§._‚â§_ (sym (‚Ñ§.¬∑IdR _))
                                (‚Ñ§.maxComm _ _
                                  ‚àô ‚Ñ§.max-pos-pos (suc (suc n)) (suc (suc n'))
                                  ‚àô sym (‚Ñ§.¬∑IdL _))
                                   (‚Ñ§.‚â§max {pos (suc (suc n'))}
                                      {pos (suc (suc n))}))))))))
                    z' = ‚Ñö.<‚â§Monotone+
                          0 (fst Œ∏)
                         (fst Œ¥ ‚Ñö.+ (fst Œ∑))  (fst Œ∏ ‚Ñö.+ (fst Œ∏))
                         (‚Ñö.0<‚Ñö‚Çä Œ∏) z
                in subst (‚Ñö._<
                      fst Œ∏ ‚Ñö.+ (fst Œ∏ ‚Ñö.+ fst Œ∏))
                        (‚Ñö.+IdL (fst Œ¥ ‚Ñö.+ (fst Œ∑))) z')

                      3Œ∏‚â§Œµ))

      R' :
        fst (clampedSq (suc n)) (x œÖ)
         ‚àº[ (fst Œµ ‚Ñö.- (fst Œ¥ ‚Ñö.+ fst Œ∑)) , 0<Œµ-[Œ¥+Œ∑] ]
          fst (clampedSq (suc n')) (x œÖ)
      R' = invEq (‚àº‚âÉ‚â° _ _) (R œÖ ŒΩ<n ŒΩ<n') _
       where

        œÖ+œÖ<Œî : fst (œÖ ‚Ñö‚Çä+ œÖ) ‚Ñö.< fst Œî
        œÖ+œÖ<Œî = ‚Ñö.isTrans<‚â§
         (fst (œÖ ‚Ñö‚Çä+ œÖ)) (fst Œ∏) (fst Œî)
          (subst2 (‚Ñö._<_)
           (‚Ñö.¬∑DistR+
              (fst (inv‚Ñö‚Çä (2 ‚Ñö‚Çä¬∑ fromNat (suc (suc n‚äî)))))
              (fst (inv‚Ñö‚Çä (2 ‚Ñö‚Çä¬∑ fromNat (suc (suc n‚äî)))))
              (fst Œ∏))
              (‚Ñö.¬∑IdL (fst Œ∏))
              ((‚Ñö.<-¬∑o
                (((fst (inv‚Ñö‚Çä (2 ‚Ñö‚Çä¬∑ fromNat (suc (suc n‚äî))))))
                 ‚Ñö.+
                 ((fst (inv‚Ñö‚Çä (2 ‚Ñö‚Çä¬∑ fromNat (suc (suc n‚äî)))))))
                 1 (fst Œ∏)
               (‚Ñö.0<‚Ñö‚Çä Œ∏)
                (subst (‚Ñö._< 1)
                  (sym (‚Ñö.Œµ/2+Œµ/2‚â°Œµ _) ‚àô cong (Œª x ‚Üí x ‚Ñö.+ x)
                    (‚Ñö.¬∑Comm _ _ ‚àô cong fst
                      (‚Ñö.inv‚Ñö‚ÇäDist¬∑ 2 (fromNat (suc (suc n‚äî))))))
                    (1/n<sucK _ _) ))))
                (‚Ñö.min‚â§' (fst (‚Ñö./3‚Çä Œµ)) (fst Œî))

        ŒΩ<n‚äì : abs·µ£ (x œÖ) <·µ£ (fromNat (suc n‚äì))
        ŒΩ<n‚äì = isTrans‚â§<·µ£ (abs·µ£ (x œÖ))
                  (rat (q ‚Ñö.+ fst (œÖ ‚Ñö‚Çä+ œÖ))) ((fromNat (suc n‚äì)))
                  (‚àº‚Üí‚â§ _ _ lx‚â§q _ _
                       (‚àº‚Üí‚àº' _ _ _ (abs·µ£-nonExpanding _ _ _
                             (sym‚àº _ _ _ (ùï£-lim-self x p œÖ œÖ)))))
                     (isTrans<‚â§·µ£
                        (rat (q ‚Ñö.+ fst (œÖ ‚Ñö‚Çä+ œÖ)))
                        (rat q')
                        (rat [ pos (suc n‚äì) / 1+ 0 ])
                         (subst {x = rat (q ‚Ñö.+ fst Œî) }
                             (rat (q ‚Ñö.+ fst (œÖ ‚Ñö‚Çä+ œÖ)) <·µ£_)
                           (cong rat (lem--05 {q} {q'}))
                            (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.<-o+ _ _ q œÖ+œÖ<Œî))) q'‚â§n)

        ŒΩ<n : abs·µ£ (x œÖ) <·µ£ fromNat (suc n)
        ŒΩ<n = isTrans<‚â§·µ£ (abs·µ£ (x œÖ)) (fromNat (suc n‚äì)) (fromNat (suc n))
                 ŒΩ<n‚äì (‚â§‚Ñö‚Üí‚â§·µ£ _ _
                   (subst (Œª n* ‚Üí [ n* / 1+ 0 ] ‚Ñö.‚â§ (fromNat (suc n)))
                     (‚Ñ§.min-pos-pos (suc n) (suc n'))
                      (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (‚Ñ§.min‚â§ {pos (suc n)} {pos (suc n')})) ))

        ŒΩ<n' : abs·µ£ (x œÖ) <·µ£ fromNat (suc n')
        ŒΩ<n' = isTrans<‚â§·µ£ (abs·µ£ (x œÖ)) (fromNat (suc n‚äì)) (fromNat (suc n'))
                 ŒΩ<n‚äì (‚â§‚Ñö‚Üí‚â§·µ£ _ _
                   (subst (Œª n* ‚Üí [ n* / 1+ 0 ] ‚Ñö.‚â§ (fromNat (suc n')))
                     (‚Ñ§.minComm (pos (suc n')) (pos (suc n))
                       ‚àô ‚Ñ§.min-pos-pos (suc n) (suc n'))
                      (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (‚Ñ§.min‚â§ {pos (suc n')} {pos (suc n)})) ))


      ll : fst (clampedSq (suc n))
             (x (inv‚Ñö‚Çä (2 ‚Ñö‚Çä¬∑ fromNat (suc (suc n))) ‚Ñö‚Çä¬∑ Œ¥))
             ‚àº[ (fst Œµ ‚Ñö.- (fst Œ¥ ‚Ñö.+ fst Œ∑)) , 0<Œµ-[Œ¥+Œ∑] ]
              fst (clampedSq (suc n'))
             (x (inv‚Ñö‚Çä (2 ‚Ñö‚Çä¬∑ fromNat (suc (suc n'))) ‚Ñö‚Çä¬∑ Œ∑))
      ll = cong (fst (clampedSq (suc n)) ‚àòS x) (‚Ñö‚Çä‚â° (ŒΩ-Œ¥Œ∑ n))
              subst‚àº[ refl ]
            cong (fst (clampedSq (suc n')) ‚àòS x) (‚Ñö‚Çä‚â° (ŒΩ-Œ¥Œ∑ n')) $ R'

   w .Elim‚Ñù-Prop.isPropA _ = isPropŒ†2 Œª _ _ ‚Üí isSet‚Ñù _ _

  f' : ‚àÄ r ‚Üí Œ£ ‚Ñï‚Çä‚ÇÅ (Œª n ‚Üí abs·µ£ r <·µ£ rat [ pos (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï n) / 1+ 0 ])  ‚Üí ‚Ñù
  f' r = (Œª ((1+ n) , <n) ‚Üí fst (clampedSq (suc n)) r )

  f : ‚àÄ r ‚Üí ‚àÉ[ n ‚àà ‚Ñï‚Çä‚ÇÅ ] abs·µ£ r <·µ£ fromNat (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï n) ‚Üí ‚Ñù
  f r = PT.rec‚ÜíSet {B = ‚Ñù} isSet‚Ñù
     (f' r)
     (Œª (n , u) (n' , u') ‚Üí 2co n n' r u u')

 sq·µ£ : ‚Ñù ‚Üí ‚Ñù
 sq·µ£ = fst sq·µ£'

 /2·µ£-L : Œ£ (‚Ñù ‚Üí ‚Ñù) (Lipschitz-‚Ñù‚Üí‚Ñù ([ 1 / 2 ] , _))
 /2·µ£-L = fromLipschitz ([ 1 / 2 ] , _)
   (_ , Lipschitz-rat‚àò ([ 1 / 2 ] , _) (‚Ñö._¬∑ [ 1 / 2 ])
    Œª q r Œµ x ‚Üí
      subst (‚Ñö._< ([ 1 / 2 ]) ‚Ñö.¬∑ (fst Œµ))
       (sym (‚Ñö.pos¬∑abs [ 1 / 2 ] (q ‚Ñö.- r)
        (ùüö.toWitness {Q = ‚Ñö.‚â§Dec 0 [ 1 / 2 ]} _ ))
        ‚àô cong ‚Ñö.abs (‚Ñö.¬∑Comm _ _ ‚àô ‚Ñö.¬∑DistR+ q (‚Ñö.- r) [ 1 / 2 ]
         ‚àô cong ((q ‚Ñö.¬∑ [ 1 / 2 ]) ‚Ñö.+_)
             (sym (‚Ñö.¬∑Assoc -1 r [ 1 / 2 ]))))
       (‚Ñö.<-o¬∑ (‚Ñö.abs (q ‚Ñö.- r)) (fst Œµ) [ 1 / 2 ]
        ((ùüö.toWitness {Q = ‚Ñö.<Dec 0 [ 1 / 2 ]} _ )) x))

 /2·µ£ : ‚Ñù ‚Üí ‚Ñù
 /2·µ£ = fst /2·µ£-L


 sq·µ£-rat : ‚àÄ r ‚Üí sq·µ£ (rat r) ‚â° rat (r ‚Ñö.¬∑ r)
 sq·µ£-rat = ElimProp.go w
  where
  w : ElimProp (Œª z ‚Üí sq·µ£ (rat z) ‚â° rat (z ‚Ñö.¬∑ z))
  w .ElimProp.isPropB _ = isSet‚Ñù _ _
  w .ElimProp.f x = cong
        (Œª x ‚Üí rat (x ‚Ñö.¬∑ x))
         (‚Ñö.inClamps (‚Ñö.- c) c _
          -c<x x<c)

     where
     x' : ‚Ñö
     x' = (_//_.[ x ])

     c : ‚Ñö
     c = (fst (fromNat (suc (suc (getClampsOnQ x' .fst .‚Ñï‚Çä‚ÇÅ.n))))
         ‚Ñö.- _//_.[ 1 , 4 ])


     c' : ‚Ñö
     c' = fromNat ((suc (getClampsOnQ x' .fst .‚Ñï‚Çä‚ÇÅ.n)))

     <c' : ‚Ñö.abs' x' ‚Ñö.< c'
     <c' = <·µ£‚Üí<‚Ñö _ _ (snd (getClampsOnQ x'))

     c'‚â§c : c' ‚Ñö.‚â§ c
     c'‚â§c = subst2 ‚Ñö._‚â§_
              (‚Ñö.+IdR c') (‚Ñö.+Assoc c' 1 (‚Ñö.- [ 1 / 4 ])
                ‚àô cong ((‚Ñö._- [ 1 / 4 ])) (‚Ñö.+Comm c' 1 ‚àô
                 ‚Ñö.‚Ñï+‚Üí‚Ñö+ _ _))
              (‚Ñö.‚â§-o+ 0 (1 ‚Ñö.- [ 1 / 4 ]) c' ‚Ñö.dec‚Ñö‚â§?  )

     <c : ‚Ñö.abs' x' ‚Ñö.‚â§ c
     <c = ‚Ñö.isTrans‚â§ (‚Ñö.abs' x') c' c
        (‚Ñö.<Weaken‚â§ (‚Ñö.abs' x') c' <c') c'‚â§c


     -c<x : ‚Ñö.- c ‚Ñö.‚â§ x'
     -c<x = subst (‚Ñö.- c ‚Ñö.‚â§_) (‚Ñö.-Invol x') (‚Ñö.minus-‚â§ (‚Ñö.- x') c
        (‚Ñö.isTrans‚â§ (‚Ñö.- x') (‚Ñö.abs' x') c (‚Ñö.-‚â§abs' x') <c))


     x<c :  _//_.[ x ] ‚Ñö.‚â§ c
     x<c = ‚Ñö.isTrans‚â§ x' (‚Ñö.abs' x') c (‚Ñö.‚â§abs' x') <c


 IsContinuous/2·µ£ : IsContinuous /2·µ£
 IsContinuous/2·µ£ = Lipschitz‚ÜíIsContinuous _ /2·µ£ (snd /2·µ£-L)


 IsContinuousSq·µ£ : IsContinuous sq·µ£
 IsContinuousSq·µ£ = snd sq·µ£'






 _¬∑·µ£_ : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù
 u ¬∑·µ£ v = /2·µ£ ((sq·µ£ (u +·µ£ v)) +·µ£ (-·µ£ (sq·µ£ u +·µ£ sq·µ£ v)))





 rat¬∑·µ£rat : ‚àÄ r q ‚Üí rat (r ‚Ñö.¬∑ q) ‚â° rat r ¬∑·µ£ rat q
 rat¬∑·µ£rat r q =
   cong rat (
      dist‚Ñö! (r ‚Ñö.¬∑ q) ¬∑[ ge1 ‚â° (ge1 +ge ge1) ¬∑ge ge[ [ 1 / 2 ] ] ]
        ‚àô cong (‚Ñö._¬∑ [ 1 / 2 ]) (lem--058 {r} {q})) ‚àô
    Œª i ‚Üí /2·µ£ ((sq·µ£-rat (r ‚Ñö.+ q) (~ i))
     +·µ£ (-·µ£ (sq·µ£-rat r (~ i) +·µ£ sq·µ£-rat q (~ i))))


 ¬∑·µ£Comm : ‚àÄ x y ‚Üí x ¬∑·µ£ y ‚â° y ¬∑·µ£ x
 ¬∑·µ£Comm u v i =
   /2·µ£ ((sq·µ£ (+·µ£Comm u v i)) +·µ£ (-·µ£ (+·µ£Comm (sq·µ£ u) (sq·µ£ v) i)))


 IsContinuous¬∑·µ£R : ‚àÄ x ‚Üí IsContinuous (_¬∑·µ£ x)
 IsContinuous¬∑·µ£R x =
   IsContinuous‚àò _
    (Œª u ‚Üí (sq·µ£ (u +·µ£ x)) +·µ£ (-·µ£ ((sq·µ£ u) +·µ£ (sq·µ£ x))))
     IsContinuous/2·µ£
       (cont‚ÇÇ+·µ£ (Œª u ‚Üí (sq·µ£ (u +·µ£ x)))
         (Œª u ‚Üí (-·µ£ ((sq·µ£ u) +·µ£ (sq·µ£ x))))
          (IsContinuous‚àò _ _ IsContinuousSq·µ£ (IsContinuous+·µ£R x))
           (IsContinuous‚àò _ _ IsContinuous-·µ£
              (IsContinuous‚àò _ _ (IsContinuous+·µ£R (sq·µ£ x)) IsContinuousSq·µ£)))

 cont‚ÇÇ¬∑·µ£ : ‚àÄ f g ‚Üí (IsContinuous f) ‚Üí (IsContinuous g)
   ‚Üí IsContinuous (Œª x ‚Üí f x ¬∑·µ£ g x)
 cont‚ÇÇ¬∑·µ£ f g fC gC = IsContinuous‚àò _
    (Œª u ‚Üí (sq·µ£ (f u +·µ£ g u)) +·µ£ (-·µ£ ((sq·µ£ (f u)) +·µ£ (sq·µ£ (g u)))))
     IsContinuous/2·µ£
      (cont‚ÇÇ+·µ£ _ _
        (IsContinuous‚àò _ _
          IsContinuousSq·µ£
           (cont‚ÇÇ+·µ£ _ _ fC gC))
        (IsContinuous‚àò _ _
           IsContinuous-·µ£
           (cont‚ÇÇ+·µ£ _ _
             (IsContinuous‚àò _ _ IsContinuousSq·µ£ fC)
             ((IsContinuous‚àò _ _ IsContinuousSq·µ£ gC)))))

cont‚ÇÇ¬∑‚ÇÇ·µ£ : ‚àÄ {f‚ÇÄ f‚ÇÅ} ‚Üí (IsContinuous‚ÇÇ f‚ÇÄ) ‚Üí (IsContinuous‚ÇÇ f‚ÇÅ)
  ‚Üí IsContinuous‚ÇÇ (Œª x x' ‚Üí f‚ÇÄ x x' ¬∑·µ£ f‚ÇÅ x x')
cont‚ÇÇ¬∑‚ÇÇ·µ£ {f‚ÇÄ} {f‚ÇÅ} f‚ÇÄC f‚ÇÅC =
  (Œª x ‚Üí cont‚ÇÇ¬∑·µ£ _ _ (fst f‚ÇÄC x) (fst f‚ÇÅC x)) ,
  Œª x ‚Üí cont‚ÇÇ¬∑·µ£ _ _ (snd f‚ÇÄC x) (snd f‚ÇÅC x)

IsContinuous¬∑·µ£L : ‚àÄ x ‚Üí IsContinuous (x ¬∑·µ£_)
IsContinuous¬∑·µ£L x = subst IsContinuous
  (funExt Œª z ‚Üí ¬∑·µ£Comm z x) (IsContinuous¬∑·µ£R x)



¬∑·µ£Assoc : ‚àÄ x y z ‚Üí  x ¬∑·µ£ (y ¬∑·µ£ z) ‚â° (x ¬∑·µ£ y) ¬∑·µ£ z
¬∑·µ£Assoc r r' r'' =
  ‚â°Continuous (_¬∑·µ£ (r' ¬∑·µ£ r'')) (Œª x ‚Üí (x ¬∑·µ£ r') ¬∑·µ£ r'')
     (IsContinuous¬∑·µ£R (r' ¬∑·µ£ r''))
     (IsContinuous‚àò _ _ (IsContinuous¬∑·µ£R r'') (IsContinuous¬∑·µ£R r'))
      (Œª q ‚Üí
        ‚â°Continuous
          (Œª x ‚Üí (rat q ¬∑·µ£ (x ¬∑·µ£ r'')))
          (Œª x ‚Üí ((rat q ¬∑·µ£ x) ¬∑·µ£ r''))
          ((IsContinuous‚àò _ _ (IsContinuous¬∑·µ£L (rat q))
             (IsContinuous¬∑·µ£R r'')))
          (IsContinuous‚àò _ _
           (IsContinuous¬∑·µ£R r'')
           (IsContinuous¬∑·µ£L (rat q)))
          (Œª q' ‚Üí
            ‚â°Continuous
               (Œª x ‚Üí (rat q ¬∑·µ£ (rat q' ¬∑·µ£ x)))
               (Œª x ‚Üí ((rat q ¬∑·µ£ rat q') ¬∑·µ£ x))
               (IsContinuous‚àò _ _
                 (IsContinuous¬∑·µ£L (rat q))
                 (IsContinuous¬∑·µ£L (rat q')))
               (IsContinuous¬∑·µ£L (rat q ¬∑·µ£ rat q'))
               (Œª q'' ‚Üí
                 cong (rat q ¬∑·µ£_) (sym (rat¬∑·µ£rat q' q''))
                   ‚àô‚àô sym (rat¬∑·µ£rat q (q' ‚Ñö.¬∑ q'')) ‚àô‚àô
                   cong rat (‚Ñö.¬∑Assoc _ _ _)
                   ‚àô‚àô rat¬∑·µ£rat (q ‚Ñö.¬∑ q') q'' ‚àô‚àô
                   cong (_¬∑·µ£ rat q'') (rat¬∑·µ£rat q q')) r'') r') r

¬∑IdR : ‚àÄ x ‚Üí x ¬∑·µ£ 1 ‚â° x
¬∑IdR = ‚â°Continuous _ _ (IsContinuous¬∑·µ£R 1) IsContinuousId
  (Œª r ‚Üí sym (rat¬∑·µ£rat r 1) ‚àô cong rat (‚Ñö.¬∑IdR r) )

¬∑IdL : ‚àÄ x ‚Üí 1 ¬∑·µ£ x ‚â° x
¬∑IdL = ‚â°Continuous _ _ (IsContinuous¬∑·µ£L 1) IsContinuousId
  (Œª r ‚Üí sym (rat¬∑·µ£rat 1 r) ‚àô cong rat (‚Ñö.¬∑IdL r) )

opaque
 unfolding _+·µ£_
 ¬∑DistL+ : (x y z : ‚Ñù) ‚Üí (x ¬∑·µ£ (y +·µ£ z)) ‚â° ((x ¬∑·µ£ y) +·µ£ (x ¬∑·µ£ z))
 ¬∑DistL+ x y z =
   ‚â°Continuous _ _
    (IsContinuous¬∑·µ£R (y +·µ£ z))
    (cont‚ÇÇ+·µ£ _ _ (IsContinuous¬∑·µ£R y) (IsContinuous¬∑·µ£R z))
    (Œª x' ‚Üí
      ‚â°Continuous _ _
        (IsContinuous‚àò _ _ (IsContinuous¬∑·µ£L (rat x')) (IsContinuous+·µ£R z))
        (IsContinuous‚àò _ _
         (IsContinuous+·µ£R (rat x' ¬∑·µ£ z)) (IsContinuous¬∑·µ£L (rat x')))
        (Œª y' ‚Üí
          ‚â°Continuous _ _
            (IsContinuous‚àò _ _ (IsContinuous¬∑·µ£L (rat x'))
              (IsContinuous+·µ£L (rat y')))
            (IsContinuous‚àò _ _ (IsContinuous+·µ£L (rat x' ¬∑·µ£ rat y'))
                 (IsContinuous¬∑·µ£L (rat x')) )
            (Œª z' ‚Üí sym (rat¬∑·µ£rat _ _)
                   ‚àô‚àô cong rat (‚Ñö.¬∑DistL+ x' y' z') ‚àô‚àô
                      cong‚ÇÇ _+·µ£_ (rat¬∑·µ£rat _ _) (rat¬∑·µ£rat _ _)) z)
        y)
    x


 ¬∑DistR+ : (x y z : ‚Ñù) ‚Üí ((x +·µ£ y) ¬∑·µ£ z) ‚â° ((x ¬∑·µ£ z) +·µ£ (y ¬∑·µ£ z))
 ¬∑DistR+ x y z = ¬∑·µ£Comm _ _ ‚àô‚àô ¬∑DistL+ z x y
   ‚àô‚àô cong‚ÇÇ _+·µ£_ (¬∑·µ£Comm _ _) (¬∑·µ£Comm _ _)

IsCommRing‚Ñù : CR.IsCommRing 0 1 (_+·µ£_) (_¬∑·µ£_) (-·µ£_)
IsCommRing‚Ñù = CR.makeIsCommRing
 isSet‚Ñù
  +·µ£Assoc +IdR +-·µ£ +·µ£Comm ¬∑·µ£Assoc
   ¬∑IdR ¬∑DistL+ ¬∑·µ£Comm

x+x‚â°2x : ‚àÄ x ‚Üí x +·µ£ x ‚â° 2 ¬∑·µ£ x
x+x‚â°2x x = cong‚ÇÇ _+·µ£_
    (sym (¬∑IdL x))
    (sym (¬∑IdL x))
    ‚àô sym (¬∑DistR+ 1 1 x)
    ‚àô cong (_¬∑·µ£ x) (+·µ£-rat _ _)


¬∑·µ£MaxDistrPos : ‚àÄ x y z ‚Üí 0 ‚Ñö.‚â§ z ‚Üí  (max·µ£ x y) ¬∑·µ£ (rat z) ‚â° max·µ£ (x ¬∑·µ£ rat z) (y ¬∑·µ£ rat z)
¬∑·µ£MaxDistrPos x y z 0<z =
  ‚â°Continuous _ _
     (IsContinuous‚àò _ _ (IsContinuous¬∑·µ£R (rat z)) (IsContinuousMaxR y))
     (IsContinuous‚àò _ _ (IsContinuousMaxR
       (y ¬∑·µ£ (rat z))) (IsContinuous¬∑·µ£R (rat z)))
     (Œª x' ‚Üí
       ‚â°Continuous _ _
         (IsContinuous‚àò _ _ (IsContinuous¬∑·µ£R (rat z)) (IsContinuousMaxL (rat x')))
         ((IsContinuous‚àò _ _ (IsContinuousMaxL (rat x' ¬∑·µ£ (rat z)))
                                (IsContinuous¬∑·µ£R (rat z))))
         (Œª y' ‚Üí sym (rat¬∑·µ£rat _ _)
             ‚àô‚àô cong rat (‚Ñö.¬∑MaxDistr‚Ñö' x' y' z 0<z) ‚àô‚àô
              (cong‚ÇÇ max·µ£ (rat¬∑·µ£rat x' z) (rat¬∑·µ£rat y' z)))
         y)
     x



ùï£-lim-dist : ‚àÄ x y Œµ ‚Üí abs·µ£ ((x (‚Ñö./2‚Çä Œµ)) +·µ£ (-·µ£ lim x y)) <·µ£ rat (fst Œµ)
ùï£-lim-dist x y Œµ =
   fst (‚àº‚âÉabs<Œµ _ _ Œµ) $ subst‚àº (‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst Œµ))
     $ ùï£-lim-self x y (‚Ñö./2‚Çä Œµ) (‚Ñö./2‚Çä Œµ)







opaque

 unfolding _¬∑·µ£_

 cont‚ÇÇ¬∑·µ£WP : ‚àÄ P f g
   ‚Üí (IsContinuousWithPred P f)
   ‚Üí (IsContinuousWithPred P g)
   ‚Üí IsContinuousWithPred P (Œª x x‚àà ‚Üí f x x‚àà ¬∑·µ£ g x x‚àà)
 cont‚ÇÇ¬∑·µ£WP P f g fC gC = IsContinuousWP‚àò' P _
    (Œª u x‚àà ‚Üí (sq·µ£ (f u x‚àà +·µ£ g u x‚àà)) +·µ£
     (-·µ£ ((sq·µ£ (f u x‚àà)) +·µ£ (sq·µ£ (g u x‚àà)))))
     IsContinuous/2·µ£
     (contDiagNE‚ÇÇWP sumR P _ _
       ((IsContinuousWP‚àò' P _ _
          IsContinuousSq·µ£
           (contDiagNE‚ÇÇWP sumR P _ _ fC gC)))
       ((IsContinuousWP‚àò' P _ _
           IsContinuous-·µ£
           (contDiagNE‚ÇÇWP sumR P _ _
             (IsContinuousWP‚àò' P _ _ IsContinuousSq·µ£ fC)
             ((IsContinuousWP‚àò' P _ _ IsContinuousSq·µ£ gC))))))


¬∑-·µ£ : ‚àÄ x y ‚Üí x ¬∑·µ£ (-·µ£ y) ‚â° -·µ£ (x ¬∑·µ£ y)
¬∑-·µ£ x =
  ‚â°Continuous _ _ (IsContinuous‚àò _ _
       (IsContinuous¬∑·µ£L x) IsContinuous-·µ£)
      (IsContinuous‚àò _ _ IsContinuous-·µ£ (IsContinuous¬∑·µ£L x))
       Œª y' ‚Üí
         ‚â°Continuous _ _
             (IsContinuous¬∑·µ£R (-·µ£ (rat y')))
              ((IsContinuous‚àò _ _ IsContinuous-·µ£ (IsContinuous¬∑·µ£R (rat y'))))
          (Œª x' ‚Üí cong (rat x' ¬∑·µ£_) (-·µ£-rat _) ‚àô sym (rat¬∑·µ£rat _ _) ‚àô‚àô cong rat (¬∑- x' y') ‚àô‚àô
              sym (-·µ£-rat _) ‚àô (cong -·µ£_ (rat¬∑·µ£rat _ _)))
          x

¬∑DistL- : (x y z : ‚Ñù) ‚Üí (x ¬∑·µ£ (y -·µ£ z)) ‚â° ((x ¬∑·µ£ y) -·µ£ (x ¬∑·µ£ z))
¬∑DistL- x y z = ¬∑DistL+ x y (-·µ£ z) ‚àô cong ((x ¬∑·µ£ y) +·µ£_) (¬∑-·µ£ _ _)


-·µ£¬∑ : ‚àÄ x y ‚Üí  ((-·µ£ x) ¬∑·µ£ y) ‚â°  -·µ£ (x ¬∑·µ£ y)
-·µ£¬∑ x y = ¬∑·µ£Comm _ _ ‚àô‚àô ¬∑-·µ£ y x ‚àô‚àô cong -·µ£_ (¬∑·µ£Comm _ _)

-·µ£¬∑-·µ£ : ‚àÄ x y ‚Üí  ((-·µ£ x) ¬∑·µ£ (-·µ£ y)) ‚â°  (x ¬∑·µ£ y)
-·µ£¬∑-·µ£ x y = -·µ£¬∑ x (-·µ£ y) ‚àô cong (-·µ£_) (¬∑-·µ£ x y) ‚àô -·µ£Invol _


_^‚Åø_ : ‚Ñù ‚Üí ‚Ñï ‚Üí ‚Ñù
x ^‚Åø zero = 1
x ^‚Åø suc n = (x ^‚Åø n) ¬∑·µ£ x


^‚Åø-‚Ñö^‚Åø : ‚àÄ n q ‚Üí ((rat q) ^‚Åø n) ‚â° rat (q ‚Ñö.‚Ñö^‚Åø n)
^‚Åø-‚Ñö^‚Åø zero _ = refl
^‚Åø-‚Ñö^‚Åø (suc n) a =
  cong (_¬∑·µ£ rat a) (^‚Åø-‚Ñö^‚Åø n a) ‚àô
          sym (rat¬∑·µ£rat _ _)


opaque
 unfolding abs·µ£
 ¬∑abs·µ£ : ‚àÄ x y ‚Üí abs·µ£ (x ¬∑·µ£ y) ‚â° abs·µ£ x ¬∑·µ£ abs·µ£ y
 ¬∑abs·µ£ x = ‚â°Continuous _ _
   ((IsContinuous‚àò _ _  IsContinuousAbs·µ£ (IsContinuous¬∑·µ£L x)
                     ))
   (IsContinuous‚àò _ _ (IsContinuous¬∑·µ£L (abs·µ£ x))
                     IsContinuousAbs·µ£)
   Œª y' ‚Üí
     ‚â°Continuous _ _
   ((IsContinuous‚àò _ _  IsContinuousAbs·µ£ (IsContinuous¬∑·µ£R (rat y'))
                     ))
   (IsContinuous‚àò _ _ (IsContinuous¬∑·µ£R (abs·µ£ (rat y')))
                     IsContinuousAbs·µ£)
                      (Œª x' ‚Üí
                        cong abs·µ£ (sym (rat¬∑·µ£rat _ _)) ‚àô‚àô
                         cong rat (sym (‚Ñö.abs'¬∑abs' _ _)) ‚àô‚àô rat¬∑·µ£rat _ _) x


IsContinuous‚ÇÇ¬∑·µ£ :  IsContinuous‚ÇÇ _¬∑·µ£_
IsContinuous‚ÇÇ¬∑·µ£ = IsContinuous¬∑·µ£L , IsContinuous¬∑·µ£R

