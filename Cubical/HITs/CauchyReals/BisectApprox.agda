{-# OPTIONS --safe --lossy-unification #-}

module Cubical.HITs.CauchyReals.BisectApprox where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Equiv.Properties
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Function
import Cubical.Functions.Logic as L
open import Cubical.Functions.Embedding
open import Cubical.Functions.Surjection
open import Cubical.Foundations.Powerset
open import Cubical.Foundations.Structure
open import Cubical.Foundations.Transport
open import Cubical.Foundations.CartesianKanOps

open import Cubical.Data.Bool as ùüö hiding (_‚â§_)
open import Cubical.Data.Nat as ‚Ñï hiding (_¬∑_;_+_)
import Cubical.Data.Nat.Mod as ‚Ñï
import Cubical.Data.Nat.Order as ‚Ñï
open import Cubical.Data.Empty as ‚ä•
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Int as ‚Ñ§ using (pos)
import Cubical.Data.Int.Order as ‚Ñ§
open import Cubical.Data.Sigma

open import Cubical.HITs.PropositionalTruncation as PT
open import Cubical.HITs.SetQuotients as SQ hiding (_/_)

open import Cubical.Data.NatPlusOne

open import Cubical.Data.Rationals as ‚Ñö using (‚Ñö ; [_/_])
open import Cubical.Data.Rationals.Order as ‚Ñö using
  ( _‚Ñö‚Çä+_ ; 0<_ ; ‚Ñö‚Çä ; _‚Ñö‚Çä¬∑_ ; ‚Ñö‚Çä‚â°)
open import Cubical.Data.Rationals.Order.Properties as ‚Ñö
 using (inv‚Ñö‚Çä;/2‚Çä;/3‚Çä;/4‚Çä;x/2<x;inv‚Ñö;_‚Ñö^‚Åø_;_‚Ñö‚Çä^‚Åø_)


open import Cubical.HITs.CauchyReals.Base
open import Cubical.HITs.CauchyReals.Lems
open import Cubical.HITs.CauchyReals.Closeness
open import Cubical.HITs.CauchyReals.Lipschitz
open import Cubical.HITs.CauchyReals.Order
open import Cubical.HITs.CauchyReals.Continuous
open import Cubical.HITs.CauchyReals.Multiplication
open import Cubical.HITs.CauchyReals.Inverse
open import Cubical.HITs.CauchyReals.Sequence
open import Cubical.HITs.CauchyReals.Bisect
open import Cubical.HITs.CauchyReals.Exponentiation
open import Cubical.HITs.CauchyReals.ExponentiationMore


fromLipshitz‚Ñö‚Üí‚Ñù‚Ñô‚ÜíCont : ‚àÄ L a b
                       ‚Üí ‚àÄ f
                       ‚Üí Lipschitz-‚Ñù‚Üí‚Ñù‚Ñô L (ointerval‚Ñô a b) f
                       ‚Üí IsContinuousWithPred (ointerval‚Ñô a b) f
fromLipshitz‚Ñö‚Üí‚Ñù‚Ñô‚ÜíCont L a b f lipF u Œµ u‚ààP =
  ‚à£ ((‚Ñö.inv‚Ñö‚Çä L) ‚Ñö‚Çä¬∑ Œµ ) ,
    (Œª v v‚ààP u‚àºv ‚Üí
      subst‚àº (‚Ñö.y¬∑[x/y] L (fst Œµ))
        (lipF u u‚ààP v v‚ààP ((inv‚Ñö‚Çä L) ‚Ñö‚Çä¬∑ Œµ) u‚àºv)) ‚à£‚ÇÅ

fromLipshitz‚Ñö‚Üí‚Ñù‚Ñô‚ÜíCont0< : ‚àÄ L
                       ‚Üí ‚àÄ f
                       ‚Üí Lipschitz-‚Ñù‚Üí‚Ñù‚Ñô L pred0< f
                       ‚Üí IsContinuousWithPred pred0< f
fromLipshitz‚Ñö‚Üí‚Ñù‚Ñô‚ÜíCont0< L f lipF u Œµ u‚ààP =
  ‚à£ ((‚Ñö.inv‚Ñö‚Çä L) ‚Ñö‚Çä¬∑ Œµ ) ,
    (Œª v v‚ààP u‚àºv ‚Üí
      subst‚àº (‚Ñö.y¬∑[x/y] L (fst Œµ))
        (lipF u u‚ààP v v‚ààP ((inv‚Ñö‚Çä L) ‚Ñö‚Çä¬∑ Œµ) u‚àºv)) ‚à£‚ÇÅ



[n/m]<1 : ‚àÄ n m ‚Üí ([ pos n / m ] ‚Ñö.< 1) ‚âÉ (n ‚Ñï.< ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï m)
[n/m]<1 n m = subst2Equiv (‚Ñ§._<_) (‚Ñ§.¬∑IdR _)
        (sym (‚Ñ§.pos¬∑pos _ _) ‚àô cong pos (‚Ñï.¬∑-identityÀ° _))
         ‚àô‚Çë ‚Ñ§.pos-<-pos‚âÉ‚Ñï< _ _

<^n' : ‚àÄ N n (q : ‚Ñö‚Çä) ‚Üí fst q ‚Ñö.< 1 ‚Üí N ‚Ñï.< n ‚Üí
        (fst q ‚Ñö^‚Åø n) ‚Ñö.< (fst q ‚Ñö^‚Åø N)
<^n' N n q q<1 N<n =
  let z' = (^‚Ñö-StrictMonotoneR
           {‚Ñö‚Çä‚Üí‚Ñù‚Çä (inv‚Ñö‚Çä q)}
             (<‚Ñö‚Üí<·µ£ _ _
               (fst (‚Ñö.inv‚Ñö‚Çä-<-inv‚Ñö‚Çä q 1) q<1))
             (fromNat N) (fromNat n)
               (‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos  _ _ N<n)))
      z = <·µ£‚Üí<‚Ñö _ _ $ subst2 _<·µ£_
          (^‚Åø-‚Ñö^‚Åø _ _ ‚àô cong rat (sym (‚Ñö.inv‚Ñö‚Çä-‚Ñö^‚Åø _ _)))
          (^‚Åø-‚Ñö^‚Åø _ _ ‚àô cong rat (sym (‚Ñö.inv‚Ñö‚Çä-‚Ñö^‚Åø _ _)))
           z'
  in invEq (‚Ñö.inv‚Ñö‚Çä-<-inv‚Ñö‚Çä _ _) z


1/n-1/sn : ‚àÄ n ‚Üí  [ pos 1 / 1+ n ] ‚Ñö.- [ pos 1 / 2+ n ] ‚â°
                  [ pos 1 / ((1+ n) ¬∑‚Çä‚ÇÅ (2+ n)) ]
1/n-1/sn n = eq/ _ _ h

 where
 h : (‚Ñö.‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (1 ¬∑‚Çä‚ÇÅ (2+ n)) ‚Ñ§.- ‚Ñö.‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (1+ n))
         ‚Ñ§.¬∑ ‚Ñö.‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ ((1+ n) ¬∑‚Çä‚ÇÅ (2+ n)) ‚â°
      1 ‚Ñ§.¬∑ ‚Ñö.‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ ((1+ n) ¬∑‚Çä‚ÇÅ (1 ¬∑‚Çä‚ÇÅ (2+ n)))
 h = cong‚ÇÇ (Œª u v ‚Üí v ‚Ñ§.¬∑ ‚Ñö.‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ ((1+ n) ¬∑‚Çä‚ÇÅ u))
      (sym (¬∑‚Çä‚ÇÅ-identityÀ° _))
      (cong ((‚Ñ§._- ‚Ñö.‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (1+ n))) (cong ‚Ñö.‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (¬∑‚Çä‚ÇÅ-identityÀ° _)
       ‚àô  ‚Ñ§.+Comm _ _)
       ‚àô ‚Ñ§.plusMinus (‚Ñö.‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ (1+ n)) 1)


apartFrom-Invlipschitz-‚Ñù‚Üí‚Ñù‚Ñô : ‚àÄ K P f ‚Üí
    Invlipschitz-‚Ñù‚Üí‚Ñù‚Ñô K P f ‚Üí
     (‚àÄ u u‚àà v v‚àà ‚Üí (Œµ : ‚Ñö‚Çä) ‚Üí
         rat (fst (K ‚Ñö‚Çä¬∑ Œµ)) ‚â§·µ£ abs·µ£ (u -·µ£ v)   ‚Üí
           rat (fst Œµ) ‚â§·µ£ abs·µ£ (f u u‚àà -·µ£ f v v‚àà))
apartFrom-Invlipschitz-‚Ñù‚Üí‚Ñù‚Ñô K P f X u u‚àà v v‚àà œÅ Y =
 let Œî = abs·µ£ (f u u‚àà -·µ£ f v v‚àà)
 in x<y+Œ¥‚Üíx‚â§y _ _ Œª Œµ ‚Üí
      PT.rec (isProp<·µ£ _ _) -- u ‚àº[ K ‚Ñö‚Çä¬∑ (q , ?3) ] v
        (Œª (q , Œî<q , q<Œî+Œµ) ‚Üí
          let 0<q = ‚Ñö.<‚Üí0< _ (<·µ£‚Üí<‚Ñö 0 q
                     (isTrans‚â§<·µ£ _ _ _
                       (0‚â§abs·µ£ _) Œî<q))
              zzz : (fst (K ‚Ñö‚Çä¬∑ œÅ)) ‚Ñö.< (fst (K ‚Ñö‚Çä¬∑ (q , 0<q)))
              zzz = <·µ£‚Üí<‚Ñö _ _ $ isTrans‚â§<·µ£ _ _ _
                       Y
                       (fst (‚àº‚âÉabs<Œµ _ _ _)
                      $ X u u‚àà v v‚àà (q , 0<q)
                       (invEq (‚àº‚âÉabs<Œµ _ _ _)
                         Œî<q))
              zzz' = ‚Ñö.<-¬∑o-cancel _ _ _
                         (‚Ñö.0<‚Ñö‚Çä K)
                      (subst2 ‚Ñö._<_ (‚Ñö.¬∑Comm _ _) (‚Ñö.¬∑Comm _ _)
                          zzz)
              zz : rat (fst œÅ) <·µ£ Œî +·µ£ rat (fst Œµ)
              zz = isTrans<·µ£ _ _ _
                      (<‚Ñö‚Üí<·µ£ _ _ zzz')
                       q<Œî+Œµ
          in zz
          )
        ((dense‚Ñöin‚Ñù Œî (Œî +·µ£ rat (fst (Œµ)))
             (‚â§Weaken<+·µ£ _ _ (‚Ñö‚Çä‚Üí‚Ñù‚Çä (Œµ)) (‚â§·µ£-refl _))))

a‚â§b-c‚áía+c‚â§b : ‚àÄ a b c ‚Üí a ‚â§·µ£ b -·µ£ c ‚Üí a +·µ£ c ‚â§·µ£ b
a‚â§b-c‚áía+c‚â§b a b c p =
   subst ((a +·µ£ c) ‚â§·µ£_)
        (Lùêë.lem--00 {b} {c})
     (‚â§·µ£-+o _ _ c p)


1‚Ñö^‚Åø : ‚àÄ a ‚Üí 1 ‚Ñö^‚Åø a ‚â° 1
1‚Ñö^‚Åø zero = refl
1‚Ñö^‚Åø (suc a) = ‚Ñö.¬∑IdR _ ‚àô 1‚Ñö^‚Åø a

‚Ñö^-¬∑ : ‚àÄ x a b ‚Üí ((x ‚Ñö^‚Åø a) ‚Ñö^‚Åø b) ‚â° (x ‚Ñö^‚Åø (a ‚Ñï.¬∑ b))
‚Ñö^-¬∑ x a zero = cong (x ‚Ñö^‚Åø_) (0‚â°m¬∑0 a)
‚Ñö^-¬∑ x a (suc b) = cong (‚Ñö._¬∑ (x ‚Ñö^‚Åø a))
     (‚Ñö^-¬∑ x a b) ‚àô
       (‚Ñö.¬∑-‚Ñö^‚Åø (a ‚Ñï.¬∑ b) a x)
      ‚àô cong (x ‚Ñö^‚Åø_) ((Œª i ‚Üí ‚Ñï.+-comm (‚Ñï.¬∑-comm a b i) a i) ‚àô
          ‚Ñï.¬∑-comm _ _)

¬æ‚Åø<Œµ : ‚àÄ (Œµ : ‚Ñö‚Çä) ‚Üí Œ£[ n ‚àà ‚Ñï ] [ 3 / 4 ] ‚Ñö^‚Åø n ‚Ñö.< fst Œµ
¬æ‚Åø<Œµ Œµ =
  let (n , X) = 1/2‚Åø<Œµ Œµ
      ¬æ¬≥‚â§¬Ω = ‚Ñö^‚Åø-Monotone
              {[ 3 / 4 ] ‚Ñö^‚Åø 3} {[ 1 / 2 ]}
              n (‚Ñö.dec‚Ñö‚â§? {0} {[ 3 / 4 ] ‚Ñö^‚Åø 3})
               (‚Ñö.dec‚Ñö‚â§? {0} {[ 1 / 2 ]} )
                 (‚Ñö.dec‚Ñö‚â§? {[ 3 / 4 ] ‚Ñö^‚Åø 3} {[ 1 / 2 ]})
  in 3 ‚Ñï.¬∑ n , ‚Ñö.isTrans‚â§< _ _ _
    (‚Ñö.isTrans‚â§ _ _ _
      (‚Ñö.‚â°Weaken‚â§ _ _ (sym (‚Ñö^-¬∑ [ 3 / 4 ] 3 n)))
        ¬æ¬≥‚â§¬Ω) X



map-fromCauchySequence'‚Ñô : ‚àÄ L s ics P f ‚Üí (Lipschitz-‚Ñù‚Üí‚Ñù‚Ñô L P f) ‚Üí
   ‚àÄ lim‚àà ‚Üí
   (s‚àà : ‚àÄ n ‚Üí s n ‚àà P) ‚Üí
    Œ£ _ Œª icsf ‚Üí
       f (fromCauchySequence' s ics) lim‚àà ‚â°
        fromCauchySequence' (Œª n ‚Üí f (s n) (s‚àà n))
          icsf
map-fromCauchySequence'‚Ñô L s ics P f lf lim‚àà s‚àà =
  icsf , sym (fromCauchySequence'‚â° _ _ _ h)


 where
 open ‚Ñö.HLP

 icsf : IsCauchySequence' (Œª n ‚Üí f (s n) (s‚àà n))
 icsf Œµ = map-snd
   (Œª X m n <m <n ‚Üí
      let z = X m n <m <n
          z' = lf (s n) (s‚àà n) (s m) (s‚àà m) (inv‚Ñö‚Çä L ‚Ñö‚Çä¬∑ Œµ)
                (invEq (‚àº‚âÉabs<Œµ _ _ _) z)
       in fst (‚àº‚âÉabs<Œµ _ _ Œµ) (subst‚àº (‚Ñö.y¬∑[x/y] L (fst Œµ)) z'))
   (ics (inv‚Ñö‚Çä L ‚Ñö‚Çä¬∑ Œµ))

 h : (Œµ : ‚Ñö‚Çä) ‚Üí
       ‚àÉ-syntax ‚Ñï
       (Œª N ‚Üí
          (n : ‚Ñï) ‚Üí
          N ‚Ñï.< n ‚Üí
          abs·µ£ (f (s n) (s‚àà n)
            -·µ£ f (fromCauchySequence' s ics) lim‚àà) <·µ£ rat (fst Œµ))
 h Œµ =
   let (N , X) = ics ((inv‚Ñö‚Çä L ‚Ñö‚Çä¬∑ (/4‚Çä Œµ)))
       (N' , X') = icsf (/4‚Çä Œµ)
       midN = suc (‚Ñï.max N N')
       midV = f (s midN)

   in ‚à£ midN , (Œª n midN<n ‚Üí
        let 3Œµ/4<Œµ = subst (‚Ñö._< (fst Œµ))
                            (cong (fst (/4‚Çä Œµ) ‚Ñö.+_)
                              (sym (‚Ñö.y¬∑[x/y] L _)
                               ‚àô cong (fst L ‚Ñö.¬∑_) (‚Ñö.¬∑DistL+ _ _ _) ))

                               (dist‚Ñö<! Œµ [ ((ge[ ‚Ñö.[ 1 / 4 ] ]) +ge
                                   (ge[ ‚Ñö.[ 1 / 4 ] ] +ge ge[ ‚Ñö.[ 1 / 4 ] ]))
                                   < ge1 ])
            z' = invEq (‚àº‚âÉabs<Œµ _ _ (/4‚Çä Œµ)) (X' ((suc N')) n
                 (‚Ñï.<-trans (‚Ñï.suc-‚â§-suc ‚Ñï.right-‚â§-max) midN<n)
                  ‚Ñï.‚â§-refl )

            zzzz' =
                (ùï£-lim-self _ (fromCauchySequence'-isCA s ics)
                      ((inv‚Ñö‚Çä L ‚Ñö‚Çä¬∑ (/4‚Çä Œµ))) ( (inv‚Ñö‚Çä L ‚Ñö‚Çä¬∑ (/4‚Çä Œµ))))

        in fst (‚àº‚âÉabs<Œµ _ _ Œµ)
             (‚àº-monotone< 3Œµ/4<Œµ
                (triangle‚àº z' (lf _ _ _ _ _ zzzz')))) ‚à£‚ÇÅ

x+y‚â§x'-y'‚âÉx+y'‚â§x'-y : ‚àÄ x y x' y' ‚Üí
       (x +·µ£ y ‚â§·µ£ x' -·µ£ y') ‚âÉ (x +·µ£ y' ‚â§·µ£ x' -·µ£ y)
x+y‚â§x'-y'‚âÉx+y'‚â§x'-y x y x' y' =
      subst2Equiv _‚â§·µ£_
        (cong (x +·µ£_) (sym Lùêë.lem--063) ‚àô
          +·µ£Assoc _ _ _ ‚àô cong (_-·µ£ y') (+·µ£Assoc _ _ _))
        (cong (_-·µ£ y') (sym (ùêë'.minusPlus _ _)))
   ‚àô‚Çë x+y‚â§z+y‚âÉx‚â§z _ _ (-·µ£ y')
   ‚àô‚Çë x+y‚â§z+y‚âÉx‚â§z _ _ y

x+y<x'-y'‚âÉx+y'<x'-y : ‚àÄ x y x' y' ‚Üí
       (x +·µ£ y <·µ£ x' -·µ£ y') ‚âÉ (x +·µ£ y' <·µ£ x' -·µ£ y)
x+y<x'-y'‚âÉx+y'<x'-y x y x' y' =
      subst2Equiv _<·µ£_
        (cong (x +·µ£_) (sym Lùêë.lem--063) ‚àô
          +·µ£Assoc _ _ _ ‚àô cong (_-·µ£ y') (+·µ£Assoc _ _ _))
        (cong (_-·µ£ y') (sym (ùêë'.minusPlus _ _)))
   ‚àô‚Çë x+y<z+y‚âÉx<z _ _ (-·µ£ y')
   ‚àô‚Çë x+y<z+y‚âÉx<z _ _ y


1/m¬∑1/n : ‚àÄ {n m} ‚Üí [ 1 / n ] ‚Ñö.¬∑ [ 1 / m ] ‚â° [ 1 / (n ¬∑‚Çä‚ÇÅ m) ]
1/m¬∑1/n = refl

invL‚Üíembed : ‚àÄ a b (a‚â§b : rat a ‚â§·µ£ rat b) f (f‚àà : ‚àÄ x x‚àà ‚Üí f x x‚àà ‚àà interval‚Ñô
                         (f (rat a) ((‚â§·µ£-refl _) , a‚â§b))
                         (f (rat b) (a‚â§b , ‚â§·µ£-refl _)))
                K ‚Üí Invlipschitz-‚Ñù‚Üí‚Ñù‚Ñô K (interval‚Ñô (rat a) (rat b)) f
               ‚Üí isEmbedding {A = Œ£ _ _} {B = Œ£ _ (_‚àà interval‚Ñô
                         (f (rat a) ((‚â§·µ£-refl _) , a‚â§b))
                         (f (rat b) (a‚â§b , ‚â§·µ£-refl _)))}
                  Œª (x , x‚àà) ‚Üí (f x x‚àà , f‚àà x x‚àà)
invL‚Üíembed a b a‚â§b f f‚àà K il (x , x‚àà) (y , y‚àà) =
 snd (propBiimpl‚ÜíEquiv (isSetŒ£ isSet‚Ñù
   (isProp‚ÜíisSet ‚àò snd ‚àò interval‚Ñô (rat a) (rat b) ) _ _)
   (isSetŒ£ isSet‚Ñù (isProp‚ÜíisSet ‚àò snd ‚àò interval‚Ñô _ _ ) _ _) _
     (Œ£‚â°Prop (snd ‚àò interval‚Ñô (rat a) (rat b)) ‚àòS fst (‚àº‚âÉ‚â° _ _) ‚àò (Œª p Œµ ‚Üí
        subst‚àº (‚Ñö.y¬∑[x/y] K (fst Œµ))
     (il x x‚àà y y‚àà ((inv‚Ñö‚Çä K) ‚Ñö‚Çä¬∑ Œµ) (p (inv‚Ñö‚Çä K ‚Ñö‚Çä¬∑ Œµ))))
      ‚àòS invEq (‚àº‚âÉ‚â° _ _) ‚àòS cong fst))




module IsBilipschitz' (a b : ‚Ñö)  (a<b : a ‚Ñö.< b)
         (f : ‚àÄ (x : ‚Ñù) ‚Üí x ‚àà (interval‚Ñô (rat a) (rat b)) ‚Üí ‚Ñù)
         (fC : IsContinuousWithPred (interval‚Ñô (rat a) (rat b)) f)
          (incrF : isIncrasing‚Ñô·µ£ (interval‚Ñô (rat a) (rat b)) f)
          (nondF : isNondecrasing‚Ñô·µ£ (interval‚Ñô (rat a) (rat b)) f)
           where


 a‚àà : rat a ‚àà (interval‚Ñô (rat a) (rat b))

 a‚àà = (‚â§·µ£-refl (rat a) , <·µ£Weaken‚â§·µ£ _ _ (<‚Ñö‚Üí<·µ£ _ _ a<b))
 b‚àà : rat b ‚àà (interval‚Ñô (rat a) (rat b))
 b‚àà = (<·µ£Weaken‚â§·µ£ _ _ (<‚Ñö‚Üí<·µ£ _ _ a<b) , ‚â§·µ£-refl (rat b))

 fa = f (rat a) a‚àà
 fb = f (rat b) b‚àà

 f‚àà : ‚àÄ x x‚àà ‚Üí f x x‚àà ‚àà (interval‚Ñô fa fb)
 f‚àà x x‚àà =
   nondF (rat a) _ x x‚àà (fst x‚àà) ,
    nondF x x‚àà  (rat b) _ (snd x‚àà)

 f' : ‚àÄ x x‚àà ‚Üí Œ£ ‚Ñù (_‚àà interval‚Ñô fa fb)
 f' x x‚àà = _ , f‚àà x x‚àà

 fa<fb : fa <·µ£ fb
 fa<fb = incrF
   (rat a) a‚àà
   (rat b) b‚àà
   (<‚Ñö‚Üí<·µ£ _ _ a<b)

 a‚â§b = ‚Ñö.<Weaken‚â§ _ _ a<b

 Œî‚ÇÄ = b ‚Ñö.- a
 Œî‚ÇÄ‚Çä = ‚Ñö.<‚Üí‚Ñö‚Çä _ _ a<b


 fo : (x : ‚Ñù) ‚Üí x ‚àà ointerval‚Ñô (rat a) (rat b)
              ‚Üí Œ£ ‚Ñù (_‚àà ointerval‚Ñô fa fb)
 fo x (<x , x<)  = (f x (<·µ£Weaken‚â§·µ£ _ _ <x , <·µ£Weaken‚â§·µ£ _ _ x<))
         , (incrF (rat a) a‚àà  x (<·µ£Weaken‚â§·µ£ _ _ <x , <·µ£Weaken‚â§·µ£ _ _ x<) <x)
         , (incrF x (<·µ£Weaken‚â§·µ£ _ _ <x , <·µ£Weaken‚â§·µ£ _ _ x<) (rat b) b‚àà   x<)


 module Inv
    (approxF : ‚ÑöApprox‚Ñô' (interval‚Ñô (rat a) (rat b)) (interval‚Ñô fa fb) f')
    (L K : ‚Ñö‚Çä)
    (lipF : Lipschitz-‚Ñù‚Üí‚Ñù‚Ñô L (interval‚Ñô (rat a) (rat b)) f)
    (1/K‚â§L : fst (inv‚Ñö‚Çä K) ‚Ñö.‚â§ fst L)
    (lip‚Åª¬πF : Invlipschitz-‚Ñù‚Üí‚Ñù‚Ñô K (interval‚Ñô (rat a) (rat b)) f)

   where

  fApart : ‚àÄ x x‚àà y y‚àà ‚Üí (Œµ : ‚Ñö‚Çä) ‚Üí rat (fst (K ‚Ñö‚Çä¬∑ Œµ)) ‚â§·µ£ abs·µ£ (x -·µ£ y) ‚Üí
                                    rat (fst Œµ) ‚â§·µ£ abs·µ£ (f x x‚àà -·µ£ f y y‚àà)
  fApart = apartFrom-Invlipschitz-‚Ñù‚Üí‚Ñù‚Ñô
           K _ f lip‚Åª¬πF

  invApart : ‚àÄ x x‚àà y y‚àà ‚Üí (Œµ : ‚Ñö‚Çä) ‚Üí
         rat (fst (L ‚Ñö‚Çä¬∑ Œµ)) ‚â§·µ£ abs·µ£ (f x x‚àà -·µ£ f y y‚àà)   ‚Üí
           rat (fst Œµ) ‚â§·µ£ abs·µ£ (x -·µ£ y)
  invApart x x‚àà y y‚àà œÅ z =
   let Œî = abs·µ£ (x -·µ£ y)
   in x<y+Œ¥‚Üíx‚â§y _  _
       Œª Œµ ‚Üí
            PT.rec (isProp<·µ£ _ _)
        (Œª (q , Œî<q , q<Œî+Œµ) ‚Üí
           let z' : f x x‚àà ‚àº[
                      L ‚Ñö‚Çä¬∑
                      (q ,
                       ‚Ñö.<‚Üí0< q
                       (<·µ£‚Üí<‚Ñö [ pos 0 / 1 ] q
                        (isTrans‚â§<·µ£ 0 Œî (rat q) (0‚â§abs·µ£ (x -·µ£ y)) Œî<q)))
                      ] f y y‚àà
               z' = lipF x x‚àà y y‚àà
                     (q , ‚Ñö.<‚Üí0< _ (<·µ£‚Üí<‚Ñö _ _
                       (isTrans‚â§<·µ£ _ _ _
                         (0‚â§abs·µ£ _) Œî<q)))
                    (invEq (‚àº‚âÉabs<Œµ _ _ _) Œî<q )

               zz' = ‚Ñö.<-¬∑o-cancel _ _ _ (‚Ñö.0<‚Ñö‚Çä L)
                 (subst2 ‚Ñö._<_ (‚Ñö.¬∑Comm _ _) (‚Ñö.¬∑Comm _ _)
                      (<·µ£‚Üí<‚Ñö _ _ (isTrans‚â§<·µ£ _ _ _
                       z
                       (fst (‚àº‚âÉabs<Œµ _ _ _) z'))))


           in isTrans<·µ£ _ _ _
                 (<‚Ñö‚Üí<·µ£ _ _ zz') q<Œî+Œµ
          )
        ((dense‚Ñöin‚Ñù Œî (Œî +·µ£ rat (fst (Œµ)))
             (‚â§Weaken<+·µ£ _ _ (‚Ñö‚Çä‚Üí‚Ñù‚Çä (Œµ)) (‚â§·µ£-refl _))))

  invApart' : ‚àÄ x x‚àà y y‚àà ‚Üí (Œµ : ‚Ñö‚Çä) ‚Üí
         rat (fst Œµ) ‚â§·µ£ abs·µ£ (f x x‚àà -·µ£ f y y‚àà)   ‚Üí
           rat (fst ((inv‚Ñö‚Çä L) ‚Ñö‚Çä¬∑ Œµ)) ‚â§·µ£ abs·µ£ (x -·µ£ y)
  invApart' x x‚àà y y‚àà Œµ z =
    invApart x x‚àà y y‚àà ((inv‚Ñö‚Çä L) ‚Ñö‚Çä¬∑ Œµ)
      (isTrans‚â°‚â§·µ£ _ _ _ (cong rat (‚Ñö.y¬∑[x/y] L (fst Œµ) )) z)

  invMon : ‚àÄ x x‚àà y y‚àà ‚Üí
          f x x‚àà <·µ£ f y y‚àà   ‚Üí
           x <·µ£ y
  invMon x x‚àà y y‚àà fx<fy =
   PT.rec (isProp<·µ£ _ _)
      (Œª (Œ¥ , X) ‚Üí
         let z = isTrans<‚â§·µ£ _ _ _
                    (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä ((inv‚Ñö‚Çä L) ‚Ñö‚Çä¬∑ Œ¥)))
                    (invApart y y‚àà x x‚àà  ((inv‚Ñö‚Çä L) ‚Ñö‚Çä¬∑ Œ¥)
                      (isTrans‚â°‚â§·µ£ _ _ _
                         (cong rat (‚Ñö.y¬∑[x/y] L (fst Œ¥)))
                          (isTrans‚â§·µ£ _ _ _
                           (<·µ£Weaken‚â§·µ£ _ _ X) (‚â§abs·µ£ _))))
         in ‚äé.rec (‚ä•.rec ‚àò isAsym<·µ£ (f x x‚àà) (f y y‚àà) fx<fy
              ‚àòS incrF y y‚àà x x‚àà ) (idfun _)
              (invEq (ÔºÉ‚âÉ0<dist _ _) z)
              )
     (<·µ£‚ÜíŒî _ _ fx<fy)

  isEmbed-fo : isEmbedding (uncurry fo)
  isEmbed-fo (x , x‚àà) (y , y‚àà) =
    snd (propBiimpl‚ÜíEquiv (isSetŒ£ isSet‚Ñù
    (isProp‚ÜíisSet ‚àò snd ‚àò ointerval‚Ñô (rat a) (rat b) ) _ _)
    (isSetŒ£ isSet‚Ñù (isProp‚ÜíisSet ‚àò snd ‚àò ointerval‚Ñô _ _ ) _ _) _
      (Œ£‚â°Prop (snd ‚àò ointerval‚Ñô (rat a) (rat b)) ‚àòS fst (‚àº‚âÉ‚â° _ _) ‚àò (Œª p Œµ ‚Üí
         subst‚àº (‚Ñö.y¬∑[x/y] K (fst Œµ))
      (lip‚Åª¬πF x _ y _ ((inv‚Ñö‚Çä K) ‚Ñö‚Çä¬∑ Œµ) (p (inv‚Ñö‚Çä K ‚Ñö‚Çä¬∑ Œµ))))
       ‚àòS invEq (‚àº‚âÉ‚â° _ _) ‚àòS cong fst))

  module _ (y : ‚Ñö) (y‚àà : rat y ‚àà (interval‚Ñô fa fb))  where

   record Step (Œî : ‚Ñö) : Type where
    field
     a' b' : ‚Ñö
     a'<b' : a' ‚Ñö.< b'
     b'-a'‚â§Œî : b' ‚Ñö.- a' ‚Ñö.‚â§ Œî
     a'‚àà : a' ‚àà ‚Ñöinterval‚Ñô a b
     b'‚àà : b' ‚àà ‚Ñöinterval‚Ñô a b
     a'‚â§ : f (rat a') (‚àà‚Ñöinterval‚Ñô‚Üí‚ààinterval‚Ñô _ _ _ a'‚àà) ‚â§·µ£ rat y
     ‚â§b' : rat y ‚â§·µ£ f (rat b') (‚àà‚Ñöinterval‚Ñô‚Üí‚ààinterval‚Ñô _ _ _ b'‚àà)

    a'‚â§b' : a' ‚Ñö.‚â§ b'
    a'‚â§b' = ‚Ñö.<Weaken‚â§ _ _ a'<b'
    mid : ‚Ñö
    mid = b' ‚Ñö.¬∑ [ 1 / 2 ] ‚Ñö.+ a' ‚Ñö.¬∑ [ 1 / 2 ]

    Œî‚Çä : ‚Ñö‚Çä
    Œî‚Çä = Œî , ‚Ñö.<‚Üí0< _ (‚Ñö.isTrans<‚â§ 0 _ _ (‚Ñö.-< a' b' a'<b') b'-a'‚â§Œî)

    p = ‚Ñö.<-¬∑o _ _ [ 1 / 2 ] (‚Ñö.dec‚Ñö<? {0} {[ 1 / 2 ]}) a'<b'

    a'<mid : a' ‚Ñö.< mid
    a'<mid = ‚Ñö.isTrans‚â§< _ _ _
      (‚Ñö.‚â°Weaken‚â§ _ _ (sym (‚Ñö.¬∑IdR a') ‚àô cong (a' ‚Ñö.¬∑_) ‚Ñö.dec‚Ñö? ‚àô
        ‚Ñö.¬∑DistL+ a' _ _))
      (‚Ñö.<-+o _ _ (a' ‚Ñö.¬∑ [ 1 / 2 ]) p)

    mid<b' : mid ‚Ñö.< b'
    mid<b' = ‚Ñö.isTrans<‚â§ _ _ _
      (‚Ñö.<-o+ _ _ (b' ‚Ñö.¬∑ [ 1 / 2 ]) p)
      ((‚Ñö.‚â°Weaken‚â§ _ _ ((sym (‚Ñö.¬∑DistL+ b' _ _) ‚àô cong (b' ‚Ñö.¬∑_) ‚Ñö.dec‚Ñö? ‚àô
        ‚Ñö.¬∑IdR b'))))

    mid‚àà : mid ‚àà ‚Ñöinterval‚Ñô a b
    mid‚àà = ‚Ñö.isTrans‚â§ _ _ _ (fst (a'‚àà)) (‚Ñö.<Weaken‚â§ _ _ a'<mid) ,
            ‚Ñö.isTrans‚â§ _ _ _ (‚Ñö.<Weaken‚â§ _ _ mid<b') (snd b'‚àà)

    mid‚àà' = (‚àà‚Ñöinterval‚Ñô‚Üí‚ààinterval‚Ñô _ _ _ mid‚àà)

    fMid·µ£ = f (rat mid) mid‚àà'

    y-fa' : abs·µ£ (f (rat a') (‚àà‚Ñöinterval‚Ñô‚Üí‚ààinterval‚Ñô _ _ _ a'‚àà) -·µ£ rat y)
            <·µ£ rat (fst L ‚Ñö.¬∑ (2 ‚Ñö.¬∑ Œî))
    y-fa' = isTrans‚â°<·µ£ _ _ _
       (minusComm-abs·µ£ _ _)
       (isTrans‚â§<·µ£ _ _ _
          (subst2 _‚â§·µ£_
            ((sym (abs·µ£NonNeg _ (x‚â§y‚Üí0‚â§y-x _ _
               (a'‚â§)))))
            (sym (abs·µ£Pos _ (x<y‚Üí0<y-x _ _
              (incrF _ _ _ _ (<‚Ñö‚Üí<·µ£ _ _ a'<b')))))
            (‚â§·µ£-+o _ _ _ (‚â§b')))
         (fst (‚àº‚âÉabs<Œµ _ _ _)
          ((lipF (rat b') (‚àà‚Ñöinterval‚Ñô‚Üí‚ààinterval‚Ñô _ _ _ b'‚àà)
                  (rat a') (‚àà‚Ñöinterval‚Ñô‚Üí‚ààinterval‚Ñô _ _ _ a'‚àà)

                 (2 ‚Ñö‚Çä¬∑ Œî‚Çä)
                  (invEq (‚àº‚âÉabs<Œµ _ _ _)
                   (isTrans‚â§<·µ£ _ _ _
                    (isTrans‚â°‚â§·µ£ _ _ _
                       (cong abs·µ£ (cong‚ÇÇ _+·µ£_ refl (-·µ£-rat _)
                        ‚àô +·µ£-rat _ _ )  ‚àô (abs·µ£Pos _ (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.-< _ _ a'<b')))) --
                        (‚â§‚Ñö‚Üí‚â§·µ£ _ _ b'-a'‚â§Œî))
                        (<‚Ñö‚Üí<·µ£ _ _
                          (‚Ñö.isTrans‚â§< _ _ _
                            (‚Ñö.‚â°Weaken‚â§ _ _
                               (sym (‚Ñö.¬∑IdL _)))

                           (‚Ñö.<-¬∑o 1 2 _ (‚Ñö.0<‚Ñö‚Çä Œî‚Çä) (‚Ñö.dec‚Ñö<?))))))))))

   record Step‚äÉStep {Œî ŒîS : _} (s : Step Œî) (sS : Step ŒîS) : Type where

    field
     a'‚â§a'S : Step.a' s ‚Ñö.‚â§ Step.a' sS
     bS‚â§b' : Step.b' sS ‚Ñö.‚â§ Step.b' s
     -- distA' : (Step.a' sS) ‚Ñö.‚â§ Œî ‚Ñö.¬∑ [ 1 / 2 ] ‚Ñö.+ (Step.a' s)

   step0 : Step Œî‚ÇÄ
   step0 .Step.a' = a
   step0 .Step.b' = b
   step0 .Step.a'<b' = a<b
   step0 .Step.b'-a'‚â§Œî = ‚Ñö.isRefl‚â§ _
   step0 .Step.a'‚àà = ‚Ñö.isRefl‚â§ _  , a‚â§b
   step0 .Step.b'‚àà = a‚â§b , (‚Ñö.isRefl‚â§ _)
   step0 .Step.a'‚â§ =
         subst (_‚â§·µ£ _)
           (cong (f (rat a)) (snd (interval‚Ñô _ _ _) _ _)) ( (fst y‚àà))
   step0 .Step.‚â§b' =
         subst (_ ‚â§·µ£_)
           (cong (f (rat b)) (snd (interval‚Ñô _ _ _) _ _)) ( (snd y‚àà))

   stepS' : ‚àÄ Œî ‚Üí (s : Step Œî) ‚Üí Œ£ (Step (Œî ‚Ñö.¬∑ [ 3 / 4 ])) (Step‚äÉStep s)
   stepS' Œî s = w (‚Ñö.Dichotomy‚Ñö y fMid)
    where
    open Step s


    Œî‚Çä* : ‚Ñö‚Çä
    Œî‚Çä* = ‚Ñö.<‚Üí‚Ñö‚Çä _ _ a'<b'

    Œî* : ‚Ñö
    Œî* = fst Œî‚Çä*


    Œî*‚â§Œî : Œî* ‚Ñö.‚â§ Œî
    Œî*‚â§Œî = b'-a'‚â§Œî


    mid=b-Œî/2 : mid ‚â° b' ‚Ñö.- fst (/2‚Çä Œî‚Çä*)
    mid=b-Œî/2 =
          cong‚ÇÇ ‚Ñö._+_
           (sym lem--063 ‚àô
            cong‚ÇÇ ‚Ñö._+_
             (‚Ñö.Œµ/2+Œµ/2‚â°Œµ _) refl)
          (cong (‚Ñö._¬∑ [ 1 / 2 ]) (sym (‚Ñö.-Invol _))
            ‚àô sym (‚Ñö.¬∑Assoc -1 _ _))
       ‚àô‚àô sym (‚Ñö.+Assoc _ _ _)
       ‚àô‚àô cong (‚Ñö._+_ b')
         (sym (‚Ñö.-Distr (b' ‚Ñö.¬∑ [ 1 / 2 ])
            (‚Ñö.- a' ‚Ñö.¬∑ [ 1 / 2 ]))
           ‚àô cong ‚Ñö.-_ (sym (‚Ñö.¬∑DistR+ b' (‚Ñö.- a') [ 1 / 2 ])))


    Œ¶ : ‚Ñö‚Çä
    Œ¶ = /2‚Çä (inv‚Ñö‚Çä K ‚Ñö‚Çä¬∑ /4‚Çä Œî‚Çä*)

    fMid = fst (approxF mid mid‚àà') Œ¶

    fMidDist : rat fMid ‚àº[ (inv‚Ñö‚Çä K ‚Ñö‚Çä¬∑ /4‚Çä Œî‚Çä*) ] f (rat mid) mid‚àà'
    fMidDist =
      subst‚àº (‚Ñö.Œµ/2+Œµ/2‚â°Œµ _) (subst (rat fMid ‚àº[ Œ¶ ‚Ñö‚Çä+ Œ¶ ]_)
                (snd (snd (snd (approxF mid mid‚àà'))))
                 (ùï£-lim-self _ _ Œ¶ Œ¶))


    a'-mid‚â°Œî/2 : (mid ‚Ñö.- a') ‚â° Œî* ‚Ñö.¬∑ [ 1 / 2 ]
    a'-mid‚â°Œî/2 =
       ((sym (‚Ñö.+Assoc _ _ _) ‚àô
          cong (b' ‚Ñö.¬∑ [ 1 / 2 ] ‚Ñö.+_)
           (cong (a' ‚Ñö.¬∑ [ 1 / 2 ] ‚Ñö.+_) (‚Ñö.¬∑Comm -1 a')
            ‚àô sym (‚Ñö.¬∑DistL+ a' _ _) ‚àô
             ‚Ñö.¬∑Comm _ _ ‚àô
              sym (‚Ñö.¬∑Assoc [ 1 / 2 ] -1 a') ‚àô  ‚Ñö.¬∑Comm [ 1 / 2 ] _)
           ‚àô sym (‚Ñö.¬∑DistR+ _ _ _)))

    w : (y ‚Ñö.‚â§ fMid) ‚äé (fMid ‚Ñö.< y) ‚Üí Œ£ (Step (Œî ‚Ñö.¬∑ [ 3 / 4 ]))
              (Step‚äÉStep s)
    w (inl x) = ww
     where

     ab-dist = ‚Ñö.isTrans‚â§
      ((mid ‚Ñö.+ (Œî* ‚Ñö.¬∑ [ 1 / 4 ])) ‚Ñö.- a') _ _
       (‚Ñö.‚â°Weaken‚â§ _ _
         (cong (‚Ñö._- a') (‚Ñö.+Comm _ _) ‚àô sym (‚Ñö.+Assoc _ _ _)))
        ((‚Ñö.isTrans‚â§ _ _ _
          (‚Ñö.‚â§-o+ _ _ _ (‚Ñö.‚â°Weaken‚â§ _ _ a'-mid‚â°Œî/2))
            (‚Ñö.‚â°Weaken‚â§ _ _ (sym (‚Ñö.¬∑DistL+ Œî* _ _) ‚àô
              cong (Œî* ‚Ñö.¬∑_) ‚Ñö.dec‚Ñö?))))

     newb' = mid ‚Ñö.+ (Œî* ‚Ñö.¬∑ [ 1 / 4 ])


     newb'+Œî/4‚â°b' : newb' ‚Ñö.+ (Œî* ‚Ñö.¬∑ [ 1 / 4 ]) ‚â° b'
     newb'+Œî/4‚â°b' = sym (‚Ñö.+Assoc _ _ _) ‚àô
       cong‚ÇÇ ‚Ñö._+_
         mid=b-Œî/2
         (cong fst (‚Ñö./4‚Çä+/4‚Çä‚â°/2‚Çä Œî‚Çä*))
       ‚àô lem--00

     y‚â§fnewb' : rat y ‚â§·µ£ f (rat newb') _
     y‚â§fnewb' =
      (isTrans‚â§·µ£ _ _ _
        (‚â§‚Ñö‚Üí‚â§·µ£ _ _ x) (isTrans‚â§·µ£ _ _ _
           (a-b‚â§c‚áía‚â§c+b _ _ _
             (isTrans‚â§·µ£ _ _ _ (‚â§abs·µ£ _ )
               (<·µ£Weaken‚â§·µ£ _ _ (fst (‚àº‚âÉabs<Œµ _ _ _) fMidDist)))) mid-dist))
        where
         mid-dist : rat (fst (inv‚Ñö‚Çä K ‚Ñö‚Çä¬∑ /4‚Çä Œî‚Çä*))
                      +·µ£ f (rat mid) mid‚àà' ‚â§·µ£
                      f _ _
         mid-dist = a‚â§b-c‚áía+c‚â§b _ _ _ $ isTrans‚â§‚â°·µ£ _ _ _
          (apartFrom-Invlipschitz-‚Ñù‚Üí‚Ñù‚Ñô
           K _ f lip‚Åª¬πF (rat newb')
             _
             (rat mid) mid‚àà'
             (inv‚Ñö‚Çä K ‚Ñö‚Çä¬∑ (/4‚Çä Œî‚Çä*))
                (isTrans‚â§‚â°·µ£ _ _ _(‚â§‚Ñö‚Üí‚â§·µ£ _ _

                  (subst2 ‚Ñö._‚â§_ (sym (‚Ñö.y¬∑[x/y] K (fst (/4‚Çä Œî‚Çä*))))
                    (cong ‚Ñö.abs' (sym lem--063))
                  (‚Ñö.‚â§abs' _))
                  ) (cong rat (sym (‚Ñö.abs'‚â°abs _)) ‚àô sym (abs·µ£-rat _) ‚àô
                   cong abs·µ£
                    (sym (-·µ£-rat‚ÇÇ _ _))))

                  )
              (abs·µ£Pos _ (x<y‚Üí0<y-x _ _
                (incrF _ mid‚àà' _ _
                    (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.<+‚Ñö‚Çä' mid mid ((Œî‚Çä* ‚Ñö‚Çä¬∑ ([ 1 / 4 ] , _))) (‚Ñö.isRefl‚â§ mid) )))))

     a'<newb' : a' ‚Ñö.< newb'
     a'<newb' =  ‚Ñö.isTrans‚â§< _ _ _
         (‚Ñö.‚â°Weaken‚â§ _ _ (sym (‚Ñö.+IdR _))) (‚Ñö.<Monotone+ _ _ 0 (Œî* ‚Ñö.¬∑ [ 1 / 4 ])
              a'<mid (‚Ñö.0<‚Ñö‚Çä (Œî‚Çä* ‚Ñö‚Çä¬∑ ([ 1 / 4 ] , _))))

     newb'‚â§b' : newb' ‚Ñö.‚â§ b'
     newb'‚â§b' =
      subst (newb' ‚Ñö.‚â§_) newb'+Œî/4‚â°b'
       (‚Ñö.‚â§+‚Ñö‚Çä _ _ (Œî‚Çä* ‚Ñö‚Çä¬∑ _) (‚Ñö.isRefl‚â§ _))

     newb'‚àà : newb' ‚àà ‚Ñöinterval‚Ñô a b
     newb'‚àà = ‚Ñö.isTrans‚â§ _ _ _
              (fst a'‚àà) (‚Ñö.<Weaken‚â§ _ _ a'<newb')
       , ‚Ñö.isTrans‚â§ _ _ _ newb'‚â§b' (snd b'‚àà)


     ww : Œ£ (Step (Œî ‚Ñö.¬∑ [ 3 / 4 ])) (Step‚äÉStep s)
     ww .fst .Step.a' = a'
     ww .fst .Step.b' = newb'
     ww .fst .Step.a'<b' = a'<newb'
     ww .fst .Step.b'-a'‚â§Œî = ‚Ñö.isTrans‚â§
           _ _ _ ab-dist (‚Ñö.‚â§-¬∑o Œî* Œî [ 3 / 4 ]
             (‚Ñö.<Weaken‚â§ 0 [ 3 / 4 ] (‚Ñö.0<pos 2 4)) Œî*‚â§Œî)
     ww .fst .Step.a'‚àà = a'‚àà
     ww .fst .Step.b'‚àà = newb'‚àà
     ww .fst .Step.a'‚â§ = a'‚â§
     ww .fst .Step.‚â§b' =  y‚â§fnewb'
     ww .snd .Step‚äÉStep.a'‚â§a'S = ‚Ñö.isRefl‚â§ a'
     ww .snd .Step‚äÉStep.bS‚â§b' = newb'‚â§b'
    w (inr x) = ww
     where
     newa' = mid ‚Ñö.- (Œî* ‚Ñö.¬∑ [ 1 / 4 ])

     ‚â°newa' : a' ‚Ñö.+ Œî* ‚Ñö.¬∑ [ 1 / 4 ] ‚â° newa'
     ‚â°newa' = (cong (a' ‚Ñö.+_)
                     (cong (Œî* ‚Ñö.¬∑_) ‚Ñö.dec‚Ñö? ‚àô ùêê'.¬∑DistR- Œî* _ _)
                     ‚àô ‚Ñö.+Assoc _  _ _)
                  ‚àô cong (‚Ñö._- (Œî* ‚Ñö.¬∑ [ 1 / 4 ]))
                    (  ‚Ñö.+Comm _ _
                     ‚àô‚àô sym (cong (‚Ñö._+ a') a'-mid‚â°Œî/2)
                     ‚àô‚àô ùêê'.minusPlus _ _)


     newa'<b' : newa' ‚Ñö.< b'
     newa'<b' = ‚Ñö.isTrans<‚â§ _ _ _
        (‚Ñö.<Monotone+ _ _ _ _
         mid<b' (‚Ñö.minus-< 0 _ (‚Ñö.0<‚Ñö‚Çä (Œî‚Çä* ‚Ñö‚Çä¬∑ ([ 1 / 4 ] , _)))))
        (‚Ñö.‚â°Weaken‚â§ _ _ (‚Ñö.+IdR _))

     ab-dist =
       ‚Ñö.‚â°Weaken‚â§ (b' ‚Ñö.- newa') (Œî* ‚Ñö.¬∑ [ 3 / 4 ])
         (cong (‚Ñö._-_ b')
           (cong (‚Ñö._- (Œî* ‚Ñö.¬∑ [ 1 / 4 ]))
             mid=b-Œî/2 ‚àô
              sym (‚Ñö.+Assoc _ _ _))
              ‚àô sym lem--050
           ‚àô ‚Ñö.-[x-y]‚â°y-x _ _ ‚àô
            cong (‚Ñö._+_ (Œî* ‚Ñö.¬∑ [ 1 / 4 ]))
              (‚Ñö.-Invol _) ‚àô
               sym (‚Ñö.¬∑DistL+ Œî* _ _) ‚àô
                cong (Œî* ‚Ñö.¬∑_) ‚Ñö.dec‚Ñö?  )

     a'‚â§newa' : a' ‚Ñö.‚â§ newa'
     a'‚â§newa' =
       ‚Ñö.isTrans‚â§ _ _ _ (‚Ñö.‚â§+‚Ñö‚Çä a' a' ((Œî‚Çä* ‚Ñö‚Çä¬∑ ([ 1 / 4 ] , _)))
                (‚Ñö.isRefl‚â§ a'))
                 (‚Ñö.‚â°Weaken‚â§ _ _ ‚â°newa')

     newa'<mid : newa' ‚Ñö.< mid
     newa'<mid = ‚Ñö.<-‚Ñö‚Çä' _ _ (Œî‚Çä* ‚Ñö‚Çä¬∑ ([ 1 / 4 ] , _))
        (‚Ñö.isRefl‚â§ mid)

     newa'‚àà : newa' ‚àà ‚Ñöinterval‚Ñô a b
     newa'‚àà =
        ‚Ñö.isTrans‚â§ _ _ _
               (fst a'‚àà) a'‚â§newa'
       , ‚Ñö.isTrans‚â§ _ _ _
               (‚Ñö.<Weaken‚â§ _ _ newa'<b') (snd b'‚àà)

     newa'‚àà·µ£ = ‚àà‚Ñöinterval‚Ñô‚Üí‚ààinterval‚Ñô _ _ _ newa'‚àà

     fnewa'‚â§y : f (rat newa') _ ‚â§·µ£ rat y
     fnewa'‚â§y = isTrans‚â§·µ£ _ _ _
        (isTrans‚â§·µ£ _ _ _ mid-dist
           (a-b‚â§c‚áía-c‚â§b _ _ _
                 (isTrans‚â§·µ£ _ _ _ (‚â§abs·µ£ _ )
                   (<·µ£Weaken‚â§·µ£ _ _
                   (fst (‚àº‚âÉabs<Œµ _ _ _) (sym‚àº _ _ _ fMidDist))))))
        (‚â§‚Ñö‚Üí‚â§·µ£ fMid _ (‚Ñö.<Weaken‚â§ _ _ x))

       where
         hh = isTrans‚â§‚â°·µ£ _ _ _ (apartFrom-Invlipschitz-‚Ñù‚Üí‚Ñù‚Ñô
           K _ f lip‚Åª¬πF
            (rat mid) mid‚àà'
            (rat newa') newa'‚àà·µ£
            (inv‚Ñö‚Çä K ‚Ñö‚Çä¬∑ (/4‚Çä Œî‚Çä*))
              (isTrans‚â°‚â§·µ£ _ _ _
                (cong rat (‚Ñö.y¬∑[x/y] K (fst (/4‚Çä Œî‚Çä*)))
                 ‚àô cong rat (sym lem--079)
                 ‚àô sym (-·µ£-rat‚ÇÇ _ _))
                (‚â§abs·µ£ _)))
             (abs·µ£Pos _ (x<y‚Üí0<y-x _ _
               (incrF _ _  _ _ (<‚Ñö‚Üí<·µ£ _ _ newa'<mid) )))

         mid-dist :  f (rat newa') newa'‚àà·µ£
                    ‚â§·µ£ f (rat mid) mid‚àà' -·µ£
                       rat (fst (inv‚Ñö‚Çä K ‚Ñö‚Çä¬∑ /4‚Çä Œî‚Çä*))


         mid-dist = a‚â§b-c‚áíc‚â§b-a _ _ _ hh


     ww : Œ£ (Step (Œî ‚Ñö.¬∑ [ 3 / 4 ])) (Step‚äÉStep s)
     ww .fst .Step.a' = newa'
     ww .fst .Step.b' = b'
     ww .fst .Step.a'<b' = newa'<b'
     ww .fst .Step.b'-a'‚â§Œî =
        ‚Ñö.isTrans‚â§
           _ _ _ ab-dist (‚Ñö.‚â§-¬∑o Œî* Œî [ 3 / 4 ]
             (‚Ñö.<Weaken‚â§ 0 [ 3 / 4 ] (‚Ñö.0<pos 2 4)) Œî*‚â§Œî)
     ww .fst .Step.a'‚àà = newa'‚àà
     ww .fst .Step.b'‚àà = b'‚àà
     ww .fst .Step.a'‚â§ =  fnewa'‚â§y
     ww .fst .Step.‚â§b' = ‚â§b'
     ww .snd .Step‚äÉStep.a'‚â§a'S = a'‚â§newa'
     ww .snd .Step‚äÉStep.bS‚â§b' = ‚Ñö.isRefl‚â§ b'


   stepS : ‚àÄ Œî ‚Üí Step Œî ‚Üí Step (Œî ‚Ñö.¬∑ [ 3 / 4 ])
   stepS Œî s = fst (stepS' Œî s)

   ww : ‚àÄ n ‚Üí Step (Œî‚ÇÄ ‚Ñö.¬∑ ([ 3 / 4 ] ‚Ñö^‚Åø n))
   ww zero = subst (Step) (sym (‚Ñö.¬∑IdR Œî‚ÇÄ)) step0
   ww (suc n) = subst (Step) (sym (‚Ñö.¬∑Assoc _ _ _)) (stepS _ (ww n))

   s : ‚Ñï ‚Üí ‚Ñö
   s = Step.a' ‚àò ww

   s' : ‚Ñï ‚Üí ‚Ñö
   s' = Step.b' ‚àò ww

   ss‚â§-suc : ‚àÄ n (z : Step (Œî‚ÇÄ ‚Ñö.¬∑ ([ 3 / 4 ] ‚Ñö^‚Åø n))) ‚Üí Step.a' z ‚Ñö.‚â§
       Step.a' (subst (Step) (sym (‚Ñö.¬∑Assoc _ _ _)) (stepS
        (Œî‚ÇÄ ‚Ñö.¬∑ ([ 3 / 4 ] ‚Ñö^‚Åø n)) z))
   ss‚â§-suc n z = ‚Ñö.isTrans‚â§ _ _ _ (Step‚äÉStep.a'‚â§a'S (snd (stepS'
        (Œî‚ÇÄ ‚Ñö.¬∑ ([ 3 / 4 ] ‚Ñö^‚Åø n)) z)))
          (‚Ñö.‚â°Weaken‚â§ _ _ (sym (transportRefl _)))

   ‚â§ss'-suc : ‚àÄ n (z : Step (Œî‚ÇÄ ‚Ñö.¬∑ ([ 3 / 4 ] ‚Ñö^‚Åø n))) ‚Üí
        Step.b' (subst (Step) (sym (‚Ñö.¬∑Assoc _ _ _)) (stepS
        (Œî‚ÇÄ ‚Ñö.¬∑ ([ 3 / 4 ] ‚Ñö^‚Åø n)) z))
       ‚Ñö.‚â§
        Step.b' z
   ‚â§ss'-suc n z =  ‚Ñö.isTrans‚â§ _ _ _
          (‚Ñö.‚â°Weaken‚â§ _ _  (transportRefl _))
            ((Step‚äÉStep.bS‚â§b' (snd (stepS'
        (Œî‚ÇÄ ‚Ñö.¬∑ ([ 3 / 4 ] ‚Ñö^‚Åø n)) z))))
   ss‚â§ : ‚àÄ n m ‚Üí s n ‚Ñö.‚â§ s (m ‚Ñï.+ n)
   ss‚â§ n zero = ‚Ñö.isRefl‚â§ _
   ss‚â§ n (suc m) = ‚Ñö.isTrans‚â§ _ _ _ (ss‚â§ n m) (ss‚â§-suc (m ‚Ñï.+ n) (ww (m ‚Ñï.+ n)))

   ‚â§ss' : ‚àÄ n m ‚Üí  s' (m ‚Ñï.+ n) ‚Ñö.‚â§ s' n
   ‚â§ss' n zero = ‚Ñö.isRefl‚â§ _
   ‚â§ss' n (suc m) = ‚Ñö.isTrans‚â§ _ _ _
     (‚â§ss'-suc (m ‚Ñï.+ n) (ww (m ‚Ñï.+ n))) (‚â§ss' n m)



   ww‚äÇ : ‚àÄ n m ‚Üí (s (m ‚Ñï.+ n) ‚Ñö.- s n) ‚Ñö.‚â§ Œî‚ÇÄ ‚Ñö.¬∑ ([ 3 / 4 ] ‚Ñö^‚Åø n)
   ww‚äÇ n m = ‚Ñö.isTrans‚â§
     (s (m ‚Ñï.+ n) ‚Ñö.- s n) (s' n ‚Ñö.- s n) _
       (‚Ñö.‚â§-+o (s (m ‚Ñï.+ n)) (s' n) (‚Ñö.- (s n))
        (‚Ñö.isTrans‚â§ _ _ _ (Step.a'‚â§b' (ww (m ‚Ñï.+ n))) (‚â§ss' n m)))
    (Step.b'-a'‚â§Œî (ww n))

   www : {Œµ : ‚Ñö‚Çä}
           ‚Üí (Œ£[ n ‚àà ‚Ñï ] [ 3 / 4 ] ‚Ñö^‚Åø n ‚Ñö.<
             fst (Œµ ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä a b a<b)))
          ‚Üí Œ£[ N ‚àà ‚Ñï ] (‚àÄ m n ‚Üí N ‚Ñï.< n ‚Üí N ‚Ñï.< m ‚Üí
               abs·µ£ (rat (s n) -·µ£ rat (s m)) <·µ£ rat (fst Œµ))
   www (N , P) .fst = N
   www {Œµ} (N , P) .snd = ‚Ñï.elimBy‚â§+
     (Œª n m X m< n< ‚Üí subst (_<·µ£ (rat (fst Œµ)))
       (minusComm-abs·µ£ (rat (s m)) (rat (s n))) (X n< m<))
     Œª n m p N<n ‚Üí
       let P' : Œî‚ÇÄ ‚Ñö.¬∑ ([ 3 / 4 ] ‚Ñö^‚Åø N) ‚Ñö.< fst Œµ
           P' = ‚Ñö.isTrans<‚â§ _ _ (fst Œµ) (‚Ñö.<-o¬∑ _ _ _ (‚Ñö.-< a b a<b) P)
                  (‚Ñö.‚â°Weaken‚â§ _ _
                     ((cong (fst (‚Ñö.<‚Üí‚Ñö‚Çä a b a<b) ‚Ñö.¬∑_) (‚Ñö.¬∑Comm _ _))
                      ‚àô ‚Ñö.y¬∑[x/y] (‚Ñö.<‚Üí‚Ñö‚Çä _ _ a<b) (fst Œµ)))
           zz = ‚Ñö.isTrans‚â§< _ _ _
                   (‚Ñö.isTrans‚â§ _ ((s (m ‚Ñï.+ n)) ‚Ñö.- (s n)) _
                     (‚Ñö.‚â°Weaken‚â§ _ _ (‚Ñö.absNonNeg (s (m ‚Ñï.+ n) ‚Ñö.- s n)
                       (‚Ñö.-‚â§ (s n) (s (m ‚Ñï.+ n)) (ss‚â§ n m))))
                       (ww‚äÇ n m))
                   (‚Ñö.isTrans< _ (Œî‚ÇÄ ‚Ñö.¬∑ ([ 3 / 4 ] ‚Ñö^‚Åø (N))) _
                     (‚Ñö.<-o¬∑ _ _ Œî‚ÇÄ (‚Ñö.-< a b a<b)
                      (<^n' N n _ ‚Ñö.dec‚Ñö<? N<n)) P')
       in isTrans‚â°<·µ£ _ _ _ (cong abs·µ£ (-·µ£-rat‚ÇÇ _  _) ‚àô abs·µ£-rat _)
            (<‚Ñö‚Üí<·µ£ _ _ zz)


   s-cauchy : IsCauchySequence' (rat ‚àò s)
   s-cauchy Œµ = www {Œµ} (¬æ‚Åø<Œµ (Œµ ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä a b a<b)))

   f‚Åª¬π : ‚Ñù
   f‚Åª¬π = fromCauchySequence' (rat ‚àò s)
         s-cauchy




   f‚Åª¬π‚àà : f‚Åª¬π ‚àà interval‚Ñô (rat a) (rat b)
   f‚Åª¬π‚àà = ((‚â§lim _ _ _
            Œª Œ¥ ‚Üí ‚â§‚Ñö‚Üí‚â§·µ£ _ _ $ fst (Step.a'‚àà
             (ww (suc (¬æ‚Åø<Œµ (Œ¥ ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä a b a<b)) .fst))))))
      , (lim‚â§ _ _ _
            Œª Œ¥ ‚Üí ‚â§‚Ñö‚Üí‚â§·µ£ _ _ $ snd (Step.a'‚àà
             (ww (suc (¬æ‚Åø<Œµ (Œ¥ ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä a b a<b)) .fst)))))


   s‚àà : ‚àÄ n ‚Üí rat (s n) ‚àà interval‚Ñô (rat a) (rat b)
   s‚àà n = ((‚â§‚Ñö‚Üí‚â§·µ£ _ _ $ fst (Step.a'‚àà
             (ww n))))
      , (‚â§‚Ñö‚Üí‚â§·µ£ _ _ $ snd (Step.a'‚àà
             (ww n)))


   s~y : (Œµ : ‚Ñö‚Çä) ‚Üí
           ‚àÉ-syntax ‚Ñï
           (Œª N ‚Üí
              (n : ‚Ñï) ‚Üí
              N ‚Ñï.< n ‚Üí
              abs·µ£ (f (rat (s n)) (s‚àà n) -·µ£ rat y) <·µ£ rat (fst Œµ))
   s~y Œµ =
     let (N , X) = (¬æ‚Åø<Œµ (inv‚Ñö‚Çä (L ‚Ñö‚Çä¬∑ (2 ‚Ñö‚Çä¬∑ Œî‚ÇÄ‚Çä)) ‚Ñö‚Çä¬∑ Œµ))

     in ‚à£ suc N ,
        (Œª { zero x ‚Üí ‚ä•.rec (‚Ñï.¬¨-<-zero x)
           ; (suc n) x ‚Üí
              let ùíî = ww (suc n)
                  XX : ([ pos 3 / 1+ 3 ] ‚Ñö^‚Åø (suc n))
                         ‚Ñö.¬∑ fst  (L ‚Ñö‚Çä¬∑ (2 ‚Ñö‚Çä¬∑ Œî‚ÇÄ‚Çä))
                          ‚Ñö.< fst Œµ
                  XX =  ‚Ñö.isTrans< _ _ _
                        (‚Ñö.<-¬∑o _ _ _
                           (‚Ñö.0<‚Ñö‚Çä (L ‚Ñö‚Çä¬∑ (2 ‚Ñö‚Çä¬∑ Œî‚ÇÄ‚Çä)))
                           (<^n' N (suc n) ([ 3 / 4 ] , _)
                              (‚Ñö.dec‚Ñö<? {[ 3 / 4 ]} {1})
                              (‚Ñï.<-weaken x)))
                        (subst (‚Ñö._< _) (
                        cong (([ pos 3 / 1+ 3 ] ‚Ñö^‚Åø N) ‚Ñö.¬∑_)
                        (‚Ñö.inv‚Ñö‚Çä-invol (L ‚Ñö‚Çä¬∑ (2 ‚Ñö‚Çä¬∑ Œî‚ÇÄ‚Çä))))
                          (‚Ñö.x<y¬∑z‚Üíx¬∑inv‚Ñö‚Çäy<z _ _
                            (inv‚Ñö‚Çä (L ‚Ñö‚Çä¬∑ (2 ‚Ñö‚Çä¬∑ Œî‚ÇÄ‚Çä))) X))


              in isTrans<·µ£ _ _ _ (Step.y-fa' (ww (suc n)))
                     (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.isTrans‚â§<
                       _ _ _
                       (‚Ñö.‚â°Weaken‚â§ _ _
                         (    cong (fst L ‚Ñö.¬∑_)
                               (‚Ñö.¬∑Assoc _ _ _)
                           ‚àô‚àô ‚Ñö.¬∑Assoc _ _ _
                           ‚àô‚àô ‚Ñö.¬∑Comm _ _))
                       XX)) }) ‚à£‚ÇÅ


   f‚àòf‚Åª¬π : f f‚Åª¬π f‚Åª¬π‚àà ‚â° rat y
   f‚àòf‚Åª¬π = snd (map-fromCauchySequence'‚Ñô
          L (rat ‚àò s)
            (Œª Œµ ‚Üí www {Œµ} (¬æ‚Åø<Œµ  (Œµ ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä a b a<b))))
            (interval‚Ñô (rat a) (rat b)) f lipF f‚Åª¬π‚àà s‚àà) ‚àô
               fromCauchySequence'‚â° _ _ _ s~y



  f‚Åª¬π-L : Lipschitz-‚Ñö‚Üí‚Ñù‚Ñô K (interval‚Ñô fa fb) f‚Åª¬π
  f‚Åª¬π-L y y‚àà r r‚àà Œµ x =
    let zz = lip‚Åª¬πF _ _ _ _ Œµ
             (subst2 _‚àº[ Œµ ]_
               (sym (f‚àòf‚Åª¬π y y‚àà))
               (sym (f‚àòf‚Åª¬π r r‚àà)) (invEq (‚àº‚âÉabs<Œµ _ _ _)
                  (isTrans‚â°<·µ£ _ _ _
                      (cong abs·µ£ (-·µ£-rat‚ÇÇ _ _)
                        ‚àô abs·µ£-rat _)
                      (<‚Ñö‚Üí<·µ£ (‚Ñö.abs (y ‚Ñö.- r)) (fst Œµ) x))

                    ))

    in fst (‚àº‚âÉabs<Œµ (f‚Åª¬π y y‚àà) (f‚Åª¬π r r‚àà) _) zz

  f‚Åª¬π-L-o : Lipschitz-‚Ñö‚Üí‚Ñù‚Ñô K (ointerval‚Ñô fa fb)
                 (Œª x x‚àà ‚Üí f‚Åª¬π x (ointerval‚Ñô‚äÜinterval‚Ñô fa fb (rat x) x‚àà ))
  f‚Åª¬π-L-o y y‚àà r r‚àà Œµ x =
    let zz = lip‚Åª¬πF _ _ _ _ Œµ
             (subst2 _‚àº[ Œµ ]_
               (sym (f‚àòf‚Åª¬π y (ointerval‚Ñô‚äÜinterval‚Ñô fa fb _ y‚àà)))
               (sym (f‚àòf‚Åª¬π r (ointerval‚Ñô‚äÜinterval‚Ñô fa fb _ r‚àà)))
                (invEq (‚àº‚âÉabs<Œµ _ _ _)
                  ((isTrans‚â°<·µ£ _ _ _
                      (cong abs·µ£ (-·µ£-rat‚ÇÇ _ _)
                        ‚àô abs·µ£-rat _)
                      (<‚Ñö‚Üí<·µ£ (‚Ñö.abs (y ‚Ñö.- r)) (fst Œµ) x)))))

    in fst (‚àº‚âÉabs<Œµ (f‚Åª¬π y (ointerval‚Ñô‚äÜinterval‚Ñô fa fb _ y‚àà))
           (f‚Åª¬π r (ointerval‚Ñô‚äÜinterval‚Ñô fa fb _ r‚àà)) _) zz


  Œ¥‚Çô : ‚Ñï ‚Üí ‚Ñö‚Çä
  Œ¥‚Çô n = /2‚Çä ([ 1 / ((2+ n) ¬∑‚Çä‚ÇÅ (2+ (suc n))) ] , _)

  Œ¥‚Çô‚Çä‚ÇÅ‚â§Œ¥‚Çô : ‚àÄ n ‚Üí fst (Œ¥‚Çô (suc n )) ‚Ñö.‚â§ fst (Œ¥‚Çô n)
  Œ¥‚Çô‚Çä‚ÇÅ‚â§Œ¥‚Çô n =  ‚Ñö.‚â§-¬∑o _ _ [ 1 / 2 ]  (‚Ñö.0‚â§‚Ñö‚Çä ([ 1 / 2 ] , tt))
                (fst (‚Ñö.inv‚Ñö‚Çä-‚â§-inv‚Ñö‚Çä
                   (fromNat (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï ((2+ n) ¬∑‚Çä‚ÇÅ (2+ (suc n)))))
                   (fromNat (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï ((2+ (suc n)) ¬∑‚Çä‚ÇÅ (2+ (suc (suc n)))))))
                  (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos
                    (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï ((2+ n) ¬∑‚Çä‚ÇÅ (2+ (suc n))))
                    (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï ((2+ (suc n)) ¬∑‚Çä‚ÇÅ (2+ (suc (suc n)))))
                    (‚Ñï.‚â§monotone¬∑
                      (‚Ñï.‚â§-suc‚Ñï {2 ‚Ñï.+ n})
                      (‚Ñï.‚â§-suc‚Ñï {3 ‚Ñï.+ n})))))


  Œ¥‚Çô< : ‚àÄ n ‚Üí  Œî‚ÇÄ ‚Ñö.¬∑ [ pos 1 / 2+ n ]
                 ‚Ñö.< Œî‚ÇÄ

  Œ¥‚Çô< n = subst (Œî‚ÇÄ ‚Ñö.¬∑ [ pos 1 / 2+ n ] ‚Ñö.<_) (‚Ñö.¬∑IdR _)
        ((‚Ñö.<-o¬∑ _ 1 _ (‚Ñö.0<‚Ñö‚Çä Œî‚ÇÄ‚Çä)
                      (fst (‚Ñö.inv‚Ñö‚Çä-<-inv‚Ñö‚Çä 1 (fromNat (suc (suc n))))
                       (‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _
                         (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _
                           (‚Ñï.suc-‚â§-suc ‚Ñï.zero-<-suc))) )))
  Œ®‚Çä : ‚Ñö‚Çä
  Œ®‚Çä = inv‚Ñö‚Çä K ‚Ñö‚Çä¬∑ Œî‚ÇÄ‚Çä

  Œ® = fst Œ®‚Çä

  Œ®‚â§fb-fa : rat (fst Œ®‚Çä) ‚â§·µ£ fb -·µ£ fa
  Œ®‚â§fb-fa =
     isTrans‚â§‚â°·µ£ _ _ _
       (apartFrom-Invlipschitz-‚Ñù‚Üí‚Ñù‚Ñô
                  K _ f lip‚Åª¬πF (rat b) b‚àà (rat a) a‚àà
                   (inv‚Ñö‚Çä K ‚Ñö‚Çä¬∑ Œî‚ÇÄ‚Çä)
                    (isTrans‚â°‚â§·µ£ _ _ _
                     (cong rat (‚Ñö.y¬∑[x/y] K _) ‚àô sym (-·µ£-rat‚ÇÇ _ _))
                     (‚â§abs·µ£ _)
                     ) )
                   (abs·µ£Pos _ (x<y‚Üí0<y-x _ _ fa<fb))


  a* b* : ‚Ñï ‚Üí Œ£[ q ‚àà ‚Ñö ] (rat q ‚àà interval‚Ñô (rat a) (rat b))
  a* n = (a ‚Ñö.+ Œî‚ÇÄ ‚Ñö.¬∑ [ 1 / 1+ (suc n) ]) ,
           (‚â§‚Ñö‚Üí‚â§·µ£ _ _
           (‚Ñö.‚â§+‚Ñö‚Çä a a (Œî‚ÇÄ‚Çä ‚Ñö‚Çä¬∑ ([ 1 / 1+ (suc n) ] , _)) (‚Ñö.isRefl‚â§ _)))
            ,
              isTrans‚â§‚â°·µ£ _ _ _
                ((‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.‚â§-o+ _ _ a (‚Ñö.<Weaken‚â§ _ _ (Œ¥‚Çô< n)))))
                (cong rat
                  (lem--05 ))
  b* n = b ‚Ñö.- (Œî‚ÇÄ ‚Ñö.¬∑ [ 1 / 1+ (suc n) ]) ,
              isTrans‚â°‚â§·µ£ _
          (rat (b ‚Ñö.- Œî‚ÇÄ)) _
         (cong rat (sym lem--079))
         (‚â§‚Ñö‚Üí‚â§·µ£ _ _
           (‚Ñö.‚â§-o+ _ _ b (‚Ñö.minus-‚â§ _ _ (‚Ñö.<Weaken‚â§ _ _ (Œ¥‚Çô< n)))))
      , ‚â§‚Ñö‚Üí‚â§·µ£ _ _
           ((‚Ñö.‚â§-‚Ñö‚Çä b b (Œî‚ÇÄ‚Çä ‚Ñö‚Çä¬∑ ([ 1 / 1+ (suc n) ] , _))
            (‚Ñö.isRefl‚â§ _)))

  a*<b* : ‚àÄ n ‚Üí fst (a* (suc n)) ‚Ñö.< fst (b* (suc n))
  a*<b* n =
   subst (‚Ñö._< fst (b* (suc n)))
    (‚Ñö.+Comm _ _)
     zz
   where
   zz : (b ‚Ñö.- a) ‚Ñö.¬∑ [ 1 / 2+ suc n ] ‚Ñö.+ a ‚Ñö.<
           b ‚Ñö.- ((b ‚Ñö.- a) ‚Ñö.¬∑ [ 1 / 2+ (suc n) ])
   zz = ‚Ñö.<-+o-cancel _ (b ‚Ñö.- ((b ‚Ñö.- a) ‚Ñö.¬∑ [ 1 / 2+ (suc n) ])) (‚Ñö.- a)
         (subst2 ‚Ñö._<_
           ((sym (ùêê'.plusMinus ((b ‚Ñö.- a) ‚Ñö.¬∑ [ 1 / 2+ suc n ]) a)))
           (    cong‚ÇÇ ‚Ñö._¬∑_ refl (sym (‚Ñö.n/k-m/k _ _ (2+ suc n)))
              ‚àô ùêê'.¬∑DistR- _ _ [ 1 / 2+ suc n ]
              ‚àô cong‚ÇÇ ‚Ñö._+_ (ùêê'.¬∑IdR' _ _ (‚Ñö.[n/n]‚â°[m/m] (suc (suc n)) 0)) refl
              ‚àô sym (‚Ñö.+Assoc b (‚Ñö.- a) _)
              ‚àô cong‚ÇÇ ‚Ñö._+_ refl (‚Ñö.+Comm _ _ )
              ‚àô ‚Ñö.+Assoc _ _ _)

           (‚Ñö.<-o¬∑ _ _ (b ‚Ñö.- a)
             (‚Ñö.0<‚Ñö‚Çä Œî‚ÇÄ‚Çä) (‚Ñö.[k/n]<[k'/n] _ _ _
               (subst (1 ‚Ñ§.<_)
                 (cong (‚Ñ§.suc‚Ñ§ ‚àò ‚Ñ§.suc‚Ñ§)
                   (‚Ñ§.pos+ 0 n ‚àô sym (‚Ñ§.suc‚Ñ§+ -1 (pos n)))
                   ‚àô ‚Ñ§.+Comm _ _)
                 (‚Ñ§.suc-‚â§-suc (‚Ñ§.suc-‚â§-suc ‚Ñ§.zero-‚â§pos))))))

  a*-desc : ‚àÄ n ‚Üí fst (a* (suc n)) ‚Ñö.< fst (a* n)
  a*-desc n = ‚Ñö.<-o+ _ _ _
    (‚Ñö.<-o¬∑ _ _ _ (‚Ñö.0<‚Ñö‚Çä Œî‚ÇÄ‚Çä)
      ((fst (‚Ñö.inv‚Ñö‚Çä-<-inv‚Ñö‚Çä
        (fromNat (suc (suc n))) ((fromNat (suc (suc (suc n))))))
                       (‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _
                         (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _
                           ‚Ñï.‚â§-refl)) )))

  b*-asc : ‚àÄ n ‚Üí fst (b* n) ‚Ñö.< fst (b* (suc n))
  b*-asc n = ‚Ñö.<-o+ _ _ _
   (‚Ñö.minus-< _ _ (‚Ñö.<-o¬∑ _ _ _ (‚Ñö.0<‚Ñö‚Çä Œî‚ÇÄ‚Çä)
      (
         ((fst (‚Ñö.inv‚Ñö‚Çä-<-inv‚Ñö‚Çä
        (fromNat (suc (suc n))) ((fromNat (suc (suc (suc n))))))
                       (‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _
                         (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _
                           ‚Ñï.‚â§-refl)) )))))

  fa* : ‚àÄ n ‚Üí Œ£[ r ‚àà ‚Ñö ] ((rat r ‚àà interval‚Ñô fa fb)
             √ó (abs·µ£ (rat r -·µ£ f _  (snd (a* n))) <·µ£ rat (fst (Œ®‚Çä ‚Ñö‚Çä¬∑ Œ¥‚Çô n))))
  fa* n =
   let (u , v , (_ , z)) = approxF (fst (a* n)) (snd (a* n))
   in    u (/2‚Çä (Œ®‚Çä ‚Ñö‚Çä¬∑ Œ¥‚Çô n))
       , v (/2‚Çä (Œ®‚Çä ‚Ñö‚Çä¬∑ Œ¥‚Çô n))
       , (fst (‚àº‚âÉabs<Œµ (rat (u (/2‚Çä (Œ®‚Çä ‚Ñö‚Çä¬∑ Œ¥‚Çô n)))) _ (Œ®‚Çä ‚Ñö‚Çä¬∑ Œ¥‚Çô n))
         (subst‚àº (sym (‚Ñö.+Assoc _ _ _) ‚àô
           cong (fst (/2‚Çä (Œ®‚Çä ‚Ñö‚Çä¬∑ Œ¥‚Çô n)) ‚Ñö.+_)
              (cong fst (‚Ñö./4‚Çä+/4‚Çä‚â°/2‚Çä (Œ®‚Çä ‚Ñö‚Çä¬∑ Œ¥‚Çô n)) )
             ‚àô ‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst (Œ®‚Çä ‚Ñö‚Çä¬∑ Œ¥‚Çô n)))
           (triangle‚àº
            (ùï£-lim-self _ _ (/2‚Çä (Œ®‚Çä ‚Ñö‚Çä¬∑ Œ¥‚Çô n)) (/4‚Çä (Œ®‚Çä ‚Ñö‚Çä¬∑ Œ¥‚Çô n)))
            (‚â°‚Üí‚àº {(/4‚Çä (Œ®‚Çä ‚Ñö‚Çä¬∑ Œ¥‚Çô n))} z))))

  fb* : ‚àÄ n ‚Üí Œ£[ r ‚àà ‚Ñö ] ((rat r ‚àà interval‚Ñô fa fb)
             √ó (abs·µ£ (rat r -·µ£ f _  (snd (b* n))) <·µ£ rat (fst (Œ®‚Çä ‚Ñö‚Çä¬∑ Œ¥‚Çô n))))
  fb* n =
   let (u , v , (_ , z)) = approxF (fst (b* n)) (snd (b* n))
   in    u (/2‚Çä (Œ®‚Çä ‚Ñö‚Çä¬∑ Œ¥‚Çô n))
       , v (/2‚Çä (Œ®‚Çä ‚Ñö‚Çä¬∑ Œ¥‚Çô n))
       , (fst (‚àº‚âÉabs<Œµ (rat (u (/2‚Çä (Œ®‚Çä ‚Ñö‚Çä¬∑ Œ¥‚Çô n)))) _ (Œ®‚Çä ‚Ñö‚Çä¬∑ Œ¥‚Çô n))
         (subst‚àº (sym (‚Ñö.+Assoc _ _ _) ‚àô
           cong (fst (/2‚Çä (Œ®‚Çä ‚Ñö‚Çä¬∑ Œ¥‚Çô n)) ‚Ñö.+_)
              (cong fst (‚Ñö./4‚Çä+/4‚Çä‚â°/2‚Çä (Œ®‚Çä ‚Ñö‚Çä¬∑ Œ¥‚Çô n)) )
             ‚àô ‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst (Œ®‚Çä ‚Ñö‚Çä¬∑ Œ¥‚Çô n)))
           (triangle‚àº
            (ùï£-lim-self _ _ (/2‚Çä (Œ®‚Çä ‚Ñö‚Çä¬∑ Œ¥‚Çô n)) (/4‚Çä (Œ®‚Çä ‚Ñö‚Çä¬∑ Œ¥‚Çô n)))
            (‚â°‚Üí‚àº {(/4‚Çä (Œ®‚Çä ‚Ñö‚Çä¬∑ Œ¥‚Çô n))} z))))

  faŒî : ‚àÄ n ‚Üí f (rat (fst (a* n))) (snd (a* n))
          ‚àº[ L ‚Ñö‚Çä¬∑ (2 ‚Ñö‚Çä¬∑ (Œî‚ÇÄ‚Çä ‚Ñö‚Çä¬∑ ([ 1 / 2+ n ] , tt))) ] fa
  faŒî n =
   let z = lipF (rat a) a‚àà
                (rat (fst (a* n))) ((snd (a* n)))
                 (2 ‚Ñö‚Çä¬∑ (Œî‚ÇÄ‚Çä ‚Ñö‚Çä¬∑ ([ 1 / 1+ (suc n) ] , _)))
                 ((+IdL _ subst‚àº[ refl ]
                            (+·µ£Comm (rat (Œî‚ÇÄ ‚Ñö.¬∑ [ 1 / 2+ n ])) (rat a)
                             ‚àô +·µ£-rat _ _) )
                            (+·µ£-‚àº 0 (rat (Œî‚ÇÄ ‚Ñö.¬∑ [ 1 / 1+ (suc n) ]))
                              (rat a)
                              (2 ‚Ñö‚Çä¬∑ (Œî‚ÇÄ‚Çä ‚Ñö‚Çä¬∑ ([ 1 / 1+ (suc n) ] , _)))
                              (invEq (‚àº‚âÉabs<Œµ _ _ _)
                                (isTrans‚â°<·µ£ _ _ _
                                  (minusComm-abs·µ£ _ _ ‚àô‚àô
                                    cong abs·µ£ (ùêë'.+IdR' _ _ (-·µ£-rat 0)) ‚àô‚àô
                                      abs·µ£Pos _
                                      (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä (Œî‚ÇÄ‚Çä ‚Ñö‚Çä¬∑ ([ 1 / 1+ (suc n) ] , _))))
                                      ‚àô cong rat (sym (‚Ñö.¬∑IdL _)))
                                  (<‚Ñö‚Üí<·µ£ _ _
                                    (‚Ñö.<-¬∑o 1 2 (fst (Œî‚ÇÄ‚Çä ‚Ñö‚Çä¬∑ ([ pos 1 / 2+ n ] , tt)))
                                     (‚Ñö.0<‚Ñö‚Çä (Œî‚ÇÄ‚Çä ‚Ñö‚Çä¬∑ ([ pos 1 / 2+ n ] , tt)))
                                     ‚Ñö.dec‚Ñö<?
                                     ))))))

   in (sym‚àº _ _ _ z)

  -- fa# : ‚àÄ n ‚Üí f (rat (fst (a* n))) (snd (a* n))
  --         ‚àº[ L ‚Ñö‚Çä¬∑ (2 ‚Ñö‚Çä¬∑ (Œî‚ÇÄ‚Çä ‚Ñö‚Çä¬∑ ([ 1 / 2+ n ] , tt))) ] fa
  -- fa# n =
  --  let z = {!!}
  --  in (sym‚àº _ _ _ z)


  fbŒî : ‚àÄ n ‚Üí f (rat (fst (b* n))) (snd (b* n))
          ‚àº[ L ‚Ñö‚Çä¬∑ (2 ‚Ñö‚Çä¬∑ (Œî‚ÇÄ‚Çä ‚Ñö‚Çä¬∑ ([ 1 / 2+ n ] , tt))) ] fb
  fbŒî n =
   sym‚àº _ _ _ $
     lipF (rat b) b‚àà
                (rat (fst (b* n))) ((snd (b* n)))
                 (2 ‚Ñö‚Çä¬∑ (Œî‚ÇÄ‚Çä ‚Ñö‚Çä¬∑ ([ 1 / 1+ (suc n) ] , _)))
                 (
                  (+IdL _ subst‚àº[ refl ]
                   (+·µ£Comm (rat (‚Ñö.- (Œî‚ÇÄ ‚Ñö.¬∑ [ 1 / 2+ n ]))) (rat b)
                     ‚àô +·µ£-rat _ _) )
                   (+·µ£-‚àº 0 (rat (‚Ñö.- (Œî‚ÇÄ ‚Ñö.¬∑ [ 1 / 1+ (suc n) ])))
                     (rat b)
                     (2 ‚Ñö‚Çä¬∑ (Œî‚ÇÄ‚Çä ‚Ñö‚Çä¬∑ ([ 1 / 1+ (suc n) ] , _)))

                     ( (refl subst‚àº[ refl ] -·µ£-rat _)
                       (invEq (‚àº‚âÉabs<Œµ _ _ _)
                       ((isTrans‚â°<·µ£ _ _ _
                         (cong (abs·µ£ ‚àò (0 +·µ£_)) (-·µ£Invol _)
                           ‚àô‚àô
                           cong abs·µ£ (+IdL _) ‚àô‚àô
                             abs·µ£Pos _
                             (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä (Œî‚ÇÄ‚Çä ‚Ñö‚Çä¬∑ ([ 1 / 1+ (suc n) ] , _))))
                             ‚àô cong rat (sym (‚Ñö.¬∑IdL _)))
                         (<‚Ñö‚Üí<·µ£ _ _
                           (‚Ñö.<-¬∑o 1 2 (fst (Œî‚ÇÄ‚Çä ‚Ñö‚Çä¬∑ ([ pos 1 / 2+ n ] , tt)))
                            (‚Ñö.0<‚Ñö‚Çä (Œî‚ÇÄ‚Çä ‚Ñö‚Çä¬∑ ([ pos 1 / 2+ n ] , tt)))
                            ‚Ñö.dec‚Ñö<?
                            ))))))))


  Œ¶ = (((L ‚Ñö‚Çä¬∑ 2) ‚Ñö‚Çä¬∑ Œî‚ÇÄ‚Çä) ‚Ñö‚Çä+ (inv‚Ñö‚Çä K ‚Ñö‚Çä¬∑ Œî‚ÇÄ‚Çä))

  fa*Œî : ‚àÄ n ‚Üí rat (fst (fa* n)) -·µ£ fa <·µ£
                  rat ([ 1 / 1+ (suc n) ] ‚Ñö.¬∑ fst Œ¶)

  fa*Œî n =
   let z = triangle‚àº {w = rat (fst (fa* n))}
                (sym‚àº _ _ _ (faŒî n)) ((sym‚àº _ _ _)
                (invEq (‚àº‚âÉabs<Œµ _ _ (Œ®‚Çä ‚Ñö‚Çä¬∑ (([ 1 / (2+ n) ] , _))))
                 ((isTrans<·µ£ _ _ _ (snd (snd (fa* n)))
                (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.<-o¬∑ (fst (Œ¥‚Çô n)) [ 1 / 2+ n ] Œ®
                (‚Ñö.0<‚Ñö‚Çä Œ®‚Çä)
                 (‚Ñö.isTrans< (fst (Œ¥‚Çô n)) [ 1 / (2+ n) ¬∑‚Çä‚ÇÅ (2+ (suc n)) ]
                  [ 1 / (2+ n) ]
                   (x/2<x ([ 1 / (2+ n) ¬∑‚Çä‚ÇÅ (2+ (suc n)) ] , _))
                  (subst2 (‚Ñö._<_) (1/m¬∑1/n {2+ n} {2+ (suc n)})
                   (‚Ñö.¬∑IdR [ 1 / 2+ n ])
                   (‚Ñö.<-o¬∑ [ 1 / 2+ (suc n) ] 1 [ 1 / 2+ n ]
                   (‚Ñö.0<‚Üí< [ 1 / 2+ n ] tt)
                   (fst (‚Ñö.inv‚Ñö‚Çä-<-inv‚Ñö‚Çä 1 (fromNat (3 ‚Ñï.+ n)))
                    (‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _
                     (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos  _ _
                      (‚Ñï.‚â§-k+ {0} {k = 2} (‚Ñï.zero-‚â§ {suc n})))) ))))))))))
   in isTrans‚â§<·µ£ _ _ _
          (‚â§abs·µ£ _)
           (fst (‚àº‚âÉabs<Œµ _ _
             (([ 1 / 1+ (suc n) ] , _) ‚Ñö‚Çä¬∑
                 (((L ‚Ñö‚Çä¬∑ 2) ‚Ñö‚Çä¬∑ Œî‚ÇÄ‚Çä) ‚Ñö‚Çä+ (inv‚Ñö‚Çä K ‚Ñö‚Çä¬∑ Œî‚ÇÄ‚Çä)))) (subst‚àº
             (cong‚ÇÇ ‚Ñö._+_ (‚Ñö.¬∑Assoc (fst L) 2 ((Œî‚ÇÄ ‚Ñö.¬∑ [ 1 / 1+ (suc n) ]))
                 ‚àô ‚Ñö.¬∑Assoc _ _ _)
               refl
               ‚àô‚àô sym (‚Ñö.¬∑DistR+ _ _ [ 1 / 1+ (suc n) ])
               ‚àô‚àô ‚Ñö.¬∑Comm _ _ )
           (sym‚àº _ _ _ z)))

  fb*Œî : ‚àÄ n ‚Üí fb -·µ£ rat (fst (fb* n))  <·µ£
                  rat ([ 1 / 1+ (suc n) ] ‚Ñö.¬∑ fst Œ¶)
  fb*Œî n =
   let z = triangle‚àº {w = rat (fst (fb* n))}
                (sym‚àº _ _ _ (fbŒî n)) ((sym‚àº _ _ _)
                (invEq (‚àº‚âÉabs<Œµ _ _ (Œ®‚Çä ‚Ñö‚Çä¬∑ (([ 1 / (2+ n) ] , _))))
                 ((isTrans<·µ£ _ _ _ (snd (snd (fb* n)))
                (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.<-o¬∑ (fst (Œ¥‚Çô n)) [ 1 / 2+ n ] Œ®
                (‚Ñö.0<‚Ñö‚Çä Œ®‚Çä)
                 (‚Ñö.isTrans< (fst (Œ¥‚Çô n)) [ 1 / (2+ n) ¬∑‚Çä‚ÇÅ (2+ (suc n)) ]
                  [ 1 / (2+ n) ]
                   (x/2<x ([ 1 / (2+ n) ¬∑‚Çä‚ÇÅ (2+ (suc n)) ] , _))
                  (subst2 (‚Ñö._<_) (1/m¬∑1/n {2+ n} {2+ (suc n)})
                   (‚Ñö.¬∑IdR [ 1 / 2+ n ])
                   (‚Ñö.<-o¬∑ [ 1 / 2+ (suc n) ] 1 [ 1 / 2+ n ]
                   (‚Ñö.0<‚Üí< [ 1 / 2+ n ] tt)
                   (fst (‚Ñö.inv‚Ñö‚Çä-<-inv‚Ñö‚Çä 1 (fromNat (3 ‚Ñï.+ n)))
                    (‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _
                     (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos  _ _
                      (‚Ñï.‚â§-k+ {0} {k = 2} (‚Ñï.zero-‚â§ {suc n})))) ))))))))))
   in isTrans‚â§<·µ£ _ _ _
          (‚â§abs·µ£ _)
           (fst (‚àº‚âÉabs<Œµ _ _
             (([ 1 / 1+ (suc n) ] , _) ‚Ñö‚Çä¬∑
                 (((L ‚Ñö‚Çä¬∑ 2) ‚Ñö‚Çä¬∑ Œî‚ÇÄ‚Çä) ‚Ñö‚Çä+ (inv‚Ñö‚Çä K ‚Ñö‚Çä¬∑ Œî‚ÇÄ‚Çä)))) (subst‚àº
             (cong‚ÇÇ ‚Ñö._+_ (‚Ñö.¬∑Assoc (fst L) 2 ((Œî‚ÇÄ ‚Ñö.¬∑ [ 1 / 1+ (suc n) ]))
                 ‚àô ‚Ñö.¬∑Assoc _ _ _)
               refl
               ‚àô‚àô sym (‚Ñö.¬∑DistR+ _ _ [ 1 / 1+ (suc n) ])
               ‚àô‚àô ‚Ñö.¬∑Comm _ _ ) z))


  fa*-desc : ‚àÄ n ‚Üí rat (fst (fa* (suc n))) <·µ£ rat (fst (fa* n))
  fa*-desc n =
     isTrans<·µ£ _ _ _
       (a-b<c‚áía<c+b _ _ _
         (isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _) (snd (snd (fa* (suc n))))))
       (isTrans‚â§<·µ£ _ _ _
         (fst (x+y‚â§x'-y'‚âÉx+y'‚â§x'-y _ _ _ _)
           (isTrans‚â§‚â°·µ£ _ _ _

            (isTrans‚â°‚â§·µ£ _ _ _
               (+·µ£-rat _ _)
                (apartFrom-Invlipschitz-‚Ñù‚Üí‚Ñù‚Ñô
           K _ f lip‚Åª¬πF _ _ _ _
                 ((Œ®‚Çä ‚Ñö‚Çä¬∑ Œ¥‚Çô (suc n)) ‚Ñö‚Çä+ (Œ®‚Çä ‚Ñö‚Çä¬∑ Œ¥‚Çô n))
                 (subst2 _‚â§·µ£_
                   (cong rat (cong (‚Ñö._¬∑ (fst (Œ¥‚Çô (suc n)) ‚Ñö.+ fst (Œ¥‚Çô n)))
                      (sym (‚Ñö.y¬∑[x/y] K Œî‚ÇÄ)) ‚àô sym (‚Ñö.¬∑Assoc _ _ _)
                     ‚àô cong ((fst K) ‚Ñö.¬∑_)
                     ((‚Ñö.¬∑DistL+ Œ® (fst (Œ¥‚Çô (suc n)))
                       (fst (Œ¥‚Çô n))))))
                   (cong rat ((ùêê'.¬∑DistR- Œî‚ÇÄ _ _) ‚àô sym lem--081)
                    ‚àô sym (abs·µ£Pos _ ((<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.-< _ _ (a*-desc n)))))
                    ‚àô cong abs·µ£ (sym (-·µ£-rat‚ÇÇ _ _)))
                   (‚â§‚Ñö‚Üí‚â§·µ£ _ _
                     (‚Ñö.‚â§-o¬∑
                       (fst (Œ¥‚Çô (suc n)) ‚Ñö.+ fst (Œ¥‚Çô n))
                        ([ 1 / 2+ n ] ‚Ñö.- [ 1 / 2+ suc n ])
                        _ (‚Ñö.0‚â§‚Ñö‚Çä Œî‚ÇÄ‚Çä)
                       (subst (fst (Œ¥‚Çô (suc n)) ‚Ñö.+ fst (Œ¥‚Çô n) ‚Ñö.‚â§_)
                         (sym (1/n-1/sn (suc n)))
                         (‚Ñö.isTrans‚â§
                           (fst (Œ¥‚Çô (suc n)) ‚Ñö.+ fst (Œ¥‚Çô n))
                           (fst (Œ¥‚Çô n) ‚Ñö.+ fst (Œ¥‚Çô n))
                           [ 1 / ((2+ n) ¬∑‚Çä‚ÇÅ (2+ (suc n))) ]
                           ((‚Ñö.‚â§-+o (fst (Œ¥‚Çô (suc n)))
                             (fst (Œ¥‚Çô n)) (fst (Œ¥‚Çô n)) (Œ¥‚Çô‚Çä‚ÇÅ‚â§Œ¥‚Çô n) ))
                           ((‚Ñö.‚â°Weaken‚â§
                             ((fst (Œ¥‚Çô n)) ‚Ñö.+ (fst (Œ¥‚Çô n)))
                             [ 1 / ((2+ n) ¬∑‚Çä‚ÇÅ (2+ (suc n))) ]
                            (‚Ñö.Œµ/2+Œµ/2‚â°Œµ
                             [ 1 / ((2+ n) ¬∑‚Çä‚ÇÅ (2+ (suc n))) ]))))))))))
             (abs·µ£Pos _ (x<y‚Üí0<y-x _ _
                (incrF _ _ _ _ (<‚Ñö‚Üí<·µ£ _ _ (a*-desc n)))))
           ))
         (a-b<c‚áía-c<b _ _ _ (isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _)
           (isTrans‚â°<·µ£ _ _ _ (minusComm-abs·µ£ _ _) (snd (snd (fa* (n))))))))


  fb*-asc : ‚àÄ n ‚Üí rat (fst (fb* n)) <·µ£ rat (fst (fb* (suc n)))
  fb*-asc n =
    isTrans<·µ£ _ _ _
      (isTrans<‚â§·µ£ _ _ _
        ( isTrans<‚â°·µ£ _ _ _ (a-b<c‚áía<c+b _ _ _
         (isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _) (snd (snd (fb* n)))))
         (+·µ£Comm _ _))
        w )
      ((a-b<c‚áía-c<b _ _ _
         (isTrans‚â§<·µ£ _ _ _
         (isTrans‚â§‚â°·µ£ _ _ _
           (‚â§abs·µ£ _) (minusComm-abs·µ£ _ _))
         (snd (snd (fb* (suc n)))))))

   where
   w : f (rat (b* n .fst)) (snd (b* n))
        +·µ£ rat (fst ((Œ®‚Çä ‚Ñö‚Çä¬∑ Œ¥‚Çô n))) ‚â§·µ£
        f (rat (b* (suc n) .fst)) (snd (b* (suc n))) +·µ£
          -·µ£ rat (fst (Œ®‚Çä ‚Ñö‚Çä¬∑ Œ¥‚Çô (suc n)))
   w = isTrans‚â°‚â§·µ£ _ _ _ (+·µ£Comm _ _) $
        fst (x+y‚â§x'-y'‚âÉx+y'‚â§x'-y (rat (fst (Œ®‚Çä ‚Ñö‚Çä¬∑ Œ¥‚Çô n))) _ _ _)
          (isTrans‚â§‚â°·µ£ _ _ _
            (isTrans‚â°‚â§·µ£ _ _ _
             (+·µ£Comm (rat (fst (Œ®‚Çä ‚Ñö‚Çä¬∑ Œ¥‚Çô n))) (rat (fst (Œ®‚Çä ‚Ñö‚Çä¬∑ Œ¥‚Çô (suc n))))
              ‚àô +·µ£-rat _ _)
             ((apartFrom-Invlipschitz-‚Ñù‚Üí‚Ñù‚Ñô
           K _ f lip‚Åª¬πF _ (snd (b* (suc n))) _  (snd (b* n))
                 ((Œ®‚Çä ‚Ñö‚Çä¬∑ Œ¥‚Çô (suc n)) ‚Ñö‚Çä+ (Œ®‚Çä ‚Ñö‚Çä¬∑ Œ¥‚Çô n))
                 (subst2 _‚â§·µ£_
                   (cong rat (cong (‚Ñö._¬∑ (fst (Œ¥‚Çô (suc n)) ‚Ñö.+ fst (Œ¥‚Çô n)))
                      (sym (‚Ñö.y¬∑[x/y] K Œî‚ÇÄ)) ‚àô sym (‚Ñö.¬∑Assoc _ _ _)
                     ‚àô cong ((fst K) ‚Ñö.¬∑_)
                     ((‚Ñö.¬∑DistL+ Œ® (fst (Œ¥‚Çô (suc n)))
                       (fst (Œ¥‚Çô n))))))
                       (((cong rat ((ùêê'.¬∑DistR- Œî‚ÇÄ _ _)
                         ‚àô sym lem--062))
                    ‚àô sym (abs·µ£Pos _ ((<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.-< _ _ (b*-asc n)))))
                      ‚àô cong abs·µ£
                       (sym (-·µ£-rat‚ÇÇ _ _))))
                   ((‚â§‚Ñö‚Üí‚â§·µ£ _ _
                     (‚Ñö.‚â§-o¬∑
                       (fst (Œ¥‚Çô (suc n)) ‚Ñö.+ fst (Œ¥‚Çô n))
                        ([ 1 / 2+ n ] ‚Ñö.- [ 1 / 2+ suc n ])
                        _ (‚Ñö.0‚â§‚Ñö‚Çä Œî‚ÇÄ‚Çä)
                       (subst (fst (Œ¥‚Çô (suc n)) ‚Ñö.+ fst (Œ¥‚Çô n) ‚Ñö.‚â§_)
                         (sym (1/n-1/sn (suc n)))
                         (‚Ñö.isTrans‚â§
                           (fst (Œ¥‚Çô (suc n)) ‚Ñö.+ fst (Œ¥‚Çô n))
                           (fst (Œ¥‚Çô n) ‚Ñö.+ fst (Œ¥‚Çô n))
                           [ 1 / ((2+ n) ¬∑‚Çä‚ÇÅ (2+ (suc n))) ]
                           ((‚Ñö.‚â§-+o (fst (Œ¥‚Çô (suc n)))
                             (fst (Œ¥‚Çô n)) (fst (Œ¥‚Çô n)) (Œ¥‚Çô‚Çä‚ÇÅ‚â§Œ¥‚Çô n) ))
                           ((‚Ñö.‚â°Weaken‚â§
                             ((fst (Œ¥‚Çô n)) ‚Ñö.+ (fst (Œ¥‚Çô n)))
                             [ 1 / ((2+ n) ¬∑‚Çä‚ÇÅ (2+ (suc n))) ]
                            (‚Ñö.Œµ/2+Œµ/2‚â°Œµ
                             [ 1 / ((2+ n) ¬∑‚Çä‚ÇÅ (2+ (suc n))) ]))))))))))))
            (abs·µ£Pos _ ((x<y‚Üí0<y-x _ _
                (incrF _ (snd (b* n)) _ (snd (b* (suc n)))
                                  (<‚Ñö‚Üí<·µ£ _ _ (b*-asc n)))))))


  fa*<fb* : ‚àÄ n ‚Üí fst (fa* (suc n)) ‚Ñö.< fst (fb* (suc n))
  fa*<fb* n =
    let z = incrF _ (snd (a* (suc n))) _ (snd (b* (suc n)))
             (<‚Ñö‚Üí<·µ£ _ _ (a*<b* n))
        zz = isTrans‚â§‚â°·µ£ _ _ _ (apartFrom-Invlipschitz-‚Ñù‚Üí‚Ñù‚Ñô
                   K _ f lip‚Åª¬πF
                   _ (snd (b* (suc n)))
                   _ (snd (a* (suc n)))
                   (inv‚Ñö‚Çä K ‚Ñö‚Çä¬∑ (Œî‚ÇÄ‚Çä ‚Ñö‚Çä¬∑
                     (‚Ñö.<‚Üí‚Ñö‚Çä _ 1
                       (subst (‚Ñö._< 1)
                         (sym (‚Ñö.n/k+m/k 1 1 (2+ suc n)))
                          (invEq ([n/m]<1 _ _)
                            (‚Ñï.<-k+ {0} {k = 2} ‚Ñï.zero-<-suc))) )))
                    (‚â°·µ£Weaken‚â§·µ£ _ _
                      (  cong rat
                           (((‚Ñö.y¬∑[x/y] K _ ‚àô ùêê'.¬∑DistR- Œî‚ÇÄ _ _) ‚àô
                             cong‚ÇÇ (‚Ñö._+_)
                               (‚Ñö.¬∑IdR _)
                               (cong (‚Ñö.-_)
                               (‚Ñö.¬∑DistL+ Œî‚ÇÄ _ _) ‚àô sym (ùêê'.-Dist _ _)))
                            ‚àô‚àô ùêê'.+ShufflePairs _ _ _ _
                            ‚àô‚àô cong (b* (suc n) .fst ‚Ñö.+_)
                                (ùêê'.-Dist _ _))
                       ‚àô sym (-·µ£-rat‚ÇÇ _ _) ‚àô sym
                          (abs·µ£Pos _
                        (x<y‚Üí0<y-x _ _ (<‚Ñö‚Üí<·µ£ _ _ (a*<b* n))))

                        )))
                        (abs·µ£Pos _ (x<y‚Üí0<y-x _ _ z))
        zA = a-b<c‚áía<c+b (rat (fst (fa* (suc n))))
                (f (rat (a* (suc n) .fst)) (snd (a* (suc n))))
                _
              ((isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _) (snd (snd (fa* (suc n))))))
        zB = a-b<c‚áía-c<b _ (rat (fst (fb* (suc n)))) _
              ((isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _)
                (isTrans‚â°<·µ£ _ _ _ (minusComm-abs·µ£ _ _) (snd (snd (fb* (suc n)))))))
        1/sssn‚â§1/3 = (fst (‚Ñö.inv‚Ñö‚Çä-‚â§-inv‚Ñö‚Çä 3 (fromNat (suc (suc (suc n))))))
                       (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _
                        (‚Ñï.<-k+ {0} {k = 2} ‚Ñï.zero-<-suc))
                         )
        zzs = (<‚Ñö‚Üí<·µ£ _ _
                              (‚Ñö.<‚â§Monotone+
                                _ _ _ _
                                 (‚Ñö.isTrans<‚â§ _ ([ 1 / 2+ suc n ]) _
                                  (subst2 (‚Ñö._<_)
                                    ( cong ([ 1 /_])
                                          (¬∑‚Çä‚ÇÅ-comm _ _)
                                     ‚àô ‚Ñö.riseQandD 1 _ _
                                     ‚àô‚àô cong‚ÇÇ ([_/_] ‚àò ‚Ñö.‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§)
                                          (¬∑‚Çä‚ÇÅ-identityÀ° 2)
                                          refl
                                     ‚àô‚àô sym (‚Ñö.n/k+m/k _ _ _))
                                     (cong ([ 1 /_]) (¬∑‚Çä‚ÇÅ-identityÀ° _))
                                    ((fst (‚Ñö.inv‚Ñö‚Çä-<-inv‚Ñö‚Çä
                                      (fromNat (1 ‚Ñï.¬∑ (suc (suc (suc n)))))
                                      (fromNat (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï
                                         ((2+ suc (suc n)) ¬∑‚Çä‚ÇÅ (2+ suc n)))))
                                        (‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _
                                         (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _
                                           (‚Ñï.<-¬∑sk {k = (suc (suc n))}
                                             ((‚Ñï.<-k+ {0} {k = 1} ‚Ñï.zero-<-suc))))))))
                                  1/sssn‚â§1/3 )
                                (‚Ñö.‚â§Monotone+
                                 (([ 1 / 2+ suc n ])) [ 1 / 3 ]
                                 (([ 1 / 2+ suc n ])) [ 1 / 3 ]
                                 1/sssn‚â§1/3
                                 1/sssn‚â§1/3))
                              )
        qzz = (a+c<b‚áía<b-c _ 1
                           (rat ([ 1 / 2+ suc n ] ‚Ñö.+ [ 1 / 2+ suc n ]))
                            (isTrans<‚â°·µ£ _ _ _ (isTrans‚â°<·µ£ _ _ _
                               (+·µ£-rat _ _) zzs)
                              (cong rat (‚Ñö.Œµ/3+Œµ/3+Œµ/3‚â°Œµ 1))))
        wzqq = (<‚Ñö‚Üí<·µ£ _ _ (subst2 ‚Ñö._<_
                        (‚Ñö.¬∑DistL+ Œ® _ _)
                        (sym (‚Ñö.¬∑Assoc (fst (inv‚Ñö‚Çä K)) Œî‚ÇÄ _))
                        (‚Ñö.<-o¬∑ _ _ _ (‚Ñö.0<‚Ñö‚Çä Œ®‚Çä)

                          (<·µ£‚Üí<‚Ñö _ _ (isTrans<‚â°·µ£ _ _ _
                            qzz (-·µ£-rat‚ÇÇ _ _)))
                            )))
    in <·µ£‚Üí<‚Ñö _ _ (isTrans<·µ£ _ _ _
                zA
                (isTrans<·µ£ _ _ _
                  (fst (x+y<x'-y'‚âÉx+y'<x'-y _ _ _ _)
                    (isTrans<‚â§·µ£ _ _ _
                       (isTrans‚â°<·µ£ _ _ _
                         (+·µ£-rat _ _)
                         wzqq)

                      zz) )
                  zB))

  interval*‚äÜ : ‚àÄ n
    ‚Üí  interval‚Ñô (rat (fst (fa* n))) (rat (fst (fb* n)))
     ‚äÜ interval‚Ñô fa fb
  interval*‚äÜ n x (‚â§x , x‚â§) =
     (isTrans‚â§·µ£ _ _ _ (fst (fst (snd (fa* n)))) ‚â§x)
   , (isTrans‚â§·µ£ _ _ _ x‚â§ (snd (fst (snd (fb* n)))))

  interval*‚äÜo : ‚àÄ n
    ‚Üí  interval‚Ñô (rat (fst (fa* n))) (rat (fst (fb* n)))
     ‚äÜ ointerval‚Ñô fa fb
  interval*‚äÜo n x (‚â§x , x‚â§) =
     (isTrans<‚â§·µ£ _ _ _
        (isTrans‚â§<·µ£ _ _ _ ((fst (fst (snd (fa* (suc n))))))
           (fa*-desc n)) ‚â§x)
   , (isTrans‚â§<·µ£ _ _ _ x‚â§
       (isTrans<‚â§·µ£ _ _ _ (fb*-asc n)
         (snd (fst (snd (fb* (suc n)))))))


  module F‚Çô (n : ‚Ñï) where


   f‚Çô : Œ£[ ùíá‚Åª¬π ‚àà (‚Ñù ‚Üí ‚Ñù) ] ((‚àÄ x ‚Üí x ‚àà interval‚Ñô (rat (fst (fa* (suc n))))
                                 (rat (fst (fb* (suc n))))
                               ‚Üí ùíá‚Åª¬π x ‚àà interval‚Ñô
                                      (ùíá‚Åª¬π (rat (fst (fa* (suc n)))))
                                      (ùíá‚Åª¬π (rat (fst (fb* (suc n))))) )
                           √ó ((Lipschitz-‚Ñù‚Üí‚Ñù K ùíá‚Åª¬π) √ó
                (((x : ‚Ñö)
                  (x‚àà : rat x ‚àà interval‚Ñô (rat (fst (fa* (suc n))))
                                 (rat (fst (fb* (suc n))))) ‚Üí
                 ùíá‚Åª¬π (rat x) ‚â° f‚Åª¬π x (interval*‚äÜ (suc n) (rat x) x‚àà)))))
   f‚Çô = flg , g‚àà , X
    where

    g = extend-Lipshitz‚Ñö‚Üí‚Ñù K _ _
         (‚Ñö.<Weaken‚â§ _ _ (fa*<fb* n))
          (Œª x x‚àà ‚Üí f‚Åª¬π x (interval*‚äÜ (suc n) (rat x) x‚àà))
           Œª q q‚àà r r‚àà ‚Üí f‚Åª¬π-L q _ r _

    flg = (Œª z ‚Üí fromLipschitz K (map-snd (Œª r ‚Üí fst r) g) .fst z)
    X = (snd (fromLipschitz K (map-snd fst g)) , Œª x x‚àà ‚Üí snd (snd g) x x‚àà)



    flg-mon : (x : ‚Ñö)
              (x‚àà : rat x ‚àà interval‚Ñô (rat (fst (fa* (suc n))))
                             (rat (fst (fb* (suc n)))))
              (y : ‚Ñö)
              (y‚àà : rat y ‚àà interval‚Ñô (rat (fst (fa* (suc n))))
                             (rat (fst (fb* (suc n)))))
              ‚Üí x ‚Ñö.< y ‚Üí flg (rat x) <·µ£ flg (rat y)
    flg-mon x x‚àà y y‚àà x<y =
       let xP = cong‚ÇÇ f (snd X x x‚àà) {transport _ _}
                 {f‚Åª¬π‚àà x (interval*‚äÜ (suc n) (rat x) x‚àà)}
                  (symP (transport-filler _ _))
                  ‚àô f‚àòf‚Åª¬π _ _
           yP = cong‚ÇÇ f (snd X y y‚àà) {transport _ _}
                 {f‚Åª¬π‚àà y (interval*‚äÜ (suc n) (rat y) y‚àà)}
                  (symP (transport-filler _ _))
                  ‚àô f‚àòf‚Åª¬π _ _
       in invMon (flg (rat x)) _ (flg (rat y)) _
                   (subst2 _<·µ£_ (sym xP) (sym yP)
                     (<‚Ñö‚Üí<·µ£ _ _ x<y))

    flg-monNS : (x : ‚Ñö)
              (x‚àà : rat x ‚àà interval‚Ñô (rat (fst (fa* (suc n))))
                             (rat (fst (fb* (suc n)))))
              (y : ‚Ñö)
              (y‚àà : rat y ‚àà interval‚Ñô (rat (fst (fa* (suc n))))
                             (rat (fst (fb* (suc n)))))
              ‚Üí x ‚Ñö.‚â§ y ‚Üí flg (rat x) ‚â§·µ£ flg (rat y)
    flg-monNS x x‚àà y y‚àà =
      ‚äé.rec (‚â°·µ£Weaken‚â§·µ£ _ _ ‚àò cong (flg ‚àò rat) )
        (<·µ£Weaken‚â§·µ£ _ _ ‚àò flg-mon x x‚àà y y‚àà)
        ‚àò ‚Ñö.‚â§‚Üí‚â°‚äé< _ _


    g‚àà : ‚àÄ x (x‚àà : x ‚àà interval‚Ñô
                (rat (fst (fa* (suc n))))
                (rat (fst (fb* (suc n)))))
           ‚Üí flg x ‚àà interval‚Ñô
            (flg (rat (fst (fa* (suc n)))))
            (flg (rat (fst (fb* (suc n)))))
    g‚àà x x‚àà@(‚â§x , x‚â§) =
     (x<y+Œ¥‚Üíx‚â§y (flg (rat (fst (fa* (suc n))))) (flg x) (Œª Œµ ‚Üí
      PT.rec (isProp<·µ£ (flg (rat (fst (fa* (suc n)))))
                (flg x +·µ£ rat (fst Œµ)))
        (Œª (Œ∑' , x<Œ∑' , Œ∑<') ‚Üí
          let Œ∑ = ‚Ñö.min Œ∑' (fst (fb* (suc n)))
              x‚â§Œ∑ = ‚â§min-lem _ _ _ (<·µ£Weaken‚â§·µ£ _ _ x<Œ∑') x‚â§
              Œ∑< = isTrans‚â§<·µ£ _ _ _
                    (‚â§‚Ñö‚Üí‚â§·µ£ _ _  (‚Ñö.min‚â§ Œ∑' _)) Œ∑<'
              a*‚àà : (rat (fst (fa* (suc n)))) ‚àà
                      interval‚Ñô (rat (fst (fa* (suc n))))
                             (rat (fst (fb* (suc n))))
              a*‚àà = ((‚â§·µ£-refl _) , (
                     ‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.<Weaken‚â§ _ _ (fa*<fb* n))))
              Œ∑‚àà : (rat Œ∑) ‚àà
                      interval‚Ñô (rat (fst (fa* (suc n))))
                             (rat (fst (fb* (suc n))))
              Œ∑‚àà =  (isTrans‚â§·µ£ _ _ _ ‚â§x x‚â§Œ∑) ,
                    ‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.min‚â§' Œ∑' _)
              z : flg (rat (fst (fa* (suc n)))) ‚â§·µ£ flg (rat Œ∑)
              z = flg-monNS (fst (fa* (suc n)))
                    a*‚àà
                    Œ∑ Œ∑‚àà
                    (‚â§·µ£‚Üí‚â§‚Ñö _ _
                      (isTrans‚â§·µ£ _ _ _
                        ‚â§x x‚â§Œ∑))
              zz' = (fst X (rat Œ∑) x  (inv‚Ñö‚Çä K ‚Ñö‚Çä¬∑ Œµ))
                   ((invEq (‚àº‚âÉabs<Œµ _ _ _)
                      (isTrans‚â°<·µ£ _ _ _
                        (abs·µ£NonNeg _ (x‚â§y‚Üí0‚â§y-x _ _ x‚â§Œ∑))
                        (a<c+b‚áía-c<b _ _ _ Œ∑<))))
              z' : flg (rat Œ∑) <·µ£ flg x +·µ£ rat (fst Œµ)
              z' = isTrans<‚â°·µ£ _ _ _ (a-b<c‚áía<c+b _ _ _ (isTrans‚â§<·µ£ _ _ _
                     (‚â§abs·µ£ _) (fst (‚àº‚âÉabs<Œµ _ _ _) zz')))

                     (+·µ£Comm (rat (fst (K ‚Ñö‚Çä¬∑ (inv‚Ñö‚Çä K ‚Ñö‚Çä¬∑ Œµ)))) _ ‚àô
                      cong (flg x +·µ£_) (cong rat
                        (‚Ñö.y¬∑[x/y] K _)))
              zzz : flg (rat (fst (fa* (suc n))))
                     <·µ£ flg x +·µ£ rat (fst Œµ)
              zzz = isTrans‚â§<·µ£ (flg (rat (fst (fa* (suc n)))))
                   (flg (rat Œ∑))
                     (flg x +·µ£ rat (fst Œµ)) z z'
              in zzz)
        (dense‚Ñöin‚Ñù x (x +·µ£ rat (fst (inv‚Ñö‚Çä K ‚Ñö‚Çä¬∑ Œµ)))
          (isTrans‚â°<·µ£ _ _ _
             (sym (+IdR _))
              (<·µ£-o+ _ _ _ (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä (inv‚Ñö‚Çä K ‚Ñö‚Çä¬∑ Œµ))))))
      ))
     ,
     x<y+Œ¥‚Üíx‚â§y (flg x) (flg (rat (fst (fb* (suc n))))) Œª Œµ ‚Üí
      PT.rec (isProp<·µ£ (flg x) (flg (rat (fst (fb* (suc n)))) +·µ£ rat (fst Œµ)))
       (Œª (Œ∑' , <Œ∑' , Œ∑'<x) ‚Üí
         let Œ∑ = ‚Ñö.max Œ∑' (fst (fa* (suc n)))
             Œ∑‚â§x : rat Œ∑ ‚â§·µ£ x
             Œ∑‚â§x = max‚â§-lem _ _ _ (<·µ£Weaken‚â§·µ£ _ _ Œ∑'<x) ‚â§x
             <Œ∑ = isTrans<‚â§·µ£ _ _ _
                     <Œ∑' (‚â§‚Ñö‚Üí‚â§·µ£ _ _  (‚Ñö.‚â§max Œ∑' (fst (fa* (suc n)))))
             b*‚àà : (rat (fst (fb* (suc n)))) ‚àà
                      interval‚Ñô (rat (fst (fa* (suc n))))
                             (rat (fst (fb* (suc n))))
             b*‚àà = ‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.<Weaken‚â§ _ _ (fa*<fb* n)) , ‚â§·µ£-refl _
             Œ∑‚àà : (rat Œ∑) ‚àà
                      interval‚Ñô (rat (fst (fa* (suc n))))
                             (rat (fst (fb* (suc n))))
             Œ∑‚àà =  ‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.‚â§max' Œ∑' _)
                  , (isTrans‚â§·µ£ _ _ _  Œ∑‚â§x x‚â§)
             z : flg (rat Œ∑) ‚â§·µ£  flg (rat (fst (fb* (suc n))))
             z = flg-monNS Œ∑ Œ∑‚àà
                   (fst (fb* (suc n))) b*‚àà
                    (‚â§·µ£‚Üí‚â§‚Ñö _ _
                      (isTrans‚â§·µ£ _ _ _ Œ∑‚â§x x‚â§ ))
             zz' = (fst X x (rat Œ∑)  (inv‚Ñö‚Çä K ‚Ñö‚Çä¬∑ Œµ))
                   ((invEq (‚àº‚âÉabs<Œµ _ _ _)
                      (isTrans‚â°<·µ£ _ _ _
                        (abs·µ£NonNeg _ (x‚â§y‚Üí0‚â§y-x _ _ Œ∑‚â§x))
                        (a-b<c‚áía-c<b _ _ _ <Œ∑))))
             z' : flg x <·µ£ flg (rat Œ∑)  +·µ£ rat (fst Œµ)
             z' = isTrans<‚â°·µ£ _ _ _ (a-b<c‚áía<c+b _ _ _ (isTrans‚â§<·µ£ _ _ _
                     (‚â§abs·µ£ _) (fst (‚àº‚âÉabs<Œµ _ _ _) zz')))
                     (+·µ£Comm (rat (fst (K ‚Ñö‚Çä¬∑ (inv‚Ñö‚Çä K ‚Ñö‚Çä¬∑ Œµ)))) (flg (rat Œ∑)) ‚àô
                      cong (flg (rat Œ∑) +·µ£_) (cong rat
                        (‚Ñö.y¬∑[x/y] K _)))
             zzz : flg x <·µ£ flg (rat (fst (fb* (suc n)))) +·µ£ rat (fst Œµ)
             zzz = isTrans<‚â§·µ£ _ _ _
                     z' (‚â§·µ£-+o _ _ _ z)
         in zzz)
        ((dense‚Ñöin‚Ñù (x -·µ£ rat (fst (inv‚Ñö‚Çä K ‚Ñö‚Çä¬∑ Œµ))) x
          (isTrans<‚â°·µ£ _ _ _
            ((<·µ£-o+ _ _ _
              (-·µ£<·µ£ _ _ (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä (inv‚Ñö‚Çä K ‚Ñö‚Çä¬∑ Œµ)))))) (ùêë'.+IdR' _ _ (-·µ£-rat 0)))))




  lem-f‚Çô‚àà : ‚àÄ n ‚Üí rat a <·µ£ F‚Çô.f‚Çô n .fst (rat (fst (fa* (suc n))))
  lem-f‚Çô‚àà n =
   let a*‚àà = (‚â§·µ£-refl _) , (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.<Weaken‚â§ _ _ (fa*<fb* n)))
       zz : _ <·µ£ _
       zz = invMon
               (rat a)
               a‚àà _
               _ (isTrans<‚â°·µ£ _ _ _
                 (isTrans‚â§<·µ£ _ _ _
                   (fst (fst (snd (fa* (suc (suc n))))))
                   (fa*-desc (suc n)))
                  (sym (f‚àòf‚Åª¬π _ _)))

   in isTrans<‚â°·µ£ _ _ _ zz
       (sym (snd (snd (snd (F‚Çô.f‚Çô n))) (fst (fa* (suc n)))
           a*‚àà))



  lem-f‚Çô‚àà' : ‚àÄ n ‚Üí F‚Çô.f‚Çô n .fst (rat (fst (fb* (suc n)))) <·µ£ rat b
  lem-f‚Çô‚àà' n =
   let a*‚àà = (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.<Weaken‚â§ _ _ (fa*<fb* n))) , (‚â§·µ£-refl _)
       zz : _ <·µ£ _
       zz = invMon _
               _ (rat b) b‚àà
               (isTrans‚â°<·µ£ _ _ _ ((f‚àòf‚Åª¬π _ _))
                 (isTrans<‚â§·µ£ _ _ _
                   (fb*-asc (suc n))
                   (snd (fst (snd (fb* (suc (suc n))))))))

   in isTrans‚â°<·µ£ _ _ _
       ((snd (snd (snd (F‚Çô.f‚Çô n))) (fst (fb* (suc n)))
           a*‚àà)) zz


  f‚Çô‚àà : ‚àÄ n ‚Üí ‚àÄ x ‚Üí x ‚àà interval‚Ñô (rat (fst (fa* (suc n))))
                                 (rat (fst (fb* (suc n))))
                             ‚Üí fst (F‚Çô.f‚Çô n) x ‚àà ointerval‚Ñô (rat a) (rat b)
  f‚Çô‚àà n x x‚àà =
   let (<x , x<) = fst (snd (F‚Çô.f‚Çô n)) x x‚àà
   in (isTrans<‚â§·µ£ _ _ _ (lem-f‚Çô‚àà n) <x)
      , (isTrans‚â§<·µ£ _ _ _ x< (lem-f‚Çô‚àà' n))

  invSeq : Seq‚äÜ
  invSeq .Seq‚äÜ.ùï° n =
    interval‚Ñô (rat (fst (fa* (suc n)))) (rat (fst (fb* (suc n))))
  invSeq .Seq‚äÜ.ùï°‚äÜ n x (‚â§x , x‚â§) =
      isTrans‚â§·µ£ _ _ _ (<·µ£Weaken‚â§·µ£ _ _ $ fa*-desc (suc n)) ‚â§x
    , isTrans‚â§·µ£ _ _ _ x‚â§ (<·µ£Weaken‚â§·µ£ _ _ $ fb*-asc (suc n))

  seg‚Üí : Seq‚äÜ‚Üí ‚Ñù invSeq
  seg‚Üí .Seq‚äÜ‚Üí.fun x n _ = fst (F‚Çô.f‚Çô n) x

  seg‚Üí .Seq‚äÜ‚Üí.fun‚äÜ x n m x‚àà x‚àà' n<m =
    cong (fst (F‚Çô.f‚Çô n))
      (‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â° _ _ _ x‚àà) ‚àô‚àô
     ‚â°Continuous _ _
       (IsContinuous‚àò _ _
          ((Lipschitz‚ÜíIsContinuous K _
        (fst (snd (snd (F‚Çô.f‚Çô n))))))
         (IsContinuousClamp (rat (fst (fa* (suc n)))) _))
       (IsContinuous‚àò _ _
          ((Lipschitz‚ÜíIsContinuous K _
        (fst (snd (snd (F‚Çô.f‚Çô m))))))
         (IsContinuousClamp (rat (fst (fa* (suc n)))) _))

       (Œª r¬†‚Üí
          let r‚àà = ((clamp·µ£‚àà‚Ñöinterval‚Ñô _ _
                 (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.<Weaken‚â§ _ _ ( fa*<fb* n)))
                  (rat r)))
          in (snd (snd (snd (F‚Çô.f‚Çô n)))) _
                 r‚àà
                 ‚àô‚àô cong (f‚Åª¬π _) (snd (interval‚Ñô fa fb _) _ _)
                   ‚àô‚àô
                  sym ((snd (snd (snd (F‚Çô.f‚Çô m)))) _
                    (Seq‚äÜ.ùï°‚äÜ' invSeq n m ((‚Ñï.<-weaken n<m )) _ r‚àà)))
                    x
     ‚àô‚àô cong (fst (F‚Çô.f‚Çô m))
       (sym (‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â° _ _ _ x‚àà))

   where
    x‚àà'' = Seq‚äÜ.ùï°‚äÜ' invSeq n m ((‚Ñï.<-weaken n<m )) x x‚àà


  invSeq‚äÜ‚ü®fa,fb‚ü© : invSeq Seq‚äÜ.s‚äá ointerval‚Ñô fa fb
  invSeq‚äÜ‚ü®fa,fb‚ü© x (<x , x<) =
   PT.map2
     (Œª (q , (<q , q<)) (r , (<r , r<)) ‚Üí
      let q‚äîr = ‚Ñö.min‚Çä (q , ‚Ñö.<‚Üí0< q (<·µ£‚Üí<‚Ñö _ _ <q))
                   (r , ‚Ñö.<‚Üí0< r (<·µ£‚Üí<‚Ñö _ _ <r))

          (N‚Çä , <N') = map-snd
                (subst (‚Ñö._‚â§ fst q‚äîr) (‚Ñö.¬∑Comm _ _) ‚àò ‚Ñö.x‚â§y¬∑z‚Üíx¬∑inv‚Ñö‚Çäy‚â§z _ _ _ ‚àò
                  subst (fst Œ¶ ‚Ñö.‚â§_) (‚Ñö.¬∑Comm _ _)
                  ‚àò ‚Ñö.x¬∑inv‚Ñö‚Çäy‚â§z‚Üíx‚â§y¬∑z _ _ _ ‚àò ‚Ñö.<Weaken‚â§ _ _)
                (‚Ñö.ceil‚Ñö‚Çä (Œ¶ ‚Ñö‚Çä¬∑ (inv‚Ñö‚Çä q‚äîr) ))
          N = (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï N‚Çä)

          <N : ([ 1 / 2+ N ] ‚Ñö.¬∑ fst Œ¶)
                ‚Ñö.‚â§ fst q‚äîr
          <N = ‚Ñö.isTrans‚â§ _ ([ 1 / N‚Çä ] ‚Ñö.¬∑ fst Œ¶) _
                   (‚Ñö.‚â§-¬∑o _ _ (fst Œ¶)
                    (‚Ñö.0‚â§‚Ñö‚Çä Œ¶)
                    ((fst (‚Ñö.inv‚Ñö‚Çä-‚â§-inv‚Ñö‚Çä
                         (fromNat ((‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï N‚Çä)))
                         (fromNat (suc (suc ((‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï N‚Çä))))))
                    ((‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _
                     (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos  _ _
                       (‚Ñï.‚â§SumRight {k = 2})))) ))) <N'



      in _ ,
          (isTrans‚â§·µ£ _ _ _
           (a-b‚â§c‚áía‚â§c+b _ _ _
            (isTrans‚â§·µ£ _ _ _
              (<·µ£Weaken‚â§·µ£ _ _ (fa*Œî N))
              (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.isTrans‚â§ _ _ _
                <N (‚Ñö.min‚â§ q r) ))))
           (a‚â§b-c‚áía+c‚â§b (rat q) _ fa
            (<·µ£Weaken‚â§·µ£ _ _ q<)) ,
           isTrans‚â§·µ£ _ _ _
             (<·µ£Weaken‚â§·µ£ _ _ (a<b-c‚áíc<b-a _ _ _ r<))
               (a-b‚â§c‚áía-c‚â§b _ _ _
                 (isTrans‚â§·µ£ _ _ _
                   (<·µ£Weaken‚â§·µ£ _ _ (fb*Œî N))
                   (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.isTrans‚â§ _ _ _
                      <N (‚Ñö.min‚â§' q r) ))))))
     (dense‚Ñöin‚Ñù _ _ (x<y‚Üí0<y-x _ _ <x))
     (dense‚Ñöin‚Ñù _ _ (x<y‚Üí0<y-x _ _ x<))


  open Seq‚äÜ‚Üí.FromIntersection seg‚Üí isSet‚Ñù (ointerval‚Ñô fa fb)
         invSeq‚äÜ‚ü®fa,fb‚ü©


  ùíá‚Åª¬π = ‚à©$

  IsLip-ùíá‚Åª¬π : Lipschitz-‚Ñù‚Üí‚Ñù‚Ñô K (ointerval‚Ñô fa fb) ùíá‚Åª¬π
  IsLip-ùíá‚Åª¬π u u‚àà v v‚àà Œµ =
    ‚à©$-elimProp2 u u‚àà v v‚àà
      {B = Œª fu fv ‚Üí u ‚àº[ Œµ  ] v ‚Üí fu ‚àº[ K ‚Ñö‚Çä¬∑ Œµ  ] fv}
      (Œª _ _ ‚Üí isPropŒ† Œª _ ‚Üí isProp‚àº _ _ _)
      Œª n x‚àà y‚àà x ‚Üí
         fst (snd (snd (F‚Çô.f‚Çô n))) _ _ Œµ x

  IsContinuous-ùíá‚Åª¬π : IsContinuousWithPred (ointerval‚Ñô fa fb) ùíá‚Åª¬π
  IsContinuous-ùíá‚Åª¬π = fromLipshitz‚Ñö‚Üí‚Ñù‚Ñô‚ÜíCont K _ _ _
    IsLip-ùíá‚Åª¬π

  ùíá‚Åª¬π‚àà : ‚àÄ x x‚àà ‚Üí  (ùíá‚Åª¬π x x‚àà) ‚àà ointerval‚Ñô (rat a) (rat b)
  ùíá‚Åª¬π‚àà x x‚àà = ‚à©$-elimProp x x‚àà
     {_‚àà ointerval‚Ñô (rat a) (rat b)}
     (snd ‚àò ointerval‚Ñô (rat a) (rat b))
     Œª n x‚àà‚Çô ‚Üí f‚Çô‚àà n x x‚àà‚Çô



  f‚àòùíá‚Åª¬π : ‚àÄ x x‚àà ‚Üí fst (fo (ùíá‚Åª¬π  x x‚àà) (ùíá‚Åª¬π‚àà  x x‚àà)) ‚â° x
  f‚àòùíá‚Åª¬π x x‚àà = ‚â°ContinuousWithPred (ointerval‚Ñô fa fb) (ointerval‚Ñô fa fb)
                (openIinterval‚Ñô fa fb) (openIinterval‚Ñô fa fb) _ _
                (IsContinuousWP‚àò (ointerval‚Ñô (rat a) (rat b)) _
                  (Œª r r‚àà ‚Üí fst (fo r r‚àà)) ùíá‚Åª¬π ùíá‚Åª¬π‚àà
                   (IsContinuousWithPred‚äÜ _ _ f
                     (ointerval‚Ñô‚äÜinterval‚Ñô (rat a) (rat b)) fC)
                      IsContinuous-ùíá‚Åª¬π)
                (AsContinuousWithPred _ _ IsContinuousId)
                (Œª r r‚àà r‚àà' ‚Üí
                 let zz : (ùíá‚Åª¬π (rat r) r‚àà)
                           ‚â° (f‚Åª¬π r (ointerval‚Ñô‚äÜinterval‚Ñô fa fb (rat r) r‚àà))
                     zz = ‚à©$-elimProp (rat r) r‚àà
                            {Œª x ‚Üí x ‚â°
                             (f‚Åª¬π r
                              (ointerval‚Ñô‚äÜinterval‚Ñô fa fb (rat r) r‚àà))}
                               (Œª _ ‚Üí isSet‚Ñù _ _)
                                Œª n x‚àà ‚Üí
                                  snd (snd (snd (F‚Çô.f‚Çô n))) r x‚àà ‚àô
                                   cong (f‚Åª¬π r)
                                     (snd (interval‚Ñô fa fb (rat r)) _ _)
                 in cong (uncurry f)
                       (Œ£‚â°Prop (Œª x ‚Üí snd (interval‚Ñô (rat a) (rat b) x))
                        zz )
                     ‚àô f‚àòf‚Åª¬π r
                      (ointerval‚Ñô‚äÜinterval‚Ñô fa fb (rat r) r‚àà) ) x x‚àà x‚àà


  isSurjection-fo : isSurjection (uncurry fo)
  isSurjection-fo (x , x‚àà) =
   ‚à£ _ ,
    (Œ£‚â°Prop (snd ‚àò ointerval‚Ñô fa fb) (f‚àòùíá‚Åª¬π x x‚àà)) ‚à£‚ÇÅ

  isEquivFo : isEquiv (uncurry fo)
  isEquivFo = isEmbedding√óisSurjection‚ÜíisEquiv (isEmbed-fo , isSurjection-fo)

  ùíá‚Åª¬π‚àòf : ‚àÄ x x‚àà ‚Üí  uncurry ùíá‚Åª¬π (fo x x‚àà) ‚â° x
  ùíá‚Åª¬π‚àòf x x‚àà =  cong fst (invEq (congEquiv (_ , isEquivFo))
    (Œ£‚â°Prop (snd ‚àò ointerval‚Ñô fa fb) (uncurry  f‚àòùíá‚Åª¬π (fo x x‚àà))))

  f-iso : Iso (Œ£ ‚Ñù (_‚àà ointerval‚Ñô (rat a) (rat b)))
              (Œ£ ‚Ñù (_‚àà ointerval‚Ñô fa fb))
  f-iso .Iso.fun = uncurry fo
  f-iso .Iso.inv (x , x‚àà) = (ùíá‚Åª¬π  x x‚àà) , (ùíá‚Åª¬π‚àà  x x‚àà)
  f-iso .Iso.rightInv (x , x‚àà) = Œ£‚â°Prop (snd ‚àò ointerval‚Ñô _ _) (f‚àòùíá‚Åª¬π x x‚àà)
  f-iso .Iso.leftInv (x , x‚àà) = Œ£‚â°Prop (snd ‚àò ointerval‚Ñô _ _) (ùíá‚Åª¬π‚àòf x x‚àà)
