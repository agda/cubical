{-# OPTIONS --safe --lossy-unification #-}

module Cubical.HITs.CauchyReals.NthRoot where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Function
open import Cubical.Foundations.Powerset

open import Cubical.Data.Bool as ùüö hiding (_‚â§_)
open import Cubical.Data.Nat as ‚Ñï hiding (_¬∑_;_+_)
import Cubical.Data.Nat.Mod as ‚Ñï
import Cubical.Data.Nat.Order as ‚Ñï
open import Cubical.Data.Empty as ‚ä•
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Int as ‚Ñ§ using (pos; ‚Ñ§)
import Cubical.Data.Int.Order as ‚Ñ§
open import Cubical.Data.Sigma

open import Cubical.HITs.PropositionalTruncation as PT

open import Cubical.HITs.SetQuotients as SQ hiding ([_])

open import Cubical.Data.NatPlusOne

open import Cubical.Data.Rationals as ‚Ñö using (‚Ñö ; [_/_])
open import Cubical.Data.Rationals.Order as ‚Ñö using
  ( _‚Ñö‚Çä+_ ; 0<_ ; ‚Ñö‚Çä ; _‚Ñö‚Çä¬∑_ ; ‚Ñö‚Çä‚â°)
open import Cubical.Data.Rationals.Order.Properties as ‚Ñö
 using (inv‚Ñö‚Çä;/2‚Çä;/3‚Çä;/4‚Çä;x/2<x;inv‚Ñö;_‚Ñö^‚Åø_;_‚Ñö‚Çä^‚Åø_)


open import Cubical.HITs.CauchyReals.Base
open import Cubical.HITs.CauchyReals.Lems
open import Cubical.HITs.CauchyReals.Closeness
open import Cubical.HITs.CauchyReals.Lipschitz
open import Cubical.HITs.CauchyReals.Order
open import Cubical.HITs.CauchyReals.Continuous
open import Cubical.HITs.CauchyReals.Multiplication
open import Cubical.HITs.CauchyReals.Inverse
open import Cubical.HITs.CauchyReals.Sequence
open import Cubical.HITs.CauchyReals.Bisect




sqrRestr< : ‚àÄ n ‚Üí (fst (inv‚Ñö‚Çä (fromNat (2 ‚Ñï.+ n)))) ‚Ñö.< (fromNat (2 ‚Ñï.+ n))
sqrRestr< n =
  (‚Ñö.isTrans< (fst (inv‚Ñö‚Çä (fromNat (2 ‚Ñï.+ n)))) 1 (fromNat (2 ‚Ñï.+ n))
               (fst (‚Ñö.inv‚Ñö‚Çä-<-inv‚Ñö‚Çä 1 _)
                 (‚Ñö.<‚Ñ§‚Üí<‚Ñö 1 _ (‚Ñ§.suc-‚â§-suc (‚Ñ§.suc-‚â§-suc (‚Ñ§.zero-‚â§pos {n})))))
               (‚Ñö.<‚Ñ§‚Üí<‚Ñö 1 _
               (‚Ñ§.suc-‚â§-suc (‚Ñ§.suc-‚â§-suc (‚Ñ§.zero-‚â§pos {n})))))

module NthRoot (m : ‚Ñï) where


 module _ (n : ‚Ñï) where


  open b‚Åø-a‚Åø m hiding (n)


  A B : ‚Ñù
  A = rat (fst (inv‚Ñö‚Çä (fromNat (2 ‚Ñï.+ n))))
  B = (fromNat (2 ‚Ñï.+ n))
  0<A = (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä (inv‚Ñö‚Çä (fromNat (2 ‚Ñï.+ n)))))
  0<B = (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä (fromNat (2 ‚Ñï.+ n))))
  A<B : A <·µ£ B
  A<B = <‚Ñö‚Üí<·µ£ _ _ (sqrRestr< n)



  L = (((fromNat (2 ‚Ñï.+ n)) ‚Ñö‚Çä^‚Åø (suc m))
      ‚Ñö‚Çä¬∑ (fromNat (2 ‚Ñï.+ m)))

  K = (fromNat (2 ‚Ñï.+ n)) ‚Ñö‚Çä^‚Åø (suc m)

  incrF : isIncrasing‚Ñô
   (‚Ñöinterval‚Ñô (fst (inv‚Ñö‚Çä (fromNat (2 ‚Ñï.+ n))))
               (fromNat (2 ‚Ñï.+ n))) (Œª x _ ‚Üí x ‚Ñö^‚Åø (2 ‚Ñï.+ m))
  incrF  x x‚àà y y‚àà =
    ‚Ñö^‚Åø-StrictMonotone (2 ‚Ñï.+ m)
     (‚Ñï.‚â§-suc (‚Ñï.suc-‚â§-suc (‚Ñï.zero-‚â§ {m})))
     (‚Ñö.isTrans‚â§ 0 (fst (inv‚Ñö‚Çä (fromNat (2 ‚Ñï.+ n))))
          x (‚Ñö.0‚â§‚Ñö‚Çä (inv‚Ñö‚Çä (fromNat (2 ‚Ñï.+ n)))) (fst x‚àà))
     (‚Ñö.isTrans‚â§ 0 (fst (inv‚Ñö‚Çä (fromNat (2 ‚Ñï.+ n))))
          y (‚Ñö.0‚â§‚Ñö‚Çä (inv‚Ñö‚Çä (fromNat (2 ‚Ñï.+ n)))) (fst y‚àà))

  1/K<L : fst (inv‚Ñö‚Çä K) ‚Ñö.< fst L
  1/K<L = ‚Ñö.isTrans‚â§< _ 1 _
    (subst (‚Ñö._‚â§ 1) (sym (‚Ñö.inv‚Ñö‚Çä-‚Ñö^‚Åø _ _))
      (‚Ñö.x^‚Åø‚â§1 _ _ ‚Ñ§.zero-‚â§pos
       (fst (‚Ñö.inv‚Ñö‚Çä-‚â§-inv‚Ñö‚Çä 1 (fromNat (2 ‚Ñï.+ n)))
        (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (‚Ñ§.suc-‚â§-suc ‚Ñ§.zero-‚â§pos)))))
         (‚Ñö.isTrans‚â§< _ _ _
           (‚Ñö.1‚â§x^‚Åø (fromNat (2 ‚Ñï.+ n))
            (fromNat (1 ‚Ñï.+ m)) (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö 1 _ (‚Ñ§.suc-‚â§-suc ‚Ñ§.zero-‚â§pos)))
            (subst (‚Ñö._< fst L)

               (‚Ñö.¬∑IdR _)
                 (‚Ñö.<-o¬∑ 1 (fromNat (2 ‚Ñï.+ m))
                   _ (‚Ñö.0<‚Ñö‚Çä ((fromNat (2 ‚Ñï.+ n)) ‚Ñö‚Çä^‚Åø (suc m)))
            ((‚Ñö.<‚Ñ§‚Üí<‚Ñö 1 (‚Ñ§.pos (suc (suc m)))
             ( ‚Ñ§.suc-‚â§-suc (‚Ñ§.suc-‚â§-suc (‚Ñ§.zero-‚â§pos {m})))))))
            )


  rootRest : IsBilipschitz
               (fst (inv‚Ñö‚Çä (fromNat (2 ‚Ñï.+ n))))
               (fromNat (2 ‚Ñï.+ n))
               (sqrRestr< n)
               Œª x _ ‚Üí x ‚Ñö^‚Åø (2 ‚Ñï.+ m)
  rootRest .IsBilipschitz.incrF = incrF
  rootRest .IsBilipschitz.L = L
  rootRest .IsBilipschitz.K = K
  rootRest .IsBilipschitz.1/K‚â§L = ‚Ñö.<Weaken‚â§ _ _ 1/K<L

  rootRest .IsBilipschitz.lipF =
    Lipschitz-‚Ñö‚Üí‚Ñù‚Ñô<‚ÜíLipschitz-‚Ñö‚Üí‚Ñù‚Ñô _ _ _
      Œª q q‚àà r r‚àà r<q  ‚Üí
       let 0<r : 0 <·µ£ (rat r)
           0<r = isTrans<‚â§·µ£ 0 A (rat r) 0<A (fst r‚àà)
           0<q : 0 <·µ£ (rat q)
           0<q = isTrans<·µ£ 0 (rat r) (rat q) 0<r (<‚Ñö‚Üí<·µ£ _ _ r<q)

           ineqL : (rat q ^‚Åø suc (suc m)) -·µ£ (rat r ^‚Åø suc (suc m))
                      ‚â§·µ£ rat ((fst L) ‚Ñö.¬∑ (q ‚Ñö.- r))

           ineqL =
             isTrans‚â°‚â§·µ£ _ _ _ (sym $
                  [b-a]¬∑S‚â°b‚Åø-a‚Åø (rat r) (rat q)
                     0<r 0<q)
               (isTrans‚â§‚â°·µ£ _ _ _ (‚â§·µ£-o¬∑·µ£ _ _ _
                      (isTrans‚â§‚â°·µ£ _ _ _  (‚â§‚Ñö‚Üí‚â§·µ£ _ _  $ ‚Ñö.<Weaken‚â§ _ _ (‚Ñö.<‚Üí<minus _ _ r<q))
                       (sym (-·µ£-rat‚ÇÇ _ _))) --
                    (isTrans‚â§‚â°·µ£ _ _ _
               (S‚â§B‚Åø¬∑n (rat r) (rat q) 0<r 0<q A B 0<A
                     (isTrans‚â§<·µ£ _ _ _
                       (fst r‚àà ) (<‚Ñö‚Üí<·µ£ _ _ r<q)) 0<B A<B
                  (snd q‚àà)
                  (<‚Ñö‚Üí<·µ£ _ _ r<q))
                      (sym ((rat¬∑·µ£rat _ _
                        ‚àô cong (_¬∑·µ£ (rat ((fromNat (2 ‚Ñï.+ m)))))
                          (sym (^‚Åø-‚Ñö^‚Åø _ _)))))
                          ))
                           (cong‚ÇÇ _¬∑·µ£_ (-·µ£-rat‚ÇÇ _ _) refl ‚àô (sym (rat¬∑·µ£rat _ _) ‚àô (cong rat (‚Ñö.¬∑Comm _ _)))) --
                           )


       in isTrans‚â°‚â§·µ£ _ _ _ (cong abs·µ£ (-·µ£-rat‚ÇÇ _ _) ‚àô abs·µ£Pos _
            (<‚Ñö‚Üí<·µ£ _ _  (‚Ñö.<‚Üí<minus _ _ (incrF r
                     (‚ààinterval‚Ñô‚Üí‚àà‚Ñöinterval‚Ñô _ _ _ r‚àà)
                     q
                     (‚ààinterval‚Ñô‚Üí‚àà‚Ñöinterval‚Ñô _ _ _ q‚àà)
                     r<q)))
                 ‚àô sym (-·µ£-rat‚ÇÇ _ _)  ‚àô cong‚ÇÇ _-·µ£_
                   (sym (^‚Åø-‚Ñö^‚Åø _ _))
                   (sym (^‚Åø-‚Ñö^‚Åø _ _))) ineqL

  rootRest .IsBilipschitz.lip‚Åª¬πF =
    Invlipschitz-‚Ñö‚Üí‚Ñö‚Ñô'<‚ÜíInvlipschitz-‚Ñö‚Üí‚Ñö‚Ñô _ _ _
       Œª q q‚àà r r‚àà r<q ‚Üí
          let r‚àà' = (‚àà‚Ñöinterval‚Ñô‚Üí‚ààinterval‚Ñô _ _ _ r‚àà)
              q‚àà' = (‚àà‚Ñöinterval‚Ñô‚Üí‚ààinterval‚Ñô
                      (fst (inv‚Ñö‚Çä (fromNat (2 ‚Ñï.+ n)))) _ _ q‚àà)
              0<r : 0 <·µ£ (rat r)
              0<r = isTrans<‚â§·µ£ 0 A (rat r) 0<A (fst r‚àà')
              0<q : 0 <·µ£ (rat q)
              0<q = isTrans<·µ£ 0 (rat r) (rat q) 0<r (<‚Ñö‚Üí<·µ£ _ _ r<q)

          in ‚Ñö.x¬∑inv‚Ñö‚Çäy‚â§z‚Üíx‚â§y¬∑z _ _ _ (‚â§·µ£‚Üí‚â§‚Ñö _ _
                $ isTrans‚â°‚â§·µ£ _ _ _ (cong rat
                  (cong ((q ‚Ñö.+ ‚Ñö.- r) ‚Ñö.¬∑_)
                    (‚Ñö.inv‚Ñö‚Çä-‚Ñö^‚Åø _ (suc m)) )
                  ‚àô rat¬∑·µ£rat _ _) $
                isTrans‚â§‚â°·µ£ _ _ _
                  (‚â§·µ£-o¬∑·µ£ _ _ _
                        (‚â§‚Ñö‚Üí‚â§·µ£ _ _  $ ‚Ñö.<Weaken‚â§ _ _ (‚Ñö.<‚Üí<minus _ _ r<q))
                  (isTrans‚â°‚â§·µ£ _ _ _
                     (sym (^‚Åø-‚Ñö^‚Åø _ _))
                             (A‚Åø‚â§S (rat r) (rat q) 0<r 0<q
                              A B 0<A
                              (isTrans‚â§<·µ£ _ _ _
                                (fst r‚àà' ) (<‚Ñö‚Üí<·µ£ _ _ r<q))
                              0<B A<B
                             (snd q‚àà')
                             (<‚Ñö‚Üí<·µ£ _ _ r<q))
                             ))
                    (cong‚ÇÇ _¬∑·µ£_ (sym (-·µ£-rat‚ÇÇ _ _)) refl ‚àô [b-a]¬∑S‚â°b‚Åø-a‚Åø (rat r) (rat q) 0<r 0<q
                       ‚àô
                      cong‚ÇÇ _-·µ£_ (^‚Åø-‚Ñö^‚Åø _ _) (^‚Åø-‚Ñö^‚Åø _ _)
                      ‚àô -·µ£-rat‚ÇÇ _ _ ‚àô cong rat (sym (‚Ñö.absPos _
                      (‚Ñö.<‚Üí<minus _ _ (incrF r r‚àà q q‚àà r<q))) ‚àô
                       ‚Ñö.abs'‚â°abs _))
                       )




 loB hiB : ‚àÄ n ‚Üí ‚Ñö
 loB n = (((fst (inv‚Ñö‚Çä (fromNat (2 ‚Ñï.+ n))))) ‚Ñö^‚Åø (2 ‚Ñï.+ m))
 hiB n = ((fromNat (2 ‚Ñï.+ n)) ‚Ñö^‚Åø (2 ‚Ñï.+ m))

 loB-mon : ‚àÄ n ‚Üí loB (suc n) ‚Ñö.< loB n
 loB-mon n = (
     (‚Ñö^‚Åø-StrictMonotone (2 ‚Ñï.+ m) (‚Ñï.suc-‚â§-suc ‚Ñï.zero-‚â§)
      (‚Ñö.0‚â§‚Ñö‚Çä _) (‚Ñö.0‚â§‚Ñö‚Çä _)
      (fst (‚Ñö.inv‚Ñö‚Çä-<-inv‚Ñö‚Çä
    (fromNat (2 ‚Ñï.+ n)) (fromNat (3 ‚Ñï.+ n)))
      (‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _ ‚Ñ§.isRefl‚â§))))

 hiB-mon : ‚àÄ n ‚Üí hiB n ‚Ñö.< hiB (suc n)
 hiB-mon n = ‚Ñö^‚Åø-StrictMonotone (2 ‚Ñï.+ m)
        (‚Ñï.suc-‚â§-suc ‚Ñï.zero-‚â§) (‚Ñö.0‚â§‚Ñö‚Çä _) (‚Ñö.0‚â§‚Ñö‚Çä _)
      ((‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _ (‚Ñ§.suc-‚â§-suc ‚Ñ§.isRefl‚â§)))

 rootSeq‚äÜ : Seq‚äÜ
 rootSeq‚äÜ .Seq‚äÜ.ùï° n = interval‚Ñô
   (rat (loB n))
   (rat (hiB n))
 rootSeq‚äÜ .Seq‚äÜ.ùï°‚äÜ n x (‚â§x , x‚â§) =
   isTrans‚â§·µ£ _ _ _ (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.<Weaken‚â§ _ _ (loB-mon n))) ‚â§x ,
   isTrans‚â§·µ£ _ _ _ x‚â§ (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.<Weaken‚â§ _ _ (hiB-mon n)))




 f‚äÜ : (x : ‚Ñù) (n n' : ‚Ñï)
      (x‚àà : x ‚àà interval‚Ñô (rat (loB n)) (rat (hiB n)))
      (x‚àà' : x ‚àà interval‚Ñô (rat (loB n')) (rat (hiB n'))) ‚Üí
      n ‚Ñï.< n' ‚Üí
      IsBilipschitz.ùíá‚Åª¬π (rootRest n) x ‚â°
      IsBilipschitz.ùíá‚Åª¬π (rootRest n') x
 f‚äÜ x n n' x‚àà x‚àà' n<n' =
   h

  where
  open IsBilipschitz
  ib = rootRest n
  ib' = rootRest n'

  -- zz' : {!!}
  -- zz' =

  ùíá'‚â°ùíá : ‚àÄ y ‚Üí y ‚àà
      interval‚Ñô (rat (fst (inv‚Ñö‚Çä (fromNat (2 ‚Ñï.+ n)))))
            (rat (fromNat (2 ‚Ñï.+ n)))
    ‚Üí (ùíá ib') y ‚â° (ùíá ib) y
  ùíá'‚â°ùíá = elimInClamps·µ£ _ _
    (‚â°Continuous _ _
       ((IsContinuous‚àò _ _
             (Lipschitz‚ÜíIsContinuous _ _ (snd (fl-ebl ib')))
             (IsContinuousClamp (rat (fst (inv‚Ñö‚Çä (fromNat (2 ‚Ñï.+ n))))) _)))
       (IsContinuous‚àò _ _
             (Lipschitz‚ÜíIsContinuous _ _ (snd (fl-ebl ib)))
              (IsContinuousClamp (rat (fst (inv‚Ñö‚Çä (fromNat (2 ‚Ñï.+ n))))) _))
      Œª r ‚Üí cong rat
           ( ((ebl ib') .snd .snd .snd  _
             (inClmp' r))

         ‚àô sym
          (((ebl ib) .snd .snd .snd  _
        (clam‚àà‚Ñöinterval‚Ñô _ _ (‚Ñö.<Weaken‚â§ _ _ (sqrRestr< n)) r))))
        )
    where
    h = ‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (‚Ñ§.suc-‚â§-suc (‚Ñ§.‚â§-suc (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _ n<n')))
    inClmp' : ‚àÄ r ‚Üí ‚Ñö.clamp (fst (inv‚Ñö‚Çä (‚Ñö.[ pos (suc (suc n)) , (1+ 0) ] , tt)))
      [ pos (suc (suc n)) / 1+ 0 ] r
      ‚àà
      ‚Ñöinterval‚Ñô (fst (inv‚Ñö‚Çä (‚Ñö.[ pos (suc (suc n')) , (1+ 0) ] , tt)))
      [ pos (suc (suc n')) / 1+ 0 ]
    inClmp' r =
       ‚Ñö.isTrans‚â§
         (fst (inv‚Ñö‚Çä (‚Ñö.[ pos (suc (suc n')) , (1+ 0) ] , tt)))
         (fst (inv‚Ñö‚Çä (‚Ñö.[ pos (suc (suc n)) , (1+ 0) ] , tt)))
         (‚Ñö.clamp (fst (inv‚Ñö‚Çä (‚Ñö.[ pos (suc (suc n)) , (1+ 0) ]
        , tt)))
      [ pos (suc (suc n)) / 1+ 0 ] r)
         ((fst (‚Ñö.inv‚Ñö‚Çä-‚â§-inv‚Ñö‚Çä
           ([ pos (suc (suc n)) / 1+ 0 ] , _)
           ([ pos (suc (suc n')) / 1+ 0 ] , _)) h))
          (‚Ñö.‚â§clamp (fst (inv‚Ñö‚Çä (‚Ñö.[ pos (suc (suc n)) , (1+ 0) ] , tt)))
      [ pos (suc (suc n)) / 1+ 0 ] r (
        (‚Ñö.<Weaken‚â§
          (fst (inv‚Ñö‚Çä (fromNat (2 ‚Ñï.+ n))))
          (fromNat (2 ‚Ñï.+ n))

         (sqrRestr< n))))
       , ‚Ñö.isTrans‚â§ _
            (‚Ñö.[ pos (suc (suc n)) , (1+ 0) ]) _
           (‚Ñö.clamp‚â§
             (fst (inv‚Ñö‚Çä (‚Ñö.[ pos (suc (suc n)) , (1+ 0) ] , tt)))
             _ r)
           h


  2+n‚â§‚Ñö2+n' = (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _ (‚Ñï.<-weaken (‚Ñï.<-k+ n<n'))))

  x‚Åª¬π‚àà : ùíá‚Åª¬π ib x ‚àà
            interval‚Ñô (rat (fst (inv‚Ñö‚Çä (fromNat (2 ‚Ñï.+ n')))))
            (rat (fromNat (2 ‚Ñï.+ n')))
  x‚Åª¬π‚àà = (isTrans‚â§·µ£ _ _ _ (‚â§‚Ñö‚Üí‚â§·µ£ _ _
           (fst (‚Ñö.inv‚Ñö‚Çä-‚â§-inv‚Ñö‚Çä (fromNat (2 ‚Ñï.+ n)) (fromNat (2 ‚Ñï.+ n')))
        2+n‚â§‚Ñö2+n'))
       (fst x‚àà*))
    , (isTrans‚â§·µ£ _ _ _ (snd x‚àà*) (‚â§‚Ñö‚Üí‚â§·µ£ _ _ 2+n‚â§‚Ñö2+n'))

   where
   x‚àà* : ùíá‚Åª¬π ib x ‚àà
            interval‚Ñô (rat (fst (inv‚Ñö‚Çä (fromNat (2 ‚Ñï.+ n)))))
            (rat (fromNat (2 ‚Ñï.+ n)))
   x‚àà* = ùíá‚Åª¬π‚àà ib x x‚àà

  h : ùíá‚Åª¬π ib x ‚â° ùíá‚Åª¬π ib' x
  h = sym (ùíá‚Åª¬π‚àòùíá ib' (ùíá‚Åª¬π ib x) x‚Åª¬π‚àà )
    ‚àô cong (ùíá‚Åª¬π ib') (ùíá'‚â°ùíá (ùíá‚Åª¬π ib x) (ùíá‚Åª¬π‚àà ib x x‚àà)
       ‚àô ùíá‚àòùíá‚Åª¬π ib _ x‚àà )



 rootSeq‚äÜ‚Üí : Seq‚äÜ‚Üí ‚Ñù rootSeq‚äÜ
 rootSeq‚äÜ‚Üí .Seq‚äÜ‚Üí.fun x n _ = IsBilipschitz.ùíá‚Åª¬π (rootRest n) x
 rootSeq‚äÜ‚Üí .Seq‚äÜ‚Üí.fun‚äÜ = f‚äÜ

 getBounds : ‚àÄ x ‚Üí 0 <·µ£ x ‚Üí Œ£ ‚Ñö (Œª q ‚Üí (0 <·µ£ rat q) √ó (rat q <·µ£ x)) ‚Üí
      Œ£[ M ‚àà ‚Ñï‚Çä‚ÇÅ ] (abs·µ£ x <·µ£ fromNat (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï M)) ‚Üí
      Œ£[ N ‚àà ‚Ñï   ] (x ‚àà interval‚Ñô (rat (loB N)) (rat (hiB N)))
 getBounds x 0<x (q , 0<q , q<x) ((1+ M) , x<1+M ) =
    ùëµ , loB‚â§x , x‚â§hiB
    -- ùëµ ,
   -- (loB‚â§x , x‚â§hiB)
  where

  q‚Çä : ‚Ñö‚Çä
  q‚Çä = (q , ‚Ñö.<‚Üí0< _ (<·µ£‚Üí<‚Ñö _ _ 0<q))

  flr-q = ‚Ñö.floor-frac‚Ñö‚Çä (inv‚Ñö‚Çä q‚Çä)

  loùëµ = suc (fst (fst flr-q))
  hiùëµ = M

  ùëµ = ‚Ñï.max loùëµ hiùëµ

  loB‚â§q : loB ùëµ ‚Ñö.‚â§ q
  loB‚â§q = subst2 (‚Ñö._‚â§_)
     (‚Ñö.inv‚Ñö‚Çä-‚Ñö^‚Åø _ _) (‚Ñö.inv‚Ñö‚Çä-invol q‚Çä)
     (fst (‚Ñö.inv‚Ñö‚Çä-‚â§-inv‚Ñö‚Çä _ _)
      (‚Ñö.isTrans‚â§ (fst (‚Ñö.inv‚Ñö‚Çä q‚Çä)) _ _
        (‚Ñö.<Weaken‚â§ _ _ (‚Ñö.‚â§floor-frac‚Ñö‚Çä (inv‚Ñö‚Çä q‚Çä))) -- (‚Ñö.‚â§floor-frac‚Ñö‚Çä (inv‚Ñö‚Çä q‚Çä))
         (‚Ñö.isTrans‚â§ _ _ _
           (‚Ñö.isTrans‚â§ _ _ _ (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _
             (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _
                 (subst (‚Ñï._‚â§ (loùëµ ^ suc (suc m)))
                   (‚Ñï.¬∑-identity ≥ loùëµ)
                    ((‚Ñï.^-monotone loùëµ 0 (suc m) ‚Ñï.zero-‚â§)))))
             (‚Ñö.‚â°Weaken‚â§ (fromNat (loùëµ ^ suc (suc m)))
               ((fromNat loùëµ ‚Ñö^‚Åø (2 ‚Ñï.+ m)))
                (sym ((‚Ñö.fromNat-^ loùëµ (suc (suc m)))))))
           (‚Ñö^‚Åø-Monotone {fromNat loùëµ} (suc (suc m))
             (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ ‚Ñ§.zero-‚â§pos)
             (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ ‚Ñ§.zero-‚â§pos)
             (((‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _
          (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _
          (‚Ñï.‚â§-trans (‚Ñï.‚â§-suc (‚Ñï.‚â§-suc ‚Ñï.‚â§-refl))
           (‚Ñï.left-‚â§-max {suc (suc loùëµ)} {suc (suc hiùëµ)}))))))))
          ))

  loB‚â§x : rat (loB ùëµ) ‚â§·µ£ x
  loB‚â§x = isTrans‚â§·µ£ _ _ _
    (‚â§‚Ñö‚Üí‚â§·µ£ _ _ loB‚â§q)
      (<·µ£Weaken‚â§·µ£ _ _ q<x)

  1+M‚â§hiB : fromNat (suc M) ‚Ñö.‚â§ (hiB M)
  1+M‚â§hiB =
   subst (fromNat (suc M) ‚Ñö.‚â§_) (sym (‚Ñö.fromNat-^ _ _))
    ((‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _
      (‚Ñï.‚â§-trans (‚Ñï.‚â§-suc ‚Ñï.‚â§-refl) (subst (‚Ñï._‚â§ (suc (suc M) ^ suc (suc m)))
          (sym (cong (suc ‚àò suc) (sym (¬∑-identity ≥ M))))
           (‚Ñï.^-monotone (suc (suc M)) 0 (suc m) ‚Ñï.zero-‚â§ )))
      )))


  x‚â§hiB : x ‚â§·µ£ rat (hiB ùëµ)
  x‚â§hiB =
   isTrans‚â°‚â§·µ£ _ _ _  (sym (abs·µ£Pos _ 0<x))
      (isTrans‚â§·µ£ _ _ _
       (<·µ£Weaken‚â§·µ£ _ _ x<1+M)
         ((‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.isTrans‚â§ (fromNat (suc M)) _ _ 1+M‚â§hiB
           ((‚Ñö^‚Åø-Monotone (suc (suc m))
              (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _ ‚Ñï.zero-‚â§))
              (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _ ‚Ñï.zero-‚â§))
            (‚Ñö.‚â§‚Ñ§‚Üí‚â§‚Ñö _ _ (‚Ñ§.‚Ñï‚â§‚Üípos-‚â§-pos _ _
             ((‚Ñï.right-‚â§-max {suc (suc hiùëµ)} {suc (suc loùëµ)})) ))
             )))
             ))

             )

 ‚Ñù‚Çä‚äÜrootSeq : rootSeq‚äÜ Seq‚äÜ.s‚äá (Œª x ‚Üí (0 <·µ£ x ) , isProp<·µ£ _ _)
 ‚Ñù‚Çä‚äÜrootSeq x 0<x =
   PT.map2
     (getBounds x 0<x)
      (dense‚Ñöin‚Ñù _ _ 0<x)
      (getClamps x)


 0<root : (x : ‚Ñù) (n : ‚Ñï)
     (x‚àà : x ‚àà interval‚Ñô (rat (loB n)) (rat (hiB n))) ‚Üí
     rat [ pos 0 / 1+ 0 ] <·µ£ IsBilipschitz.ùíá‚Åª¬π (rootRest n) x
 0<root x n x‚àà =
   isTrans<‚â§·µ£ _ _ _
     (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.0<‚Ñö‚Çä (inv‚Ñö‚Çä (‚Ñö.[ pos (suc (suc n)) , (1+ 0) ] , tt))))
     (fst (IsBilipschitz.ùíá‚Åª¬π‚àà (rootRest n) x x‚àà))


 open Seq‚äÜ‚Üí.FromIntersection rootSeq‚äÜ‚Üí isSet‚Ñù (Œª x ‚Üí (0 <·µ£ x ) , isProp<·µ£ _ _) ‚Ñù‚Çä‚äÜrootSeq public


 ùíá=f : ‚àÄ n x ‚Üí x ‚àà interval‚Ñô
                     (rat (fst (inv‚Ñö‚Çä (‚Ñö.[ pos (suc (suc n)) , (1+ 0) ] , tt))))
                     (rat (fromNat (2 ‚Ñï.+ n)))  ‚Üí
          (x ^‚Åø (suc (suc m))) ‚â° fst (IsBilipschitz.fl-ebl (rootRest n)) x
 ùíá=f n = elimInClamps·µ£ (rat (fst (inv‚Ñö‚Çä (‚Ñö.[ pos (suc (suc n)) , (1+ 0) ] , tt)))) (rat _)
  (‚â°Continuous _ _
       (IsContinuous‚àò _ _ (IsContinuous^‚Åø (suc (suc m)) ) (IsContinuousClamp (rat _) (rat _)))
       (IsContinuous‚àò _ _ (IsBilipschitz.isContùíá (rootRest n)) (IsContinuousClamp (rat _) (rat _)))
      Œª r ‚Üí ^‚Åø-‚Ñö^‚Åø (suc (suc m)) _ ‚àô cong rat (sym (IsBilipschitz.ebl (rootRest n) .snd .snd .snd
              (‚Ñö.clamp _ _ r) (clam‚àà‚Ñöinterval‚Ñô _ _
               (‚Ñö.<Weaken‚â§ _ _ (sqrRestr< n)) r))))



 bounds‚äÇ : (n : ‚Ñï) (x : ‚Ñù) ‚Üí
      x ‚àà (Œª z ‚Üí Seq‚äÜ.ùï° rootSeq‚äÜ n z) ‚Üí
      ‚àÉ-syntax ‚Ñö‚Çä
      (Œª Œ¥ ‚Üí
         (y : ‚Ñù) ‚Üí x ‚àº[ Œ¥ ] y ‚Üí y ‚àà (Œª z ‚Üí Seq‚äÜ.ùï° rootSeq‚äÜ (suc n) z))
 bounds‚äÇ n x (lo<x , x<hi)  = ‚à£ Œ¥
         , (Œª y ‚Üí (Œª abs< ‚Üí
             let u = isTrans‚â§·µ£ (x -·µ£ y) _
                        (rat (loB n ‚Ñö.- loB (suc n) )) (‚â§abs·µ£ (x -·µ£ y))
                        (<·µ£Weaken‚â§·µ£ (abs·µ£ (x -·µ£ y)) _
                           (isTrans<‚â§·µ£ _ (rat (fst Œ¥)) _ abs<
                       (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.min‚â§ _ _))))
                 v =
                   isTrans‚â§·µ£ (y -·µ£ x) _
                        (rat (hiB (suc n) ‚Ñö.- hiB n )) (‚â§abs·µ£ (y -·µ£ x))
                      (isTrans‚â°‚â§·µ£ _ _ _ (minusComm-abs·µ£ _ _)
                        (<·µ£Weaken‚â§·µ£ (abs·µ£ (x -·µ£ y)) _ (isTrans<‚â§·µ£ _ _ _ abs<
                       (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.min‚â§' _ _)))))
             in  subst2 _‚â§·µ£_
                    (Lùêë.lem--079 {rat (loB n)})
                     Lùêë.lem--079
                    (‚â§·µ£Monotone+·µ£ _ _ _ _
                       lo<x (-·µ£‚â§·µ£ _ _ (isTrans‚â§‚â°·µ£ _ _ _ u (sym (-·µ£-rat‚ÇÇ _ _) ))))
                    , subst2 _‚â§·µ£_
                          (ùêë'.minusPlus _ x)
                          (ùêë'.minusPlus (rat (hiB (suc n))) (rat (hiB n)))
                          (isTrans‚â§‚â°·µ£ _ _ _ (‚â§·µ£Monotone+·µ£ _ _ _ _
                             v x<hi) (cong (_+·µ£ rat (hiB n)) (sym (-·µ£-rat‚ÇÇ _ _))))

                             )
             ‚àò fst (‚àº‚âÉabs<Œµ _ _ _)) ‚à£‚ÇÅ
  where
  Œ¥ = ‚Ñö.min‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä _ _ (loB-mon n))
                        (‚Ñö.<‚Üí‚Ñö‚Çä _ _ (hiB-mon n))
 opaque
  nth-root : ‚Ñù‚Çä ‚Üí ‚Ñù‚Çä
  nth-root (x , 0<x) =
      ‚à©$ x 0<x
    , ‚à©$-elimProp x 0<x {B = Œª y ‚Üí 0 <·µ£ y} (Œª _ ‚Üí isProp<·µ£ _ _)
       (0<root x)

  ^‚Åø‚àò‚Åø‚àö : ‚àÄ x 0<x ‚Üí (fst (nth-root (x , 0<x)) ^‚Åø (2 ‚Ñï.+ m)) ‚â° x
  ^‚Åø‚àò‚Åø‚àö x 0<x = ‚à©$-elimProp x 0<x
    {B = Œª a ‚Üí (a ^‚Åø (2 ‚Ñï.+ m)) ‚â° x}
    (Œª _ ‚Üí isSet‚Ñù _ _)
      Œª n x‚àà ‚Üí
           ùíá=f _ _ (IsBilipschitz.ùíá‚Åª¬π‚àà (rootRest n) x x‚àà)
        ‚àô IsBilipschitz.ùíá‚àòùíá‚Åª¬π (rootRest n) x x‚àà

  ‚Åø‚àö‚àò^‚Åø : ‚àÄ x 0<x ‚Üí fst (nth-root (x  ^‚Åø (2 ‚Ñï.+ m) , 0<x^‚Åø x (2 ‚Ñï.+ m) 0<x)) ‚â° x
  ‚Åø‚àö‚àò^‚Åø x 0<x = ‚à©$-elimProp (x  ^‚Åø (2 ‚Ñï.+ m)) (0<x^‚Åø x (2 ‚Ñï.+ m) 0<x)
    {B = Œª a ‚Üí a ‚â° x}
    (Œª _ ‚Üí isSet‚Ñù _ _)
     Œª n x‚àà' ‚Üí
      let 0<n = ‚Ñï.suc-‚â§-suc ‚Ñï.zero-‚â§
          zzs : rat (fst (inv‚Ñö‚Çä (_/_.[ pos (suc (suc n)) , (1+ 0) ] , tt))) ‚â§·µ£ x
          zzs = (^‚ÅøMonotone‚Åª¬π (suc (suc m)) 0<n
                 (0<A n) 0<x (isTrans‚â°‚â§·µ£ _ _ _ (^‚Åø-‚Ñö^‚Åø _ _) (fst x‚àà')))

          zzss : x ‚â§·µ£ rat [ pos (suc (suc n)) / 1+ 0 ]
          zzss = (^‚ÅøMonotone‚Åª¬π (suc (suc m)) 0<n 0<x (0<B n)
                     (isTrans‚â§‚â°·µ£ _ _ _ (snd x‚àà') (sym (^‚Åø-‚Ñö^‚Åø _ _))))
          x‚àà : (rat (fst (inv‚Ñö‚Çä (_/_.[ pos (suc (suc n)) , (1+ 0) ] , tt))) ‚â§·µ£ x) √ó
               (x ‚â§·µ£ rat (fromNat (2 ‚Ñï.+ n)))
          x‚àà =  zzs , zzss




      in cong (fst (IsBilipschitz.f‚Åª¬πR-L (rootRest n)))
                 (ùíá=f n x x‚àà)
                ‚àô IsBilipschitz.ùíá‚Åª¬π‚àòùíá (rootRest n) x x‚àà


  nth-root-cont : IsContinuousWithPred
          (Œª x ‚Üí _ , isProp<·µ£ _ _) (curry (fst ‚àò nth-root))
  nth-root-cont = ‚à©$-cont' _ _
     bounds‚äÇ _ _
      Œª n ‚Üí AsContinuousWithPred _ _
               (IsBilipschitz.isContùíá‚Åª¬π (rootRest n))

  ‚ÑöApprox‚Ñô-nth-root : ‚ÑöApprox‚Ñô'
                          (Œª x ‚Üí (0 <·µ£ x) , isProp<·µ£ _ _)
                          (Œª x ‚Üí (0 <·µ£ x) , isProp<·µ£ _ _)
                          (curry (nth-root))
  ‚ÑöApprox‚Ñô-nth-root q q‚àà =
   let q‚Çä = (q , ‚Ñö.<‚Üí0< _ (<·µ£‚Üí<‚Ñö _ _ q‚àà))
       (m , q<m) = ‚Ñö.ceil‚Ñö‚Çä q‚Çä
       (n' , q‚àà') = getBounds (rat q) q‚àà
          (fst (/2‚Çä q‚Çä) ,
            snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä (/2‚Çä q‚Çä))
              , <‚Ñö‚Üí<·µ£ _ _ (x/2<x q‚Çä))
               (1+ (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï m) , isTrans<·µ£ _ _ _
                   (isTrans‚â°<·µ£ _ _ _
                     (abs·µ£Pos _ (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä q‚Çä)))
                     (<‚Ñö‚Üí<·µ£ _ _ q<m))
                   (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.<‚Ñ§‚Üí<‚Ñö _ _
                     ‚Ñ§.isRefl‚â§)))
       (a , b , c , d) =
          ( (IsBilipschitz.‚ÑöApprox‚Ñô-ùíá‚Åª¬π (rootRest n')))
   in a q q‚àà' , (Œª Œµ ‚Üí
      isTrans<‚â§·µ£ _ _ _ (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä (inv‚Ñö‚Çä (fromNat (2 ‚Ñï.+ _)))))
         (fst (b q q‚àà' Œµ))) , c q q‚àà' ,
      d q q‚àà'
      ‚àô sym (‚à©$-‚àà‚Çô (rat q) q‚àà n' q‚àà')


 nth-pow-root-iso‚Çä‚ÇÇ : Iso ‚Ñù‚Çä ‚Ñù‚Çä
 nth-pow-root-iso‚Çä‚ÇÇ .Iso.fun (x , 0<x) =
   (x ^‚Åø (2 ‚Ñï.+ m)) , 0<x^‚Åø _ _ 0<x
 nth-pow-root-iso‚Çä‚ÇÇ .Iso.inv = nth-root
 nth-pow-root-iso‚Çä‚ÇÇ .Iso.rightInv =
   ‚Ñù‚Çä‚â° ‚àò uncurry ^‚Åø‚àò‚Åø‚àö
 nth-pow-root-iso‚Çä‚ÇÇ .Iso.leftInv =
   ‚Ñù‚Çä‚â° ‚àò uncurry ‚Åø‚àö‚àò^‚Åø


root : ‚Ñï‚Çä‚ÇÅ ‚Üí ‚Ñù‚Çä ‚Üí  ‚Ñù‚Çä
root one x = x
root (2+ n) x = NthRoot.nth-root n x

‚ÑöApprox‚Ñô-root : ‚àÄ n ‚Üí ‚ÑöApprox‚Ñô'
                        (Œª x ‚Üí (0 <·µ£ x) , isProp<·µ£ _ _)
                        (Œª x ‚Üí (0 <·µ£ x) , isProp<·µ£ _ _)
                        (curry ((root n)))
‚ÑöApprox‚Ñô-root one q q‚àà = (Œª _ ‚Üí q) , (Œª _ ‚Üí q‚àà) , (Œª _ _ ‚Üí refl‚àº _ _) , limConstRat _ _

‚ÑöApprox‚Ñô-root (2+ n) = NthRoot.‚ÑöApprox‚Ñô-nth-root n

IsContinuousRoot : ‚àÄ n ‚Üí IsContinuousWithPred
         (Œª x ‚Üí _ , isProp<·µ£ _ _)
         Œª x 0<x ‚Üí fst (root n (x , 0<x))
IsContinuousRoot one =
  AsContinuousWithPred _ _ IsContinuousId
IsContinuousRoot (2+ n) = NthRoot.nth-root-cont n


nth-pow-root-iso : ‚Ñï‚Çä‚ÇÅ ‚Üí Iso ‚Ñù‚Çä ‚Ñù‚Çä
nth-pow-root-iso k .Iso.fun (x , 0<x) = (x ^‚Åø ‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï k) , 0<x^‚Åø _ _ 0<x
nth-pow-root-iso k .Iso.inv = root k
nth-pow-root-iso one .Iso.rightInv _ = ‚Ñù‚Çä‚â° (¬∑IdL _)
nth-pow-root-iso (2+ n) .Iso.rightInv = Iso.rightInv
  (NthRoot.nth-pow-root-iso‚Çä‚ÇÇ n)
nth-pow-root-iso one .Iso.leftInv _ = ‚Ñù‚Çä‚â° (¬∑IdL _)
nth-pow-root-iso (2+ n) .Iso.leftInv = Iso.leftInv
  (NthRoot.nth-pow-root-iso‚Çä‚ÇÇ n)
