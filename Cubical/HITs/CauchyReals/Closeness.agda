{-# OPTIONS --safe #-}
module Cubical.HITs.CauchyReals.Closeness where

open import Cubical.Foundations.Prelude hiding (Path)
open import Cubical.Foundations.Structure
open import Cubical.Foundations.Function
open import Cubical.Foundations.Equiv hiding (_‚ñ†)
open import Cubical.Foundations.HLevels
open import Cubical.Functions.FunExtEquiv

import Cubical.Functions.Logic as L

open import Cubical.Data.Sigma hiding (Path)
open import Cubical.Data.Rationals as ‚Ñö
open import Cubical.Data.Rationals.Order as ‚Ñö
open import Cubical.Data.Rationals.Order.Properties as ‚Ñö

open import Cubical.HITs.PropositionalTruncation as PT

open import Cubical.HITs.CauchyReals.Base
open import Cubical.HITs.CauchyReals.Lems



-- HoTT Lemma (11.3.8)
refl‚àº : ‚àÄ r Œµ ‚Üí r ‚àº[ Œµ ] r
refl‚àº = Elim‚Ñù-Prop.go w
 where
 w : Elim‚Ñù-Prop _
 w .Elim‚Ñù-Prop.ratA x x‚ÇÅ =
   rat-rat x x x‚ÇÅ
     (subst ((‚Ñö.- (fst x‚ÇÅ)) ‚Ñö.<_) (sym (+InvR x))
       (minus-< 0 (fst x‚ÇÅ) ((0<‚Üí< (fst x‚ÇÅ) (snd x‚ÇÅ)))))
        --(minus-< 0 (fst x‚ÇÅ) (snd x‚ÇÅ)))
        ((subst ( ‚Ñö._< (fst x‚ÇÅ)) (sym (+InvR x)) ((0<‚Üí< (fst x‚ÇÅ) (snd x‚ÇÅ)))))
 w .Elim‚Ñù-Prop.limA x p _ Œµ =
  let e1 = /2‚Çä (/2‚Çä Œµ)
      zz = +CancelL- (fst (/2‚Çä Œµ)) (fst (/2‚Çä Œµ)) (fst Œµ)
            (Œµ/2+Œµ/2‚â°Œµ (fst Œµ))
          ‚àô cong ( ‚Ñö._-_ (fst Œµ)) (sym (Œµ/2+Œµ/2‚â°Œµ (fst (/2‚Çä Œµ))))
  in lim-lim x x Œµ e1 e1 p p
        (subst (0<_) zz (snd ((/2‚Çä Œµ))))
       (subst (Œª e ‚Üí x e1 ‚àº[ e ] x e1)
       (‚Ñö‚Çä‚â° (Œµ/2+Œµ/2‚â°Œµ (fst (/2‚Çä Œµ)) ‚àô
          zz ))
       (p e1 e1))
 w .Elim‚Ñù-Prop.isPropA _ = isPropŒ† Œª _ ‚Üí isProp‚àº _ _ _


-- HoTT Lemma (11.3.12)
sym‚àº : ‚àÄ r r' Œµ ‚Üí r ‚àº[ Œµ ] r' ‚Üí r' ‚àº[ Œµ ] r
sym‚àº r r' Œµ (rat-rat q r‚ÇÅ .Œµ x x‚ÇÅ) =
 rat-rat r‚ÇÅ q Œµ (subst ((‚Ñö.- fst Œµ) ‚Ñö.<_)
  ((‚Ñö.-Distr' q r‚ÇÅ ‚àô ‚Ñö.+Comm (‚Ñö.- q) r‚ÇÅ))
    $ minus-< (q ‚Ñö.- r‚ÇÅ) (fst Œµ) x‚ÇÅ)
  (subst2 ‚Ñö._<_ (‚Ñö.-Distr' q r‚ÇÅ ‚àô ‚Ñö.+Comm (‚Ñö.- q) r‚ÇÅ)
    (‚Ñö.-Invol (fst Œµ)) (minus-< (‚Ñö.- fst Œµ)  (q ‚Ñö.- r‚ÇÅ) x))

sym‚àº r r' Œµ (rat-lim q y .Œµ Œ¥ p v x) =
 lim-rat y q Œµ Œ¥ p v (sym‚àº _ _ _ x)
sym‚àº r r' Œµ (lim-rat x r‚ÇÅ .Œµ Œ¥ p v x‚ÇÅ) =
  rat-lim r‚ÇÅ x Œµ Œ¥ p v (sym‚àº _ _ _ x‚ÇÅ)
sym‚àº r r' Œµ (lim-lim x y .Œµ Œ¥ Œ∑ p p' v x‚ÇÅ) =
 let z = ((sym‚àº (x Œ¥) (y Œ∑) _ x‚ÇÅ))
     z' = subst (Œª xx ‚Üí Œ£ _ Œª v ‚Üí y Œ∑ ‚àº[ (fst Œµ ‚Ñö.- xx) , v ] x Œ¥)
            (‚Ñö.+Comm (fst Œ¥) (fst Œ∑))
             (v , z)
 in lim-lim y x Œµ Œ∑ Œ¥  p' p (fst z') (snd z')
sym‚àº r r' Œµ (isProp‚àº .r .Œµ .r' x x‚ÇÅ i) =
  isProp‚àº r' Œµ r (sym‚àº _ _ _ x) (sym‚àº _ _ _ x‚ÇÅ) i

-- HoTT Theorem (11.3.9)
isSet‚Ñù : isSet ‚Ñù
isSet‚Ñù = lem722 (Œª r r' ‚Üí ‚àÄ Œµ ‚Üí  r ‚àº[ Œµ ] r')
  (Œª _ _ ‚Üí isPropŒ† Œª _ ‚Üí isProp‚àº _ _ _)
   eq‚Ñù
   refl‚àº

‚àº‚âÉ‚â° : ‚àÄ r r' ‚Üí (‚àÄ Œµ ‚Üí r ‚àº[ Œµ ] r')¬†‚âÉ  (r ‚â° r')
‚àº‚âÉ‚â° r r' = propBiimpl‚ÜíEquiv (isPropŒ† Œª _ ‚Üí isProp‚àº _ _ _) (isSet‚Ñù _ _) (eq‚Ñù _ _)
  (J (Œª r' _ ‚Üí ‚àÄ Œµ ‚Üí r ‚àº[ Œµ ] r') (refl‚àº _))

‚â°‚Üí‚àº : ‚àÄ {Œµ r r'} ‚Üí r ‚â° r' ‚Üí r ‚àº[ Œµ ] r'
‚â°‚Üí‚àº {Œµ} {r} {r'} p = invEq (‚àº‚âÉ‚â° r r') p Œµ




rat-rat' : ‚Ñö ‚Üí ‚Ñö‚Çä ‚Üí ‚Ñö ‚Üí hProp ‚Ñì-zero
rat-rat' q Œµ r .fst = ((‚Ñö.- fst Œµ) ‚Ñö.< (q ‚Ñö.- r)) √ó ((q ‚Ñö.- r) ‚Ñö.< fst Œµ)
rat-rat' q Œµ r .snd = isProp√ó (‚Ñö.isProp< (‚Ñö.- fst Œµ) (q ‚Ñö.- r))
                        (‚Ñö.isProp< (q ‚Ñö.- r) (fst Œµ))


rat-rat'-sym : ‚àÄ q Œµ r ‚Üí ‚ü® rat-rat' q Œµ r ‚ü© ‚Üí ‚ü® rat-rat' r Œµ q ‚ü©
rat-rat'-sym q Œµ r x .fst =
  subst ((‚Ñö.- fst Œµ) ‚Ñö.<_) (‚Ñö.-Distr' q r ‚àô ‚Ñö.+Comm (‚Ñö.- q) r)
   (minus-< (q ‚Ñö.- r) (fst Œµ) (snd x))
rat-rat'-sym q Œµ r x .snd =
  subst2 (‚Ñö._<_) (‚Ñö.-Distr' q r ‚àô ‚Ñö.+Comm (‚Ñö.- q) r) (‚Ñö.-Invol (fst Œµ))
   (minus-<  (‚Ñö.- fst Œµ) (q ‚Ñö.- r) (fst x))

Œ£< : (‚Ñö‚Çä ‚Üí Type) ‚Üí (‚Ñö ‚Üí Type)
Œ£< P q = Œ£ _ (P ‚àò (q ,_) )

rat-lim' : ‚Ñö‚Çä ‚Üí (‚Ñö‚Çä ‚Üí ‚Ñö‚Çä ‚Üí hProp ‚Ñì-zero) ‚Üí hProp ‚Ñì-zero
rat-lim' Œµ a =
  (‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ]
      Œ£< (fst ‚àò a Œ¥) (((fst Œµ) ‚Ñö.- (fst Œ¥)))  ) , squash‚ÇÅ

lim-lim' : ‚Ñö‚Çä ‚Üí (‚Ñö‚Çä ‚Üí ‚Ñö‚Çä ‚Üí ‚Ñö‚Çä ‚Üí hProp ‚Ñì-zero) ‚Üí hProp ‚Ñì-zero
lim-lim' Œµ a =
  (‚àÉ[ (Œ¥ , Œ∑)  ‚àà ‚Ñö‚Çä √ó ‚Ñö‚Çä ]
      Œ£< (fst ‚àò a Œ¥ Œ∑) ((fst Œµ) ‚Ñö.- (fst Œ¥ ‚Ñö.+ fst Œ∑)) ) , squash‚ÇÅ


w-prop' : (‚Ñö‚Çä ‚Üí hProp ‚Ñì-zero) ‚Üí Type
w-prop' = Œª ‚ñ≥ ‚Üí ‚àÄ Œµ ‚Üí ‚ü®
               ( ‚ñ≥ Œµ ) L.‚áî (L.‚àÉ[ Œ∏ ‚à∂ ‚Ñö‚Çä ]
                  (L.‚àÉ[ v ] (‚ñ≥ (((fst Œµ) ‚Ñö.- (fst Œ∏)) , v)))) ‚ü©


substŒ£< : (P : Œ£ (‚Ñö‚Çä ‚Üí hProp ‚Ñì-zero) w-prop') ‚Üí ‚àÄ {x y} ‚Üí x ‚â° y ‚Üí
             Œ£< (fst ‚àò (fst P)) x ‚Üí Œ£< (fst ‚àò (fst P)) y
substŒ£< P = subst (Œ£< (fst ‚àò (fst P)))


pre-w-rel' : Œ£ (‚Ñö‚Çä ‚Üí hProp ‚Ñì-zero) w-prop' ‚Üí
           Œ£ (‚Ñö‚Çä ‚Üí hProp ‚Ñì-zero) w-prop' ‚Üí ‚Ñö‚Çä ‚Üí ‚Ñö‚Çä ‚Üí Type

w-rel'  : Œ£ (‚Ñö‚Çä ‚Üí hProp ‚Ñì-zero) w-prop' ‚Üí
           Œ£ (‚Ñö‚Çä ‚Üí hProp ‚Ñì-zero) w-prop' ‚Üí ‚Ñö‚Çä ‚Üí Type

pre-w-rel' = Œª (‚ñ≥ , _) (‚óª , _) Œµ Œ∑
       ‚Üí (‚ü® ‚ñ≥ Œ∑ ‚ü© ‚Üí  ‚ü® ‚óª (Œµ ‚Ñö‚Çä+ Œ∑) ‚ü©)


w-rel' = Œª ‚ñ≥ ‚óª Œµ ‚Üí
     ‚àÄ Œ∑ ‚Üí pre-w-rel' ‚ñ≥ ‚óª Œµ Œ∑
           √ó pre-w-rel' ‚óª ‚ñ≥  Œµ Œ∑

w-rel'-sym : ‚àÄ ‚ñ≥ ‚óª Œµ ‚Üí w-rel' ‚ñ≥ ‚óª Œµ ‚Üí w-rel' ‚óª ‚ñ≥  Œµ
w-rel'-sym ‚ñ≥ ‚óª Œµ x Œ∑ = fst Œ£-swap-‚âÉ (x Œ∑)

w-rel'‚áí : ‚àÄ x y ‚Üí (‚àÄ Œµ ‚Üí w-rel' x y Œµ) ‚Üí ‚àÄ Œµ
          ‚Üí ‚ü® fst x Œµ ‚ü© ‚Üí ‚ü® fst y Œµ ‚ü©
w-rel'‚áí x y x‚ÇÅ Œµ x‚ÇÇ =
 let z = fst (snd x Œµ) x‚ÇÇ
     z' = PT.map (Œª (Œ¥ , xx) ‚Üí
              /2‚Çä Œ¥ , PT.map
                  (Œª (xxx , xxx') ‚Üí
                    substŒ£< y
                      (cong (Œª zz ‚Üí fst (/2‚Çä Œ¥) ‚Ñö.+ (fst Œµ ‚Ñö.- zz))
                        (sym (Œµ/2+Œµ/2‚â°Œµ (fst Œ¥))) ‚àô
                          lem--08 {fst (/2‚Çä Œ¥)} {fst Œµ})
                       (_ , (fst (x‚ÇÅ (/2‚Çä Œ¥) _) xxx')))
                      xx) z
 in snd (snd y Œµ)
       z'

w-rel'‚Üí‚â° : ‚àÄ x y ‚Üí (‚àÄ Œµ ‚Üí w-rel' x y Œµ) ‚Üí x ‚â° y
w-rel'‚Üí‚â° x y p =
  Œ£‚â°Prop (Œª x‚ÇÅ ‚Üí isPropŒ† Œª x ‚Üí
     (snd (x‚ÇÅ x L.‚áî
     L.‚àÉ[‚à∂]-syntax
     (Œª Œ∏ ‚Üí L.‚àÉ[]-syntax (Œª v‚ÇÅ ‚Üí x‚ÇÅ ((fst x ‚Ñö.- fst Œ∏) , v‚ÇÅ))))))
      (funExt Œª Œµ ‚Üí
   L.‚áîtoPath (w-rel'‚áí x y p Œµ)
     (w-rel'‚áí y x (Œª Œµ‚ÇÅ ‚Üí w-rel'-sym x y Œµ‚ÇÅ (p Œµ‚ÇÅ)) Œµ))



r-r : ‚Ñö ‚Üí ‚Ñö ‚Üí Œ£ _ w-prop'
r-r q r .fst Œµ = rat-rat' q Œµ r
r-r q r .snd Œµ .fst x =
 let z = getŒ∏ Œµ (q ‚Ñö.- r) x
 in ‚à£ fst z , ‚à£ fst (snd z)  , snd (snd z) ‚à£‚ÇÅ ‚à£‚ÇÅ
r-r q r .snd Œµ .snd =
  PT.rec (snd (rat-rat' q Œµ r)) (uncurry Œª q* ‚Üí
   PT.rec (snd (rat-rat' q Œµ r))
     Œª (x‚ÇÅ , y) ‚Üí
       weak0<' (q ‚Ñö.- r) Œµ q* (fst y) , weak0< (q ‚Ñö.- r) Œµ q* (snd y) )



r-l : (a : ‚Ñö‚Çä ‚Üí Œ£ _ w-prop')

        ‚Üí Œ£ _ w-prop'
r-l a .fst Œµ = rat-lim' Œµ (fst ‚àò a)
r-l a .snd Œµ .fst =
  PT.rec
      squash‚ÇÅ
       Œª (q' , v , pp) ‚Üí
          let aa = fst ((snd (a q')) ((fst Œµ ‚Ñö.- fst q') , v)) pp
          in PT.map
              (map-snd Œª {a''} ‚Üí
               (PT.map
                Œª x‚ÇÇ ‚Üí
                  strength-lem-01 Œµ q' a'' (fst x‚ÇÇ) ,
                   ‚à£ q' ,
                    subst {A = ‚Ñö}
                    (Œª qq ‚Üí Œ£ (0< qq)
                        (Œª x‚ÇÉ ‚Üí ‚ü® a q' .fst (qq , x‚ÇÉ) ‚ü©))
                    (sym (‚Ñö.+Assoc (fst Œµ) (‚Ñö.- (fst q')) (‚Ñö.- (fst a'')))
                      ‚àô‚àô cong (fst Œµ ‚Ñö.+_)
                            (‚Ñö.+Comm (‚Ñö.- (fst q')) (‚Ñö.- (fst a'')))
                      ‚àô‚àô (‚Ñö.+Assoc (fst Œµ) (‚Ñö.- (fst a'')) (‚Ñö.- (fst q')))) x‚ÇÇ ‚à£‚ÇÅ))
              aa

r-l a .snd Œµ .snd =
       PT.rec
      squash‚ÇÅ
        (uncurry Œª q' ‚Üí
           PT.rec squash‚ÇÅ (uncurry Œª v ‚Üí
              PT.map Œª (q'' , zz) ‚Üí
                let zzz = snd (snd (a q'') (fst Œµ ‚Ñö.- fst q'' ,
                     strength-lem-01 Œµ q' q'' (fst zz)))
                            ‚à£ q' ,
                              ‚à£ subst {A = ‚Ñö}
                       (Œª qq ‚Üí Œ£ (0< qq)
                        (Œª x‚ÇÉ ‚Üí ‚ü® a q'' .fst (qq , x‚ÇÉ) ‚ü©))
                         ((sym (‚Ñö.+Assoc (fst Œµ) (‚Ñö.- (fst q')) (‚Ñö.- (fst q'')))
                      ‚àô‚àô cong (fst Œµ ‚Ñö.+_)
                            (‚Ñö.+Comm (‚Ñö.- (fst q')) (‚Ñö.- (fst q'')))
                      ‚àô‚àô (‚Ñö.+Assoc (fst Œµ) (‚Ñö.- (fst q'')) (‚Ñö.- (fst q')))))
                         zz ‚à£‚ÇÅ ‚à£‚ÇÅ
                in q'' , _ , zzz))


l-l : (ùïí : ‚Ñö‚Çä ‚Üí ‚Ñö‚Çä ‚Üí Œ£ _ w-prop')

  ‚Üí Œ£ (‚Ñö‚Çä ‚Üí hProp ‚Ñì-zero) w-prop'

l-l ùïí .fst Œµ = lim-lim' Œµ (Œª x x‚ÇÅ ‚Üí fst (ùïí x x‚ÇÅ))
l-l ùïí .snd Œµ .fst =
 PT.rec squash‚ÇÅ
 (Œª ((Œ¥ , Œ∑) , (v , y)) ‚Üí
    PT.map (map-snd (Œª {q'} ‚Üí PT.map
          (Œª (x , x') ‚Üí strength-lem-01 Œµ (Œ¥ ‚Ñö‚Çä+ Œ∑) q' x , ‚à£ (Œ¥ , Œ∑) ,
            subst (Œ£< (fst ‚àò (fst (ùïí Œ¥ Œ∑))))
              (+AssocCommR (fst Œµ) (‚Ñö.- (fst Œ¥ ‚Ñö.+ fst Œ∑))
                (‚Ñö.- fst q'))
                (x , x')
            ‚à£‚ÇÅ )))
              (fst (snd (ùïí Œ¥ Œ∑) _) y))
l-l ùïí .snd Œµ .snd =
  PT.rec squash‚ÇÅ
     (uncurry Œª q' ‚Üí
       PT.rec squash‚ÇÅ (uncurry Œª v ‚Üí
         PT.map (map-snd
           Œª {(Œ¥ , Œ∑)} (x , x') ‚Üí strength-lem-01 Œµ q' (Œ¥ ‚Ñö‚Çä+ Œ∑) x ,
            (snd (snd (ùïí Œ¥ Œ∑) _) ‚à£ q' , ‚à£
              subst (Œ£< (fst ‚àò (fst (ùïí Œ¥ Œ∑))))
               (sym ((+AssocCommR (fst Œµ) (‚Ñö.- (fst Œ¥ ‚Ñö.+ fst Œ∑))
                (‚Ñö.- fst q'))))
               (x , x') ‚à£‚ÇÅ ‚à£‚ÇÅ) )))

rel-r-r : ‚àÄ ùï¢ ‚Üí (q r : ‚Ñö) (Œµ : Œ£ ‚Ñö 0<_) ‚Üí
     (‚Ñö.- fst Œµ) ‚Ñö.< (q ‚Ñö.- r) ‚Üí
     (q ‚Ñö.- r) ‚Ñö.< fst Œµ ‚Üí w-rel' (r-r ùï¢ q) (r-r ùï¢ r) Œµ
rel-r-r ùï¢ q r Œµ x x‚ÇÅ Œ∑ =
 let z : (((q ‚Ñö.- r) ‚Ñö.+ (ùï¢ ‚Ñö.- q)) ‚â° (ùï¢ ‚Ñö.- r))
     z = lem--09 {q} {r} {ùï¢}
 in (Œª (u , v) ‚Üí
      subst2 ‚Ñö._<_
           (sym $ ‚Ñö.-Distr (fst Œµ) (fst Œ∑))
           z
            (‚Ñö.<Monotone+ (‚Ñö.- fst Œµ) (q ‚Ñö.- r)
               (‚Ñö.- fst Œ∑)  (ùï¢ ‚Ñö.- q) x u)

               , subst (‚Ñö._< fst Œµ ‚Ñö.+ fst Œ∑)
                   z
                 (‚Ñö.<Monotone+ (q ‚Ñö.- r) (fst Œµ) (ùï¢ ‚Ñö.- q) (fst Œ∑)  x‚ÇÅ v))
  , (Œª (u , v) ‚Üí
       let zz = ‚Ñö.<Monotone+  (‚Ñö.- (fst Œµ)) (‚Ñö.- (q ‚Ñö.- r))
                       (‚Ñö.- fst Œ∑) (ùï¢ ‚Ñö.- r)
                           (‚Ñö.minus-< (q ‚Ñö.- r) (fst Œµ)   x‚ÇÅ) u

       in subst2 ‚Ñö._<_ (sym $ ‚Ñö.-Distr (fst Œµ) (fst Œ∑) )
                   (lem--010 {q} {r} {ùï¢}) zz
               ,
           let zz = ‚Ñö.<Monotone+
                      (‚Ñö.- (q ‚Ñö.- r)) (‚Ñö.- (‚Ñö.- (fst Œµ))) (ùï¢¬†‚Ñö.- r)
                       (fst Œ∑) (minus-< (‚Ñö.- (fst Œµ)) (q ‚Ñö.- r) x) v
           in subst2 {x = (‚Ñö.- (q ‚Ñö.- r)) ‚Ñö.+ (ùï¢ ‚Ñö.- r)} {ùï¢ ‚Ñö.- q}
                {z = (‚Ñö.- (‚Ñö.- fst Œµ)) ‚Ñö.+ fst Œ∑} {fst (Œµ ‚Ñö‚Çä+ Œ∑)}
               ‚Ñö._<_
                (lem--010 {q} {r} {ùï¢}) (lem--012 {fst Œµ} {fst Œ∑}) zz)

rel-r-l : ‚àÄ ùï¢ ‚Üí (q : ‚Ñö) (y : ‚Ñö‚Çä ‚Üí Œ£ (‚Ñö‚Çä ‚Üí hProp ‚Ñì-zero) w-prop')
     (Œµ : ‚Ñö‚Çä) (p : (Œ¥ Œµ‚ÇÅ : ‚Ñö‚Çä) ‚Üí w-rel' (y Œ¥) (y Œµ‚ÇÅ) (Œ¥ ‚Ñö‚Çä+ Œµ‚ÇÅ))
     (Œ¥ : ‚Ñö‚Çä) (v‚ÇÅ : 0< (fst Œµ ‚Ñö.- fst Œ¥)) ‚Üí
     w-rel' (r-r ùï¢ q) (y Œ¥) ((fst Œµ ‚Ñö.- fst Œ¥) , v‚ÇÅ) ‚Üí
     w-rel' (r-r ùï¢ q) (r-l y) Œµ
rel-r-l ùï¢ q y Œµ p Œ¥ v‚ÇÅ x Œ∑ .fst xx' =
 let z = fst (x Œ∑) xx'
 in ‚à£ Œ¥ , (subst {x = fst Œ∑ ‚Ñö.+ (fst Œµ ‚Ñö.- fst Œ¥)}
               {y = (fst (Œµ ‚Ñö‚Çä+ Œ∑) ‚Ñö.- fst Œ¥)} 0<_
               (lem--013 {fst Œ∑} {fst Œµ} {fst Œ¥})
               (+0< (fst Œ∑) (fst Œµ ‚Ñö.- fst Œ¥) (snd Œ∑) v‚ÇÅ) ,
        subst (fst ‚àò fst (y Œ¥)) (‚Ñö‚Çä‚â° (lem--014 {fst Œµ} {fst Œ¥} {fst Œ∑})) z ) ‚à£‚ÇÅ

rel-r-l ùï¢ q y Œµ p Œ¥ v‚ÇÅ x Œ∑ .snd =
   PT.rec (snd (rat-rat' ùï¢ (Œµ ‚Ñö‚Çä+ Œ∑) q))
    Œª (œÉ* , (xx , xx')) ‚Üí
      let z = fst (p _ _ _) xx'
          z' = snd (x _) z
      in subst
              {x = (((fst Œµ ‚Ñö.- fst Œ¥) , v‚ÇÅ) ‚Ñö‚Çä+
                 ((œÉ* ‚Ñö‚Çä+ Œ¥) ‚Ñö‚Çä+ ((fst Œ∑ ‚Ñö.- fst œÉ*) , xx)))}
                {(Œµ ‚Ñö‚Çä+ Œ∑)}
             (Œª xxx ‚Üí ‚ü® rat-rat' ùï¢ xxx q ‚ü©)
               (‚Ñö‚Çä‚â° (lem--015 {fst Œµ} {fst Œ¥} {fst œÉ*} {fst Œ∑})) z'

rel-l-l' : (x y : ‚Ñö‚Çä ‚Üí Œ£ (‚Ñö‚Çä ‚Üí hProp ‚Ñì-zero) w-prop') (Œµ Œ¥ Œ∑ : ‚Ñö‚Çä)
     (p : (Œ¥‚ÇÅ Œµ‚ÇÅ : ‚Ñö‚Çä) ‚Üí w-rel' (x Œ¥‚ÇÅ) (x Œµ‚ÇÅ) (Œ¥‚ÇÅ ‚Ñö‚Çä+ Œµ‚ÇÅ))
     (p' : (Œ¥‚ÇÅ Œµ‚ÇÅ : ‚Ñö‚Çä) ‚Üí w-rel' (y Œ¥‚ÇÅ) (y Œµ‚ÇÅ) (Œ¥‚ÇÅ ‚Ñö‚Çä+ Œµ‚ÇÅ))
     (v‚ÇÅ : 0< (fst Œµ ‚Ñö.- (fst Œ¥ ‚Ñö.+ fst Œ∑))) ‚Üí ‚àÄ Œ∑' ‚Üí
     (‚àÄ Œ∑' ‚Üí
       pre-w-rel' (x Œ¥) (y Œ∑) ((fst Œµ ‚Ñö.- (fst Œ¥ ‚Ñö.+ fst Œ∑)) , v‚ÇÅ) Œ∑') ‚Üí
     pre-w-rel' (r-l x) (r-l y) Œµ Œ∑'
rel-l-l' x y Œµ Œ¥ Œ∑ p p' v‚ÇÅ Œ∑' x‚ÇÅ =
   PT.map (Œª (a , (xx , xx')) ‚Üí
       let zz = fst (p a Œ¥ _) xx'
           zz' = x‚ÇÅ _ zz
       in Œ∑ ,
            subst (‚Ñö.0<_)
                (lem-02  (fst Œµ) (fst Œ¥) (fst Œ∑) (fst Œ∑'))
                  (+0< (fst Œµ ‚Ñö.- (fst Œ¥ ‚Ñö.+ fst Œ∑))
                   (fst (Œ¥ ‚Ñö‚Çä+ Œ∑'))  v‚ÇÅ (snd (Œ¥ ‚Ñö‚Çä+ Œ∑')))
             , (subst (fst ‚àò y Œ∑ .fst)
             (‚Ñö‚Çä‚â° (lem-01 (fst Œµ) (fst Œ¥) (fst Œ∑) (fst Œ∑') (fst a))) zz'))



rel-l-l : (x y : ‚Ñö‚Çä ‚Üí Œ£ (‚Ñö‚Çä ‚Üí hProp ‚Ñì-zero) w-prop') (Œµ Œ¥ Œ∑ : ‚Ñö‚Çä)
     (p : (Œ¥‚ÇÅ Œµ‚ÇÅ : ‚Ñö‚Çä) ‚Üí w-rel' (x Œ¥‚ÇÅ) (x Œµ‚ÇÅ) (Œ¥‚ÇÅ ‚Ñö‚Çä+ Œµ‚ÇÅ))
     (p' : (Œ¥‚ÇÅ Œµ‚ÇÅ : ‚Ñö‚Çä) ‚Üí w-rel' (y Œ¥‚ÇÅ) (y Œµ‚ÇÅ) (Œ¥‚ÇÅ ‚Ñö‚Çä+ Œµ‚ÇÅ))
     (v‚ÇÅ : 0< (fst Œµ ‚Ñö.- (fst Œ¥ ‚Ñö.+ fst Œ∑))) ‚Üí
     w-rel' (x Œ¥) (y Œ∑) ((fst Œµ ‚Ñö.- (fst Œ¥ ‚Ñö.+ fst Œ∑)) , v‚ÇÅ) ‚Üí
     w-rel' (r-l x) (r-l y) Œµ
rel-l-l x y Œµ Œ¥ Œ∑ p p' v‚ÇÅ x‚ÇÅ Œ∑‚ÇÅ =
  rel-l-l' x y Œµ Œ¥ Œ∑ p p' v‚ÇÅ Œ∑‚ÇÅ (fst ‚àò x‚ÇÅ)
   , let zz : Œ£ (0< (fst Œµ ‚Ñö.- (fst Œ∑ ‚Ñö.+ fst Œ¥)))
                  Œª v ‚Üí
                    (Œ∑' : ‚Ñö‚Çä) ‚Üí
                pre-w-rel' (y Œ∑) (x Œ¥)
             ((fst Œµ ‚Ñö.- (fst Œ∑ ‚Ñö.+ fst Œ¥)) , v) Œ∑'
         zz =
               subst
                  (Œª xxx ‚Üí Œ£ (0< (fst Œµ ‚Ñö.- xxx))
                  Œª v ‚Üí
                    (Œ∑' : ‚Ñö‚Çä) ‚Üí
                pre-w-rel' (y Œ∑) (x Œ¥)
             ((fst Œµ ‚Ñö.- xxx) , v) Œ∑')
                  (‚Ñö.+Comm (fst Œ¥) (fst Œ∑))
                  (v‚ÇÅ , snd ‚àò x‚ÇÅ)
     in rel-l-l' y x Œµ Œ∑ Œ¥  p' p (fst zz) Œ∑‚ÇÅ (snd zz)

w-prop : (‚Ñö‚Çä ‚Üí ‚Ñù ‚Üí hProp ‚Ñì-zero) ‚Üí Type
w-prop =
 Œª ‚ô¢ ‚Üí (‚àÄ u Œµ ‚Üí ‚ü® (‚ô¢ Œµ u)  L.‚áî (L.‚àÉ[ Œ∏ ‚à∂ ‚Ñö‚Çä ]
                     L.‚àÉ[ v ] ‚ô¢ (((fst Œµ) ‚Ñö.- (fst Œ∏)) , v) u)
                    ‚ü© ) √ó
                      (‚àÄ u v Œµ Œ∑ ‚Üí
                         u ‚àº[ Œµ ] v ‚Üí
                           (‚ü® ‚ô¢ Œ∑ u ‚ü© ‚Üí ‚ü® ‚ô¢ (Œµ ‚Ñö‚Çä+ Œ∑) v ‚ü© ))


substŒ£<' : (P : Œ£ (‚Ñö‚Çä ‚Üí ‚Ñù ‚Üí hProp ‚Ñì-zero) w-prop) ‚Üí ‚àÄ r ‚Üí ‚àÄ {x y} ‚Üí x ‚â° y ‚Üí
             Œ£< (fst ‚àò (flip (fst P) r)) x ‚Üí Œ£< (fst ‚àò flip (fst P) r) y
substŒ£<' P r = subst (Œ£< (fst ‚àò (flip (fst P) r)))


isProp-w-prop :  ‚àÄ ‚ô¢ ‚Üí isProp (w-prop ‚ô¢)
isProp-w-prop ‚ô¢ =
  isProp√ó (isPropŒ†2 Œª u Œµ ‚Üí
              snd (
     ‚ô¢ Œµ u L.‚áî
     L.‚àÉ[‚à∂]-syntax
     (Œª Œ∏ ‚Üí L.‚àÉ[]-syntax (Œª v‚ÇÅ ‚Üí ‚ô¢ ((fst Œµ ‚Ñö.- fst Œ∏) , v‚ÇÅ) u)))
     )
    (isPropŒ†6 Œª _ v Œµ Œ∑ _ _ ‚Üí
        snd (‚ô¢ (Œµ ‚Ñö‚Çä+ Œ∑) v))

w-rel : Œ£ (‚Ñö‚Çä ‚Üí ‚Ñù ‚Üí hProp ‚Ñì-zero) w-prop ‚Üí
          Œ£ (‚Ñö‚Çä ‚Üí ‚Ñù ‚Üí hProp ‚Ñì-zero) w-prop ‚Üí ‚Ñö‚Çä ‚Üí Type
w-rel = Œª (‚ô¢ , _) (‚ô• , _) Œµ ‚Üí
         (‚àÄ u Œ∑ ‚Üí (‚ü® ‚ô¢ Œ∑ u ‚ü© ‚Üí  ‚ü® ‚ô• (Œµ ‚Ñö‚Çä+ Œ∑) u ‚ü©)
                  √ó (‚ü® ‚ô• Œ∑ u ‚ü© ‚Üí  ‚ü® ‚ô¢ (Œµ ‚Ñö‚Çä+ Œ∑) u ‚ü©))

isSym-w-rel : ‚àÄ a a' ‚Üí (‚àÄ Œµ ‚Üí w-rel a a' Œµ) ‚Üí (‚àÄ Œµ ‚Üí w-rel a' a Œµ)
isSym-w-rel a a' w Œµ u Œ∑ = fst Œ£-swap-‚âÉ (w Œµ u Œ∑)

w-rel‚Üí‚áí : ‚àÄ a a' ‚Üí (‚àÄ Œµ ‚Üí w-rel a a' Œµ)
             ‚Üí ‚àÄ Œµ u ‚Üí ‚ü® fst a Œµ u ‚ü© ‚Üí ‚ü® fst a' Œµ u ‚ü©
w-rel‚Üí‚áí a a' x Œµ u x‚ÇÅ =
  w-rel'‚áí ((flip (fst a) u) , (fst (snd a) u))
    ((flip (fst a') u) , (fst (snd a') u))
     (Œª Œµ‚ÇÅ ‚Üí x Œµ‚ÇÅ u)
    Œµ x‚ÇÅ

w-rel‚Üí‚â° : ‚àÄ a a' ‚Üí (‚àÄ Œµ ‚Üí w-rel a a' Œµ) ‚Üí a ‚â° a'
w-rel‚Üí‚â° a a' w =
  Œ£‚â°Prop isProp-w-prop
    (funExt‚ÇÇ Œª Œµ u ‚Üí
       L.‚áîtoPath (w-rel‚Üí‚áí a a' w Œµ u)
         (w-rel‚Üí‚áí a' a (isSym-w-rel a a' w) Œµ u))

rel-l-l-l : ‚àÄ {ùïí : ‚Ñö‚Çä ‚Üí Œ£ (‚Ñö‚Çä ‚Üí ‚Ñù ‚Üí hProp ‚Ñì-zero) w-prop}

              ‚Üí (x y : ‚Ñö‚Çä ‚Üí ‚Ñù) ‚Üí ‚àÄ Œµ Œ¥ Œ∑
              (p : ‚àÄ Œ¥‚ÇÅ Œµ‚ÇÅ ‚Üí x Œ¥‚ÇÅ ‚àº[ Œ¥‚ÇÅ ‚Ñö‚Çä+ Œµ‚ÇÅ ] x Œµ‚ÇÅ)
              (p' : ‚àÄ Œ¥‚ÇÅ Œµ‚ÇÅ ‚Üí y Œ¥‚ÇÅ ‚àº[ Œ¥‚ÇÅ ‚Ñö‚Çä+ Œµ‚ÇÅ ] y Œµ‚ÇÅ)
              (v‚ÇÅ : 0< (fst Œµ ‚Ñö.- (fst Œ¥ ‚Ñö.+ fst Œ∑)))
              (r : x Œ¥ ‚àº[ (fst Œµ ‚Ñö.- (fst Œ¥ ‚Ñö.+ fst Œ∑)) , v‚ÇÅ ] y Œ∑)

    ‚Üí
              w-rel'
     (l-l
      (Œª q Œ∑‚ÇÅ ‚Üí (Œª Œµ‚ÇÅ ‚Üí fst (ùïí q) Œµ‚ÇÅ (x Œ∑‚ÇÅ)) , fst (snd (ùïí q)) (x Œ∑‚ÇÅ)))
     (l-l
      (Œª q Œ∑‚ÇÅ ‚Üí (Œª Œµ‚ÇÅ ‚Üí fst (ùïí q) Œµ‚ÇÅ (y Œ∑‚ÇÅ)) , fst (snd (ùïí q)) (y Œ∑‚ÇÅ)))
     Œµ
rel-l-l-l {ùïí} x y Œµ Œ¥ Œ∑ p p' v‚ÇÅ r Œ∑‚ÇÅ .fst =
  PT.map
    Œª ((Œ¥* , Œ∑*) , (xx , xx')) ‚Üí
     let z = snd (snd (ùïí Œ¥*)) (x Œ∑*) _ _ _ (p _ Œ¥) xx'
         z' = snd (snd (ùïí Œ¥*)) _ _ _ _ r z
     in (Œ¥* , Œ∑) , (+‚ÇÉ0<' (fst Œ∑‚ÇÅ ‚Ñö.- (fst Œ¥* ‚Ñö.+ fst Œ∑*))
                   (fst Œµ ‚Ñö.- (fst Œ¥ ‚Ñö.+ fst Œ∑))
                    (fst Œ¥ ‚Ñö.+ fst Œ∑*)
                   (fst (Œµ ‚Ñö‚Çä+ Œ∑‚ÇÅ) ‚Ñö.- (fst Œ¥* ‚Ñö.+ fst Œ∑))
                   xx v‚ÇÅ (snd (Œ¥ ‚Ñö‚Çä+ Œ∑*))
                     (lem--016 {fst Œ∑‚ÇÅ} {fst Œ¥*} {fst Œ∑*} {fst Œµ} {fst Œ¥}) ,
            subst (Œª xx ‚Üí ‚ü® ùïí Œ¥* .fst xx (y Œ∑)‚ü©)
              (‚Ñö‚Çä‚â° (lem-03 (fst Œµ) (fst Œ∑‚ÇÅ)
                 (fst Œ¥) (fst Œ∑) (fst Œ¥*) (fst Œ∑*)))
                 z')
rel-l-l-l {ùïí}  x y Œµ Œ¥ Œ∑ p p' v‚ÇÅ r  Œ∑‚ÇÅ .snd =
  PT.map Œª ((Œ¥* , Œ∑*) , (xx , xx')) ‚Üí
     let z = snd (snd (ùïí Œ¥*)) (y Œ∑*) _ _ _ (p' _ Œ∑) xx'
         z' = snd (snd (ùïí Œ¥*)) _ _ _ _ (sym‚àº _ _ _ r) z

     in (Œ¥* , Œ¥) , (
            +‚ÇÉ0<' (fst Œ∑‚ÇÅ ‚Ñö.- (fst Œ¥* ‚Ñö.+ fst Œ∑*))
                   (fst Œµ ‚Ñö.- (fst Œ¥ ‚Ñö.+ fst Œ∑))
                    (fst Œ∑ ‚Ñö.+ fst Œ∑*)
                   (fst (Œµ ‚Ñö‚Çä+ Œ∑‚ÇÅ) ‚Ñö.- (fst Œ¥* ‚Ñö.+ fst Œ¥))
                   xx v‚ÇÅ (snd (Œ∑ ‚Ñö‚Çä+ Œ∑*))
                    (lem--017 {fst Œ∑‚ÇÅ} {fst Œ¥*} {fst Œ∑*} {fst Œµ} {fst Œ¥})  ,
            (
            subst (Œª xx ‚Üí ‚ü® ùïí Œ¥* .fst xx (x Œ¥)‚ü©)
              (‚Ñö‚Çä‚â° (lem-04 (fst Œµ) (fst Œ∑‚ÇÅ)
                 (fst Œ¥) (fst Œ∑) (fst Œ¥*) (fst Œ∑*)))
                 z') )
module ‚àº' where

 w' : ‚Ñö ‚Üí Rec‚Ñù (Œ£ (‚Ñö‚Çä ‚Üí hProp ‚Ñì-zero) w-prop') w-rel'
 w' ùï¢ .Rec‚Ñù.ratA ùï¢' = r-r ùï¢ ùï¢'
 w' ùï¢ .Rec‚Ñù.limA ùïí _ = r-l ùïí
 w' ùï¢ .Rec‚Ñù.eqA = w-rel'‚Üí‚â°
 w' ùï¢ .Rec‚Ñù.rat-rat-B = rel-r-r ùï¢
 w' ùï¢ .Rec‚Ñù.rat-lim-B = rel-r-l ùï¢
 w' ùï¢ .Rec‚Ñù.lim-rat-B x r Œµ Œ¥ p v‚ÇÅ x‚ÇÅ =
   w-rel'-sym (r-r ùï¢ r)  (r-l x)  Œµ
     (rel-r-l ùï¢ r x Œµ p Œ¥ v‚ÇÅ
      (w-rel'-sym (x Œ¥) (r-r ùï¢ r) ((fst Œµ ‚Ñö.- fst Œ¥) , v‚ÇÅ) x‚ÇÅ))

 w' ùï¢ .Rec‚Ñù.lim-lim-B = rel-l-l
 w' ùï¢ .Rec‚Ñù.isPropB a a' Œµ =
  isPropŒ† Œª x ‚Üí
     isProp√ó (isProp‚Üí (snd (a' .fst (Œµ ‚Ñö‚Çä+ x))))
             (isProp‚Üí (snd (a .fst (Œµ ‚Ñö‚Çä+ x))))





 w'' : (ùïí : ‚Ñö‚Çä ‚Üí Œ£ (‚Ñö‚Çä ‚Üí ‚Ñù ‚Üí hProp ‚Ñì-zero) w-prop)
     ‚Üí ((Œ¥ Œµ : ‚Ñö‚Çä) ‚Üí w-rel (ùïí Œ¥) (ùïí Œµ) (Œ¥ ‚Ñö‚Çä+ Œµ))
     ‚Üí Cases‚Ñù (Œ£ (‚Ñö‚Çä ‚Üí hProp ‚Ñì-zero) w-prop') w-rel'
 w'' ùïí ùï° .Cases‚Ñù.ratA ùï¢ = r-l
    (Œª q ‚Üí (Œª Œµ ‚Üí fst (ùïí q) Œµ (rat ùï¢)) ,
          fst (snd (ùïí q)) (rat ùï¢))


 w'' ùïí ùï° .Cases‚Ñù.limA ùï© ùïî =
   l-l (Œª q  Œ∑ ‚Üí
       (Œª Œµ ‚Üí fst (ùïí q) Œµ (ùï© Œ∑))
       , fst (snd (ùïí q)) (ùï© Œ∑) )


 w'' ùïí ùï° .Cases‚Ñù.eqA = w-rel'‚Üí‚â°
 w'' ùïí ùï° .Cases‚Ñù.rat-rat-B q r Œµ x x‚ÇÅ Œ∑ .fst =
   PT.map
     (uncurry Œª q' ‚Üí
      Œª (xx , xx') ‚Üí
       let z = snd (snd (ùïí q')) _ _ _ _
               (rat-rat q r Œµ x x‚ÇÅ) xx'
       in q' , (substŒ£<' (ùïí q') _
             (‚Ñö.+Assoc (fst Œµ) (fst Œ∑) (‚Ñö.- fst q')) (_ , z)))
 w'' ùïí ùï° .Cases‚Ñù.rat-rat-B q r Œµ x x‚ÇÅ Œ∑ .snd =
   PT.map
     (uncurry Œª q' ‚Üí
      Œª (xx , xx') ‚Üí
       let z = snd (snd (ùïí q')) _ _ _ _
               (sym‚àº _ _ Œµ (rat-rat q r Œµ x x‚ÇÅ)) xx'
       in q' , (substŒ£<' (ùïí q') _ (‚Ñö.+Assoc (fst Œµ) (fst Œ∑) (‚Ñö.- fst q')) (_ , z)))

 w'' ùïí ùï° .Cases‚Ñù.rat-lim-B q y Œµ Œ¥ p v‚ÇÅ r v' u' x Œ∑ .fst =
   PT.map
     Œª ((Œ¥* , Œ∑*) , (xx , xx')) ‚Üí
      let z = snd (snd (ùïí _)) _ _ _ _ r xx'
      in ((Œ¥* , Œ∑*) , Œ¥) , substŒ£<' (ùïí (Œ¥* , Œ∑*)) _
             (lem--018 {fst Œµ} {fst Œ¥} {fst Œ∑} {Œ¥*} ) (_ , z)
 w'' ùïí ùï° .Cases‚Ñù.rat-lim-B q y Œµ Œ¥ p v‚ÇÅ r v' u' x Œ∑ .snd =
   PT.map
     Œª ((Œ¥* , Œ∑*) , (xx , xx')) ‚Üí
      let z = snd (snd (ùïí _)) _ _ _ _ (p _ _) xx'
          z' = snd (snd (ùïí _)) _ _ _ _ (sym‚àº _ _ _ r) z
      in Œ¥* , substŒ£<' (ùïí Œ¥*) _
             (lem--019 {fst Œµ} {fst Œ¥} {fst Œ∑*}  {fst Œ∑} {fst Œ¥*} ) (_ , z')
 w'' ùïí ùï° .Cases‚Ñù.lim-rat-B x r Œµ Œ¥ p v‚ÇÅ u v' u' x‚ÇÅ Œ∑ .fst =
   PT.map Œª ((Œ¥* , Œ∑*) , (xx , xx')) ‚Üí
      let z = snd (snd (ùïí _)) _ _ _ _ (p _ _)  xx'
          z'  = snd (snd (ùïí _)) _ _ _ _ u z
      in Œ¥* , substŒ£<' (ùïí Œ¥*) _
            (lem--020 {fst Œµ} {fst Œ¥} {fst Œ∑*}  {fst Œ∑} {fst Œ¥*}) (_ , z')
 w'' ùïí ùï° .Cases‚Ñù.lim-rat-B x r Œµ Œ¥ p v‚ÇÅ u v' u' x‚ÇÅ Œ∑ .snd =
    PT.map
     Œª ((Œ¥* , Œ∑*) , (xx , xx')) ‚Üí
      let z = snd (snd (ùïí _)) _ _ _ _ (sym‚àº _ _ _ u) xx'
      in ((Œ¥* , Œ∑*) , Œ¥) , substŒ£<' (ùïí (Œ¥* , Œ∑*)) _
            ((lem--021 {fst Œµ} {fst Œ¥} {fst Œ∑}  {Œ¥*})) (_ , z)
 w'' ùïí ùï° .Cases‚Ñù.lim-lim-B = rel-l-l-l {ùïí}
 w'' ùïí ùï° .Cases‚Ñù.isPropB a a' Œµ =
  isPropŒ† Œª x ‚Üí
     isProp√ó (isProp‚Üí (snd (a' .fst (Œµ ‚Ñö‚Çä+ x))))
             (isProp‚Üí (snd (a .fst (Œµ ‚Ñö‚Çä+ x))))

 isPropHlp : {P  Q  : ‚Ñù ‚Üí ‚Ñö‚Çä ‚Üí  Type} (P' Q' : ‚Ñù ‚Üí ‚Ñö‚Çä ‚Üí  hProp ‚Ñì-zero) ‚Üí
         (x‚ÇÇ : ‚Ñù) ‚Üí isProp ((Œ∑‚ÇÇ : ‚Ñö‚Çä) ‚Üí
          ( P x‚ÇÇ Œ∑‚ÇÇ  ‚Üí ‚ü® P' x‚ÇÇ Œ∑‚ÇÇ ‚ü©) √ó ( Q x‚ÇÇ Œ∑‚ÇÇ  ‚Üí ‚ü® Q' x‚ÇÇ Œ∑‚ÇÇ ‚ü©))
 isPropHlp P' Q' x =
   isPropŒ† Œª Œ∑ ‚Üí isProp√ó (isProp‚Üí (snd (P' x Œ∑))) (isProp‚Üí (snd (Q' x Œ∑)))

 w : Rec‚Ñù (Œ£ (‚Ñö‚Çä ‚Üí ‚Ñù ‚Üí hProp ‚Ñì-zero) w-prop) w-rel
 w .Rec‚Ñù.ratA ùï¢ =
    (Œª q ùï£ ‚Üí fst (Rec‚Ñù.go (w' ùï¢) ùï£) q)
   , (Œª u Œµ ‚Üí snd (Rec‚Ñù.go (w' ùï¢) u) Œµ)
   , Œª u v Œµ Œ∑ x ‚Üí fst (Rec‚Ñù.go~ (w' ùï¢)  x Œ∑)

 w .Rec‚Ñù.limA ùïí ùï° =
     (Œª q ùï£ ‚Üí fst (Cases‚Ñù.go (w'' ùïí ùï°) ùï£) q)
   , (Œª u Œµ ‚Üí snd (Cases‚Ñù.go (w'' ùïí ùï°) u) Œµ)
   , Œª u v Œµ Œ∑ x ‚Üí fst (Cases‚Ñù.go~ (w'' ùïí ùï°)  x Œ∑) --

 w .Rec‚Ñù.eqA = w-rel‚Üí‚â°

 w .Rec‚Ñù.rat-rat-B q r Œµ u v = Elim‚Ñù-Prop.go www
  where
  www : Elim‚Ñù-Prop _
  www .Elim‚Ñù-Prop.ratA x Œ∑ =

    rat-rat'-sym x (Œµ ‚Ñö‚Çä+ Œ∑) r
      ‚àòS (fst (rel-r-r x q r Œµ u v Œ∑))
      ‚àòS rat-rat'-sym q Œ∑ x ,
     rat-rat'-sym x (Œµ ‚Ñö‚Çä+ Œ∑) q ‚àòS (snd (rel-r-r  x q r Œµ u v Œ∑)) ‚àòS
      rat-rat'-sym r Œ∑ x
  www .Elim‚Ñù-Prop.limA x p x‚ÇÅ Œ∑ =
       PT.map (Œª (Œ¥* , (xx , xx'))
         ‚Üí Œ¥* , substŒ£< (Elim‚Ñù.go (Rec‚Ñù.d (w' r)) (x Œ¥*))
                   (‚Ñö.+Assoc (fst Œµ) (fst Œ∑) (‚Ñö.- fst Œ¥*))
                    (_ , fst (x‚ÇÅ _ _) xx'))
     , PT.map (Œª (Œ¥* , (xx , xx'))
         ‚Üí Œ¥* , substŒ£< (Rec‚Ñù.go (w' q) (x Œ¥*))
             ((‚Ñö.+Assoc (fst Œµ) (fst Œ∑) (‚Ñö.- fst Œ¥*)))
              (_ , snd (x‚ÇÅ _ _) xx'  ))
  www .Elim‚Ñù-Prop.isPropA = isPropHlp
      (Œª x Œ∑ ‚Üí fst (Rec‚Ñù.go (w' r) x) (Œµ ‚Ñö‚Çä+ Œ∑))
      Œª x Œ∑ ‚Üí fst (Rec‚Ñù.go (w' q) x) (Œµ ‚Ñö‚Çä+ Œ∑)


 w .Rec‚Ñù.rat-lim-B q y Œµ p Œ¥ v‚ÇÅ x = Elim‚Ñù-Prop.go www
  where
  www : Elim‚Ñù-Prop _
  www .Elim‚Ñù-Prop.ratA x* Œ∑ .fst xx =
   let zz = fst (x (rat x*)  Œ∑) xx
   in ‚à£ Œ¥ ,  substŒ£<' (y Œ¥) _ (lem--022 {fst Œµ} {fst Œ¥} {fst Œ∑}) (_ , zz) ‚à£‚ÇÅ

  www .Elim‚Ñù-Prop.ratA x* Œ∑ .snd =
    PT.rec (snd (fst (Rec‚Ñù.go (w' q) (rat x*)) (Œµ ‚Ñö‚Çä+ Œ∑)))
      Œª (Œ¥* , (xx , xx')) ‚Üí
       let zz = snd (p Œ¥ _ (rat x*) _) xx'
           zz' = snd (x (rat x*)  _) zz
       in subst {x = (((fst Œµ ‚Ñö.- fst Œ¥) , v‚ÇÅ) ‚Ñö‚Çä+
             ((Œ¥ ‚Ñö‚Çä+ Œ¥*) ‚Ñö‚Çä+ ((fst Œ∑ ‚Ñö.- fst Œ¥*) , xx)))}
            {y = (Œµ ‚Ñö‚Çä+ Œ∑)} (fst ‚àò fst (Rec‚Ñù.go (w' q) (rat x*)))
             (‚Ñö‚Çä‚â° (lem--023 {fst Œµ} {fst Œ¥} {fst Œ¥*} {fst Œ∑})) zz'

  www .Elim‚Ñù-Prop.limA x* p* x‚ÇÅ* Œ∑* .fst =
    PT.map Œª (Œ¥* , (xx , xx')) ‚Üí
       let z = fst (x (x* Œ¥*) (_ , xx)) xx'

       in (Œ¥ , Œ¥*) , substŒ£<' (y Œ¥) _
              (lem--024 {fst Œµ} {fst Œ¥} {fst Œ∑*} {fst Œ¥*}) (_ , z)
  www .Elim‚Ñù-Prop.limA x'' pp'' x‚ÇÅ'' Œ∑'' .snd =
     PT.map Œª ((Œ¥* , Œ∑*) , (xx , xx')) ‚Üí
      let z = fst (p _ _ _ _) xx'
          z' = snd (x (x'' Œ∑*) _) z
      in Œ∑* , substŒ£< (Elim‚Ñù.go (Rec‚Ñù.d (w' q)) (x'' Œ∑*))
                   (lem--025 {fst Œµ} {fst Œ¥} {fst Œ¥*} {fst Œ∑''}) (_ , z')

  www .Elim‚Ñù-Prop.isPropA = isPropHlp
      (Œª x Œ∑ ‚Üí fst (Cases‚Ñù.go (w'' y p) x) (Œµ ‚Ñö‚Çä+ Œ∑))
      Œª x Œ∑ ‚Üí fst (Rec‚Ñù.go (w' q) x) (Œµ ‚Ñö‚Çä+ Œ∑)

 w .Rec‚Ñù.lim-rat-B x r Œµ Œ¥ p v‚ÇÅ x‚ÇÅ  = Elim‚Ñù-Prop.go www
  where
  www : Elim‚Ñù-Prop _
  www .Elim‚Ñù-Prop.ratA x' Œ∑' .fst =
    PT.rec (snd (fst (Rec‚Ñù.go (w' r) (rat x')) (Œµ ‚Ñö‚Çä+ Œ∑')))
      Œª (Œ¥* , (xx , xx')) ‚Üí
       let zz = snd (p Œ¥ _ (rat x') _) xx'
           zz' = fst (x‚ÇÅ (rat x') _) zz
       in subst
            {x = (((fst Œµ ‚Ñö.- fst Œ¥) , v‚ÇÅ) ‚Ñö‚Çä+
             ((Œ¥ ‚Ñö‚Çä+ Œ¥*) ‚Ñö‚Çä+ ((fst Œ∑' ‚Ñö.- fst Œ¥*) , xx)))}
             {(Œµ ‚Ñö‚Çä+ Œ∑')}
             (fst ‚àò (fst (Rec‚Ñù.go (w' r) (rat x'))))
            (‚Ñö‚Çä‚â° $ lem--026 {fst Œµ} {fst Œ¥} {fst Œ¥*} {fst Œ∑'}) zz'
  www .Elim‚Ñù-Prop.ratA x' Œ∑' .snd xx =
   let zz = snd (x‚ÇÅ (rat x')  Œ∑') xx
   in ‚à£ Œ¥ , substŒ£<' (x Œ¥) _ (lem--027 {fst Œµ} {fst Œ¥} {fst Œ∑'}) (_ , zz) ‚à£‚ÇÅ

  www .Elim‚Ñù-Prop.limA x' p' x‚ÇÅ' Œ∑' .fst =
    PT.map Œª ((Œ¥* , Œ∑*) , (xx , xx')) ‚Üí
      let z = fst (p _ _ _ _) xx'
          z' = fst (x‚ÇÅ (x' Œ∑*) _) z
      in Œ∑* , substŒ£< (Rec‚Ñù.go (w' r) (x' Œ∑*))
                ((lem--028 {fst Œµ} {fst Œ¥}  {fst Œ¥*} {fst Œ∑'}  {fst Œ∑*})) (_ , z')
  www .Elim‚Ñù-Prop.limA x' p' x‚ÇÅ' Œ∑' .snd =
    PT.map Œª (Œ¥* , (xx , xx')) ‚Üí
      let z = snd (x‚ÇÅ (x' Œ¥*) ((fst Œ∑' ‚Ñö.- fst Œ¥*) , xx)) xx'

      in (Œ¥ , Œ¥*) , substŒ£<' (x Œ¥) _
          (lem--029 {fst Œµ} {fst Œ¥} {fst Œ∑'} {fst Œ¥*}) (_ , z)
  www .Elim‚Ñù-Prop.isPropA = isPropHlp
      (Œª x Œ∑ ‚Üí fst (Rec‚Ñù.go (w' r) x) (Œµ ‚Ñö‚Çä+ Œ∑))
      Œª x‚ÇÇ Œ∑ ‚Üí fst (Cases‚Ñù.go (w'' x p) x‚ÇÇ) (Œµ ‚Ñö‚Çä+ Œ∑)

 w .Rec‚Ñù.lim-lim-B x y Œµ Œ¥ Œ∑ p p' v‚ÇÅ x‚ÇÅ = Elim‚Ñù-Prop.go www
  where
  www : Elim‚Ñù-Prop _
  www .Elim‚Ñù-Prop.ratA x* Œ∑' .fst =
    PT.map Œª ((Œ¥* , Œ∑*) , (xx , xx')) ‚Üí
     let z = fst ((p _ _) _ _) xx'
         z' = fst (x‚ÇÅ _ _) z
     in Œ∑ , substŒ£<' (y Œ∑) _
           (lem--030 {fst Œµ} {fst Œ¥} {fst Œ∑} {Œ¥*}  {fst Œ∑'}) (_ , z')
  www .Elim‚Ñù-Prop.ratA x* Œ∑' .snd =
    PT.map Œª ((Œ¥* , Œ∑*) , (xx , xx')) ‚Üí
     let z = fst ((p' _ _) _ _) xx'
         z' = snd (x‚ÇÅ _ _) z
     in Œ¥ , substŒ£<' (x Œ¥) _
         (lem--031 {fst Œµ} {fst Œ¥} {fst Œ∑} {Œ¥*}  {fst Œ∑'} ) (_ , z')
  www .Elim‚Ñù-Prop.limA x* p* x‚ÇÅ' Œ∑‚ÇÅ .fst =
   PT.map Œª ((Œ¥* , Œ∑*) , (xx , xx')) ‚Üí
   let z = (fst (p Œ¥* Œ¥ (x* Œ∑*) _)) xx'
       z' : fst
              (y Œ∑ .fst
               (((fst Œµ ‚Ñö.- (fst Œ¥ ‚Ñö.+ fst Œ∑)) , v‚ÇÅ) ‚Ñö‚Çä+
                ((Œ¥* ‚Ñö‚Çä+ Œ¥) ‚Ñö‚Çä+ ((fst Œ∑‚ÇÅ ‚Ñö.- (fst Œ¥* ‚Ñö.+ fst Œ∑*)) , xx)))
               (x* Œ∑*))
       z' = fst (x‚ÇÅ _ _) z
   in (Œ∑ , Œ∑*) ,
          substŒ£<' (y Œ∑) _
        (lem--032 {fst Œµ} {fst Œ¥} {fst Œ∑} {fst Œ¥*}  {fst Œ∑‚ÇÅ} {fst Œ∑*})
           (_ , z')
  www .Elim‚Ñù-Prop.limA x* p x‚ÇÅ' Œ∑‚ÇÅ .snd =
   PT.map Œª ((Œ¥* , Œ∑*) , (xx , xx')) ‚Üí
    let z = (fst (p' _ _ _ _)) xx'
        z' = snd (x‚ÇÅ _ _) z
    in (Œ¥ , Œ∑*) , substŒ£<' (x Œ¥) _
          (lem--033  {fst Œµ} {fst Œ¥} {fst Œ∑} {fst Œ¥*}  {fst Œ∑‚ÇÅ} {fst Œ∑*}) (_ , z')

  www .Elim‚Ñù-Prop.isPropA = isPropHlp
      (Œª x‚ÇÇ Œ∑‚ÇÇ ‚Üí fst (Cases‚Ñù.go (w'' y p') x‚ÇÇ) (Œµ ‚Ñö‚Çä+ Œ∑‚ÇÇ))
      Œª x‚ÇÇ Œ∑‚ÇÇ ‚Üí fst (Cases‚Ñù.go (w'' x p) x‚ÇÇ) (Œµ ‚Ñö‚Çä+ Œ∑‚ÇÇ)

 w .Rec‚Ñù.isPropB a a' Œµ = isPropŒ†2 Œª u x ‚Üí
     isProp√ó (isProp‚Üí (snd (a' .fst (Œµ ‚Ñö‚Çä+ x) u)))
             (isProp‚Üí (snd (a .fst (Œµ ‚Ñö‚Çä+ x) u)))


 -- pre-~' : ‚Ñù ‚Üí Œ£ (‚Ñö‚Çä ‚Üí ‚Ñù ‚Üí (hProp ‚Ñì-zero)) _
 -- pre-~' = Rec‚Ñù.go w


-- HoTT Theorem (11.3.16)

_‚àº'[_]_ : ‚Ñù ‚Üí ‚Ñö‚Çä ‚Üí ‚Ñù ‚Üí Type
x ‚àº'[ Œµ ] y = ‚ü® fst (Rec‚Ñù.go ‚àº'.w x) Œµ y ‚ü©

_‚àº'[_]‚Çö_ : ‚Ñù ‚Üí ‚Ñö‚Çä ‚Üí ‚Ñù ‚Üí hProp ‚Ñì-zero
x ‚àº'[ Œµ ]‚Çö y = fst (Rec‚Ñù.go ‚àº'.w x) Œµ y


-- (11.3.17)
_ : ‚àÄ r r' Œµ ‚Üí (rat r) ‚àº'[ Œµ ] (rat r') ‚â°
              ((‚Ñö.- fst Œµ) ‚Ñö.< (r ‚Ñö.- r'))
               √ó ((r ‚Ñö.- r') ‚Ñö.< fst Œµ)
_ = Œª r r' Œµ ‚Üí refl

-- (11.3.18)
_ : ‚àÄ r x y Œµ ‚Üí (rat r) ‚àº'[ Œµ ] (lim x y) ‚â°
              (‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ] Œ£[ v ‚àà _ ] ((rat r) ‚àº'[ (fst Œµ ‚Ñö.- fst Œ¥) , v ] x Œ¥))
_ = Œª r x y Œµ ‚Üí refl

-- (11.3.19)
_ : ‚àÄ r x y Œµ ‚Üí (lim x y) ‚àº'[ Œµ ] (rat r) ‚â°
              (‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ] Œ£[ v ‚àà _ ]
                ((x Œ¥) ‚àº'[ (fst Œµ ‚Ñö.- fst Œ¥) , v ] rat r ))
_ = Œª r x y Œµ ‚Üí refl

-- (11.3.20)
_ : ‚àÄ x y x' y' Œµ ‚Üí (lim x y) ‚àº'[ Œµ ] (lim x' y') ‚â°
               (‚àÉ[ (Œ¥ , Œ∑) ‚àà (‚Ñö‚Çä √ó ‚Ñö‚Çä) ] Œ£[ v ‚àà _ ]
                ((x Œ¥) ‚àº'[ (fst Œµ ‚Ñö.- (fst Œ¥ ‚Ñö.+ fst Œ∑)) , v ] (x' Œ∑) ))
_ = Œª x y x' y' Œµ ‚Üí refl

-- (11.3.23)
triangle‚àº' : ‚àÄ u v w Œµ Œ∑
      ‚Üí u ‚àº[ Œµ ] v
      ‚Üí v ‚àº'[ Œ∑ ] w
      ‚Üí u ‚àº'[ Œµ ‚Ñö‚Çä+ Œ∑ ] w
triangle‚àº' u v w Œµ Œ∑ x =
  snd ((Rec‚Ñù.go~ ‚àº'.w {x = u} {v} {Œµ} x w Œ∑ ))


-- (11.3.21)
rounded‚àº' : ‚àÄ u v Œµ ‚Üí
             ‚ü® (u ‚àº'[ Œµ ]‚Çö v) L.‚áî
              (L.‚àÉ[ Œ¥ ]
                L.‚àÉ[ _ ] u ‚àº'[ (fst Œµ ‚Ñö.- fst Œ¥) , _ ]‚Çö v) ‚ü©
rounded‚àº' u v Œµ = fst (snd (Rec‚Ñù.go ‚àº'.w u)) v Œµ


‚àº‚Üí‚àº' : ‚àÄ x y Œµ ‚Üí x ‚àº[ Œµ ] y ‚Üí x ‚àº'[ Œµ ] y
‚àº‚Üí‚àº' x y Œµ (rat-rat q r .Œµ x‚ÇÅ x‚ÇÇ) = x‚ÇÅ , x‚ÇÇ
‚àº‚Üí‚àº' x y Œµ (rat-lim q y‚ÇÅ .Œµ Œ¥ p v‚ÇÅ x‚ÇÅ) =
 ‚à£ Œ¥ , v‚ÇÅ , ‚àº‚Üí‚àº' (rat q) (y‚ÇÅ Œ¥) _ x‚ÇÅ ‚à£‚ÇÅ
‚àº‚Üí‚àº' x y Œµ (lim-rat x‚ÇÅ r .Œµ Œ¥ p v‚ÇÅ x‚ÇÇ) =
 ‚à£ Œ¥ , v‚ÇÅ , ‚àº‚Üí‚àº' (x‚ÇÅ Œ¥) (rat r)  _ x‚ÇÇ ‚à£‚ÇÅ
‚àº‚Üí‚àº' x y Œµ (lim-lim x‚ÇÅ y‚ÇÅ .Œµ Œ¥ Œ∑ p p' v‚ÇÅ x‚ÇÇ) =
  ‚à£ (Œ¥ , Œ∑) , (v‚ÇÅ , (‚àº‚Üí‚àº' _ _ _ x‚ÇÇ)) ‚à£‚ÇÅ
‚àº‚Üí‚àº' x y Œµ (isProp‚àº .x .Œµ .y x‚ÇÅ x‚ÇÇ i) =
  snd (x ‚àº'[ Œµ ]‚Çö y) (‚àº‚Üí‚àº' x y Œµ x‚ÇÅ) (‚àº‚Üí‚àº' x y Œµ x‚ÇÇ) i

‚àº'‚Üí‚àº : ‚àÄ x y Œµ ‚Üí x ‚àº'[ Œµ ] y ‚Üí x ‚àº[ Œµ ] y
‚àº'‚Üí‚àº = Elim‚Ñù-Prop2.go w
 where
 w : Elim‚Ñù-Prop2 _
 w .Elim‚Ñù-Prop2.rat-ratA r q Œµ =
   uncurry $ rat-rat r q Œµ
 w .Elim‚Ñù-Prop2.rat-limA r x y x‚ÇÅ Œµ =
    PT.rec (isProp‚àº _ _ _)
      Œª (Œ¥ , (xx , xx')) ‚Üí rat-lim r x Œµ Œ¥ y  xx (x‚ÇÅ _ _ xx')

 w .Elim‚Ñù-Prop2.lim-ratA x y r x‚ÇÅ Œµ =
    PT.rec (isProp‚àº _ _ _)
      Œª (Œ¥ , (xx , xx')) ‚Üí lim-rat x r Œµ Œ¥ y  xx (x‚ÇÅ _ _ xx')
 w .Elim‚Ñù-Prop2.lim-limA x y x' y' x‚ÇÅ Œµ =
    PT.rec (isProp‚àº _ _ _)
      Œª ((Œ¥ , Œ∑) , (xx , xx')) ‚Üí
        lim-lim x x' Œµ Œ¥ Œ∑ y y' xx (x‚ÇÅ _ _ _ xx')
 w .Elim‚Ñù-Prop2.isPropA _ _ = isPropŒ†2 Œª _ _ ‚Üí isProp‚àº _ _ _


sym‚àº' : ‚àÄ r r' Œµ ‚Üí r ‚àº'[ Œµ ] r' ‚Üí r' ‚àº'[ Œµ ] r
sym‚àº' r r' Œµ =
  ‚àº‚Üí‚àº' r' r Œµ ‚àòS sym‚àº r r' Œµ ‚àòS ‚àº'‚Üí‚àº r r' Œµ



-- (11.3.22)
triangle‚àº'' : ‚àÄ u v w Œµ Œ∑
      ‚Üí u ‚àº'[ Œµ ] v
      ‚Üí v ‚àº[ Œ∑ ] w
      ‚Üí u ‚àº'[ Œµ ‚Ñö‚Çä+ Œ∑ ] w
triangle‚àº'' u v w Œµ Œ∑ x y =
  subst (u ‚àº'[_] w) (‚Ñö‚Çä‚â° (‚Ñö.+Comm (fst Œ∑) (fst Œµ)))
   (sym‚àº' w u _ (triangle‚àº' w v u Œ∑ Œµ (sym‚àº v w Œ∑ y) (sym‚àº' u v Œµ x)))

-- HoTT Theorem (11.3.32)
‚àº'‚áî‚àº : ‚àÄ x y Œµ ‚Üí ‚ü® x ‚àº'[ Œµ ]‚Çö y L.‚áî x ‚àº[ Œµ ]‚Çö y ‚ü©
‚àº'‚áî‚àº x y z = ‚àº'‚Üí‚àº x y z , ‚àº‚Üí‚àº' x y z


infixr 6 _‚àô‚áî_

_‚àô‚áî_ : ‚àÄ {‚Ñì} {A B C : Type ‚Ñì}
         ‚Üí ((A ‚Üí B) √ó (B ‚Üí A))
         ‚Üí ((B ‚Üí C) √ó (C ‚Üí B))
         ‚Üí ((A ‚Üí C) √ó (C ‚Üí A))
_‚àô‚áî_ (x , _) (y , _) .fst = y ‚àò x
_‚àô‚áî_ (_ , x) (_ , y) .snd = x ‚àò y

sym‚áî : ‚àÄ {‚Ñì} {A B : Type ‚Ñì}
    ‚Üí ((A ‚Üí B) √ó (B ‚Üí A))
    ‚Üí ((B ‚Üí A) √ó (A ‚Üí B))
sym‚áî (x , y) = y , x


-- HoTT (11.3.33)
rounded‚àº : ‚àÄ u v Œµ ‚Üí
             ‚ü® (u ‚àº[ Œµ ]‚Çö v) L.‚áî
              (L.‚àÉ[ Œ¥ ]
                L.‚àÉ[ p ] u ‚àº[ (fst Œµ ‚Ñö.- fst Œ¥) , p ]‚Çö v) ‚ü©
rounded‚àº u v Œµ = sym‚áî
      (‚àº'‚áî‚àº u v Œµ) ‚àô‚áî rounded‚àº' u v Œµ ‚àô‚áî
     (PT.map (map-snd (PT.map (map-snd (fst (‚àº'‚áî‚àº u v _)))))
   ,  PT.map (map-snd (PT.map (map-snd (snd (‚àº'‚áî‚àº u v _))))))

-- HoTT (11.3.36)

triangle‚àº : ‚àÄ {u v w Œµ Œ∑}
      ‚Üí u ‚àº[ Œµ ] v
      ‚Üí v ‚àº[ Œ∑ ] w
      ‚Üí u ‚àº[ Œµ ‚Ñö‚Çä+ Œ∑ ] w
triangle‚àº {u} {v} {w} {Œµ} {Œ∑} x  =
  ‚àº'‚Üí‚àº u w (Œµ ‚Ñö‚Çä+ Œ∑) ‚àò triangle‚àº' u v w Œµ Œ∑ x ‚àò ‚àº‚Üí‚àº' v w _



_ : ‚àÄ r x y Œµ ‚Üí (rat r) ‚àº'[ Œµ ] (lim x y) ‚â°
              (‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ] Œ£[ v ‚àà _ ] ((rat r) ‚àº'[ (fst Œµ ‚Ñö.- fst Œ¥) , v ] x Œ¥))
_ = Œª r x y Œµ ‚Üí refl

_ : ‚àÄ r x y Œµ ‚Üí (lim x y) ‚àº'[ Œµ ] (rat r) ‚â°
              (‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ] Œ£[ v ‚àà _ ]
                ((x Œ¥) ‚àº'[ (fst Œµ ‚Ñö.- fst Œ¥) , v ] rat r ))
_ = Œª r x y Œµ ‚Üí refl


_ : ‚àÄ x y x' y' Œµ ‚Üí (lim x y) ‚àº'[ Œµ ] (lim x' y') ‚â°
               (‚àÉ[ (Œ¥ , Œ∑) ‚àà (‚Ñö‚Çä √ó ‚Ñö‚Çä) ] Œ£[ v ‚àà _ ]
                ((x Œ¥) ‚àº'[ (fst Œµ ‚Ñö.- (fst Œ¥ ‚Ñö.+ fst Œ∑)) , v ] (x' Œ∑) ))
_ = Œª x y x' y' Œµ ‚Üí refl

