{-# OPTIONS --lossy-unification --safe #-}

module Cubical.HITs.CauchyReals.Inverse where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Structure
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Function
open import Cubical.Foundations.Transport
open import Cubical.Foundations.Powerset

open import Cubical.Data.Bool as ùüö hiding (_‚â§_)
open import Cubical.Data.Empty as ‚ä•
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Unit
open import Cubical.Data.Int as ‚Ñ§ using (pos)
open import Cubical.Data.Sigma
open import Cubical.Data.NatPlusOne


import Cubical.Algebra.CommRing as CR
import Cubical.Algebra.Ring as RP


open import Cubical.Relation.Binary

open import Cubical.HITs.PropositionalTruncation as PT

open import Cubical.Data.Rationals as ‚Ñö using (‚Ñö ; [_/_])
open import Cubical.Data.Rationals.Order as ‚Ñö using
  ( _‚Ñö‚Çä+_ ; 0<_ ; ‚Ñö‚Çä ; _‚Ñö‚Çä¬∑_ ; ‚Ñö‚Çä‚â°)
open import Cubical.Data.Rationals.Order.Properties as ‚Ñö
 using (inv‚Ñö‚Çä;/2‚Çä;/3‚Çä;/4‚Çä;x/2<x;inv‚Ñö)


open import Cubical.HITs.CauchyReals.Base
open import Cubical.HITs.CauchyReals.Lems
open import Cubical.HITs.CauchyReals.Closeness
open import Cubical.HITs.CauchyReals.Lipschitz
open import Cubical.HITs.CauchyReals.Order
open import Cubical.HITs.CauchyReals.Continuous
open import Cubical.HITs.CauchyReals.Multiplication


R‚Ñù = (CR.CommRing‚ÜíRing (_ , CR.commringstr 0 1 _+·µ£_ _¬∑·µ£_ -·µ£_ IsCommRing‚Ñù))
module CR‚Ñù = RP.RingStr (snd R‚Ñù)

module ùêë = CR.CommRingTheory (_ , CR.commringstr 0 1 _+·µ£_ _¬∑·µ£_ -·µ£_ IsCommRing‚Ñù)
module ùêë' = RP.RingTheory R‚Ñù

module ùêê' = RP.RingTheory (CR.CommRing‚ÜíRing ‚ÑöCommRing)

module Lùêë = Lems ((_ , CR.commringstr 0 1 _+·µ£_ _¬∑·µ£_ -·µ£_ IsCommRing‚Ñù))


Inv·µ£-restr‚Ñö : (Œ∑ : ‚Ñö‚Çä) ‚Üí
  Œ£ (‚Ñö ‚Üí ‚Ñö) (Lipschitz-‚Ñö‚Üí‚Ñö (inv‚Ñö‚Çä (Œ∑ ‚Ñö‚Çä¬∑ Œ∑)))

Inv·µ£-restr‚Ñö Œ∑ = f ,
  Lipschitz-‚Ñö‚Üí‚Ñö'‚ÜíLipschitz-‚Ñö‚Üí‚Ñö _ _ w
 where

 f = fst ‚àò inv‚Ñö‚Çä ‚àò ‚Ñö.maxWithPos Œ∑

 w : ‚àÄ q r ‚Üí ‚Ñö.abs (f q ‚Ñö.- f r) ‚Ñö.‚â§
      fst (inv‚Ñö‚Çä (Œ∑ ‚Ñö‚Çä¬∑ Œ∑)) ‚Ñö.¬∑ ‚Ñö.abs (q ‚Ñö.- r)
 w q r =
  let z = cong ‚Ñö.abs (‚Ñö.1/p+1/q (‚Ñö.maxWithPos Œ∑ q) (‚Ñö.maxWithPos Œ∑ r))
           ‚àô ‚Ñö.pos¬∑abs _ _ (‚Ñö.0‚â§‚Ñö‚Çä (inv‚Ñö‚Çä (‚Ñö.maxWithPos Œ∑ q ‚Ñö‚Çä¬∑ ‚Ñö.maxWithPos Œ∑ r)))
           ‚àô cong (fst (inv‚Ñö‚Çä (‚Ñö.maxWithPos Œ∑ q ‚Ñö‚Çä¬∑ ‚Ñö.maxWithPos Œ∑ r)) ‚Ñö.¬∑_)
       ((‚Ñö.absComm- _ _))
  in subst (‚Ñö._‚â§ fst (inv‚Ñö‚Çä (Œ∑ ‚Ñö‚Çä¬∑ Œ∑)) ‚Ñö.¬∑ ‚Ñö.abs (q ‚Ñö.- r))
       (sym z)
         (‚Ñö.‚â§Monotone¬∑-onNonNeg
           (fst (inv‚Ñö‚Çä (‚Ñö.maxWithPos Œ∑ q ‚Ñö‚Çä¬∑ ‚Ñö.maxWithPos Œ∑ r))) _ _ _
            (‚Ñö.inv‚Ñö‚Çä‚â§inv‚Ñö‚Çä _ _
              (‚Ñö.‚â§Monotone¬∑-onNonNeg _ _ _ _
                (‚Ñö.‚â§max _ _)
                (‚Ñö.‚â§max _ _)
                (‚Ñö.0‚â§‚Ñö‚Çä Œ∑)
                (‚Ñö.0‚â§‚Ñö‚Çä Œ∑)))
            (‚Ñö.maxDist (fst Œ∑) r q)
            (‚Ñö.0‚â§‚Ñö‚Çä (inv‚Ñö‚Çä (‚Ñö.maxWithPos Œ∑ q ‚Ñö‚Çä¬∑ ‚Ñö.maxWithPos Œ∑ r)))
            (‚Ñö.0‚â§abs (fst (‚Ñö.maxWithPos Œ∑ q) ‚Ñö.- fst (‚Ñö.maxWithPos Œ∑ r))))

Inv·µ£-restr : (Œ∑ : ‚Ñö‚Çä) ‚Üí Œ£ (‚Ñù ‚Üí ‚Ñù) (Lipschitz-‚Ñù‚Üí‚Ñù (inv‚Ñö‚Çä (Œ∑ ‚Ñö‚Çä¬∑ Œ∑)))
Inv·µ£-restr Œ∑ = (fromLipschitz (inv‚Ñö‚Çä (Œ∑ ‚Ñö‚Çä¬∑ Œ∑)))
                   (_ , Lipschitz-rat‚àò _ _ (snd (Inv·µ£-restr‚Ñö Œ∑)))


lower‚ÑöBound : ‚àÄ u ‚Üí 0 <·µ£ u ‚Üí ‚àÉ[ Œµ ‚àà ‚Ñö‚Çä ] (rat (fst Œµ) <·µ£ u)
lower‚ÑöBound u x =
  PT.map (Œª (Œµ , (x' , x'')) ‚Üí (Œµ , ‚Ñö.<‚Üí0< _ (<·µ£‚Üí<‚Ñö _ _ x')) , x'')
    (dense‚Ñöin‚Ñù 0 u x)


opaque
 unfolding abs·µ£ _‚â§·µ£_
 ‚â§abs·µ£ : ‚àÄ x ‚Üí x ‚â§·µ£ abs·µ£ x
 ‚â§abs·µ£ = ‚â°Continuous
   (Œª x ‚Üí max·µ£ x (abs·µ£ x))
   (Œª x ‚Üí abs·µ£ x)
   (cont‚ÇÇmax·µ£ _ _ IsContinuousId IsContinuousAbs·µ£)
   IsContinuousAbs·µ£
   Œª x ‚Üí  cong (max·µ£ (rat x) ‚àò rat) (sym (‚Ñö.abs'‚â°abs x))
      ‚àô‚àô cong rat (‚Ñö.‚â§‚Üímax _ _ (‚Ñö.‚â§abs x)) ‚àô‚àô
      cong rat (‚Ñö.abs'‚â°abs x )

from-abs< : ‚àÄ x y z ‚Üí abs·µ£ (x +·µ£ (-·µ£ y)) <·µ£ z
       ‚Üí (x +·µ£ (-·µ£ y) <·µ£ z)
          √ó ((y +·µ£ (-·µ£ x) <·µ£ z))
            √ó ((-·µ£ y) +·µ£ x <·µ£ z)
from-abs< x y z p = isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _) p ,
 isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _) (subst (_<·µ£ z) (minusComm-abs·µ£ x y) p)
   , isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _) (subst (((_<·µ£ z) ‚àò abs·µ£)) (+·µ£Comm x (-·µ£ y)) p)

open ‚Ñö.HLP


opaque
 unfolding _<·µ£_ _‚â§·µ£_ _+·µ£_
 ‚àÉrationalApprox‚â§ : ‚àÄ u ‚Üí (Œµ : ‚Ñö‚Çä) ‚Üí
    ‚àÉ[ q ‚àà ‚Ñö ] (((rat q) +·µ£ (-·µ£ u)) ‚â§·µ£ rat (fst Œµ)) √ó (u ‚â§·µ£ rat q)
 ‚àÉrationalApprox‚â§ = Elim‚Ñù-Prop.go w
  where
  w : Elim‚Ñù-Prop Œª u ‚Üí (Œµ : ‚Ñö‚Çä) ‚Üí
    ‚àÉ[ q ‚àà ‚Ñö ] (((rat q) +·µ£ (-·µ£ u)) ‚â§·µ£ rat (fst Œµ)) √ó (u ‚â§·µ£ rat q)
  w .Elim‚Ñù-Prop.ratA r Œµ =
   ‚à£  r ‚Ñö.+ fst (/2‚Çä Œµ) ,
    ‚â§‚Ñö‚Üí‚â§·µ£ _ _ (
      let zzz : r ‚Ñö.+ (fst (/2‚Çä Œµ) ‚Ñö.+ (‚Ñö.- r)) ‚â° fst (/2‚Çä Œµ)
          zzz = (lem--05 {r} {fst (/2‚Çä Œµ)})
          zz = (subst (‚Ñö._‚â§ fst Œµ) (sym (sym (‚Ñö.+Assoc _ _ _) ‚àô zzz))
             (‚Ñö.<Weaken‚â§ _ _ (‚Ñö.x/2<x (Œµ))) )
      in zz)
        , ‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.‚â§+‚Ñö‚Çä r r (/2‚Çä Œµ) (‚Ñö.isRefl‚â§ r)) ‚à£‚ÇÅ
  w .Elim‚Ñù-Prop.limA x y R Œµ =
    let z = ùï£-lim-dist x y (/4‚Çä Œµ)
    in PT.map (Œª (q , z , z') ‚Üí
         let (_ , Xzz' , Xzz) = from-abs< _ _ _
                      (ùï£-lim-dist x y (/4‚Çä Œµ))

             zz :  (-·µ£ (lim x y)) +·µ£ x (/2‚Çä (/4‚Çä Œµ))   ‚â§·µ£ rat (fst (/4‚Çä Œµ))
             zz = <·µ£Weaken‚â§·µ£ _ _ Xzz
             zz' :  (lim x y) +·µ£ (-·µ£ (x (/2‚Çä (/4‚Çä Œµ))))   ‚â§·µ£ rat (fst (/4‚Çä Œµ))
             zz' = <·µ£Weaken‚â§·µ£ _ _ Xzz'
         in q ‚Ñö.+ fst (/2‚Çä Œµ) ‚Ñö.+ fst (/2‚Çä (/4‚Çä Œµ))  ,
               let zzz = (‚â§·µ£-+o _ _ (rat (fst (/2‚Çä Œµ) ‚Ñö.+ fst (/2‚Çä (/4‚Çä Œµ))))
                       (‚â§·µ£Monotone+·µ£ _ _ _ _ z zz))
               in subst2 _‚â§·µ£_
                   (cong (_+·µ£ (rat (fst (/2‚Çä Œµ) ‚Ñö.+ fst (/2‚Çä (/4‚Çä Œµ)))))
                     (Lùêë.lem--059 {rat q}
                         {x (/2‚Çä (/4‚Çä Œµ))}
                         { -·µ£ lim x y} ‚àô +·µ£Comm (rat q) (-·µ£ lim x y))
                       ‚àô sym (+·µ£Assoc (-·µ£ lim x y) (rat q)
                      (rat (fst (/2‚Çä Œµ) ‚Ñö.+ fst (/2‚Çä (/4‚Çä Œµ))))) ‚àô
                        +·µ£Comm (-·µ£ lim x y)
                         (rat q +·µ£ rat (fst (/2‚Çä Œµ) ‚Ñö.+ fst (/2‚Çä (/4‚Çä Œµ))))
                          ‚àô cong (_+·µ£ (-·µ£ lim x y))
                            (+·µ£Assoc (rat q) (rat (fst (/2‚Çä Œµ)))
                             (rat (fst (/2‚Çä (/4‚Çä Œµ))))))
                   (cong rat
                    (dist‚Ñö! (fst Œµ) ¬∑[
                         ((ge[ ‚Ñö.[ 1 / 4 ] ]
                                ¬∑ge ge[ ‚Ñö.[ 1 / 2 ] ])
                             +ge  ge[ ‚Ñö.[ 1 / 4 ] ]
                             )
                                 +ge
                           (ge[ ‚Ñö.[ 1 / 2 ] ]
                             +ge (ge[ ‚Ñö.[ 1 / 4 ] ]
                                ¬∑ge ge[ ‚Ñö.[ 1 / 2 ] ]))
                       ‚â° ge1 ]))
                   zzz
                 ,
                  isTrans‚â§·µ£ _ _ _ (subst (_‚â§·µ£ (rat q +·µ£ rat (fst (/4‚Çä Œµ))))
                    Lùêë.lem--05 (‚â§·µ£Monotone+·µ£ _ _ _ _ z' zz'))
                     (‚â§‚Ñö‚Üí‚â§·µ£ _ _
                       (subst (q ‚Ñö.+ fst (/4‚Çä Œµ) ‚Ñö.‚â§_)
                         (‚Ñö.+Assoc _ _ _)
                          (‚Ñö.‚â§-o+ _ _ q dist‚Ñö‚â§!
                           Œµ [ ge[ ‚Ñö.[ 1 / 4 ] ] ‚â§
                           ge[ ‚Ñö.[ 1 / 2 ] ]
                             +ge (ge[ ‚Ñö.[ 1 / 4 ] ]
                                ¬∑ge ge[ ‚Ñö.[ 1 / 2 ] ]) ]) )))
         (R (/2‚Çä (/4‚Çä Œµ)) (/2‚Çä (/4‚Çä Œµ)))
  w .Elim‚Ñù-Prop.isPropA _ = isPropŒ† Œª _ ‚Üí squash‚ÇÅ


‚Ñömax-min-minus : ‚àÄ x y ‚Üí ‚Ñö.max (‚Ñö.- x) (‚Ñö.- y) ‚â° ‚Ñö.- (‚Ñö.min x y)
‚Ñömax-min-minus = ‚Ñö.elimBy‚â§
 (Œª x y p ‚Üí ‚Ñö.maxComm _ _ ‚àô‚àô p ‚àô‚àô cong ‚Ñö.-_ (‚Ñö.minComm _ _))
  Œª x y x‚â§y ‚Üí
    ‚Ñö.maxComm _ _ ‚àô‚àô ‚Ñö.‚â§‚Üímax (‚Ñö.- y) (‚Ñö.- x) (‚Ñö.minus-‚â§ x y x‚â§y)
      ‚àô‚àô cong ‚Ñö.-_ (sym (‚Ñö.‚â§‚Üímin _ _ x‚â§y))


-·µ£‚â§·µ£ : ‚àÄ x y ‚Üí x ‚â§·µ£ y ‚Üí -·µ£ y ‚â§·µ£ -·µ£ x
-·µ£‚â§·µ£ x y p = subst2 _‚â§·µ£_
    (cong (x +·µ£_) (+·µ£Comm _ _) ‚àô
      Lùêë.lem--05 {x} { -·µ£ y}) (Lùêë.lem--05 {y} { -·µ£ x}) (‚â§·µ£-+o _ _ ((-·µ£ x) +·µ£ (-·µ£ y)) p)

‚â§·µ£-·µ£ : ‚àÄ x y ‚Üí -·µ£ y ‚â§·µ£ -·µ£ x ‚Üí  x ‚â§·µ£ y
‚â§·µ£-·µ£ x y = subst2 _‚â§·µ£_ (-·µ£Invol x) (-·µ£Invol y) ‚àò -·µ£‚â§·µ£ (-·µ£ y) (-·µ£ x)

opaque
 unfolding _<·µ£_
 -·µ£<·µ£ : ‚àÄ x y ‚Üí x <·µ£ y ‚Üí -·µ£ y <·µ£ -·µ£ x
 -·µ£<·µ£ x y = PT.map
   Œª ((q , q') , z , z' , z'') ‚Üí
        (‚Ñö.- q' , ‚Ñö.- q) , -·µ£‚â§·µ£ _ _ z'' , ((‚Ñö.minus-< _ _ z') , -·µ£‚â§·µ£ _ _ z)

<·µ£-·µ£ : ‚àÄ x y ‚Üí -·µ£ y <·µ£ -·µ£ x ‚Üí  x <·µ£ y
<·µ£-·µ£ x y = subst2 _<·µ£_ (-·µ£Invol x) (-·µ£Invol y) ‚àò -·µ£<·µ£ (-·µ£ y) (-·µ£ x)

opaque
 unfolding _‚â§·µ£_

 abs·µ£NonPos : ‚àÄ x ‚Üí x ‚â§·µ£ 0 ‚Üí abs·µ£ x ‚â° -·µ£ x
 abs·µ£NonPos x p = abs-max x ‚àô z
  where
    z : x ‚â§·µ£ (-·µ£ x)
    z = isTrans‚â§·µ£ _ _ _ p (-·µ£‚â§·µ£ _ _ p)

opaque
 unfolding _+·µ£_

 ‚àÉrationalApprox< : ‚àÄ u ‚Üí (Œµ : ‚Ñö‚Çä) ‚Üí
    ‚àÉ[ q ‚àà ‚Ñö ] (((rat q) +·µ£ (-·µ£ u)) <·µ£ rat (fst Œµ)) √ó (u <·µ£ rat q)
 ‚àÉrationalApprox< u Œµ =
   PT.map (uncurry (Œª q (x , x') ‚Üí
      q ‚Ñö.+ (fst (/4‚Çä Œµ))  ,
           subst (_<·µ£ (rat (fst Œµ)))
             (Lùêë.lem--014 {rat q} {u} {rat (fst (/4‚Çä Œµ))})  (
              isTrans‚â§<·µ£ _ _ (rat (fst Œµ)) (‚â§·µ£-+o _ _ (rat (fst (/4‚Çä Œµ))) x)
              (<‚Ñö‚Üí<·µ£ _ _ $
                dist‚Ñö<! Œµ [ ge[ ‚Ñö.[ 1 / 2 ] ]
                  +ge ge[ ‚Ñö.[ 1 / 4 ] ] < ge1 ])) ,
               isTrans‚â§<·µ£ _ _ _ x'
                 (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.<+‚Ñö‚Çä' _ _ (/4‚Çä Œµ) (‚Ñö.isRefl‚â§ _) )) ))
             $ ‚àÉrationalApprox‚â§ u (/2‚Çä Œµ)


-- TODO: this is overcomplciated! it follows simply form density...

opaque
 unfolding _<·µ£_ _+·µ£_
 ‚àÉrationalApprox : ‚àÄ u ‚Üí (Œµ : ‚Ñö‚Çä) ‚Üí
    ‚àÉ[ (q , q') ‚àà (‚Ñö √ó ‚Ñö) ] (q' ‚Ñö.- q ‚Ñö.< fst Œµ) √ó
                            ((rat q <·µ£ u) √ó (u <·µ£ rat q'))
 ‚àÉrationalApprox u Œµ =
   PT.map2 (uncurry (Œª q (x , x') ‚Üí uncurry (Œª q' (y , y') ‚Üí
       ((‚Ñö.- (q ‚Ñö.+ (fst (/4‚Çä Œµ)))) , q' ‚Ñö.+ (fst (/4‚Çä Œµ))) ,
             let zz = ‚Ñö.‚â§-+o _ _ (fst (/4‚Çä Œµ) ‚Ñö.+ fst (/4‚Çä Œµ))
                       (‚â§·µ£‚Üí‚â§‚Ñö _ _ (subst (_‚â§·µ£
                        (rat (fst (/2‚Çä (/4‚Çä Œµ)))
                       +·µ£ rat (fst (/2‚Çä (/4‚Çä Œµ)))))
                        (Lùêë.lem--059 {rat q} { -·µ£ u} {rat q'} )
                       (‚â§·µ£Monotone+·µ£ _ _ _ _ x y)))
                 zzz : (fst (/2‚Çä (/4‚Çä Œµ)) ‚Ñö.+ fst (/2‚Çä (/4‚Çä Œµ)))
                     ‚Ñö.+ (fst (/4‚Çä Œµ) ‚Ñö.+ fst (/4‚Çä Œµ)) ‚Ñö.< fst Œµ
                 zzz = dist‚Ñö<! Œµ [
                              (ge[ ‚Ñö.[ 1 / 4 ] ]
                                 ¬∑ge ge[ ‚Ñö.[ 1 / 2 ] ]
                               +ge ge[ ‚Ñö.[ 1 / 4 ] ]
                                 ¬∑ge ge[ ‚Ñö.[ 1 / 2 ] ] )
                             +ge (ge[ ‚Ñö.[ 1 / 4 ] ]
                               +ge ge[ ‚Ñö.[ 1 / 4 ] ]) < ge1 ]
             in ‚Ñö.isTrans‚â§< _ _ _
                    (subst (‚Ñö._‚â§ _)
                     (cong (‚Ñö._+ ((fst (/4‚Çä Œµ) ‚Ñö.+ fst (/4‚Çä Œµ))))
                       (‚Ñö.+Comm q q')
                      ‚àô‚àô ùêê'.+ShufflePairs _ _ _ _
                      ‚àô‚àô cong (_ ‚Ñö.+_) (sym (‚Ñö.-Invol _)))
                     zz)
                     zzz
                  ,
             (subst (rat (‚Ñö.- (q ‚Ñö.+ fst (/4‚Çä Œµ))) <·µ£_) (-·µ£Invol u)
                (-·µ£<·µ£ _ _ $ isTrans‚â§<·µ£ _ _ _ x'
                 (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.<+‚Ñö‚Çä' _ _ (/4‚Çä Œµ) (‚Ñö.isRefl‚â§ _) )))
                  , isTrans‚â§<·µ£ _ _ _ y'
                 (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.<+‚Ñö‚Çä' _ _ (/4‚Çä Œµ) (‚Ñö.isRefl‚â§ _) )))
      )
      )) (‚àÉrationalApprox‚â§ (-·µ£ u) (/2‚Çä (/4‚Çä Œµ)))
         (‚àÉrationalApprox‚â§ u (/2‚Çä (/4‚Çä Œµ)))


opaque
 unfolding _<·µ£_ _+·µ£_
 <·µ£-+o-pre : ‚àÄ m n o  ‚Üí m ‚Ñö.< n  ‚Üí (rat m +·µ£ o) <·µ£ (rat n +·µ£ o)
 <·µ£-+o-pre m n o m<n =
   PT.rec2 squash‚ÇÅ (Œª (q , x , x') ((q' , q'') , y , y' , y'') ‚Üí
      let x* : (rat q) ‚â§·µ£ rat (fst (/4‚Çä Œî)) +·µ£ ((rat m +·µ£ o))
          x* =  subst (_‚â§·µ£ rat (fst (/4‚Çä Œî)) +·µ£ ((rat m +·µ£ o)))
                 (Lùêë.lem--00)
                  (‚â§·µ£-+o _ _
                   ((rat m +·µ£ o)) (<·µ£Weaken‚â§·µ£ _ _ x))

          y* : (rat (fst (/4‚Çä Œî)) +·µ£ (rat m +·µ£ o)) ‚â§·µ£
                (-·µ£ (rat (fst (/4‚Çä Œî)) +·µ£ (-·µ£ (rat n +·µ£ o))))
          y* = subst2 {x = rat (fst (/2‚Çä Œî))
                  +·µ£ (rat m +·µ£ (o +·µ£ (-·µ£ (rat (fst (/4‚Çä Œî))))))}
                 _‚â§·µ£_ -- (rat m +·µ£ (o +·µ£ (-·µ£ rat (fst (/4‚Çä Œî)))))
               ((Œª i ‚Üí +·µ£Comm (rat (fst (/2‚Çä Œî)))
                    (+·µ£Assoc (rat m) o (-·µ£ rat (fst (/4‚Çä Œî))) i) i)
                     ‚àô sym (+·µ£Assoc _ _ _) ‚àô
                       cong ((rat m +·µ£ o) +·µ£_)
                         (cong rat (dist‚Ñö! (fst Œî)
                           ¬∑[ ((neg-ge ge[ ‚Ñö.[ 1 / 4 ] ])
                            +ge ge[ ‚Ñö.[ 1 / 2 ] ])
                           ‚â° ge[ ‚Ñö.[ 1 / 4 ] ] ]))
                         ‚àô +·µ£Comm _ _ )
               (+·µ£Assoc _ _ _ ‚àô
                 cong (_+·µ£ (o +·µ£ (-·µ£ rat (fst (/4‚Çä Œî)))))
                    (Lùêë.lem--00 {rat n} {rat m}) ‚àô
                     +·µ£Assoc _ _ _ ‚àô
                      (Œª i ‚Üí +·µ£Comm (-·µ£Invol (rat n +·µ£ o) (~ i))
                        (-·µ£ rat (fst (/4‚Çä Œî))) i) ‚àô
                       sym (-·µ£Distr (rat (fst (/4‚Çä Œî))) ((-·µ£ (rat n +·µ£ o)))) )
               (‚â§·µ£-+o _ _ (rat m +·µ£ (o +·µ£ (-·µ£ (rat (fst (/4‚Çä Œî))))))
                 (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.<Weaken‚â§ _ _ (x/2<x Œî))))

          z* : -·µ£ (rat (fst (/4‚Çä Œî)) +·µ£ (-·µ£ (rat n +·µ£ o)))
                ‚â§·µ£ ((rat q'))
          z* = subst ((-·µ£ (rat (fst (/4‚Çä Œî)) +·µ£ (-·µ£ (rat n +·µ£ o)))) ‚â§·µ£_)
                (cong (-·µ£_) (sym (+·µ£Assoc (rat q'') (-·µ£ rat q') _)
                    ‚àô Lùêë.lem--05 {rat q''} {(-·µ£ rat q')}) ‚àô
                      -·µ£Invol (rat q'))

                     (-·µ£‚â§·µ£ _ _ (‚â§·µ£Monotone+·µ£ _ _ _ _
                 (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.<Weaken‚â§ _ _ y))
                  (<·µ£Weaken‚â§·µ£ _ _ (-·µ£<·µ£ _ _ y''))))
          z : rat q ‚â§·µ£ rat q'
          z = isTrans‚â§·µ£ _ _ _
               (isTrans‚â§·µ£ _ _ _
                   x* y* ) z*
      in isTrans<·µ£ _ _ _ x'
         (isTrans‚â§<·µ£ _ _ _ z y'))
     (‚àÉrationalApprox< (rat m +·µ£ o) (/4‚Çä Œî))
      ((‚àÉrationalApprox (rat n +·µ£ o) (/4‚Çä Œî)))

  where
  Œî : ‚Ñö‚Çä
  Œî = ‚Ñö.<‚Üí‚Ñö‚Çä m n m<n

 <·µ£-+o : ‚àÄ m n o ‚Üí  m <·µ£ n ‚Üí (m +·µ£ o) <·µ£ (n +·µ£ o)
 <·µ£-+o m n o = PT.rec squash‚ÇÅ
   Œª ((q , q') , x , x' , x'') ‚Üí
    let y : (m +·µ£ o) ‚â§·µ£ (rat q +·µ£ o)
        y = ‚â§·µ£-+o m (rat q) o x
        y'' : (rat q' +·µ£ o) ‚â§·µ£ (n +·µ£ o)
        y'' = ‚â§·µ£-+o (rat q') n o x''

        y' : (rat q +·µ£ o) <·µ£ (rat q' +·µ£ o)
        y' = <·µ£-+o-pre q q' o x'


    in isTrans<‚â§·µ£ _ _ _ (isTrans‚â§<·µ£ _ _ _ y y') y''

<·µ£-o+ : ‚àÄ m n o ‚Üí  m <·µ£ n ‚Üí (o +·µ£ m) <·µ£ (o +·µ£ n)
<·µ£-o+ m n o = subst2 _<·µ£_ (+·µ£Comm m o) (+·µ£Comm n o) ‚àò <·µ£-+o m n o

<·µ£Monotone+·µ£ : ‚àÄ m n o s ‚Üí m <·µ£ n ‚Üí o <·µ£ s ‚Üí (m +·µ£ o) <·µ£ (n +·µ£ s)
<·µ£Monotone+·µ£ m n o s m<n o<s =
  isTrans<·µ£ _ _ _ (<·µ£-+o m n o m<n) (<·µ£-o+ o s n o<s)

‚â§<·µ£Monotone+·µ£ : ‚àÄ m n o s ‚Üí m ‚â§·µ£ n ‚Üí o <·µ£ s ‚Üí (m +·µ£ o) <·µ£ (n +·µ£ s)
‚â§<·µ£Monotone+·µ£ m n o s m‚â§n o<s =
  isTrans‚â§<·µ£ _ _ _ (‚â§·µ£-+o m n o m‚â§n) (<·µ£-o+ o s n o<s)

<‚â§·µ£Monotone+·µ£ : ‚àÄ m n o s ‚Üí m <·µ£ n ‚Üí o ‚â§·µ£ s ‚Üí (m +·µ£ o) <·µ£ (n +·µ£ s)
<‚â§·µ£Monotone+·µ£ m n o s m<n o‚â§s =
  isTrans<‚â§·µ£ _ _ _ (<·µ£-+o m n o m<n) (‚â§·µ£-o+ o s n o‚â§s)



‚Ñù‚Çä+ : (m : ‚Ñù‚Çä) (n : ‚Ñù‚Çä) ‚Üí 0 <·µ£ (fst m) +·µ£ (fst n)
‚Ñù‚Çä+ (m , <m) (n , <n) = isTrans‚â°<·µ£ _ _ _ (sym (+·µ£-rat  _ _)) (<·µ£Monotone+·µ£ 0 m 0 n <m <n)


opaque
 unfolding _<·µ£_
 isIrrefl<·µ£ : BinaryRelation.isIrrefl _<·µ£_
 isIrrefl<·µ£ a = PT.rec isProp‚ä•
   Œª ((q , q') , (a‚â§q , q<q' , q'‚â§a)) ‚Üí
     ‚Ñö.‚â§‚Üí‚âØ _ _ (‚â§·µ£‚Üí‚â§‚Ñö _ _ (isTrans‚â§·µ£ _ _ _ q'‚â§a a‚â§q)) q<q'

_ÔºÉ_ : ‚Ñù ‚Üí ‚Ñù ‚Üí Type
x ÔºÉ y = (x <·µ£ y) ‚äé (y <·µ£ x)

isPropÔºÉ : ‚àÄ x y ‚Üí isProp (x ÔºÉ y)
isPropÔºÉ x y (inl x‚ÇÅ) (inl x‚ÇÇ) = cong inl (isProp<·µ£ _ _ x‚ÇÅ x‚ÇÇ)
isPropÔºÉ x y (inl x‚ÇÅ) (inr x‚ÇÇ) = ‚ä•.rec (isAsym<·µ£ _ _ x‚ÇÅ x‚ÇÇ)
isPropÔºÉ x y (inr x‚ÇÅ) (inl x‚ÇÇ) = ‚ä•.rec (isAsym<·µ£ _ _ x‚ÇÅ x‚ÇÇ)
isPropÔºÉ x y (inr x‚ÇÅ) (inr x‚ÇÇ) = cong inr (isProp<·µ£ _ _ x‚ÇÅ x‚ÇÇ)


ratÔºÉ : ‚àÄ q q' ‚Üí (rat q ÔºÉ rat q') ‚âÉ (q ‚Ñö.# q' )
ratÔºÉ q q' = propBiimpl‚ÜíEquiv (isPropÔºÉ _ _) (‚Ñö.isProp# _ _)
  (‚äé.map (<·µ£‚Üí<‚Ñö _ _) (<·µ£‚Üí<‚Ñö _ _))
  (‚äé.map (<‚Ñö‚Üí<·µ£ _ _) (<‚Ñö‚Üí<·µ£ _ _))


decCut : ‚àÄ x ‚Üí 0 <·µ£ (abs·µ£ x) ‚Üí (0 ÔºÉ x)
decCut x 0<absX =
  PT.rec (isPropÔºÉ 0 x)
    (Œª (Œî , Œî<absX) ‚Üí
      PT.rec (isPropÔºÉ 0 x)
         (Œª (q , q-x<Œî/2 , x<q) ‚Üí
          let z‚Üí : 0 ‚Ñö.< q ‚Üí 0 <·µ£ x
              z‚Üí 0<q =
                let zzz : rat q <·µ£ rat (fst (/2‚Çä Œî)) ‚Üí
                            0 <·µ£ x
                    zzz q<Œî/2 =
                      let zzz' =
                           subst2 _‚â§·µ£_
                             (cong abs·µ£ (Lùêë.lem--05 {rat q} {x}))
                               (cong‚ÇÇ _+·µ£_
                                 (abs·µ£NonNeg _
                                      (‚â§‚Ñö‚Üí‚â§·µ£ _ _
                                         (‚Ñö.<Weaken‚â§ 0 q 0<q )))
                                  (minusComm-abs·µ£ _ _ ‚àô
                                       abs·µ£NonNeg _
                                         (subst (_‚â§·µ£ (rat q +·µ£ (-·µ£ x)))
                                           (+-·µ£ x) (‚â§·µ£-+o _ _ (-·µ£ x)
                                          (<·µ£Weaken‚â§·µ£ _ _ x<q)))))
                              (abs·µ£-triangle (rat q) (x +·µ£ (-·µ£ (rat q))))
                          zzzz' = subst (abs·µ£ x <·µ£_) (+·µ£-rat _ _ ‚àô cong rat
                               (‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst Œî)))
                             (isTrans‚â§<·µ£ _ _ _ zzz'
                                     ((<·µ£Monotone+·µ£
                                       _ _ _ _ q<Œî/2 q-x<Œî/2)))
                      in ‚ä•.rec (isAsym<·µ£ _ _ Œî<absX zzzz')
                in ‚äé.rec
                    (Œª Œî‚â§q ‚Üí
                       subst2 _<·µ£_
                          (+-·µ£ (rat (fst (/2‚Çä Œî))))
                          ((cong (rat q +·µ£_) (-·µ£Distr (rat q) (-·µ£ x))
                             ‚àô (Œª i ‚Üí +·µ£Assoc (rat q) (-·µ£ (rat q))
                                (-·µ£Invol x i) i) ‚àô
                              cong (_+·µ£ x) (+-·µ£ (rat q)) ‚àô +IdL x)) --
                          (‚â§<·µ£Monotone+·µ£ (rat (fst (/2‚Çä Œî))) (rat q) _ _
                            (‚â§‚Ñö‚Üí‚â§·µ£ _ _ Œî‚â§q) (-·µ£<·µ£ _ _ q-x<Œî/2)))
                   (zzz ‚àòS <‚Ñö‚Üí<·µ£ _ _ )
                    (‚Ñö.Dichotomy‚Ñö (fst (/2‚Çä Œî)) q)
              z‚Üê : q ‚Ñö.‚â§ 0 ‚Üí x <·µ£ 0
              z‚Üê q‚â§0 = isTrans<‚â§·µ£ _ _ _ x<q (‚â§‚Ñö‚Üí‚â§·µ£ q 0 q‚â§0)
          in ‚äé.rec (inr ‚àò z‚Üê) (inl ‚àò z‚Üí) (‚Ñö.Dichotomy‚Ñö q 0))
         (‚àÉrationalApprox< x (/2‚Çä Œî)))
     (lower‚ÑöBound _ 0<absX)


opaque
 unfolding _<·µ£_
 ÔºÉ‚âÉ0<dist : ‚àÄ x y ‚Üí x ÔºÉ y ‚âÉ (0 <·µ£ (abs·µ£ (x +·µ£ (-·µ£ y))))
 ÔºÉ‚âÉ0<dist x y = propBiimpl‚ÜíEquiv (isPropÔºÉ _ _) squash‚ÇÅ
   (‚äé.rec ((Œª x<y ‚Üí subst (0 <·µ£_) (minusComm-abs·µ£ y x)
                 (isTrans<‚â§·µ£ _ _ _ (subst (_<·µ£ (y +·µ£ (-·µ£ x)))
              (+-·µ£ x) (<·µ£-+o _ _ (-·µ£ x) x<y)) (‚â§abs·µ£ _ ))))
          (Œª y<x ‚Üí isTrans<‚â§·µ£ _ _ _ (subst (_<·µ£ (x +·µ£ (-·µ£ y)))
              (+-·µ£ y) (<·µ£-+o _ _ (-·µ£ y) y<x)) (‚â§abs·µ£ _ )))
   (‚äé.rec (inr ‚àòS subst2 _<·µ£_ (+IdL _) Lùêë.lem--00 ‚àòS <·µ£-+o _ _ y)
          (inl ‚àòS subst2 _<·µ£_ Lùêë.lem--05 (+IdR _) ‚àòS <·µ£-o+ _ _ y)
           ‚àòS decCut (x +·µ£ (-·µ£ y)))

-- ÔºÉ‚âÉabs< : ‚àÄ x y ‚Üí abs·µ£ x <·µ£ y ‚âÉ
-- ÔºÉ‚âÉabs< : ?

isSymÔºÉ : BinaryRelation.isSym _ÔºÉ_
isSymÔºÉ _ _ = fst ‚äé-swap-‚âÉ

opaque
 unfolding _<·µ£_
 0ÔºÉ‚Üí0<abs : ‚àÄ r ‚Üí 0 ÔºÉ r ‚Üí 0 <·µ£ abs·µ£ r
 0ÔºÉ‚Üí0<abs r 0ÔºÉr =
   subst (rat 0 <·µ£_) (cong abs·µ£ (+IdR r))
     (fst (ÔºÉ‚âÉ0<dist r 0) (isSymÔºÉ 0 r 0ÔºÉr))

opaque
 unfolding _‚â§·µ£_ _+·µ£_
 ‚â§·µ£-¬∑o : ‚àÄ m n o ‚Üí 0 ‚Ñö.‚â§ o  ‚Üí  m ‚â§·µ£ n ‚Üí (m ¬∑·µ£ rat o ) ‚â§·µ£ (n ¬∑·µ£ rat o)
 ‚â§·µ£-¬∑o m n o 0‚â§o p = sym (¬∑·µ£MaxDistrPos m n o 0‚â§o) ‚àô
   cong (_¬∑·µ£ rat o) p


 ‚â§·µ£-o¬∑ : ‚àÄ m n o ‚Üí 0 ‚Ñö.‚â§ o ‚Üí  m ‚â§·µ£ n ‚Üí (rat o ¬∑·µ£ m ) ‚â§·µ£ (rat o ¬∑·µ£ n)
 ‚â§·µ£-o¬∑ m n o q p =
     cong‚ÇÇ max·µ£ (¬∑·µ£Comm _ _ ) (¬∑·µ£Comm _ _ ) ‚àô ‚â§·µ£-¬∑o m n o q p ‚àô ¬∑·µ£Comm _ _

 <·µ£‚ÜíŒî : ‚àÄ x y ‚Üí x <·µ£ y ‚Üí ‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ] rat (fst Œ¥) <·µ£ y +·µ£ (-·µ£ x)
 <·µ£‚ÜíŒî x y = PT.map Œª ((q , q') , (a , a' , a'')) ‚Üí
               /2‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä q q' a') ,
                 let zz = isTrans<‚â§·µ£ _ _ _ (<‚Ñö‚Üí<·µ£ _ _ a') a''
                     zz' = -·µ£‚â§·µ£ _ _ a
                     zz'' = ‚â§·µ£Monotone+·µ£ _ _ _ _ a'' zz'
                 in isTrans<‚â§·µ£ _ _ _
                        (<‚Ñö‚Üí<·µ£ _ _ (x/2<x (‚Ñö.<‚Üí‚Ñö‚Çä q q' a')))
                        zz''

 a<b-c‚áíc<b-a : ‚àÄ a b c ‚Üí a <·µ£ b +·µ£ (-·µ£ c) ‚Üí c <·µ£ b +·µ£ (-·µ£ a)
 a<b-c‚áíc<b-a a b c p =
    subst2 _<·µ£_ (Lùêë.lem--05 {a} {c})
                 (Lùêë.lem--060 {b} {c} {a})
      (<·µ£-+o _ _ (c +·µ£ (-·µ£ a)) p)

 a‚â§b-c‚áíc‚â§b-a : ‚àÄ a b c ‚Üí a ‚â§·µ£ b -·µ£ c ‚Üí c ‚â§·µ£ b -·µ£ a
 a‚â§b-c‚áíc‚â§b-a a b c p =
    subst2 _‚â§·µ£_ (Lùêë.lem--05 {a} {c})
                 (Lùêë.lem--060 {b} {c} {a})
      (‚â§·µ£-+o _ _ (c -·µ£ a) p)

 a<b-c‚áía+c<b : ‚àÄ a b c ‚Üí a <·µ£ b +·µ£ (-·µ£ c) ‚Üí a +·µ£ c <·µ£ b
 a<b-c‚áía+c<b a b c p =
    subst ((a +·µ£ c) <·µ£_)
         (Lùêë.lem--00 {b} {c})
      (<·µ£-+o _ _ c p)



 a+c<b‚áía<b-c : ‚àÄ a b c ‚Üí a +·µ£ c <·µ£ b  ‚Üí a <·µ£ b -·µ£ c
 a+c<b‚áía<b-c a b c p =
    subst (_<·µ£ b -·µ£ c)
         (ùêë'.plusMinus _ _)
      (<·µ£-+o _ _ (-·µ£ c) p)



 a-b‚â§c‚áía-c‚â§b : ‚àÄ a b c ‚Üí a +·µ£ (-·µ£ b) ‚â§·µ£ c  ‚Üí a +·µ£ (-·µ£ c) ‚â§·µ£ b
 a-b‚â§c‚áía-c‚â§b a b c p =
   subst2 _‚â§·µ£_
     (Lùêë.lem--060 {a} {b} {c})
     (Lùêë.lem--05 {c} {b})
      (‚â§·µ£-+o _ _ (b +·µ£ (-·µ£ c)) p)

 a-b<c‚áía-c<b : ‚àÄ a b c ‚Üí a +·µ£ (-·µ£ b) <·µ£ c  ‚Üí a +·µ£ (-·µ£ c) <·µ£ b
 a-b<c‚áía-c<b a b c p =
   subst2 _<·µ£_
     (Lùêë.lem--060 {a} {b} {c})
     (Lùêë.lem--05 {c} {b})
      (<·µ£-+o _ _ (b +·µ£ (-·µ£ c)) p)


 a-b<c‚áía<c+b : ‚àÄ a b c ‚Üí a +·µ£ (-·µ£ b) <·µ£ c  ‚Üí a <·µ£ c +·µ£ b
 a-b<c‚áía<c+b a b c p =
   subst (_<·µ£ (c +·µ£ b))
     (Lùêë.lem--00 {a} {b})
      (<·µ£-+o _ _ b p)

 a-b‚â§c‚áía‚â§c+b : ‚àÄ a b c ‚Üí a +·µ£ (-·µ£ b) ‚â§·µ£ c  ‚Üí a ‚â§·µ£ c +·µ£ b
 a-b‚â§c‚áía‚â§c+b a b c p =
   subst (_‚â§·µ£ (c +·µ£ b))
     (Lùêë.lem--00 {a} {b})
      (‚â§·µ£-+o _ _ b p)

 a<c+b‚áía-c<b : ‚àÄ a b c ‚Üí a <·µ£ c +·µ£ b  ‚Üí a -·µ£ c <·µ£ b
 a<c+b‚áía-c<b a b c p =
   subst ((a -·µ£ c) <·µ£_) (+·µ£Comm _ _ ‚àô Lùêë.lem--04 {c} {b}) (<·µ£-+o _ _ (-·µ£ c) p)

 a<c+b‚áía-b<c : ‚àÄ a b c ‚Üí a <·µ£ c +·µ£ b  ‚Üí a -·µ£ b <·µ£ c
 a<c+b‚áía-b<c a b c p =
   a<c+b‚áía-c<b a c b (isTrans<‚â°·µ£ _ _ _ p (+·µ£Comm _ _))


 a‚â§c+b‚áía-c‚â§b : ‚àÄ a b c ‚Üí a ‚â§·µ£ c +·µ£ b  ‚Üí a -·µ£ c ‚â§·µ£ b
 a‚â§c+b‚áía-c‚â§b a b c p =
   subst ((a -·µ£ c) ‚â§·µ£_) (+·µ£Comm _ _ ‚àô Lùêë.lem--04 {c} {b}) (‚â§·µ£-+o _ _ (-·µ£ c) p)


 a+b‚â§c‚áíb‚â§c-b : ‚àÄ a b c ‚Üí a +·µ£ b ‚â§·µ£ c   ‚Üí b  ‚â§·µ£ c -·µ£ a
 a+b‚â§c‚áíb‚â§c-b a b c p = subst2 _‚â§·µ£_
   Lùêë.lem--04 (+·µ£Comm _ _)
   (‚â§·µ£-o+ _ _ (-·µ£ a) p)

 b‚â§c-b‚áía+b‚â§c : ‚àÄ a b c ‚Üí b  ‚â§·µ£ c -·µ£ a ‚Üí a +·µ£ b ‚â§·µ£ c
 b‚â§c-b‚áía+b‚â§c a b c p = subst (_ ‚â§·µ£_)
   Lùêë.lem--05
   (‚â§·µ£-o+ _ _ a p)

 a-b‚â§c-d‚áía+d‚â§c+b : ‚àÄ a b c d ‚Üí a -·µ£ b ‚â§·µ£ c -·µ£ d ‚Üí a +·µ£ d ‚â§·µ£ c +·µ£ b
 a-b‚â§c-d‚áía+d‚â§c+b a b c d x =
   isTrans‚â°‚â§·µ£ _ _ _ (+·µ£Comm _ _) (a-b‚â§c‚áía‚â§c+b _ _ _
    (isTrans‚â°‚â§·µ£ _ _ _ (sym (+·µ£Assoc _ _ _))
    (b‚â§c-b‚áía+b‚â§c _ _ _ x)))

 a+d‚â§c+b‚áía-b‚â§c-d : ‚àÄ a b c d ‚Üí a +·µ£ d ‚â§·µ£ c +·µ£ b ‚Üí a -·µ£ b ‚â§·µ£ c -·µ£ d
 a+d‚â§c+b‚áía-b‚â§c-d a b c d x =
   a-b‚â§c-d‚áía+d‚â§c+b a (-·µ£ d) c (-·µ£ b)
    (subst2 (Œª d b ‚Üí a +·µ£ d ‚â§·µ£ c +·µ£ b)
     (sym (-·µ£Invol d)) (sym (-·µ£Invol b)) x)

 b<c-b‚áía+b<c : ‚àÄ a b c ‚Üí b  <·µ£ c -·µ£ a ‚Üí a +·µ£ b <·µ£ c
 b<c-b‚áía+b<c a b c p = subst (_ <·µ£_)
   Lùêë.lem--05
   (<·µ£-o+ _ _ a p)


 ‚â§-o+-cancel : ‚àÄ m n o ‚Üí  o +·µ£ m ‚â§·µ£ o +·µ£ n ‚Üí m ‚â§·µ£ n
 ‚â§-o+-cancel m n o p =
      subst2 (_‚â§·µ£_) Lùêë.lem--04 Lùêë.lem--04
      (‚â§·µ£-o+ _ _ (-·µ£ o) p)

 <-o+-cancel : ‚àÄ m n o ‚Üí  o +·µ£ m <·µ£ o +·µ£ n ‚Üí m <·µ£ n
 <-o+-cancel m n o p =
      subst2 (_<·µ£_) Lùêë.lem--04 Lùêë.lem--04
      (<·µ£-o+ _ _ (-·µ£ o) p)


 ‚â§-+o-cancel : ‚àÄ m n o ‚Üí  m +·µ£ o ‚â§·µ£ n +·µ£ o ‚Üí m ‚â§·µ£ n
 ‚â§-+o-cancel m n o p =
      subst2 (_‚â§·µ£_) (sym Lùêë.lem--034) (sym Lùêë.lem--034)
      (‚â§·µ£-+o _ _ (-·µ£ o) p)

 <-+o-cancel : ‚àÄ m n o ‚Üí  m +·µ£ o <·µ£ n +·µ£ o ‚Üí m <·µ£ n
 <-+o-cancel m n o p =
      subst2 (_<·µ£_) (sym Lùêë.lem--034) (sym Lùêë.lem--034)
      (<·µ£-+o _ _ (-·µ£ o) p)




 x‚â§y‚Üí0‚â§y-x : ‚àÄ x y ‚Üí  x ‚â§·µ£ y  ‚Üí 0 ‚â§·µ£ y +·µ£ (-·µ£ x)
 x‚â§y‚Üí0‚â§y-x x y p =
   subst (_‚â§·µ£ y +·µ£ (-·µ£ x)) (+-·µ£ x) (‚â§·µ£-+o x y (-·µ£ x) p)

 x<y‚Üí0<y-x : ‚àÄ x y ‚Üí  x <·µ£ y  ‚Üí 0 <·µ£ y +·µ£ (-·µ£ x)
 x<y‚Üí0<y-x x y p =
   subst (_<·µ£ y +·µ£ (-·µ£ x)) (+-·µ£ x) (<·µ£-+o x y (-·µ£ x) p)


 0<y-x‚Üíx<y : ‚àÄ x y ‚Üí 0 <·µ£ y +·µ£ (-·µ£ x) ‚Üí x <·µ£ y
 0<y-x‚Üíx<y x y p =
   subst2 (_<·µ£_)
    (+IdL x) (sym (Lùêë.lem--035 {y} {x}))
     (<·µ£-+o 0 (y +·µ£ (-·µ£ x)) x p)

 x‚â§y‚âÉ0‚â§y-x : ‚àÄ x y ‚Üí (x ‚â§·µ£ y) ‚âÉ (0 ‚â§·µ£ y -·µ£ x)
 x‚â§y‚âÉ0‚â§y-x x y =   propBiimpl‚ÜíEquiv (isSet‚Ñù _ _) (isSet‚Ñù _ _)
    (x‚â§y‚Üí0‚â§y-x x y)
     Œª p ‚Üí  subst2 (_‚â§·µ£_)
    (+IdL x) (sym (Lùêë.lem--035 {y} {x}))
     (‚â§·µ£-+o 0 (y +·µ£ (-·µ£ x)) x p)


 x<y‚âÉ0<y-x : ‚àÄ x y ‚Üí (x <·µ£ y) ‚âÉ (0 <·µ£ y -·µ£ x)
 x<y‚âÉ0<y-x x y =   propBiimpl‚ÜíEquiv squash‚ÇÅ squash‚ÇÅ
    (x<y‚Üí0<y-x x y) (0<y-x‚Üíx<y x y)



 x<y‚Üíx-y<0 : ‚àÄ x y ‚Üí  x <·µ£ y  ‚Üí x -·µ£ y <·µ£ 0
 x<y‚Üíx-y<0 x y p =
   subst (x -·µ£ y <·µ£_) (+-·µ£ y) (<·µ£-+o x y (-·µ£ y) p)

 x-y<0‚Üíx<y : ‚àÄ x y ‚Üí x -·µ£ y <·µ£ 0 ‚Üí  x <·µ£ y
 x-y<0‚Üíx<y x y p =

    (0<y-x‚Üíx<y _  _ (subst (0 <·µ£_) (-[x-y]‚â°y-x _ _) (-·µ£<·µ£ (x -·µ£ y) 0 p)))


 x<y‚âÉx-y<0 : ‚àÄ x y ‚Üí (x <·µ£ y) ‚âÉ (x -·µ£ y <·µ£ 0)
 x<y‚âÉx-y<0 x y =   propBiimpl‚ÜíEquiv squash‚ÇÅ squash‚ÇÅ
    (x<y‚Üíx-y<0 x y) (x-y<0‚Üíx<y x y)


 x‚â§y‚Üíx-y‚â§0 : ‚àÄ x y ‚Üí  x ‚â§·µ£ y  ‚Üí x -·µ£ y ‚â§·µ£ 0
 x‚â§y‚Üíx-y‚â§0 x y p =
   subst (x -·µ£ y ‚â§·µ£_) (+-·µ£ y) (‚â§·µ£-+o x y (-·µ£ y) p)

 x-y‚â§0‚Üíx‚â§y : ‚àÄ x y ‚Üí x -·µ£ y ‚â§·µ£ 0 ‚Üí  x ‚â§·µ£ y
 x-y‚â§0‚Üíx‚â§y x y p =

    (invEq (x‚â§y‚âÉ0‚â§y-x _  _) (subst (0 ‚â§·µ£_) (-[x-y]‚â°y-x _ _) (-·µ£‚â§·µ£ (x -·µ£ y) 0 p)))

 x‚â§y‚âÉx-y‚â§0 : ‚àÄ x y ‚Üí (x ‚â§·µ£ y) ‚âÉ (x -·µ£ y ‚â§·µ£ 0)
 x‚â§y‚âÉx-y‚â§0 x y =   propBiimpl‚ÜíEquiv (isProp‚â§·µ£ _ _) (isProp‚â§·µ£ _ _)
    (x‚â§y‚Üíx-y‚â§0 x y) (x-y‚â§0‚Üíx‚â§y x y)



inv‚Ñù'' : Œ£ (‚àÄ r ‚Üí ‚àÉ[ œÉ ‚àà ‚Ñö‚Çä ] (rat (fst œÉ) <·µ£ r) ‚Üí ‚Ñù)
      Œª _ ‚Üí Œ£ (‚àÄ r ‚Üí 0 <·µ£ r ‚Üí ‚Ñù) (IsContinuousWithPred (Œª r ‚Üí _ , isProp<·µ£ _ _))
inv‚Ñù'' = f , (Œª r 0<r ‚Üí f r (lower‚ÑöBound r 0<r)) ,
   ctnF

 where

 2co : ‚àÄ œÉ œÉ' r
    ‚Üí (rat (fst œÉ ) <·µ£ r)
    ‚Üí (rat (fst œÉ') <·µ£ r)
    ‚Üí fst (Inv·µ£-restr œÉ) r ‚â° fst (Inv·µ£-restr œÉ') r

 2co œÉ œÉ' = Elim‚Ñù-Prop.go w
  where
  w : Elim‚Ñù-Prop _
  w .Elim‚Ñù-Prop.ratA x œÉ<x œÉ'<x =
    cong (rat ‚àò fst ‚àò inv‚Ñö‚Çä)
      (‚Ñö‚Çä‚â° (‚Ñö.‚â§‚Üímax _ _ (‚â§·µ£‚Üí‚â§‚Ñö _  _ (<·µ£Weaken‚â§·µ£ _ _ œÉ<x))
           ‚àô sym (‚Ñö.‚â§‚Üímax _ _ (‚â§·µ£‚Üí‚â§‚Ñö _  _ (<·µ£Weaken‚â§·µ£ _ _ œÉ'<x))) ))
  w .Elim‚Ñù-Prop.limA x y R œÉ<limX œÉ'<limX = eq‚Ñù _ _ Œª Œµ ‚Üí
    PT.rec (isProp‚àº _ _ _)
      (Œª (q , œÉ‚äî<q , q<limX) ‚Üí
       let
           œÜ*Œµ = (((inv‚Ñö‚Çä ((inv‚Ñö‚Çä (œÉ ‚Ñö‚Çä¬∑ œÉ))
                                   ‚Ñö‚Çä+ (inv‚Ñö‚Çä (œÉ' ‚Ñö‚Çä¬∑ œÉ'))))
                                   ‚Ñö‚Çä¬∑ Œµ))


           œÜ*œÉ = (/2‚Çä (‚Ñö.<‚Üí‚Ñö‚Çä (fst œÉ‚äî) q (<·µ£‚Üí<‚Ñö _ _ œÉ‚äî<q)))

           œÜ* : ‚Ñö‚Çä
           œÜ* = ‚Ñö.min‚Çä (/2‚Çä œÜ*Œµ) œÜ*œÉ



           limRestr'' : rat (fst œÜ*)
               ‚â§·µ£ (rat q +·µ£ (-·µ£ rat (fst œÉ‚äî))) ¬∑·µ£ rat [ 1 / 2 ]
           limRestr'' =
             let zz = ((‚Ñö.min‚â§'
                    ((fst (/2‚Çä ((inv‚Ñö‚Çä ((inv‚Ñö‚Çä (œÉ ‚Ñö‚Çä¬∑ œÉ))
                                   ‚Ñö‚Çä+ (inv‚Ñö‚Çä (œÉ' ‚Ñö‚Çä¬∑ œÉ'))))
                                   ‚Ñö‚Çä¬∑ Œµ))))
                                    (fst (/2‚Çä
                             (‚Ñö.<‚Üí‚Ñö‚Çä (fst œÉ‚äî) q (<·µ£‚Üí<‚Ñö _ _ œÉ‚äî<q))
                          ))))
             in subst (rat (fst œÜ*) ‚â§·µ£_)
                (rat¬∑·µ£rat _ _ ‚àô cong (_¬∑·µ£ rat [ 1 / 2 ]) (sym (-·µ£-rat‚ÇÇ _ _)))
                  (‚â§‚Ñö‚Üí‚â§·µ£ (fst œÜ*)
                    (fst (/2‚Çä
                             (‚Ñö.<‚Üí‚Ñö‚Çä (fst œÉ‚äî) q (<·µ£‚Üí<‚Ñö _ _ œÉ‚äî<q))
                          )) zz)


           limRestr' : rat (fst œÜ* ‚Ñö.+ fst œÜ*)
               ‚â§·µ£ (lim x y +·µ£ (-·µ£ rat (fst œÉ‚äî)))
           limRestr' =
             let zz : ((rat q +·µ£ (-·µ£ rat (fst œÉ‚äî)))) ‚â§·µ£
                        ((lim x y +·µ£ (-·µ£ rat (fst œÉ‚äî))) )
                 zz = ‚â§·µ£-+o (rat q) (lim x y) (-·µ£ rat (fst œÉ‚äî))
                          (<·µ£Weaken‚â§·µ£ _ _ q<limX)
             in  subst2 _‚â§·µ£_
                  (sym (rat¬∑·µ£rat _ _) ‚àô
                   cong rat (dist‚Ñö! (fst œÜ*) ¬∑[ ge[ 2 ]  ‚â° ge1 +ge ge1 ]))
                    (sym (¬∑·µ£Assoc _ _ _) ‚àô‚àô
                      cong ((lim x y +·µ£ (-·µ£ rat (fst œÉ‚äî))) ¬∑·µ£_)
                       (sym (rat¬∑·µ£rat _ _)
                         ‚àô (cong rat (ùüö.toWitness {Q = ‚Ñö.discrete‚Ñö
                           ([ 1 / 2 ] ‚Ñö.¬∑ 2) 1} tt))) ‚àô‚àô
                      ¬∑IdR _ )
                   (‚â§·µ£-¬∑o _ _ 2 (‚Ñö.dec‚Ñö‚â§? {0} {2}) (isTrans‚â§·µ£ _ _ _
                   limRestr'' (‚â§·µ£-¬∑o _ _ [ 1 / 2 ] (‚Ñö.dec‚Ñö‚â§? {0} {[ 1 / 2 ]})
                         zz)))


           limRestr : rat (fst œÉ‚äî)
               ‚â§·µ£ ((lim x y +·µ£ (-·µ£ rat (fst œÜ* ‚Ñö.+ fst œÜ*))))
           limRestr = subst2 _‚â§·µ£_
             (cong‚ÇÇ _+·µ£_ (cong‚ÇÇ _-·µ£_ refl (sym (+·µ£-rat _ _))) (sym (+·µ£-rat _ _) )
              ‚àô Lùêë.lem--00 {rat (fst œÉ‚äî)} {(rat (fst œÜ*) +·µ£ rat (fst œÜ*))})
               (Lùêë.lem--061
                 {rat (fst œÉ‚äî)} {rat (fst œÜ* ‚Ñö.+ fst œÜ*)} {lim x y} )
             (‚â§·µ£-o+ _ _
               (rat (fst œÉ‚äî) +·µ£ (-·µ£ (rat (fst œÜ* ‚Ñö.+ fst œÜ*))))
                 limRestr')

           ‚à£x-limX‚à£ : (lim x y +·µ£ (-·µ£ rat (fst œÜ* ‚Ñö.+ fst œÜ*))) <·µ£ x œÜ*

           ‚à£x-limX‚à£ =
             let zz = isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _)
                  (subst (_<·µ£ rat (fst œÜ* ‚Ñö.+ fst œÜ*))
                   (minusComm-abs·µ£ _ _)
                   (fst (‚àº‚âÉabs<Œµ _ _ (œÜ* ‚Ñö‚Çä+ œÜ*))
                   $ ùï£-lim-self x y œÜ* œÜ*))
             in subst2 _<·µ£_ (Lùêë.lem--060 {lim x y} {x œÜ*}
                           {rat (fst œÜ* ‚Ñö.+ fst œÜ*)})
                  (Lùêë.lem--05 {rat (fst œÜ* ‚Ñö.+ fst œÜ*)} {x œÜ*})
                   (<·µ£-+o _ _ (x œÜ* +·µ£ (-·µ£ rat (fst œÜ* ‚Ñö.+ fst œÜ*))) zz)



           œÜ : ‚Ñö‚Çä
           œÜ = (inv‚Ñö‚Çä (œÉ ‚Ñö‚Çä¬∑ œÉ)) ‚Ñö‚Çä¬∑  œÜ*
           œÜ' : ‚Ñö‚Çä
           œÜ' = (inv‚Ñö‚Çä (œÉ' ‚Ñö‚Çä¬∑ œÉ')) ‚Ñö‚Çä¬∑  œÜ*
           œÉ‚äî<XœÜ* : rat (fst œÉ‚äî) <·µ£ x œÜ*
           œÉ‚äî<XœÜ* = isTrans‚â§<·µ£ _ _ _ limRestr ‚à£x-limX‚à£
           œÉ<XœÜ* : rat (fst œÉ) <·µ£ x œÜ*
           œÉ<XœÜ* = isTrans‚â§<·µ£ _ _ _
              (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.‚â§max (fst œÉ) (fst œÉ'))) œÉ‚äî<XœÜ*
           œÉ'<XœÜ* : rat (fst œÉ') <·µ£ x œÜ*
           œÉ'<XœÜ* = isTrans‚â§<·µ£ _ _ _
              (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.‚â§max' (fst œÉ) (fst œÉ'))) œÉ‚äî<XœÜ*

           preŒµ'< :  (fst ((inv‚Ñö‚Çä (œÉ ‚Ñö‚Çä¬∑ œÉ)) ‚Ñö‚Çä¬∑  œÜ*)
                                   ‚Ñö.+ fst ((inv‚Ñö‚Çä (œÉ' ‚Ñö‚Çä¬∑ œÉ')) ‚Ñö‚Çä¬∑  œÜ*))
                                    ‚Ñö.‚â§ fst (/2‚Çä Œµ)
           preŒµ'< = subst2 ‚Ñö._‚â§_
             (‚Ñö.¬∑DistR+ _ _ (fst œÜ*)) (
                cong (fst (inv‚Ñö‚Çä (œÉ ‚Ñö‚Çä¬∑ œÉ) ‚Ñö‚Çä+ inv‚Ñö‚Çä (œÉ' ‚Ñö‚Çä¬∑ œÉ')) ‚Ñö.¬∑_)
                   (sym (‚Ñö.¬∑Assoc _ _ _))
                 ‚àô ‚Ñö.y¬∑[x/y] ((inv‚Ñö‚Çä (œÉ ‚Ñö‚Çä¬∑ œÉ))
                                   ‚Ñö‚Çä+ (inv‚Ñö‚Çä (œÉ' ‚Ñö‚Çä¬∑ œÉ'))) (fst (/2‚Çä Œµ)) )
               (‚Ñö.‚â§-o¬∑ _ _ (fst ((inv‚Ñö‚Çä (œÉ ‚Ñö‚Çä¬∑ œÉ))
                                   ‚Ñö‚Çä+ (inv‚Ñö‚Çä (œÉ' ‚Ñö‚Çä¬∑ œÉ'))))
                              (‚Ñö.0‚â§‚Ñö‚Çä ((inv‚Ñö‚Çä (œÉ ‚Ñö‚Çä¬∑ œÉ))
                                   ‚Ñö‚Çä+ (inv‚Ñö‚Çä (œÉ' ‚Ñö‚Çä¬∑ œÉ'))))
                             (
                               (‚Ñö.min‚â§ (fst (/2‚Çä œÜ*Œµ)) (fst œÜ*œÉ))))

           Œµ'< : 0< (fst Œµ ‚Ñö.- (fst ((inv‚Ñö‚Çä (œÉ ‚Ñö‚Çä¬∑ œÉ)) ‚Ñö‚Çä¬∑  œÜ*)
                                   ‚Ñö.+ fst ((inv‚Ñö‚Çä (œÉ' ‚Ñö‚Çä¬∑ œÉ')) ‚Ñö‚Çä¬∑  œÜ*)))
           Œµ'< = snd (‚Ñö.<‚Üí‚Ñö‚Çä (fst ((inv‚Ñö‚Çä (œÉ ‚Ñö‚Çä¬∑ œÉ)) ‚Ñö‚Çä¬∑  œÜ*)
                                   ‚Ñö.+ fst ((inv‚Ñö‚Çä (œÉ' ‚Ñö‚Çä¬∑ œÉ')) ‚Ñö‚Çä¬∑  œÜ*))
                                    (fst Œµ)
              (‚Ñö.isTrans‚â§< _ _ _ preŒµ'< (x/2<x Œµ)))


           œÜ= = ‚Ñö‚Çä‚â° {œÜ*} $ sym (‚Ñö.[y¬∑x]/y (inv‚Ñö‚Çä (œÉ ‚Ñö‚Çä¬∑ œÉ)) (fst œÜ*))

           œÜ'= = ‚Ñö‚Çä‚â° {œÜ*} $ sym (‚Ñö.[y¬∑x]/y (inv‚Ñö‚Çä (œÉ' ‚Ñö‚Çä¬∑ œÉ')) (fst œÜ*))


           R' : _
           R' = invEq (‚àº‚âÉ‚â° _ _) (R œÜ* œÉ<XœÜ* œÉ'<XœÜ* )
             ((fst Œµ ‚Ñö.- (fst œÜ ‚Ñö.+ fst œÜ')) , Œµ'<)


       in (lim-lim _ _ Œµ œÜ œÜ' _ _ Œµ'<
                (((cong ((fst (Inv·µ£-restr œÉ)) ‚àò x) (œÜ=))
                   subst‚àº[ refl ] (cong ((fst (Inv·µ£-restr œÉ')) ‚àò x)
                     (œÜ'=))) R')))
      (dense‚Ñöin‚Ñù (rat (fst œÉ‚äî)) (lim x y) œÉ‚äî<limX)
   where
   œÉ‚äî = ‚Ñö.max‚Çä œÉ œÉ'

   œÉ‚äî<limX : rat (fst œÉ‚äî) <·µ£ lim x y
   œÉ‚äî<limX = max<-lem (rat (fst œÉ)) (rat (fst œÉ'))
      (lim x y) œÉ<limX œÉ'<limX


  w .Elim‚Ñù-Prop.isPropA _ = isPropŒ†2 Œª _ _ ‚Üí isSet‚Ñù _ _

 f' : ‚àÄ r ‚Üí Œ£ ‚Ñö‚Çä (Œª œÉ ‚Üí rat (fst œÉ) <·µ£ r) ‚Üí ‚Ñù
 f' r (œÉ , œÉ<) = fst (Inv·µ£-restr œÉ) r

 f : ‚àÄ r ‚Üí ‚àÉ[ œÉ ‚àà ‚Ñö‚Çä ] (rat (fst œÉ) <·µ£ r) ‚Üí ‚Ñù
 f r = PT.rec‚ÜíSet {B = ‚Ñù} isSet‚Ñù (f' r)
          Œª (œÉ , œÉ<r) (œÉ' , œÉ'<r) ‚Üí 2co œÉ œÉ' r œÉ<r œÉ'<r


 ctnF : ‚àÄ u Œµ u‚àà ‚Üí ‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ]
                 (‚àÄ v v‚ààP ‚Üí u ‚àº[ Œ¥ ] v ‚Üí
                  f u (lower‚ÑöBound u u‚àà) ‚àº[ Œµ ] f v (lower‚ÑöBound v v‚ààP))
 ctnF u Œµ u‚àà = ctnF' (lower‚ÑöBound u u‚àà)

  where
  ctnF' : ‚àÄ uu ‚Üí ‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ]
                 (‚àÄ v v‚ààP ‚Üí u ‚àº[ Œ¥ ] v ‚Üí
                  f u uu ‚àº[ Œµ ] f v (lower‚ÑöBound v v‚ààP))
  ctnF' = PT.elim (Œª _ ‚Üí squash‚ÇÅ)
    Œª (œÉ , œÉ<u) ‚Üí
     let zz : ‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ] ((v‚ÇÅ : ‚Ñù) ‚Üí  u ‚àº[ Œ¥ ] v‚ÇÅ
                      ‚Üí f u ‚à£ œÉ , œÉ<u ‚à£‚ÇÅ ‚àº[ Œµ ] Inv·µ£-restr œÉ .fst v‚ÇÅ)
         zz = Lipschitz‚ÜíIsContinuous (inv‚Ñö‚Çä (œÉ ‚Ñö‚Çä¬∑ œÉ))
                 (Œª z ‚Üí Inv·µ£-restr œÉ .fst z)
                 (snd (Inv·µ£-restr œÉ) ) u Œµ

         zz' : ‚àÉ[ Œ¥ ‚àà ‚Ñö‚Çä ] (‚àÄ v v‚àà ‚Üí
                    u ‚àº[ Œ¥ ] v ‚Üí
                  f u ‚à£ œÉ , œÉ<u ‚à£‚ÇÅ ‚àº[ Œµ ] f v (lower‚ÑöBound v v‚àà))
         zz' = PT.rec2 squash‚ÇÅ
             (uncurry (Œª Œ¥ R (Œ∑ , Œ∑<u-œÉ)  ‚Üí
               let Œ¥' = ‚Ñö.min‚Çä Œ¥ Œ∑
               in ‚à£ Œ¥' ,
                   (Œª v v‚àà ‚Üí
                      PT.elim {P = Œª vv ‚Üí u ‚àº[ Œ¥' ] v ‚Üí
                               f u ‚à£ œÉ , œÉ<u ‚à£‚ÇÅ ‚àº[ Œµ ] f v vv}
                          (Œª _ ‚Üí isPropŒ† Œª _ ‚Üí isProp‚àº _ _ _)
                          (Œª (œÉ' , œÉ'<v) u‚àºv ‚Üí
                             let zuz :  (u +·µ£ (-·µ£ v)) <·µ£ rat (fst Œ∑)
                                 zuz = isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ (u +·µ£ (-·µ£ v)))
                                    (isTrans<‚â§·µ£ _ _ _ (fst (‚àº‚âÉabs<Œµ _ _ _) u‚àºv)
                                       (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.min‚â§' (fst Œ¥) (fst Œ∑))))

                                 u-Œ∑‚â§v : u +·µ£ (-·µ£ rat (fst Œ∑)) ‚â§·µ£ v
                                 u-Œ∑‚â§v = a-b‚â§c‚áía-c‚â§b _ _ _
                                          (<·µ£Weaken‚â§·µ£ _ _ zuz)
                                 œÉ<u-Œ∑ : rat (fst œÉ) <·µ£ u +·µ£ (-·µ£ rat (fst Œ∑))
                                 œÉ<u-Œ∑ = a<b-c‚áíc<b-a _ _ _ Œ∑<u-œÉ
                                 œÉ<v : rat (fst œÉ) <·µ£ v
                                 œÉ<v = isTrans<‚â§·µ£ _ _ _ œÉ<u-Œ∑ u-Œ∑‚â§v
                             in subst (f u ‚à£ œÉ , œÉ<u ‚à£‚ÇÅ ‚àº[ Œµ ]_)
                                        (2co œÉ œÉ' v œÉ<v œÉ'<v)
                                        (R v
                                         (‚àº-monotone‚â§ (‚Ñö.min‚â§ _ _) u‚àºv)))
                          ((lower‚ÑöBound v v‚àà))) ‚à£‚ÇÅ
                          ))
           zz (<·µ£‚ÜíŒî _ _ œÉ<u)
     in zz'

inv‚Ñù' : Œ£ (‚àÄ r ‚Üí 0 <·µ£ r ‚Üí ‚Ñù) (IsContinuousWithPred (Œª r ‚Üí _ , isProp<·µ£ _ _))
inv‚Ñù' = snd inv‚Ñù''

inv‚Ñù'-rat : ‚àÄ q p' p ‚Üí
             fst inv‚Ñù' (rat q) p ‚â°
              rat (fst (inv‚Ñö‚Çä (q , p')))
inv‚Ñù'-rat q p' p = PT.elim (Œª xx ‚Üí
                       isSet‚Ñù ((fst inv‚Ñù'') (rat q) xx) _)
                        (Œª x ‚Üí cong (rat ‚àò fst ‚àò inv‚Ñö‚Çä)
                        (ww x)) (lower‚ÑöBound (rat q) p)

 where
 ww : ‚àÄ x ‚Üí (‚Ñö.maxWithPos (fst x) q) ‚â° (q , p')
 ww x = ‚Ñö‚Çä‚â° (‚Ñö.‚â§‚Üímax (fst (fst x)) q (‚Ñö.<Weaken‚â§ _ _ (<·µ£‚Üí<‚Ñö _ _ (snd x))))


opaque
 unfolding _<·µ£_
 inv‚Ñù'-pos : ‚àÄ u p ‚Üí
              0 <·µ£ fst inv‚Ñù' u p
 inv‚Ñù'-pos u p = PT.rec squash‚ÇÅ
   (Œª (n , u<n) ‚Üí
     PT.rec squash‚ÇÅ
        (Œª (œÉ , X) ‚Üí
          PT.rec squash‚ÇÅ
            (Œª ((q , q'*) , x* , x' , x''*) ‚Üí
              let q' : ‚Ñö
                  q' = ‚Ñö.min q'* [ pos (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï n) / 1 ]
                  x : q' ‚Ñö.- q ‚Ñö.< fst œÉ
                  x = ‚Ñö.isTrans‚â§< _ _ _ (
                     ‚Ñö.‚â§-+o q' q'* (‚Ñö.- q)
                       (‚Ñö.min‚â§ q'* [ pos (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï n) / 1 ])) x*
                  x'' : u <·µ£ rat q'
                  x'' = <min-lem _ _ _ x''* (isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ u) u<n)


                  0<q' : 0 <·µ£ rat q'
                  0<q' = isTrans<·µ£ _ _ _ p x''
                  z' : rat [ 1 / n ] ‚â§·µ£ inv‚Ñù' .fst (rat q') 0<q'
                  z' = subst (rat [ 1 / n ] ‚â§·µ£_) (sym (inv‚Ñù'-rat q'
                                (‚Ñö.<‚Üí0< q' (<·µ£‚Üí<‚Ñö _ _ 0<q')) 0<q'))
                             (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (
                              ‚Ñö.inv‚Ñö‚â§inv‚Ñö ([ ‚Ñö.‚Ñï‚Çä‚ÇÅ‚Üí‚Ñ§ n / 1 ] , _)
                                (q' , ‚Ñö.<‚Üí0< q' (<·µ£‚Üí<‚Ñö [ pos 0 / 1 ] q' 0<q'))
                                 ((‚Ñö.min‚â§' q'* [ pos (‚Ñï‚Çä‚ÇÅ‚Üí‚Ñï n) / 1 ]))))
                  z : ((inv‚Ñù' .fst (rat q') 0<q') +·µ£ (-·µ£ rat [ 1 / n ]))
                        <·µ£
                        (inv‚Ñù' .fst u p)
                  z = a-b<c‚áía-c<b _ (inv‚Ñù' .fst u p) _
                       (isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _) (fst (‚àº‚âÉabs<Œµ _ _ _)
                       (sym‚àº _ _ _  (X (rat q') 0<q'
                        (sym‚àº _ _ _ (invEq (‚àº‚âÉabs<Œµ (rat q') u œÉ) (
                           isTrans‚â§<·µ£ _ _ _
                             (subst (_‚â§·µ£ ((rat q') +·µ£ (-·µ£ (rat q))))
                               (sym (abs·µ£NonNeg (rat q' +·µ£ (-·µ£ u))
                                 (x‚â§y‚Üí0‚â§y-x _ _ (<·µ£Weaken‚â§·µ£ _ _ x''))))
                               (‚â§·µ£-o+ _ _ _ (-·µ£‚â§·µ£ _ _ (<·µ£Weaken‚â§·µ£ _ _ x'))))
                            (isTrans‚â°<·µ£ _ _ _ (+·µ£-rat _ _) (<‚Ñö‚Üí<·µ£ _ _ x)))))))))

              in isTrans‚â§<·µ£ _ _ _ (x‚â§y‚Üí0‚â§y-x _ _ z') z
              )
            (‚àÉrationalApprox u œÉ))
       (snd inv‚Ñù' u ([ 1 / n ]  , _) p))
   (getClamps u)



inv‚Ñù‚Çä : ‚Ñù‚Çä ‚Üí ‚Ñù‚Çä
inv‚Ñù‚Çä (y , 0<y) = fst inv‚Ñù' y 0<y , inv‚Ñù'-pos y 0<y

sign·µ£ : ‚àÄ r ‚Üí 0 ÔºÉ r ‚Üí ‚Ñù
sign·µ£ _ = ‚äé.rec (Œª _ ‚Üí rat 1) (Œª _ ‚Üí rat -1)

0<sign·µ£ : ‚àÄ r 0ÔºÉr ‚Üí 0 <·µ£ r ‚Üí 0 <·µ£ sign·µ£ r 0ÔºÉr
0<sign·µ£ r (inl x) _ = <‚Ñö‚Üí<·µ£ _ _ ((ùüö.toWitness {Q = ‚Ñö.<Dec 0 1} _))
0<sign·µ£ r (inr x) y = ‚ä•.rec (isAsym<·µ£ _ _ x y)

sign·µ£-rat : ‚àÄ r p  ‚Üí sign·µ£ (rat r) p ‚â° rat (‚Ñö.sign r)
sign·µ£-rat r (inl x) = cong rat (sym (fst (‚Ñö.<‚Üísign r) (<·µ£‚Üí<‚Ñö _ _ x)))
sign·µ£-rat r (inr x) = cong rat (sym (snd (snd (‚Ñö.<‚Üísign r)) (<·µ£‚Üí<‚Ñö _ _ x)))

0ÔºÉ‚Çö : ‚Ñù ‚Üí hProp ‚Ñì-zero
0ÔºÉ‚Çö r = 0 ÔºÉ r , isPropÔºÉ _ _

-- HoTT Theorem (11.3.47)

opaque
 unfolding _<·µ£_
 IsContinuousWithPredSign·µ£ : IsContinuousWithPred 0ÔºÉ‚Çö sign·µ£
 IsContinuousWithPredSign·µ£ u Œµ =
  ‚äé.elim
   (Œª 0<u ‚Üí PT.map (Œª (q , 0<q , q<u) ‚Üí
              ((q , ‚Ñö.<‚Üí0< q (<·µ£‚Üí<‚Ñö _ _ 0<q))) ,
               Œª v v‚ààP v‚àºu ‚Üí
                 ‚äé.elim {C = Œª v‚ààP ‚Üí sign·µ£ u (inl 0<u) ‚àº[ Œµ ] sign·µ£ v v‚ààP}
                   (Œª _ ‚Üí refl‚àº _ _)
                   (‚ä•.rec ‚àò (isAsym<·µ£ 0 v
                     (subst2 _<·µ£_ (+·µ£Comm _ _ ‚àô +-·µ£ _)
                         (Lùêë.lem--04 {rat q} {v})
                          (<·µ£Monotone+·µ£ _ _ _ _ (-·µ£<·µ£ _ _ q<u)
                        (a-b<c‚áía<c+b _ _ _ (isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _)
                           (fst (‚àº‚âÉabs<Œµ _ _ _) v‚àºu))))))) v‚ààP)
          (dense‚Ñöin‚Ñù 0 u 0<u))
   (Œª u<0 ‚Üí PT.map (Œª (q , u<q , q<0) ‚Üí
              (‚Ñö.- q , ‚Ñö.<‚Üí0< (‚Ñö.- q) (‚Ñö.minus-< _ _ (<·µ£‚Üí<‚Ñö _ _ q<0))) ,
               Œª v v‚ààP v‚àºu ‚Üí
                 ‚äé.elim {C = Œª v‚ààP ‚Üí sign·µ£ u (inr u<0) ‚àº[ Œµ ] sign·µ£ v v‚ààP}
                   ((‚ä•.rec ‚àò (isAsym<·µ£ v 0
                     (subst2 _<·µ£_  (Lùêë.lem--05 {u} {v})
                      (+-·µ£ (rat q)) (<·µ£Monotone+·µ£ _ _ _ _
                        u<q (isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _)
                           (fst (‚àº‚âÉabs<Œµ _ _ _) (sym‚àº _ _ _ v‚àºu))))))))
                   (Œª _ ‚Üí refl‚àº _ _) v‚ààP)
              (dense‚Ñöin‚Ñù u 0 u<0))



-·µ£‚â°[-1¬∑·µ£] : ‚àÄ x ‚Üí -·µ£ x ‚â° (-1) ¬∑·µ£ x
-·µ£‚â°[-1¬∑·µ£] = ‚â°Continuous _ _
   IsContinuous-·µ£
   (IsContinuous¬∑·µ£L -1)
   Œª r ‚Üí -·µ£-rat _ ‚àô rat¬∑·µ£rat _ _


openPred< : ‚àÄ x ‚Üí ‚ü® openPred (Œª y ‚Üí (x <·µ£ y) , isProp<·µ£ _ _)  ‚ü©
openPred< x y =
     PT.map (map-snd (Œª {q} a<y-x v
        ‚Üí   isTrans<·µ£ _ _ _
                (a<b-c‚áíc<b-a (rat (fst q)) y x a<y-x )
          ‚àòS a-b<c‚áía-c<b y v (rat (fst q))
          ‚àòS isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _)
          ‚àòS fst (‚àº‚âÉabs<Œµ _ _ _)))
  ‚àòS lower‚ÑöBound (y +·µ£ (-·µ£ x))
  ‚àòS x<y‚Üí0<y-x x y

openPred> : ‚àÄ x ‚Üí ‚ü® openPred (Œª y ‚Üí (y <·µ£ x) , isProp<·µ£ _ _)  ‚ü©
openPred> x y =
       PT.map (map-snd (Œª {q} q<x-y v
        ‚Üí     flip (isTrans<·µ£ _ _ _)
                (a<b-c‚áía+c<b (rat (fst q)) x y q<x-y )
          ‚àòS a-b<c‚áía<c+b v y (rat (fst q))
          ‚àòS isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _)
          ‚àòS fst (‚àº‚âÉabs<Œµ _ _ _)
          ‚àòS sym‚àº _ _ _ ))
  ‚àòS lower‚ÑöBound (x +·µ£ (-·µ£ y))
  ‚àòS x<y‚Üí0<y-x y x



isOpenPred0ÔºÉ : ‚ü® openPred 0ÔºÉ‚Çö ‚ü©
isOpenPred0ÔºÉ x =
 ‚äé.rec
   (PT.map (map-snd ((inl ‚àò_) ‚àò_)) ‚àò openPred< 0 x)
   (PT.map (map-snd ((inr ‚àò_) ‚àò_)) ‚àò openPred> 0 x)



¬∑inv‚Ñù' : ‚àÄ r 0<r ‚Üí (r ¬∑·µ£ fst inv‚Ñù' (r) 0<r) ‚â° 1
¬∑inv‚Ñù' r =  ‚àòdiag $
  ‚â°ContinuousWithPred _ _ (openPred< 0) (openPred< 0)
   _ _ (cont‚ÇÇ¬∑·µ£WP _ _ _
          (AsContinuousWithPred _ _ IsContinuousId)
          (snd inv‚Ñù'))
        (AsContinuousWithPred _ _ (IsContinuousConst 1))
        (Œª r r‚àà r‚àà' ‚Üí cong (rat r ¬∑·µ£_) (inv‚Ñù'-rat r _ r‚àà)
          ‚àô‚àô sym (rat¬∑·µ£rat _ _) ‚àô‚àô cong rat (‚Ñö.x¬∑inv‚Ñö‚Çä[x]
            (r , ‚Ñö.<‚Üí0< _ (<·µ£‚Üí<‚Ñö _ _ r‚àà)))) r

opaque
 unfolding _‚â§·µ£_
 ‚â§ContWP : ‚àÄ {P f‚ÇÄ f‚ÇÅ} ‚Üí ‚ü® openPred P ‚ü©
          ‚Üí IsContinuousWithPred P f‚ÇÄ
          ‚Üí IsContinuousWithPred P f‚ÇÅ
          ‚Üí (‚àÄ u u‚àà ‚Üí f‚ÇÄ (rat u) u‚àà ‚â§·µ£ f‚ÇÅ (rat u) u‚àà)
              ‚Üí ‚àÄ x x‚àà ‚Üí f‚ÇÄ x x‚àà  ‚â§·µ£ f‚ÇÅ x x‚àà
 ‚â§ContWP {P} {f‚ÇÄ} {f‚ÇÅ} oP f‚ÇÄC f‚ÇÅC X x x‚àà =
     ‚â°ContinuousWithPred P P  oP oP
     _ _
     (contDiagNE‚ÇÇWP maxR P _ _ f‚ÇÄC f‚ÇÅC)
     f‚ÇÅC (Œª r r‚àà r‚àà' ‚Üí
        X _ _
         ‚àô cong (f‚ÇÅ (rat r)) (‚àà-isProp P _ r‚àà r‚àà')) x x‚àà x‚àà

 ‚â§ContWPÔºÉ‚â§ : ‚àÄ {f‚ÇÄ f‚ÇÅ} q ‚Üí 0 ‚Ñö.< q
          ‚Üí IsContinuousWithPred 0ÔºÉ‚Çö f‚ÇÄ
          ‚Üí IsContinuousWithPred 0ÔºÉ‚Çö f‚ÇÅ
          ‚Üí (‚àÄ u u‚àà ‚Üí u ‚Ñö.‚â§ q ‚Üí f‚ÇÄ (rat u) u‚àà ‚â§·µ£ f‚ÇÅ (rat u) u‚àà)
              ‚Üí ‚àÄ x x‚àà ‚Üí x ‚â§·µ£ rat q ‚Üí  f‚ÇÄ x x‚àà  ‚â§·µ£ f‚ÇÅ x x‚àà
 ‚â§ContWPÔºÉ‚â§ {f‚ÇÄ} {f‚ÇÅ} q 0<q f‚ÇÄC f‚ÇÅC X x x‚àà x‚â§q =
   let ÔºÉmin : ‚àÄ r ‚Üí 0 ÔºÉ r ‚Üí 0 ÔºÉ min·µ£ r (rat q)
       ÔºÉmin r = ‚äé.map
         (Œª 0<r ‚Üí <min-lem _ _ _ 0<r (<‚Ñö‚Üí<·µ£ _ _ 0<q))
         Œª r<0 ‚Üí isTrans‚â§<·µ£ _ _ _ (min‚â§·µ£ _ _) r<0
       z = ‚â§ContWP {_} {Œª r z ‚Üí f‚ÇÄ (min·µ£ r (rat q)) (ÔºÉmin r z)}
                       {Œª r z ‚Üí f‚ÇÅ (min·µ£ r (rat q)) (ÔºÉmin r z)}
              isOpenPred0ÔºÉ
                (IsContinuousWP‚àò _ _ _ _ _
                 f‚ÇÄC (AsContinuousWithPred _ _ (IsContinuousMinR _)))
                (IsContinuousWP‚àò _ _ _ _ _
                 f‚ÇÅC (AsContinuousWithPred _ _ (IsContinuousMinR _)))
                (Œª u u‚àà ‚Üí
                  X (‚Ñö.min u q) (ÔºÉmin (rat u) u‚àà) (‚Ñö.min‚â§'  _ _))
                 x x‚àà
   in subst {A = Œ£ _ (_‚àà 0ÔºÉ‚Çö) } (Œª (x , x‚àà) ‚Üí f‚ÇÄ x x‚àà ‚â§·µ£ f‚ÇÅ x x‚àà)
        (Œ£‚â°Prop (‚àà-isProp 0ÔºÉ‚Çö) (‚â§‚Üímin·µ£ _ _ x‚â§q))
          z

 ‚â§ContWPÔºÉ‚â§' : ‚àÄ {f‚ÇÄ f‚ÇÅ} q ‚Üí q ‚Ñö.< 0
          ‚Üí IsContinuousWithPred 0ÔºÉ‚Çö f‚ÇÄ
          ‚Üí IsContinuousWithPred 0ÔºÉ‚Çö f‚ÇÅ
          ‚Üí (‚àÄ u u‚àà ‚Üí q ‚Ñö.‚â§ u ‚Üí f‚ÇÄ (rat u) u‚àà ‚â§·µ£ f‚ÇÅ (rat u) u‚àà)
              ‚Üí ‚àÄ x x‚àà ‚Üí rat q ‚â§·µ£ x ‚Üí  f‚ÇÄ x x‚àà  ‚â§·µ£ f‚ÇÅ x x‚àà
 ‚â§ContWPÔºÉ‚â§' {f‚ÇÄ} {f‚ÇÅ} q q<0 f‚ÇÄC f‚ÇÅC X x x‚àà q‚â§x =
   let ÔºÉmax : ‚àÄ r ‚Üí 0 ÔºÉ r ‚Üí 0 ÔºÉ max·µ£ r (rat q)
       ÔºÉmax r =  ‚äé.map
         (Œª 0<r ‚Üí isTrans<‚â§·µ£ _ _ _ 0<r (‚â§max·µ£ _ _) )
         Œª r<0 ‚Üí max<-lem _ _ _ r<0 (<‚Ñö‚Üí<·µ£ _ _ q<0) --isTrans‚â§<·µ£ _ _ _ (min‚â§·µ£ _ _) r<0
        -- ‚äé.map
        --  (Œª 0<r ‚Üí <min-lem _ _ _ 0<r (<‚Ñö‚Üí<·µ£ _ _ 0<q))
        --  Œª r<0 ‚Üí isTrans‚â§<·µ£ _ _ _ (min‚â§·µ£ _ _) r<0
       z = ‚â§ContWP {_} {Œª r z ‚Üí f‚ÇÄ (max·µ£ r (rat q)) (ÔºÉmax r z)}
                       {Œª r z ‚Üí f‚ÇÅ (max·µ£ r (rat q)) (ÔºÉmax r z)}
              isOpenPred0ÔºÉ
                (IsContinuousWP‚àò _ _ _ _ _
                 f‚ÇÄC (AsContinuousWithPred _ _ (IsContinuousMaxR _)))
                (IsContinuousWP‚àò _ _ _ _ _
                 f‚ÇÅC (AsContinuousWithPred _ _ (IsContinuousMaxR _)))
                (Œª u u‚àà ‚Üí
                  X (‚Ñö.max u q) (ÔºÉmax (rat u) u‚àà) (‚Ñö.‚â§max' u q))
                 x x‚àà
   in subst {A = Œ£ _ (_‚àà 0ÔºÉ‚Çö) } (Œª (x , x‚àà) ‚Üí f‚ÇÄ x x‚àà ‚â§·µ£ f‚ÇÅ x x‚àà)
        (Œ£‚â°Prop (‚àà-isProp 0ÔºÉ‚Çö) (max·µ£Comm _ _ ‚àô ‚â§‚Üímax·µ£ _ _ q‚â§x))
          z


sign¬≤=1 :  ‚àÄ r 0ÔºÉr ‚Üí (sign·µ£ r 0ÔºÉr) ¬∑·µ£ (sign·µ£ r 0ÔºÉr) ‚â° 1
sign¬≤=1 r = ‚äé.elim
    (Œª _ ‚Üí sym (rat¬∑·µ£rat _ _))
    (Œª _ ‚Üí sym (rat¬∑·µ£rat _ _))

opaque
 unfolding abs·µ£
 sign¬∑abs·µ£ : ‚àÄ r 0ÔºÉr ‚Üí abs·µ£ r ¬∑·µ£ (sign·µ£ r 0ÔºÉr) ‚â° r
 sign¬∑abs·µ£ r = ‚àòdiag $
   ‚â°ContinuousWithPred 0ÔºÉ‚Çö 0ÔºÉ‚Çö isOpenPred0ÔºÉ isOpenPred0ÔºÉ
       (Œª r 0ÔºÉr ‚Üí abs·µ£ r ¬∑·µ£ (sign·µ£ r 0ÔºÉr))
        (Œª r _ ‚Üí r)
         (cont‚ÇÇ¬∑·µ£WP _ _ _
           (AsContinuousWithPred _ _ IsContinuousAbs·µ£)
           IsContinuousWithPredSign·µ£)
         (AsContinuousWithPred _ _ IsContinuousId)
         (Œª r 0ÔºÉr 0ÔºÉr' ‚Üí (cong‚ÇÇ _¬∑·µ£_ refl (sign·µ£-rat r 0ÔºÉr)
           ‚àô sym (rat¬∑·µ£rat _ _))
           ‚àô cong rat (cong (‚Ñö._¬∑ ‚Ñö.sign r) (sym (‚Ñö.abs'‚â°abs r))
            ‚àô ‚Ñö.sign¬∑abs r) ) r


 ¬∑sign-flip‚â° : ‚àÄ r 0ÔºÉr ‚Üí abs·µ£ r ‚â° r ¬∑·µ£ (sign·µ£ r 0ÔºÉr)
 ¬∑sign-flip‚â° r 0ÔºÉr =
  (sym (ùêë'.¬∑IdR' _ _ (sign¬≤=1 r 0ÔºÉr)) ‚àô ¬∑·µ£Assoc _ _ _)
  ‚àô cong (_¬∑·µ£ (sign·µ£ r 0ÔºÉr)) (sign¬∑abs·µ£ r 0ÔºÉr)

-- HoTT Theorem (11.3.47)

opaque
 unfolding abs·µ£ -·µ£_
 abs·µ£Neg : ‚àÄ x ‚Üí x <·µ£ 0 ‚Üí abs·µ£ x ‚â° -·µ£ x
 abs·µ£Neg x x<0 = -abs·µ£ _ ‚àô abs·µ£Pos _ (-·µ£<·µ£ _ _ x<0)


opaque
 unfolding -·µ£_  abs·µ£
 inv‚Ñù : ‚àÄ r ‚Üí 0 ÔºÉ r ‚Üí ‚Ñù
 inv‚Ñù r 0ÔºÉr = sign·µ£ r 0ÔºÉr ¬∑·µ£ fst inv‚Ñù' (abs·µ£ r) (0ÔºÉ‚Üí0<abs r 0ÔºÉr)


 inv‚Ñùimpl : ‚àÄ r 0ÔºÉr ‚Üí inv‚Ñù r 0ÔºÉr ‚â°
             sign·µ£ r 0ÔºÉr ¬∑·µ£ fst inv‚Ñù' (abs·µ£ r) (0ÔºÉ‚Üí0<abs r 0ÔºÉr)

 inv‚Ñùimpl r 0ÔºÉr = refl

 inv‚Ñù‚â° : ‚àÄ r 0ÔºÉr 0ÔºÉr' ‚Üí
            inv‚Ñù r 0ÔºÉr ‚â° inv‚Ñù r 0ÔºÉr'
 inv‚Ñù‚â° r 0ÔºÉr 0ÔºÉr' = cong (inv‚Ñù r) (isPropÔºÉ _ _ _ _)

 IsContinuousWithPredInv‚Ñù : IsContinuousWithPred (Œª _ ‚Üí _ , isPropÔºÉ _ _) inv‚Ñù
 IsContinuousWithPredInv‚Ñù =
    IsContinuousWP‚àò 0ÔºÉ‚Çö 0ÔºÉ‚Çö _ _ (Œª r x ‚Üí x)
    (cont‚ÇÇ¬∑·µ£WP 0ÔºÉ‚Çö _ _
        IsContinuousWithPredSign·µ£ (IsContinuousWP‚àò _ _
            _ _ 0ÔºÉ‚Üí0<abs (snd inv‚Ñù')
          (AsContinuousWithPred _ _ IsContinuousAbs·µ£)))
      (AsContinuousWithPred _
        _ IsContinuousId)


 inv‚Ñù-rat : ‚àÄ q p p' ‚Üí inv‚Ñù (rat q) p ‚â° rat (‚Ñö.inv‚Ñö q p')
 inv‚Ñù-rat q p p' =
   cong‚ÇÇ _¬∑·µ£_ (sign·µ£-rat q p) (inv‚Ñù'-rat _ _ _) ‚àô sym (rat¬∑·µ£rat _ _)


 inv‚Ñù-pos : ‚àÄ x ‚Üí (p : 0 <·µ£ x) ‚Üí 0 <·µ£ inv‚Ñù x (inl p)
 inv‚Ñù-pos x p = subst (0 <·µ£_) (sym (¬∑IdL _))
     (inv‚Ñù'-pos (abs·µ£ x) (0ÔºÉ‚Üí0<abs x (inl p)))


 inv‚Ñù-neg : ‚àÄ x ‚Üí (p : x <·µ£ 0) ‚Üí inv‚Ñù x (inr p) <·µ£ 0
 inv‚Ñù-neg x p =
      subst (_<·µ£ 0)
        (-·µ£‚â°[-1¬∑·µ£] _)
        (-·µ£<·µ£ 0 _ (inv‚Ñù'-pos (abs·µ£ x) (0ÔºÉ‚Üí0<abs x (inr p))))

 inv‚Ñù0ÔºÉ : ‚àÄ r 0ÔºÉr ‚Üí 0 ÔºÉ (inv‚Ñù r 0ÔºÉr)
 inv‚Ñù0ÔºÉ r = ‚äé.elim (inl ‚àò inv‚Ñù-pos r)
                    (inr ‚àò inv‚Ñù-neg r)



 inv‚ÑùInvol : ‚àÄ r 0ÔºÉr ‚Üí inv‚Ñù (inv‚Ñù r 0ÔºÉr) (inv‚Ñù0ÔºÉ r 0ÔºÉr) ‚â° r
 inv‚ÑùInvol r 0ÔºÉr = ‚â°ContinuousWithPred
   0ÔºÉ‚Çö 0ÔºÉ‚Çö isOpenPred0ÔºÉ isOpenPred0ÔºÉ
    (Œª r 0ÔºÉr ‚Üí inv‚Ñù (inv‚Ñù r 0ÔºÉr) (inv‚Ñù0ÔºÉ r 0ÔºÉr)) (Œª x _ ‚Üí x)
     (IsContinuousWP‚àò _ _ _ _ inv‚Ñù0ÔºÉ
       IsContinuousWithPredInv‚Ñù IsContinuousWithPredInv‚Ñù)
     (AsContinuousWithPred _
        _ IsContinuousId)
         (Œª r 0ÔºÉr 0ÔºÉr' ‚Üí
           let 0#r = (fst (ratÔºÉ 0 r) 0ÔºÉr)
               0#InvR = ‚Ñö.0#inv‚Ñö r 0#r
           in  cong‚ÇÇ inv‚Ñù (inv‚Ñù-rat _ _ _)
                  (isProp‚ÜíPathP (Œª i ‚Üí isPropÔºÉ _ _) _ _)

              ‚àô‚àô inv‚Ñù-rat ((inv‚Ñö r (fst (ratÔºÉ [ pos 0 / 1+ 0 ] r) 0ÔºÉr)))
                    (invEq (ratÔºÉ 0 _) 0#InvR)
                     (‚Ñö.0#inv‚Ñö r (fst (ratÔºÉ [ pos 0 / 1+ 0 ] r) 0ÔºÉr))
                ‚àô‚àô cong rat (‚Ñö.inv‚ÑöInvol r 0#r 0#InvR)
             )
    r 0ÔºÉr 0ÔºÉr

 x¬∑inv‚Ñù[x] : ‚àÄ r 0ÔºÉr ‚Üí r ¬∑·µ£ (inv‚Ñù r 0ÔºÉr) ‚â° 1
 x¬∑inv‚Ñù[x] r 0ÔºÉr =
   cong (_¬∑·µ£ (inv‚Ñù r 0ÔºÉr)) (sym (sign¬∑abs·µ£ r 0ÔºÉr))
    ‚àô‚àô sym (¬∑·µ£Assoc _ _ _)
    ‚àô‚àô (cong (abs·µ£ r ¬∑·µ£_) (¬∑·µ£Assoc _ _ _
      ‚àô cong (_¬∑·µ£ (fst inv‚Ñù' (abs·µ£ r) (0ÔºÉ‚Üí0<abs r 0ÔºÉr)))
         (sign¬≤=1 r 0ÔºÉr) ‚àô ¬∑IdL (fst inv‚Ñù' (abs·µ£ r) (0ÔºÉ‚Üí0<abs r 0ÔºÉr)))
    ‚àô ¬∑inv‚Ñù' (abs·µ£ r) (0ÔºÉ‚Üí0<abs r 0ÔºÉr))

 inv‚Ñù‚Çä‚â°inv‚Ñù : ‚àÄ x 0ÔºÉx ‚Üí fst (inv‚Ñù‚Çä x) ‚â° inv‚Ñù (fst x) 0ÔºÉx
 inv‚Ñù‚Çä‚â°inv‚Ñù x (inl x‚ÇÅ) = (cong (uncurry (fst inv‚Ñù'))
   (Œ£‚â°Prop (Œª _ ‚Üí squash‚ÇÅ) (sym (abs·µ£Pos _ x‚ÇÅ)))
  ‚àô sym (¬∑IdL _)) ‚àô sym (inv‚Ñùimpl _ _)
 inv‚Ñù‚Çä‚â°inv‚Ñù x (inr x‚ÇÅ) = ‚ä•.rec (isAsym<·µ£ _ _ x‚ÇÅ (snd x))


 x¬∑inv‚Ñù‚Çä[x] : ‚àÄ x ‚Üí (fst x) ¬∑·µ£ fst (inv‚Ñù‚Çä x) ‚â° 1
 x¬∑inv‚Ñù‚Çä[x] x = cong ((fst x) ¬∑·µ£_) (inv‚Ñù‚Çä‚â°inv‚Ñù x _)
   ‚àô x¬∑inv‚Ñù[x] (fst x) (inl (snd x))

_Ôºè·µ£[_,_] : ‚Ñù ‚Üí ‚àÄ r ‚Üí 0 ÔºÉ r  ‚Üí ‚Ñù
q Ôºè·µ£[ r , 0ÔºÉr ] = q ¬∑·µ£ (inv‚Ñù r 0ÔºÉr)

_Ôºè·µ£‚Çä_ : ‚Ñù ‚Üí ‚Ñù‚Çä  ‚Üí ‚Ñù
q Ôºè·µ£‚Çä r = q ¬∑·µ£ fst (inv‚Ñù‚Çä r)

[x¬∑y]/y·µ£ : ‚àÄ q r ‚Üí (0ÔºÉr : 0 ÔºÉ r) ‚Üí
               ((q ¬∑·µ£ r) Ôºè·µ£[ r , 0ÔºÉr ]) ‚â° q
[x¬∑y]/y·µ£ q r 0ÔºÉr =
      sym (¬∑·µ£Assoc _ _ _)
   ‚àô‚àô cong (q ¬∑·µ£_) (x¬∑inv‚Ñù[x] r 0ÔºÉr)
   ‚àô‚àô ¬∑IdR q




[x/‚Çäy]¬∑y·µ£ : ‚àÄ q r ‚Üí
               (q Ôºè·µ£‚Çä r ) ¬∑·µ£ (fst r) ‚â° q
[x/‚Çäy]¬∑y·µ£ q r =
      sym (¬∑·µ£Assoc _ _ _)
   ‚àô‚àô cong (q ¬∑·µ£_) (¬∑·µ£Comm _ _ ‚àô x¬∑inv‚Ñù‚Çä[x] r)
   ‚àô‚àô ¬∑IdR q


[x¬∑y·µ£]/‚Çäy : ‚àÄ q r ‚Üí
               ((q ¬∑·µ£ (fst r)) Ôºè·µ£‚Çä r )  ‚â° q
[x¬∑y·µ£]/‚Çäy q r =
      sym (¬∑·µ£Assoc _ _ _)
   ‚àô‚àô cong (q ¬∑·µ£_) (x¬∑inv‚Ñù‚Çä[x] r)
   ‚àô‚àô ¬∑IdR q



[x/y]¬∑y·µ£ : ‚àÄ q r ‚Üí (0ÔºÉr : 0 ÔºÉ r) ‚Üí
               (q Ôºè·µ£[ r , 0ÔºÉr ]) ¬∑·µ£ r ‚â° q
[x/y]¬∑y·µ£ q r 0ÔºÉr =
      sym (¬∑·µ£Assoc _ _ _)
   ‚àô‚àô cong (q ¬∑·µ£_) (¬∑·µ£Comm _ _ ‚àô x¬∑inv‚Ñù[x] r 0ÔºÉr)
   ‚àô‚àô ¬∑IdR q

x/y‚â°z‚Üíx‚â°z¬∑y : ‚àÄ x q r ‚Üí (0ÔºÉr : 0 ÔºÉ r)
               ‚Üí (x Ôºè·µ£[ r , 0ÔºÉr ]) ‚â° q
               ‚Üí x ‚â° q ¬∑·µ£ r
x/y‚â°z‚Üíx‚â°z¬∑y x q r 0ÔºÉr p =
    sym ([x/y]¬∑y·µ£ _ _ _) ‚àô cong (_¬∑·µ£ r) p

x/‚Çäy‚â°z‚Üíx‚â°z¬∑y : ‚àÄ x q r
               ‚Üí (x Ôºè·µ£‚Çä r) ‚â° q
               ‚Üí x ‚â° q ¬∑·µ£ (fst r)
x/‚Çäy‚â°z‚Üíx‚â°z¬∑y x q r p =
    sym ([x/‚Çäy]¬∑y·µ£ _ _) ‚àô cong (_¬∑·µ£ fst r) p


x¬∑y‚â°z‚Üíx‚â°z/y : ‚àÄ x q r ‚Üí (0ÔºÉr : 0 ÔºÉ r)
               ‚Üí (x ¬∑·µ£ r) ‚â° q
               ‚Üí x ‚â° q Ôºè·µ£[ r , 0ÔºÉr ]
x¬∑y‚â°z‚Üíx‚â°z/y x q r 0ÔºÉr p =
    sym ([x¬∑y]/y·µ£ _ _ _) ‚àô cong (_Ôºè·µ£[ r , 0ÔºÉr ]) p



x¬∑y‚â°z‚Üíx‚â°z/‚Çäy : ‚àÄ x q r
               ‚Üí (x ¬∑·µ£ fst r) ‚â° q
               ‚Üí x ‚â° q Ôºè·µ£‚Çä r
x¬∑y‚â°z‚Üíx‚â°z/‚Çäy x q r  p =
    sym ([x¬∑y·µ£]/‚Çäy _ _) ‚àô cong (_Ôºè·µ£‚Çä r) p


x¬∑rat[Œ±]+x¬∑rat[Œ≤]=x : ‚àÄ x ‚Üí
    ‚àÄ {Œ± Œ≤ : ‚Ñö} ‚Üí {ùüö.True (‚Ñö.discrete‚Ñö (Œ± ‚Ñö.+ Œ≤) 1)} ‚Üí
                   (x ¬∑·µ£ rat Œ±) +·µ£ (x ¬∑·µ£ rat Œ≤) ‚â° x
x¬∑rat[Œ±]+x¬∑rat[Œ≤]=x x {Œ±} {Œ≤} {p} =
   sym (¬∑DistL+ _ _ _)
    ‚àô‚àô cong (x ¬∑·µ£_) (+·µ£-rat _ _ ‚àô dec‚Ñö‚â°·µ£? {_} {_} {p})
    ‚àô‚àô ¬∑IdR _

x/y=x/z¬∑z/y : ‚àÄ x q r ‚Üí (0ÔºÉq : 0 ÔºÉ q) ‚Üí (0ÔºÉr : 0 ÔºÉ r)
              ‚Üí x Ôºè·µ£[ q , 0ÔºÉq ] ‚â°
                  (x Ôºè·µ£[ r , 0ÔºÉr ]) ¬∑·µ£ (r Ôºè·µ£[ q , 0ÔºÉq ])
x/y=x/z¬∑z/y x q r 0ÔºÉq 0ÔºÉr =
  cong (_Ôºè·µ£[ q , 0ÔºÉq ]) (sym ([x/y]¬∑y·µ£ x r 0ÔºÉr) )
    ‚àô  sym (¬∑·µ£Assoc _ _ _)

inv‚Ñù1 : (0ÔºÉ1 : 0 ÔºÉ 1) ‚Üí inv‚Ñù 1 0ÔºÉ1 ‚â° 1
inv‚Ñù1 0ÔºÉ1 =
   sym (¬∑IdL _) ‚àô x¬∑inv‚Ñù[x] (rat 1) 0ÔºÉ1


inv‚Ñù¬∑ : ‚àÄ x y 0ÔºÉx 0ÔºÉy 0ÔºÉx¬∑y ‚Üí
          inv‚Ñù (x ¬∑·µ£ y) 0ÔºÉx¬∑y ‚â°
            (inv‚Ñù x 0ÔºÉx) ¬∑·µ£ (inv‚Ñù y 0ÔºÉy)
inv‚Ñù¬∑ x y 0ÔºÉx 0ÔºÉy 0ÔºÉx¬∑y = sym (¬∑IdL _) ‚àô
  sym (x¬∑y‚â°z‚Üíx‚â°z/y _ _ _ _
    (¬∑·µ£Comm _ _
     ‚àô‚àô    sym (¬∑·µ£Assoc _ _ _)
        ‚àô‚àô cong (x ¬∑·µ£_) (¬∑·µ£Assoc _ _ _ ‚àô ¬∑·µ£Comm _ _)
        ‚àô‚àô (¬∑·µ£Assoc _ _ _)
     ‚àô‚àô cong‚ÇÇ _¬∑·µ£_ (x¬∑inv‚Ñù[x] x 0ÔºÉx) (x¬∑inv‚Ñù[x] y 0ÔºÉy) ‚àô ¬∑IdL _ ))
   ‚àô ¬∑·µ£Comm _ _

-ÔºÉ : ‚àÄ x y ‚Üí x ÔºÉ y ‚Üí (-·µ£ x) ÔºÉ (-·µ£ y)
-ÔºÉ x y p = ‚äé.map (-·µ£<·µ£ _ _) (-·µ£<·µ£ _ _) (isSymÔºÉ _ _ p)


opaque
 unfolding -·µ£_

 -inv‚Ñù : ‚àÄ x y ‚Üí -·µ£ (inv‚Ñù x y) ‚â° inv‚Ñù (-·µ£ x) (subst (_ÔºÉ (-·µ£ x)) (-·µ£-rat 0) (-ÔºÉ _ _ y)) -- -ÔºÉ _ _ y
 -inv‚Ñù x y =
   (cong -·µ£_ (sym (¬∑IdL _)) ‚àô sym (-·µ£¬∑ _ _) ‚àô
      cong (_¬∑·µ£ inv‚Ñù x y) (sym (inv‚Ñù-rat _ (inr dec‚Ñö<·µ£?) (inr ‚Ñö.dec‚Ñö<?))))
       ‚àô sym (inv‚Ñù¬∑ _ _ _ _
         (subst (0 ÔºÉ_) ((cong -·µ£_ (sym (¬∑IdL _))) ‚àô sym (-·µ£¬∑ _ _)) (-ÔºÉ 0 x y)))
    ‚àô cong‚ÇÇ inv‚Ñù (-·µ£¬∑ _ _ ‚àô cong -·µ£_ (ùêë'.¬∑IdL' _ _ refl ))
     (toPathP (isPropÔºÉ _ _ _ _))

 abs·µ£-inv‚Ñù : ‚àÄ x y ‚Üí abs·µ£ (inv‚Ñù x y) ‚â° fst (inv‚Ñù‚Çä (abs·µ£ x , 0ÔºÉ‚Üí0<abs _ y))
 abs·µ£-inv‚Ñù x (inl x‚ÇÅ) = cong abs·µ£ (sym (inv‚Ñù‚Çä‚â°inv‚Ñù (x , x‚ÇÅ) (inl x‚ÇÅ))) ‚àô‚àô
    abs·µ£Pos _ (snd (inv‚Ñù‚Çä (x , x‚ÇÅ))) ‚àô‚àô
     cong (fst ‚àò inv‚Ñù‚Çä) (‚Ñù‚Çä‚â° (sym (abs·µ£Pos x x‚ÇÅ)))
 abs·µ£-inv‚Ñù x (inr x‚ÇÅ) = abs·µ£Neg _ (inv‚Ñù-neg _ x‚ÇÅ)
   ‚àô -inv‚Ñù _ _  ‚àô sym (inv‚Ñù‚Çä‚â°inv‚Ñù (-·µ£ x , -·µ£<·µ£ _ _ x‚ÇÅ) _)
    ‚àô cong (fst ‚àò inv‚Ñù‚Çä) (‚Ñù‚Çä‚â° (sym (abs·µ£Neg _ x‚ÇÅ)))



opaque
 unfolding _‚â§·µ£_


 ‚â§·µ£-¬∑·µ£o : ‚àÄ m n o ‚Üí 0 ‚â§·µ£ o  ‚Üí  m ‚â§·µ£ n ‚Üí (m ¬∑·µ£ o ) ‚â§·µ£ (n ¬∑·µ£ o)
 ‚â§·µ£-¬∑·µ£o m n o 0‚â§o m‚â§n = subst (Œª o ‚Üí
    (m ¬∑·µ£ o ) ‚â§·µ£ (n ¬∑·µ£ o)) 0‚â§o (w ‚àô
       cong (_¬∑·µ£ max·µ£ (rat [ pos 0 / 1+ 0 ]) o) m‚â§n)
  where
  w : max·µ£ (m ¬∑·µ£ max·µ£ 0 o ) (n ¬∑·µ£ max·µ£ 0 o) ‚â°  (max·µ£ m n ¬∑·µ£ max·µ£ 0 o)
  w = ‚â°Continuous _ _
      (cont‚ÇÇmax·µ£ _ _
        ((IsContinuous‚àò _ _
          (IsContinuous¬∑·µ£L m) (IsContinuousMaxL 0)  ))
        ((IsContinuous‚àò _ _
          (IsContinuous¬∑·µ£L n) (IsContinuousMaxL 0)  )))
      (IsContinuous‚àò _ _
          (IsContinuous¬∑·µ£L _) (IsContinuousMaxL 0)  )
       (Œª o' ‚Üí
         ‚â°Continuous _ _
           (IsContinuous‚àò _ _ (IsContinuousMaxR ((n ¬∑·µ£ max·µ£ 0 (rat o'))))
                 (IsContinuous¬∑·µ£R (max·µ£ 0 (rat o'))) )
           (IsContinuous‚àò _ _  (IsContinuous¬∑·µ£R (max·µ£ 0 (rat o')))
                                 (IsContinuousMaxR n))
           (Œª m' ‚Üí
             ‚â°Continuous
               (Œª n ‚Üí max·µ£ (rat m' ¬∑·µ£ max·µ£ 0 (rat o') ) (n ¬∑·µ£ max·µ£ 0 (rat o')))
               (Œª n ‚Üí  max·µ£ (rat m') n ¬∑·µ£ max·µ£ 0 (rat o'))
               ((IsContinuous‚àò _ _
                 (IsContinuousMaxL (((rat m') ¬∑·µ£ max·µ£ 0 (rat o'))))
                 (IsContinuous¬∑·µ£R (max·µ£ 0 (rat o'))) ))
               (IsContinuous‚àò _ _ ((IsContinuous¬∑·µ£R (max·µ£ 0 (rat o'))))
                   (IsContinuousMaxL (rat m')))
               (Œª n' ‚Üí
                  (cong‚ÇÇ max·µ£ (sym (rat¬∑·µ£rat _ _)) (sym (rat¬∑·µ£rat _ _)))
                   ‚àô‚àô cong rat (sym (‚Ñö.¬∑MaxDistr‚Ñö' m' n' (‚Ñö.max 0 o')
                       (‚Ñö.‚â§max 0 o'))) ‚àô‚àô
                   rat¬∑·µ£rat _ _
                  ) n) m) o

 ‚â§·µ£-o¬∑·µ£ : ‚àÄ m n o ‚Üí 0 ‚â§·µ£ o ‚Üí  m ‚â§·µ£ n ‚Üí (o ¬∑·µ£ m   ) ‚â§·µ£ (o ¬∑·µ£ n)
 ‚â§·µ£-o¬∑·µ£ m n o 0‚â§o p = subst2 _‚â§·µ£_
   (¬∑·µ£Comm _ _)
   (¬∑·µ£Comm _ _)
   (‚â§·µ£-¬∑·µ£o m n o 0‚â§o p)

‚â§·µ£‚ÇäMonotone¬∑·µ£ : ‚àÄ m n o s ‚Üí 0 ‚â§·µ£ n ‚Üí 0 ‚â§·µ£ o
       ‚Üí m ‚â§·µ£ n ‚Üí o ‚â§·µ£ s
       ‚Üí (m ¬∑·µ£ o) ‚â§·µ£ (n ¬∑·µ£ s)
‚â§·µ£‚ÇäMonotone¬∑·µ£ m n o s 0‚â§n 0‚â§o m‚â§n o‚â§s =
  isTrans‚â§·µ£ _ _ _ (‚â§·µ£-¬∑·µ£o m n o 0‚â§o m‚â§n)
    (‚â§·µ£-o¬∑·µ£ o s n 0‚â§n o‚â§s)

NonNeg¬∑·µ£ : ‚àÄ x y ‚Üí 0 ‚â§·µ£ x ‚Üí 0 ‚â§·µ£ y ‚Üí 0 ‚â§·µ£ x ¬∑·µ£ y
NonNeg¬∑·µ£ x y 0‚â§x 0‚â§y = isTrans‚â°‚â§·µ£ _ _ _ (rat¬∑·µ£rat 0 0)
 (‚â§·µ£‚ÇäMonotone¬∑·µ£ _ _ _ _ 0‚â§x (‚â§·µ£-refl _) 0‚â§x 0‚â§y)



opaque
 unfolding _<·µ£_

 ‚Ñù‚Çä¬∑ : (m : ‚Ñù‚Çä) (n : ‚Ñù‚Çä) ‚Üí 0 <·µ£ (fst m) ¬∑·µ£ (fst n)
 ‚Ñù‚Çä¬∑ (m , 0<m) (n , 0<n) = PT.map2
   (Œª ((q , q') , 0‚â§q , q<q' , q'‚â§m) ‚Üí
    Œª ((r , r') , 0‚â§r , r<r' , r'‚â§n) ‚Üí
     let 0<r' = ‚Ñö.isTrans‚â§< _ _ _ (‚â§·µ£‚Üí‚â§‚Ñö 0 r 0‚â§r) r<r'
         qr‚Çä = (q' , ‚Ñö.<‚Üí0< _ (‚Ñö.isTrans‚â§< _ _ _ (‚â§·µ£‚Üí‚â§‚Ñö 0 q 0‚â§q) q<q'))
                ‚Ñö‚Çä¬∑ (r' , ‚Ñö.<‚Üí0< _ 0<r')
     in (fst (/2‚Çä qr‚Çä) , fst qr‚Çä) ,
          ‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.0‚â§‚Ñö‚Çä (/2‚Çä qr‚Çä)) ,
            x/2<x qr‚Çä ,
            subst (_‚â§·µ£ (m ¬∑·µ£ n))
              (sym (rat¬∑·µ£rat q' r'))
               (‚â§·µ£‚ÇäMonotone¬∑·µ£ (rat q')
                 (m) (rat r') n (<·µ£Weaken‚â§·µ£ _ _ 0<m)
                                (<·µ£Weaken‚â§·µ£ _ _ (<‚Ñö‚Üí<·µ£ _ _ 0<r'))
                              q'‚â§m r'‚â§n) ) 0<m 0<n

_‚Çä+·µ£_ : ‚Ñù‚Çä ‚Üí ‚Ñù‚Çä ‚Üí ‚Ñù‚Çä
(m , 0<m) ‚Çä+·µ£ (n , 0<n) = m +·µ£ n ,
 isTrans‚â°<·µ£ _ _ _ (sym (+·µ£-rat _ _)) (<·µ£Monotone+·µ£ 0 m 0 n 0<m 0<n)

_‚Çä¬∑·µ£_ : ‚Ñù‚Çä ‚Üí ‚Ñù‚Çä  ‚Üí ‚Ñù‚Çä
(m , 0<m) ‚Çä¬∑·µ£ (n , 0<n) = _ , ‚Ñù‚Çä¬∑ (m , 0<m) (n , 0<n)

_‚ÇäÔºè·µ£‚Çä_ : ‚Ñù‚Çä ‚Üí ‚Ñù‚Çä  ‚Üí ‚Ñù‚Çä
(q , 0<q) ‚ÇäÔºè·µ£‚Çä (r , 0<r) = (q Ôºè·µ£[ r , inl (0<r) ] ,
  ‚Ñù‚Çä¬∑ (q , 0<q) (_ , inv‚Ñù-pos r 0<r) )




0<1/x : ‚àÄ x 0ÔºÉx ‚Üí 0 <·µ£ x ‚Üí 0 <·µ£ inv‚Ñù x 0ÔºÉx
0<1/x x 0ÔºÉx 0<x = subst (0 <·µ£_)  (sym (inv‚Ñùimpl x 0ÔºÉx)) (‚Ñù‚Çä¬∑
  (_ , 0<sign·µ£ x 0ÔºÉx 0<x)
  (_ , inv‚Ñù'-pos (abs·µ£ x) (0ÔºÉ‚Üí0<abs x 0ÔºÉx)))

<·µ£-¬∑·µ£o : ‚àÄ m n (o : ‚Ñù‚Çä) ‚Üí  m <·µ£ n ‚Üí (m ¬∑·µ£ (fst o)) <·µ£ (n ¬∑·µ£ (fst o))
<·µ£-¬∑·µ£o m n (o , 0<o) p =
  let z = subst (0 <·µ£_) (¬∑DistR+ n (-·µ£ m) o ‚àô
                   cong ((n ¬∑·µ£ o) +·µ£_) (-·µ£¬∑ m o))
           (‚Ñù‚Çä¬∑ (_ , x<y‚Üí0<y-x _ _ p) (o , 0<o))
  in 0<y-x‚Üíx<y _ _ z

<·µ£-o¬∑·µ£ : ‚àÄ m n (o : ‚Ñù‚Çä) ‚Üí  m <·µ£ n ‚Üí ((fst o) ¬∑·µ£ m) <·µ£ ((fst o) ¬∑·µ£ n )
<·µ£-o¬∑·µ£ m n (o , 0<o) p =
  subst2 (_<·µ£_)
    (¬∑·µ£Comm _ _) (¬∑·µ£Comm _ _) (<·µ£-¬∑·µ£o m n (o , 0<o) p)


abs·µ£-triangle-minus : (x y : ‚Ñù) ‚Üí abs·µ£ x -·µ£ abs·µ£ y ‚â§·µ£ abs·µ£ (x -·µ£ y)
abs·µ£-triangle-minus x y =
  isTrans‚â°‚â§·µ£ _ _ _ (cong (_-·µ£ _) (cong abs·µ£ (sym (Lùêë.lem--05))))
   (a‚â§c+b‚áía-c‚â§b _ _ _ (abs·µ£-triangle y (x -·µ£ y)))

abs·µ£-triangle' : (x y : ‚Ñù) ‚Üí abs·µ£ x  ‚â§·µ£ abs·µ£ (x -·µ£ y) +·µ£ abs·µ£ y
abs·µ£-triangle' x y =
   isTrans‚â°‚â§·µ£ _ _ _ (cong abs·µ£ (sym (Lùêë.lem--00))) (abs·µ£-triangle (x -·µ£ y) y)


opaque
 unfolding _<·µ£_

 <·µ£‚ÇäMonotone¬∑·µ£ : ‚àÄ m n o s ‚Üí (0 ‚â§·µ£ m) ‚Üí (0 ‚â§·µ£ o)
        ‚Üí m <·µ£ n ‚Üí o <·µ£ s
        ‚Üí (m ¬∑·µ£ o) <·µ£ (n ¬∑·µ£ s)
 <·µ£‚ÇäMonotone¬∑·µ£ m n o s 0‚â§m 0‚â§o = PT.map2
    (Œª m<n@((q , q') , m‚â§q , q<q' , q'‚â§n) ‚Üí
         Œª ((r , r') , o‚â§r , r<r' , r'‚â§s) ‚Üí
     let 0‚â§q = isTrans‚â§·µ£ _ _ _ 0‚â§m m‚â§q
         0‚â§r = isTrans‚â§·µ£ _ _ _ 0‚â§o o‚â§r
         0‚â§r' = isTrans‚â§·µ£ _ _ _ 0‚â§r (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.<Weaken‚â§ _ _ r<r'))
         0‚â§n = isTrans‚â§·µ£ _ _ _ 0‚â§m (<·µ£Weaken‚â§·µ£ _ _ ‚à£ m<n ‚à£‚ÇÅ)
      in (q ‚Ñö.¬∑ r , q' ‚Ñö.¬∑ r') ,
            subst (m ¬∑·µ£ o ‚â§·µ£_) (sym (rat¬∑·µ£rat _ _))
               (‚â§·µ£‚ÇäMonotone¬∑·µ£ m (rat q) o (rat r)
                (0‚â§q) 0‚â§o m‚â§q o‚â§r) ,
                 ‚Ñö.<Monotone¬∑-onPos _ _ _ _
                   q<q' r<r' (‚â§·µ£‚Üí‚â§‚Ñö _ _ 0‚â§q)
                             (‚â§·µ£‚Üí‚â§‚Ñö _ _ 0‚â§r) ,
                 (subst (_‚â§·µ£ n ¬∑·µ£ s ) (sym (rat¬∑·µ£rat _ _))
                   (‚â§·µ£‚ÇäMonotone¬∑·µ£ (rat q') n (rat r') s
                     0‚â§n 0‚â§r'
                     q'‚â§n r'‚â§s)))


<‚â§·µ£‚ÇäMonotone¬∑·µ£ : ‚àÄ (m : ‚Ñù‚ÇÄ‚Çä) n (o : ‚Ñù‚Çä) s
       ‚Üí fst m <·µ£ n ‚Üí fst o ‚â§·µ£ s
       ‚Üí (fst m ¬∑·µ£ fst o) <·µ£ (n ¬∑·µ£ s)
<‚â§·µ£‚ÇäMonotone¬∑·µ£ m n o s m<n o‚â§s =
   isTrans<‚â§·µ£ _ _ _ (<·µ£-¬∑·µ£o _ _ o m<n)
           (‚â§·µ£-o¬∑·µ£ _ _ n (isTrans‚â§·µ£ _ _ _ (snd m)
              (<·µ£Weaken‚â§·µ£ _ _ m<n) ) o‚â§s)


‚â§<·µ£‚ÇäMonotone¬∑·µ£ : ‚àÄ (m : ‚Ñù‚Çä) n (o : ‚Ñù‚ÇÄ‚Çä) s
       ‚Üí fst m ‚â§·µ£ n ‚Üí fst o <·µ£ s
       ‚Üí (fst m ¬∑·µ£ fst o) <·µ£ (n ¬∑·µ£ s)
‚â§<·µ£‚ÇäMonotone¬∑·µ£ m n o s m‚â§n o<s =
   isTrans‚â§<·µ£ _ _ _
     (‚â§·µ£-¬∑·µ£o _ _ _ (snd o) m‚â§n)
     (<·µ£-o¬∑·µ£ _ _ (n , isTrans<‚â§·µ£ _ _ _ (snd m) m‚â§n) o<s )



opaque
 unfolding _<·µ£_

 z<x‚âÉy‚Çä¬∑z<y‚Çä¬∑x : ‚àÄ x z (y : ‚Ñù‚Çä) ‚Üí (z <·µ£ x) ‚âÉ ((fst y) ¬∑·µ£ z <·µ£ (fst y) ¬∑·µ£ x)
 z<x‚âÉy‚Çä¬∑z<y‚Çä¬∑x x z y =  propBiimpl‚ÜíEquiv squash‚ÇÅ squash‚ÇÅ
  (<·µ£-o¬∑·µ£ _ _ y) (subst2 _<·µ£_
   (¬∑·µ£Assoc _ _ _ ‚àô cong (_¬∑·µ£ z) (¬∑·µ£Comm _ _ ‚àô x¬∑inv‚Ñù‚Çä[x] y) ‚àô ¬∑IdL z)
   (¬∑·µ£Assoc _ _ _ ‚àô cong (_¬∑·µ£ x) (¬∑·µ£Comm _ _ ‚àô x¬∑inv‚Ñù‚Çä[x] y) ‚àô ¬∑IdL x)
   ‚àòS (<·µ£-o¬∑·µ£ _ _ (inv‚Ñù‚Çä y)))


 z<x/y‚Çä‚âÉy‚Çä¬∑z<x : ‚àÄ x z (y : ‚Ñù‚Çä) ‚Üí (z <·µ£ x ¬∑·µ£ (fst (inv‚Ñù‚Çä y))) ‚âÉ ((fst y) ¬∑·µ£ z <·µ£ x)
 z<x/y‚Çä‚âÉy‚Çä¬∑z<x x z y =
     z<x‚âÉy‚Çä¬∑z<y‚Çä¬∑x (x ¬∑·µ£ (fst (inv‚Ñù‚Çä y))) z y
     ‚àô‚Çë substEquiv (_ <·µ£_) (¬∑·µ£Comm _ _ ‚àô [x/‚Çäy]¬∑y·µ£ x y )

 z/y<x‚Çä‚âÉz<y‚Çä¬∑x : ‚àÄ x z (y : ‚Ñù‚Çä) ‚Üí (z  ¬∑·µ£ (fst (inv‚Ñù‚Çä y)) <·µ£ x)
                          ‚âÉ (z <·µ£ (fst y) ¬∑·µ£  x)
 z/y<x‚Çä‚âÉz<y‚Çä¬∑x x z y =
       z<x‚âÉy‚Çä¬∑z<y‚Çä¬∑x _ _ y ‚àô‚Çë
        substEquiv (_<·µ£ (fst y) ¬∑·µ£ x) (¬∑·µ£Comm _ _ ‚àô [x/‚Çäy]¬∑y·µ£ z y )


 z‚â§x‚âÉy‚Çä¬∑z‚â§y‚Çä¬∑x : ‚àÄ x z (y : ‚Ñù‚Çä) ‚Üí (z ‚â§·µ£ x) ‚âÉ ((fst y) ¬∑·µ£ z ‚â§·µ£ (fst y) ¬∑·µ£ x)
 z‚â§x‚âÉy‚Çä¬∑z‚â§y‚Çä¬∑x x z y =  propBiimpl‚ÜíEquiv (isSet‚Ñù _ _) (isSet‚Ñù _ _)
  (‚â§·µ£-o¬∑·µ£ _ _ (fst y) (<·µ£Weaken‚â§·µ£ _ _ (snd y)))
  (subst2 _‚â§·µ£_
   (¬∑·µ£Assoc _ _ _ ‚àô cong (_¬∑·µ£ z) (¬∑·µ£Comm _ _ ‚àô x¬∑inv‚Ñù‚Çä[x] y) ‚àô ¬∑IdL z)
   (¬∑·µ£Assoc _ _ _ ‚àô cong (_¬∑·µ£ x) (¬∑·µ£Comm _ _ ‚àô x¬∑inv‚Ñù‚Çä[x] y) ‚àô ¬∑IdL x)
   ‚àòS (‚â§·µ£-o¬∑·µ£ _ _ (fst (inv‚Ñù‚Çä y)) (<·µ£Weaken‚â§·µ£ _ _ (snd (inv‚Ñù‚Çä y)))))

 z/y‚â§x‚Çä‚âÉz‚â§y‚Çä¬∑x : ‚àÄ x z (y : ‚Ñù‚Çä) ‚Üí (z  ¬∑·µ£ (fst (inv‚Ñù‚Çä y)) ‚â§·µ£ x)
                          ‚âÉ (z ‚â§·µ£ (fst y) ¬∑·µ£  x)
 z/y‚â§x‚Çä‚âÉz‚â§y‚Çä¬∑x x z y =
       z‚â§x‚âÉy‚Çä¬∑z‚â§y‚Çä¬∑x _ _ y ‚àô‚Çë
        substEquiv (_‚â§·µ£ (fst y) ¬∑·µ£ x) (¬∑·µ£Comm _ _ ‚àô [x/‚Çäy]¬∑y·µ£ z y )

 z‚â§x/y‚Çä‚âÉy‚Çä¬∑z‚â§x : ‚àÄ x z (y : ‚Ñù‚Çä) ‚Üí (z  ‚â§·µ£ x ¬∑·µ£ (fst (inv‚Ñù‚Çä y)))
                          ‚âÉ ((fst y) ¬∑·µ£  z ‚â§·µ£ x)
 z‚â§x/y‚Çä‚âÉy‚Çä¬∑z‚â§x x z y =
       z‚â§x‚âÉy‚Çä¬∑z‚â§y‚Çä¬∑x _ _ y ‚àô‚Çë
         substEquiv ((fst y) ¬∑·µ£ z ‚â§·µ£_)
            (¬∑·µ£Comm _ _ ‚àô [x/‚Çäy]¬∑y·µ£ x y )


 z/y'‚â§x/y‚âÉy‚Çä¬∑z‚â§y'‚Çä¬∑x : ‚àÄ x z (y y' : ‚Ñù‚Çä) ‚Üí (z ¬∑·µ£ (fst (inv‚Ñù‚Çä y'))
                                      ‚â§·µ£ x ¬∑·µ£ (fst (inv‚Ñù‚Çä y))) ‚âÉ
                       ((fst y) ¬∑·µ£ z ‚â§·µ£ (fst y') ¬∑·µ£ x)
 z/y'‚â§x/y‚âÉy‚Çä¬∑z‚â§y'‚Çä¬∑x x z y y' =
      z‚â§x/y‚Çä‚âÉy‚Çä¬∑z‚â§x _ _ _
   ‚àô‚Çë substEquiv (_‚â§·µ£ x) (¬∑·µ£Assoc _ _ _)
   ‚àô‚Çë z/y‚â§x‚Çä‚âÉz‚â§y‚Çä¬∑x _ _ _

 -- x/x'‚â§y/y'‚âÉx/y‚â§x'/y' : ‚àÄ x (x' y y' : ‚Ñù‚Çä) ‚Üí (z ¬∑·µ£ (fst (inv‚Ñù‚Çä y'))
 --                                      ‚â§·µ£ x ¬∑·µ£ (fst (inv‚Ñù‚Çä y))) ‚âÉ
 --                       ((fst y) ¬∑·µ£ z ‚â§·µ£ (fst y') ¬∑·µ£ x)
 -- x/x'‚â§y/y'‚âÉx/y‚â§x'/y' x z y y' = ?
 --   --    z‚â§x/y‚Çä‚âÉy‚Çä¬∑z‚â§x _ _ _
 --   -- ‚àô‚Çë substEquiv (_‚â§·µ£ x) (¬∑·µ£Assoc _ _ _)
 --   -- ‚àô‚Çë z/y‚â§x‚Çä‚âÉz‚â§y‚Çä¬∑x _ _ _


 z/y'<x/y‚âÉy‚Çä¬∑z<y'‚Çä¬∑x : ‚àÄ x z (y y' : ‚Ñù‚Çä) ‚Üí (z ¬∑·µ£ (fst (inv‚Ñù‚Çä y'))
                                      <·µ£ x ¬∑·µ£ (fst (inv‚Ñù‚Çä y))) ‚âÉ
                       ((fst y) ¬∑·µ£ z <·µ£ (fst y') ¬∑·µ£ x)
 z/y'<x/y‚âÉy‚Çä¬∑z<y'‚Çä¬∑x x z y y' =
      z<x/y‚Çä‚âÉy‚Çä¬∑z<x _ _ _
   ‚àô‚Çë substEquiv (_<·µ£ x) (¬∑·µ£Assoc _ _ _)
   ‚àô‚Çë z/y<x‚Çä‚âÉz<y‚Çä¬∑x _ _ _


 x/y‚â§x'/y'‚âÉy'/x'‚â§y/x : ‚àÄ (x x' y y' : ‚Ñù‚Çä) ‚Üí (fst x ¬∑·µ£ (fst (inv‚Ñù‚Çä y))
                                      ‚â§·µ£ fst x' ¬∑·µ£ (fst (inv‚Ñù‚Çä y'))) ‚âÉ
                       (fst y' ¬∑·µ£ (fst (inv‚Ñù‚Çä x'))
                                      ‚â§·µ£ fst y ¬∑·µ£ (fst (inv‚Ñù‚Çä x)))
 x/y‚â§x'/y'‚âÉy'/x'‚â§y/x x x' y y' =
   z/y'‚â§x/y‚âÉy‚Çä¬∑z‚â§y'‚Çä¬∑x _ _ _ _
   ‚àô‚Çë subst2Equiv (_‚â§·µ£_) (¬∑·µ£Comm _ _) (¬∑·µ£Comm _ _)
   ‚àô‚Çë invEquiv (z/y'‚â§x/y‚âÉy‚Çä¬∑z‚â§y'‚Çä¬∑x _ _ _ _)

 0<x‚âÉ0<y‚Çä¬∑x : ‚àÄ x (y : ‚Ñù‚Çä) ‚Üí (0 <·µ£ x) ‚âÉ (0 <·µ£ (fst y) ¬∑·µ£ x)
 0<x‚âÉ0<y‚Çä¬∑x x y =   propBiimpl‚ÜíEquiv squash‚ÇÅ squash‚ÇÅ
    (Œª 0<x ‚Üí isTrans‚â°<·µ£ _ _ _ (sym (ùêë'.0RightAnnihilates  (fst y)))
       (<·µ£-o¬∑·µ£ 0 x y 0<x))
    Œª 0<y¬∑x ‚Üí
      isTrans<‚â°·µ£ _ _ x (isTrans‚â°<·µ£ _ _ _ (sym (ùêë'.0RightAnnihilates
        (fst (inv‚Ñù‚Çä y))))
       (<·µ£-o¬∑·µ£ 0 ((fst y) ¬∑·µ£ x) (inv‚Ñù‚Çä y) 0<y¬∑x))
         (¬∑·µ£Assoc _ _ _ ‚àô cong (_¬∑·µ£ x) (¬∑·µ£Comm _ _ ‚àô x¬∑inv‚Ñù‚Çä[x] _) ‚àô ¬∑IdL x)



 inv‚Ñù‚Çä-<-inv‚Ñù‚Çä : ‚àÄ x y ‚Üí (fst (inv‚Ñù‚Çä x) <·µ£ fst (inv‚Ñù‚Çä y))
                       ‚âÉ (fst y <·µ£ fst x)
 inv‚Ñù‚Çä-<-inv‚Ñù‚Çä x y =
      subst2Equiv _<·µ£_ (sym (¬∑IdL _)) (sym (¬∑IdL _))
   ‚àô‚Çë z/y'<x/y‚âÉy‚Çä¬∑z<y'‚Çä¬∑x 1 1 y x
   ‚àô‚Çë subst2Equiv _<·µ£_ (¬∑IdR _) (¬∑IdR _)

inv‚Ñù‚Çä-‚â§-inv‚Ñù‚Çä : ‚àÄ x y ‚Üí (fst (inv‚Ñù‚Çä x) ‚â§·µ£ fst (inv‚Ñù‚Çä y))
                      ‚âÉ (fst y ‚â§·µ£ fst x)
inv‚Ñù‚Çä-‚â§-inv‚Ñù‚Çä x y =
     subst2Equiv _‚â§·µ£_ (sym (¬∑IdL _)) (sym (¬∑IdL _))
  ‚àô‚Çë z/y'‚â§x/y‚âÉy‚Çä¬∑z‚â§y'‚Çä¬∑x 1 1 y x
  ‚àô‚Çë subst2Equiv _‚â§·µ£_ (¬∑IdR _) (¬∑IdR _)


inv‚Ñù‚Çä-rat : ‚àÄ q ‚Üí fst (inv‚Ñù‚Çä (‚Ñö‚Çä‚Üí‚Ñù‚Çä q)) ‚â° fst (‚Ñö‚Çä‚Üí‚Ñù‚Çä (inv‚Ñö‚Çä q))
inv‚Ñù‚Çä-rat q = inv‚Ñù‚Çä‚â°inv‚Ñù _ (inl (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä q))) ‚àô‚àô
    inv‚Ñù-rat _ _ (inl (‚Ñö.0<‚Ñö‚Çä q)) ‚àô‚àô
     cong rat (‚Ñö.inv‚Ñö‚Çä‚â°inv‚Ñö _ _)



inv‚Ñù‚Çä¬∑ : ‚àÄ x y ‚Üí
          inv‚Ñù‚Çä (x ‚Çä¬∑·µ£ y) ‚â°
            (inv‚Ñù‚Çä x) ‚Çä¬∑·µ£ (inv‚Ñù‚Çä y)
inv‚Ñù‚Çä¬∑ x y =
  ‚Ñù‚Çä‚â° (inv‚Ñù‚Çä‚â°inv‚Ñù (x ‚Çä¬∑·µ£ y) (inl (‚Ñù‚Çä¬∑ x y)) ‚àô‚àô
       inv‚Ñù¬∑ _ _ _ _ _
       ‚àô‚àô cong‚ÇÇ _¬∑·µ£_
        (sym (inv‚Ñù‚Çä‚â°inv‚Ñù x (inl (snd x)))) (sym (inv‚Ñù‚Çä‚â°inv‚Ñù y (inl (snd y)))) )


inv‚Ñù‚ÇäInvol : ‚àÄ x ‚Üí inv‚Ñù‚Çä (inv‚Ñù‚Çä x) ‚â° x
inv‚Ñù‚ÇäInvol x = ‚Ñù‚Çä‚â° $
   fst (inv‚Ñù‚Çä (inv‚Ñù‚Çä x))
       ‚â°‚ü® (cong (fst ‚àò inv‚Ñù‚Çä) (‚Ñù‚Çä‚â° (inv‚Ñù‚Çä‚â°inv‚Ñù _ _))) ‚ü© _
       ‚â°‚ü® inv‚Ñù‚Çä‚â°inv‚Ñù (_ , inv‚Ñù-pos _ _) _  ‚ü© _
       ‚â°‚ü® inv‚ÑùInvol (fst x) (inl (snd x)) ‚ü© _ ‚àé


inv‚Ñù‚Çä1 : inv‚Ñù‚Çä 1 ‚â° 1
inv‚Ñù‚Çä1 = ‚Ñù‚Çä‚â° (inv‚Ñù‚Çä‚â°inv‚Ñù 1 (inl dec‚Ñö<·µ£?)  ‚àô (inv‚Ñù1 _))


1/x<1‚âÉ1<x : ‚àÄ x ‚Üí (fst (inv‚Ñù‚Çä x) <·µ£ 1) ‚âÉ (1 <·µ£ fst x)
1/x<1‚âÉ1<x x =
  substEquiv (fst (inv‚Ñù‚Çä x) <·µ£_) (sym (cong fst inv‚Ñù‚Çä1))
    ‚àô‚Çë inv‚Ñù‚Çä-<-inv‚Ñù‚Çä x 1

1<x/y‚âÉy<x : ‚àÄ x y ‚Üí (1 <·µ£ x Ôºè·µ£‚Çä y) ‚âÉ (fst y <·µ£ x)
1<x/y‚âÉy<x x y =
      substEquiv (_<·µ£ x Ôºè·µ£‚Çä y) (sym (x¬∑inv‚Ñù‚Çä[x] 1))
   ‚àô‚Çë z/y'<x/y‚âÉy‚Çä¬∑z<y'‚Çä¬∑x x 1 y 1
   ‚àô‚Çë subst2Equiv _<·µ£_ (¬∑IdR _) (¬∑IdL _)



x+y‚â§z+y‚âÉx‚â§z : ‚àÄ x z y ‚Üí (x +·µ£ y ‚â§·µ£ z +·µ£ y)
                      ‚âÉ (x ‚â§·µ£ z)
x+y‚â§z+y‚âÉx‚â§z x z y = propBiimpl‚ÜíEquiv (isProp‚â§·µ£ _ _) (isProp‚â§·µ£ _ _)
  (subst2 _‚â§·µ£_ (ùêë'.plusMinus _ _) (ùêë'.plusMinus _ _)
    ‚àò ‚â§·µ£-+o _ _ (-·µ£ y))
 (‚â§·µ£-+o _ _ _)


x+y<z+y‚âÉx<z : ‚àÄ x z y ‚Üí (x +·µ£ y <·µ£ z +·µ£ y)
                      ‚âÉ (x <·µ£ z)
x+y<z+y‚âÉx<z x z y = propBiimpl‚ÜíEquiv (isProp<·µ£ _ _) (isProp<·µ£ _ _)
  (subst2 _<·µ£_ (ùêë'.plusMinus _ _) (ùêë'.plusMinus _ _)
    ‚àò <·µ£-+o _ _ (-·µ£ y))
 (<·µ£-+o _ _ _)


x+y<x+z‚âÉy<z : ‚àÄ x z y ‚Üí (x +·µ£ y <·µ£ x +·µ£ z)
                      ‚âÉ (y <·µ£ z)
x+y<x+z‚âÉy<z x z y = propBiimpl‚ÜíEquiv (isProp<·µ£ _ _) (isProp<·µ£ _ _)
  (subst2 _<·µ£_
     ((Œª i ‚Üí +·µ£Comm (-·µ£ x) (+·µ£Comm x y i) i) ‚àô ùêë'.plusMinus y x)
     ((Œª i ‚Üí +·µ£Comm (-·µ£ x) (+·µ£Comm x z i) i) ‚àô ùêë'.plusMinus z x)
    ‚àò <·µ£-o+ _ _ (-·µ£ x))
 (<·µ£-o+ _ _ _)


x'/x<[x'+y']/[x+y]‚âÉ[x'+y']/[x+y]<y'/y :
  ‚àÄ x x' y y' ‚Üí
     ((x' Ôºè·µ£‚Çä x) <·µ£ ((x' +·µ£ y') Ôºè·µ£‚Çä (x ‚Çä+·µ£ y))) ‚âÉ
       (((x' +·µ£ y') Ôºè·µ£‚Çä (x ‚Çä+·µ£ y)) <·µ£ (y' Ôºè·µ£‚Çä y))
x'/x<[x'+y']/[x+y]‚âÉ[x'+y']/[x+y]<y'/y x x' y y' =
  z/y'<x/y‚âÉy‚Çä¬∑z<y'‚Çä¬∑x _ _ _ _
  ‚àô‚Çë subst2Equiv _<·µ£_ (¬∑DistR+ _ _ _) (¬∑DistL+ _ _ _)
  ‚àô‚Çë x+y<x+z‚âÉy<z _ _ _ ‚àô‚Çë invEquiv (x+y<z+y‚âÉx<z _ _ _)
  ‚àô‚Çë subst2Equiv _<·µ£_
       ((sym (¬∑DistL+ _ _ _))) (sym (¬∑DistR+ _ _ _))
  ‚àô‚Çë invEquiv (z/y'<x/y‚âÉy‚Çä¬∑z<y'‚Çä¬∑x _ _ _ _)


opaque
 unfolding _<·µ£_ _+·µ£_

 IsUContinuous‚Ñö‚Ñô‚ÜíIsUContinuous‚Ñô : ‚àÄ f ‚Üí
   (‚àÄ x 0<x y 0<y ‚Üí x ‚â§·µ£ y ‚Üí f x 0<x ‚â§·µ£ f y 0<y)
   ‚Üí IsUContinuous‚Ñö‚Ñô (Œª x ‚Üí (0 <·µ£ x) , isProp<·µ£ _ _ ) (f ‚àò rat)
   ‚Üí IsUContinuous‚Ñô (Œª x ‚Üí (0 <·µ£ x) , isProp<·µ£ _ _ ) f
 IsUContinuous‚Ñö‚Ñô‚ÜíIsUContinuous‚Ñô f incr uc Œµ =
   let (Œ¥ , Œî) = uc Œµ
   in Œ¥ , Œª u v u‚àà v‚àà ‚Üí
     ((Œª u-v<Œ¥ ‚Üí
        PT.rec2
          (isProp‚àº _ _ _)
          (Œª (Œ∑ , 0<Œ∑ , Œ∑<)
             (œÑ , 0<œÑ , œÑ<) ‚Üí
            let Œ∑' = ‚Ñö.min‚Çä (Œ∑ , ‚Ñö.<‚Üí0< _ (<·µ£‚Üí<‚Ñö _ _ 0<Œ∑))
                            (œÑ , ‚Ñö.<‚Üí0< _ (<·µ£‚Üí<‚Ñö _ _ 0<œÑ))

            in PT.rec2 (isProp‚àº _ _ _)
                   (Œª ((u‚äìv , uu) , (<Œ∑' , u‚äìv< , <uu))
                      ((vv , u‚äîv) , (<Œ∑'' , vv< , <u‚äîv)) ‚Üí
                     let xx = isTrans‚â§·µ£ _ _ _ (min‚â§·µ£ _ _) (‚â§max·µ£ _ _)

                         Œ∑<* = a<b-c‚áía+c<b _
                            (rat (fst Œ¥)) _
                           $ fst (z<x/y‚Çä‚âÉy‚Çä¬∑z<x _ _ (‚Ñö‚Çä‚Üí‚Ñù‚Çä 2))
                            (isTrans<‚â°·µ£ _ _ _ Œ∑<
                              (cong ((rat (fst Œ¥) -·µ£ abs·µ£ (u -·µ£ v)) ¬∑·µ£_)
                                (sym (inv‚Ñù'-rat 2 _ (snd (‚Ñö‚Çä‚Üí‚Ñù‚Çä 2))))))
                         u‚äìv<u‚äîv = isTrans<·µ£ _ _ _
                                   (isTrans<‚â§·µ£ _ _ _
                                    (u‚äìv<) xx) (<u‚äîv)
                         0<u‚äìv : 0 <·µ£ rat u‚äìv
                         0<u‚äìv = isTrans<·µ£ _ _ _
                              (x<y‚Üí0<y-x _ _
                                (isTrans<·µ£ _ _ _
                                  (isTrans‚â§<·µ£ _ _ _
                                    (isTrans‚â°‚â§·µ£ _ _ _
                                     (min·µ£Comm (rat Œ∑) (rat œÑ))
                                      (min‚â§·µ£ _ (rat Œ∑))) œÑ<)
                                  <uu)
                                )
                             (a-b<c‚áía-c<b (rat uu) _ _
                                    (<‚Ñö‚Üí<·µ£ (uu ‚Ñö.- u‚äìv) _ <Œ∑'))

                         <Œ∑* : -·µ£ (rat u‚äìv) <·µ£ -·µ£ rat uu +·µ£ rat (fst Œ∑')
                         <Œ∑* = isTrans‚â°<·µ£ _ _ _
                                  (sym (Lùêë.lem--04 {rat uu}))
                                     (<·µ£-o+ _ _ (-·µ£ (rat uu))
                                   (<‚Ñö‚Üí<·µ£ (uu ‚Ñö.- u‚äìv) _ <Œ∑'))

                         <Œ∑** : (rat u‚äîv) <·µ£ rat (fst Œ∑') +·µ£ rat vv
                         <Œ∑** = a-b<c‚áía<c+b (rat u‚äîv) (rat vv) _ (<‚Ñö‚Üí<·µ£ _ _ <Œ∑'')

                         z = Œî u‚äìv u‚äîv 0<u‚äìv
                             (isTrans<·µ£ _ _ _
                              ((snd (max·µ£‚Çä (u , u‚àà) (v , v‚àà)))) <u‚äîv)
                               (<·µ£‚Üí<‚Ñö (‚Ñö.abs (u‚äìv ‚Ñö.- u‚äîv))
                                (fst Œ¥)
                                 (isTrans‚â°<·µ£ _ _ _
                                  (cong rat (‚Ñö.absComm- _ _ ‚àô ‚Ñö.absPos _
                                   (<·µ£‚Üí<‚Ñö _ _ (x<y‚Üí0<y-x _ _ u‚äìv<u‚äîv))))
                                     (isTrans‚â§<·µ£ _ _ _
                                        (isTrans‚â§‚â°·µ£ _ _ _
                                          (isTrans‚â§·µ£ _ _ _
                                            (<·µ£Weaken‚â§·µ£ _ _
                                           (<·µ£Monotone+·µ£ _ _ _ _
                                            <Œ∑** <Œ∑*))
                                            (isTrans‚â°‚â§·µ£ _ _ _
                                              (Lùêë.lem--080
                                           {rat (fst Œ∑')} {rat vv} {rat uu})
                                            (‚â§·µ£Monotone+·µ£ _ _
                                             (rat vv -·µ£ rat uu) _
                                             (‚â§·µ£Monotone+·µ£ _ _ _ _
                                               (min‚â§·µ£ _ (rat œÑ))
                                               (min‚â§·µ£ _ (rat œÑ)))
                                             (isTrans‚â§‚â°·µ£ _ _ _
                                               (‚â§·µ£Monotone+·µ£ _ _ _ _
                                             (<·µ£Weaken‚â§·µ£ _ _ vv<)
                                              (<·µ£Weaken‚â§·µ£ _ _
                                                (-·µ£<·µ£ _ _ <uu)))
                                               ((sym (abs·µ£NonNeg _
                                                   (x‚â§y‚Üí0‚â§y-x _ _
                                                     (isTrans‚â§·µ£ _ _ _
                                                    (min‚â§·µ£ _ _) (‚â§max·µ£ _ _)))))
                                                      ‚àô
                                                      abs·µ£-min-max _ _)))
                                              ))
                                           (cong (_+·µ£ _)
                                              (x+x‚â°2x _))) Œ∑<*)))

                     in invEq (‚àº‚âÉabs<Œµ _ _ _)
                          (isTrans‚â°<·µ£ _ _ _
                           (sym (abs·µ£-min-max _ _))
                           (isTrans‚â§<·µ£ _ _ _
                             ((abs·µ£-monotoneOnNonNeg
                                 (_ , fst (x‚â§y‚âÉ0‚â§y-x _ _)
                                    (isTrans‚â§·µ£ _ _ _ (min‚â§·µ£ _ _) (‚â§max·µ£ _ _)))

                                (_ , fst (x‚â§y‚âÉ0‚â§y-x _ _)
                                (incr _ _ _ _ (<·µ£Weaken‚â§·µ£ _ _ u‚äìv<u‚äîv)))
                              (‚â§·µ£Monotone+·µ£ _ _ _ _
                                (isTrans‚â§·µ£ _ _ _
                                    (incr‚Üímax‚â§ f incr _ _ _ _)
                                     (incr _ _ _ _
                                  (<·µ£Weaken‚â§·µ£ _ _ <u‚äîv)))
                                (-·µ£‚â§·µ£ _ _
                                  (isTrans‚â§·µ£ _ _ _ (incr _ _ _ _
                                    (<·µ£Weaken‚â§·µ£ _ _ u‚äìv<
                                      )) (incr‚Üí‚â§min f incr _ _ _ _))))))
                              (fst (‚àº‚âÉabs<Œµ _ _ _) (sym‚àº _ _ _ z)))))
                 (‚àÉrationalApprox (min·µ£ u v) Œ∑')
                 (‚àÉrationalApprox (max·µ£ u v) Œ∑'))
         (dense‚Ñöin‚Ñù 0 (((rat (fst Œ¥)) -·µ£ abs·µ£ (u -·µ£ v)) ¬∑·µ£  rat [ 1 / 2 ])
                (isTrans‚â°<·µ£ _ _ _
                  (sym (ùêë'.0LeftAnnihilates _))
                  ((<·µ£-¬∑·µ£o 0 ((rat (fst Œ¥)) -·µ£ abs·µ£ (u -·µ£ v))
                    (‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ 1 / 2 ] , _))
                    (x<y‚Üí0<y-x _ _ u-v<Œ¥)))))
                    (dense‚Ñöin‚Ñù 0 (min·µ£ u v)
                       (snd (min·µ£‚Çä (u , u‚àà) (v , v‚àà))))

        )
      ‚àò fst (‚àº‚âÉabs<Œµ _ _ _))

opaque
 unfolding -·µ£_
 Seq‚äÜ-abs<N-s‚äá-‚ä§Pred : Seq‚äÜ-abs<N Seq‚äÜ.s‚äá ‚ä§Pred
 Seq‚äÜ-abs<N-s‚äá-‚ä§Pred x _ =     PT.map
       (Œª (1+ n , X) ‚Üí
         n , (isTrans<‚â§·µ£ _ _ _ (-·µ£<·µ£ _ _ X)
                   (isTrans‚â°‚â§·µ£ _ _ _ (cong -·µ£_ (-abs·µ£ x) )
                     (isTrans‚â§‚â°·µ£ _ _ _ (-·µ£‚â§·µ£ _ _ (‚â§abs·µ£ (-·µ£ x)))
                        (-·µ£Invol _))))
            , isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ x) X)
       (getClamps x)


‚â§Weaken<+·µ£ : ‚àÄ x y (z : ‚Ñù‚Çä) ‚Üí
       x ‚â§·µ£ y ‚Üí x <·µ£ y +·µ£ fst z
‚â§Weaken<+·µ£ x y z x‚â§y =
  isTrans‚â°<·µ£ _ _ _ (sym (+IdR _))
   (‚â§<·µ£Monotone+·µ£ x y 0 (fst z) x‚â§y (snd z))



clam‚àà‚Ñöinterval‚Ñô : ‚àÄ a b ‚Üí (a ‚Ñö.‚â§ b) ‚Üí ‚àÄ x ‚Üí
  ‚Ñö.clamp a b x ‚àà ‚Ñöinterval‚Ñô a b
clam‚àà‚Ñöinterval‚Ñô a b a‚â§b x = ‚Ñö.‚â§clamp _ _ _ a‚â§b , (‚Ñö.clamp‚â§ _ _ _)

‚àà‚Ñöinterval‚Ñô‚Üíclam‚â° : ‚àÄ a b ‚Üí ‚àÄ x ‚Üí
    x ‚àà ‚Ñöinterval‚Ñô a b ‚Üí x ‚â° ‚Ñö.clamp a b x
‚àà‚Ñöinterval‚Ñô‚Üíclam‚â° a b x = sym ‚àò uncurry (‚Ñö.inClamps a b x)

‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â° : ‚àÄ a b ‚Üí ‚àÄ x ‚Üí
    x ‚àà interval‚Ñô a b ‚Üí x ‚â° clamp·µ£ a b x
‚àà‚Ñöinterval‚Ñô‚Üíclamp·µ£‚â° a b x (a‚â§x , x‚â§b) =
 sym (‚â§‚Üímin·µ£ _ _ x‚â§b)  ‚àô cong (Œª y ‚Üí min·µ£ y b) (sym (‚â§·µ£‚Üí‚â° a‚â§x))


clamp-contained-agree : ‚àÄ (a b a' b' x : ‚Ñö)
  ‚Üí a ‚Ñö.‚â§ a'
  ‚Üí b' ‚Ñö.‚â§ b
  ‚Üí x ‚àà ‚Ñöinterval‚Ñô a' b'
  ‚Üí ‚Ñö.clamp a b x ‚â° ‚Ñö.clamp a' b' x
clamp-contained-agree a b a' b' x a‚â§a' b'‚â§b x‚àà =
  sym (‚àà‚Ñöinterval‚Ñô‚Üíclam‚â° a b x
   ((‚Ñö.isTrans‚â§ _ _ _ a‚â§a' (fst x‚àà)) ,
    (‚Ñö.isTrans‚â§ _ _ _ (snd x‚àà) b'‚â§b))) ‚àô ‚àà‚Ñöinterval‚Ñô‚Üíclam‚â° a' b' x x‚àà



clamp·µ£‚àà‚Ñöinterval‚Ñô : ‚àÄ a b ‚Üí (a ‚â§·µ£ b) ‚Üí ‚àÄ x ‚Üí
  clamp·µ£ a b x ‚àà interval‚Ñô a b
clamp·µ£‚àà‚Ñöinterval‚Ñô a b a‚â§b x =
        ‚â§clamp·µ£ _ _ _ a‚â§b , min‚â§·µ£' (max·µ£ a x) b

‚â°clamp·µ£‚Üí‚ààinterval‚Ñô : ‚àÄ a b ‚Üí (a ‚â§·µ£ b) ‚Üí ‚àÄ x ‚Üí
  x ‚â° clamp·µ£ a b x ‚Üí x ‚àà interval‚Ñô a b
‚â°clamp·µ£‚Üí‚ààinterval‚Ñô a b a‚â§b x p =
        subst-‚àà (interval‚Ñô a b ) (sym p) (clamp·µ£‚àà‚Ñöinterval‚Ñô a b a‚â§b x)


‚àà‚Ñöinterval‚Ñô‚Üí‚ààinterval‚Ñô : ‚àÄ a b x ‚Üí x ‚àà ‚Ñöinterval‚Ñô a b
                                 ‚Üí rat x ‚àà interval‚Ñô (rat a) (rat b)
‚àà‚Ñöinterval‚Ñô‚Üí‚ààinterval‚Ñô a b x (a‚â§x , x‚â§b) = ‚â§‚Ñö‚Üí‚â§·µ£ _ _ a‚â§x , ‚â§‚Ñö‚Üí‚â§·µ£ _ _ x‚â§b

‚ààinterval‚Ñô‚Üí‚àà‚Ñöinterval‚Ñô : ‚àÄ a b x ‚Üí rat x ‚àà interval‚Ñô (rat a) (rat b)
                                 ‚Üí x ‚àà ‚Ñöinterval‚Ñô a b
‚ààinterval‚Ñô‚Üí‚àà‚Ñöinterval‚Ñô a b x (a‚â§x , x‚â§b) = ‚â§·µ£‚Üí‚â§‚Ñö _ _ a‚â§x , ‚â§·µ£‚Üí‚â§‚Ñö _ _ x‚â§b

x‚â§‚Üíclamp·µ£‚â° : ‚àÄ a b x ‚Üí a ‚â§·µ£ b  ‚Üí x ‚â§·µ£ a ‚Üí  clamp·µ£ a b x ‚â° a
x‚â§‚Üíclamp·µ£‚â° a b x a‚â§b x‚â§a = (‚â§‚Üímin·µ£ _ _
 (isTrans‚â°‚â§·µ£ _ _ _ ((max·µ£Comm _ _) ‚àô (‚â§‚Üímax·µ£ _ _ x‚â§a)) a‚â§b) ‚àô max·µ£Comm _ _)
 ‚àô ‚â§‚Üímax·µ£ _ _ x‚â§a

‚â§x‚Üíclamp·µ£‚â° : ‚àÄ a b x ‚Üí a ‚â§·µ£ b ‚Üí b ‚â§·µ£ x ‚Üí  clamp·µ£ a b x ‚â° b
‚â§x‚Üíclamp·µ£‚â° a b x a‚â§b b‚â§x =
  cong (flip min·µ£ b)
    (‚â§‚Üímax·µ£ _ _ (isTrans‚â§·µ£ _ _ _ a‚â§b b‚â§x))
   ‚àô min·µ£Comm _ _ ‚àô ‚â§‚Üímin·µ£ _ _ b‚â§x


min-monotone-‚â§·µ£ : ‚àÄ a ‚Üí ‚àÄ x y  ‚Üí x ‚â§·µ£ y ‚Üí
                       min·µ£ x a ‚â§·µ£ min·µ£ y a
min-monotone-‚â§·µ£ a x y x‚â§y =
 ‚â§min-lem _ _ _ (isTrans‚â§·µ£ _ _ _ (min‚â§·µ£ _ _) x‚â§y)
  (isTrans‚â°‚â§·µ£ _ _ _ (min·µ£Comm _ _) (min‚â§·µ£ _ _) )

max-monotone-‚â§·µ£ : ‚àÄ a ‚Üí ‚àÄ x y  ‚Üí x ‚â§·µ£ y ‚Üí
                       max·µ£ a x ‚â§·µ£ max·µ£ a y
max-monotone-‚â§·µ£ a x y x‚â§y =
 max‚â§-lem _ _ _
   (‚â§max·µ£ _ _)
   (isTrans‚â§·µ£ _ _ _ x‚â§y
    (isTrans‚â§‚â°·µ£ _ _ _
      (‚â§max·µ£ _ _)
      (max·µ£Comm _ _)))

clamp-monotone-‚â§·µ£ : ‚àÄ a b x y  ‚Üí x ‚â§·µ£ y ‚Üí
                       clamp·µ£ a b x ‚â§·µ£ clamp·µ£ a b y
clamp-monotone-‚â§·µ£ a b x y x‚â§y =
  min-monotone-‚â§·µ£ b _ _ (max-monotone-‚â§·µ£ a _ _ x‚â§y)

opaque
 unfolding _+·µ£_
 clampDist·µ£' : ‚àÄ L L' x y ‚Üí
     abs·µ£ (clamp·µ£ (rat L) (rat L') y -·µ£ clamp·µ£ (rat L) (rat L') x) ‚â§·µ£ abs·µ£ (y -·µ£ x)
 clampDist·µ£' L L' = ‚â§Cont‚ÇÇ
           (cont‚àò‚ÇÇ IsContinuousAbs·µ£
             (contNE‚ÇÇ‚àò sumR ((Œª _ ‚Üí IsContinuousClamp (rat L) (rat L')) , Œª _ ‚Üí IsContinuousConst _)
               ((Œª _ ‚Üí IsContinuousConst _) , Œª _ ‚Üí IsContinuous‚àò _ _ IsContinuous-·µ£ (IsContinuousClamp (rat L) (rat L')))))
           (cont‚àò‚ÇÇ IsContinuousAbs·µ£
              (contNE‚ÇÇ‚àò sumR ((Œª _ ‚Üí IsContinuousId) , Œª _ ‚Üí IsContinuousConst _)
               ((Œª _ ‚Üí IsContinuousConst _) , Œª _ ‚Üí IsContinuous-·µ£ )))
           Œª u u' ‚Üí
              subst2 _‚â§·µ£_ (sym (abs·µ£-rat _) ‚àô cong abs·µ£ (sym (-·µ£-rat‚ÇÇ _ _)))
                ( sym (abs·µ£-rat _) ‚àô cong abs·µ£ (sym (-·µ£-rat‚ÇÇ _ _)))
                (‚â§‚Ñö‚Üí‚â§·µ£ _ _ (‚Ñö.clampDist L L' u u'))
