{-# OPTIONS --safe #-}

module Cubical.HITs.CauchyReals.IntegrationMore where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Equiv.Properties
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Function
open import Cubical.Foundations.Transport
open import Cubical.Foundations.Powerset
open import Cubical.Functions.FunExtEquiv

open import Cubical.Data.Bool as ùüö hiding (_‚â§_)
open import Cubical.Data.Nat as ‚Ñï hiding (_¬∑_;_+_)
import Cubical.Data.Nat.Mod as ‚Ñï
import Cubical.Data.Nat.Order as ‚Ñï
open import Cubical.Data.Empty as ‚ä•
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Int as ‚Ñ§ using (pos)
import Cubical.Data.Int.Order as ‚Ñ§
open import Cubical.Data.Sigma
open import Cubical.Data.Fin

open import Cubical.HITs.PropositionalTruncation as PT

open import Cubical.Data.NatPlusOne

open import Cubical.Data.Rationals as ‚Ñö using (‚Ñö ; [_/_])
open import Cubical.Data.Rationals.Order as ‚Ñö using
  ( _‚Ñö‚Çä+_ ; 0<_ ; ‚Ñö‚Çä ; _‚Ñö‚Çä¬∑_ ; ‚Ñö‚Çä‚â°)
open import Cubical.Data.Rationals.Order.Properties as ‚Ñö
 using (inv‚Ñö‚Çä;/2‚Çä;/3‚Çä;/4‚Çä;x/2<x;inv‚Ñö;_‚Ñö^‚Åø_;_‚Ñö‚Çä^‚Åø_)


open import Cubical.HITs.CauchyReals.Base
open import Cubical.HITs.CauchyReals.Lems
open import Cubical.HITs.CauchyReals.Closeness
open import Cubical.HITs.CauchyReals.Lipschitz
open import Cubical.HITs.CauchyReals.Order
open import Cubical.HITs.CauchyReals.Continuous
open import Cubical.HITs.CauchyReals.Multiplication
open import Cubical.HITs.CauchyReals.Inverse
open import Cubical.HITs.CauchyReals.Sequence
open import Cubical.HITs.CauchyReals.Derivative
open import Cubical.HITs.CauchyReals.Integration
open import Cubical.HITs.CauchyReals.Exponentiation
open import Cubical.HITs.CauchyReals.ExponentiationDer
open import Cubical.HITs.CauchyReals.MeanValue


Integral'-abs‚â§ : ‚àÄ a b ‚Üí a ‚â§·µ£ b ‚Üí ‚àÄ f s s'
            ‚Üí on[ a , b ]IntegralOf f is' s
            ‚Üí on[ a , b ]IntegralOf (abs·µ£ ‚àò f) is' s'
            ‚Üí abs·µ£ s ‚â§·µ£ s'
Integral'-abs‚â§ a b a‚â§b f s s' ‚à´f ‚à´‚à£f‚à£ =
 x<y+Œ¥‚Üíx‚â§y _ _ Œª Œµ ‚Üí
  PT.rec3 (isProp<·µ£ _ _) (w Œµ)
   (‚à´f (/2‚Çä (/2‚Çä Œµ))) ( ‚à´‚à£f‚à£ (/2‚Çä (/2‚Çä Œµ)))
   (‚àÉRefinableTaggedPartition rtp-1/n a b a‚â§b)
 where
 w : (Œµ : ‚Ñö‚Çä) ‚Üí Œ£ ‚Ñö‚Çä _ ‚Üí Œ£ ‚Ñö‚Çä _ ‚Üí _ ‚Üí
      abs·µ£ s <·µ£ s' +·µ£ rat (fst Œµ)
 w Œµ (Œ¥ , X) (Œ¥' , X') rtp =
   let tp-ab , mesh-ab = tpTP Œ¥‚äìŒ¥'
       Y = ((isTrans‚â°<·µ£ _ _ _
             (minusComm-abs·µ£ _ _)
             (X tp-ab Œª k ‚Üí
            isTrans‚â§·µ£ _ _ _
              (mesh-ab k)
              (‚â§‚Ñö‚Üí‚â§·µ£ (fst Œ¥‚äìŒ¥')  (fst Œ¥) (‚Ñö.min‚â§ (fst Œ¥) (fst Œ¥'))))))

       Y' = (isTrans<‚â°·µ£ _ _ _
            (a-b<c‚áía<c+b _ _ _
            (isTrans‚â§<·µ£ _ _ _
            (‚â§abs·µ£ _)
           (X' tp-ab Œª k ‚Üí
            isTrans‚â§·µ£ _ _ _
              (mesh-ab k)
              (‚â§‚Ñö‚Üí‚â§·µ£ (fst Œ¥‚äìŒ¥')  (fst Œ¥') (‚Ñö.min‚â§' (fst Œ¥) (fst Œ¥'))))))
              (+·µ£Comm _ _))


       Z = riemannSum'-abs·µ£‚â§ (snd tp-ab) f
       ZZ = isTrans‚â§<·µ£ _ _ _(isTrans‚â§·µ£ _ _ _
             (a-b‚â§c‚áía‚â§c+b _ _ _
               (isTrans‚â§·µ£ _ _ _
                 (abs·µ£-triangle-minus _ _)
                 (<·µ£Weaken‚â§·µ£ _ _ Y)))
             (‚â§·µ£-o+ _ _ (rat (fst (/2‚Çä (/2‚Çä Œµ))))
              (isTrans‚â§·µ£ _ _ _ Z
                (<·µ£Weaken‚â§·µ£ _ _ Y'))))
             (isTrans‚â°<·µ£ _ _ _
               (+·µ£Comm _ _ ‚àô sym (+·µ£Assoc _ _ _)
                ‚àô cong (s' +·µ£_) (+·µ£-rat _ _ ‚àô cong rat (‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst (/2‚Çä Œµ)))))
                (<·µ£-o+ _ _ s' (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.x/2<x Œµ))))
   in ZZ
  where
  Œ¥‚äìŒ¥' = ‚Ñö.min‚Çä Œ¥ Œ¥'
  open RefinableTaggedPartition[_,_] rtp


Integral'-‚â§ : ‚àÄ a b ‚Üí a ‚â§·µ£ b ‚Üí ‚àÄ f f' s s'
            ‚Üí (‚àÄ x ‚Üí x ‚àà interval‚Ñô a b ‚Üí f x ‚â§·µ£ f' x)
            ‚Üí on[ a , b ]IntegralOf f is' s
            ‚Üí on[ a , b ]IntegralOf f' is' s'
            ‚Üí s ‚â§·µ£ s'
Integral'-‚â§ a b a‚â§b f f' s s' f‚â§f' ‚à´f ‚à´f' =
 x<y+Œ¥‚Üíx‚â§y _ _ Œª Œµ ‚Üí
  PT.rec3 (isProp<·µ£ _ _) (w Œµ)
   (‚à´f (/2‚Çä (/2‚Çä Œµ))) (‚à´f' (/2‚Çä (/2‚Çä Œµ)))
   (‚àÉRefinableTaggedPartition rtp-1/n a b a‚â§b)
 where
 w : (Œµ : ‚Ñö‚Çä) ‚Üí Œ£ ‚Ñö‚Çä _ ‚Üí Œ£ ‚Ñö‚Çä _ ‚Üí _ ‚Üí
      s <·µ£ s' +·µ£ rat (fst Œµ)
 w Œµ (Œ¥ , X) (Œ¥' , X') rtp =
   let tp-ab , mesh-ab = tpTP Œ¥‚äìŒ¥'
       Y = a-b<c‚áía<c+b _ _ _
           (isTrans‚â§<·µ£ _ _ _ (‚â§abs·µ£ _)
            (isTrans‚â°<·µ£ _ _ _
             (minusComm-abs·µ£ _ _)
             (X tp-ab Œª k ‚Üí
            isTrans‚â§·µ£ _ _ _
              (mesh-ab k)
              (‚â§‚Ñö‚Üí‚â§·µ£ (fst Œ¥‚äìŒ¥')  (fst Œ¥) (‚Ñö.min‚â§ (fst Œ¥) (fst Œ¥'))))))

       Y' = (isTrans<‚â°·µ£ _ _ _
            (a-b<c‚áía<c+b _ _ _
            (isTrans‚â§<·µ£ _ _ _
            (‚â§abs·µ£ _)
           (X' tp-ab Œª k ‚Üí
            isTrans‚â§·µ£ _ _ _
              (mesh-ab k)
              (‚â§‚Ñö‚Üí‚â§·µ£ (fst Œ¥‚äìŒ¥')  (fst Œ¥') (‚Ñö.min‚â§' (fst Œ¥) (fst Œ¥'))))))
              (+·µ£Comm _ _))


       Z = riemannSum'‚â§ (snd tp-ab) f f' (curry ‚àò f‚â§f')
   in isTrans<·µ£ _ _ _(isTrans<‚â§·µ£ _ _ _
        Y
        (‚â§·µ£-o+ _ _ (rat (fst (/2‚Çä (/2‚Çä Œµ))))
         (isTrans‚â§·µ£ _ _ _ Z
           (<·µ£Weaken‚â§·µ£ _ _ Y'))))
        (isTrans‚â°<·µ£ _ _ _
          (+·µ£Comm _ _ ‚àô sym (+·µ£Assoc _ _ _)
           ‚àô cong (s' +·µ£_) (+·µ£-rat _ _ ‚àô cong rat (‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst (/2‚Çä Œµ)))))
           (<·µ£-o+ _ _ s' (<‚Ñö‚Üí<·µ£ _ _ (‚Ñö.x/2<x Œµ))))
  where
  Œ¥‚äìŒ¥' = ‚Ñö.min‚Çä Œ¥ Œ¥'
  open RefinableTaggedPartition[_,_] rtp

Integral'-C¬∑ : ‚àÄ a b ‚Üí a ‚â§·µ£ b ‚Üí ‚àÄ C f s  ‚Üí
  on[ a , b ]IntegralOf f is' s ‚Üí
  on[ a , b ]IntegralOf (Œª x ‚Üí C ¬∑·µ£ f x) is' (C ¬∑·µ£ s)
Integral'-C¬∑ a b a‚â§b C f s ‚à´f Œµ =
  PT.rec squash‚ÇÅ
    (Œª (C' , (abs·µ£C<C' , _)) ‚Üí
      let C'‚Çä = (C' , ‚Ñö.<‚Üí0< C'
               (<·µ£‚Üí<‚Ñö 0 C' (isTrans‚â§<·µ£ 0 (abs·µ£ C) _ (0‚â§abs·µ£ _) abs·µ£C<C')))
          Œµ' = Œµ ‚Ñö‚Çä¬∑ inv‚Ñö‚Çä C'‚Çä
      in PT.map
           (map-snd (Œª {Œ¥} X tp mesh‚â§ ‚Üí
            isTrans‚â§<·µ£ _ _ _
              (isTrans‚â°‚â§·µ£ _ _ _
               (cong abs·µ£ (cong (_-·µ£ C ¬∑·µ£ s)
                 (riemannSum'C¬∑ (snd tp) C f)
                ‚àô sym (ùêë'.¬∑DistR- _ _ _))
                ‚àô ¬∑abs·µ£ _ _)
               (‚â§·µ£-¬∑·µ£o _ _ _
                 (0‚â§abs·µ£ _)
                 (<·µ£Weaken‚â§·µ£ _ _ abs·µ£C<C')))
              -- X tp mesh‚â§
              (fst (z<x/y‚Çä‚âÉy‚Çä¬∑z<x _ _ (‚Ñö‚Çä‚Üí‚Ñù‚Çä C'‚Çä))
                (isTrans<‚â°·µ£ _ _ _
                  (X tp mesh‚â§)
                  (rat¬∑·µ£rat (fst Œµ) _ ‚àô
                   cong (rat (fst Œµ) ¬∑·µ£_)
                    (sym (inv‚Ñù‚Çä-rat C'‚Çä)))))))
           (‚à´f Œµ'))
    (dense‚Ñöin‚Ñù (abs·µ£ C) ((abs·µ£ C) +·µ£ 1)
       (isTrans‚â°<·µ£ _ _ _
         (sym (+IdR _)) (<·µ£-o+ 0 1 (abs·µ£ C) dec‚Ñö<·µ£?)))

Integral'-+ : ‚àÄ a b ‚Üí a ‚â§·µ£ b ‚Üí ‚àÄ f g s s' ‚Üí
  on[ a , b ]IntegralOf f is' s ‚Üí
  on[ a , b ]IntegralOf g is' s' ‚Üí
  on[ a , b ]IntegralOf (Œª x ‚Üí f x +·µ£ g x ) is' (s +·µ£ s')

Integral'-+ a b x f g s s' ‚à´f ‚à´g  Œµ =
 PT.map2
  (Œª (Œ¥ , X) (Œ¥' , X') ‚Üí
    let Œ¥‚äìŒ¥' = ‚Ñö.min‚Çä Œ¥ Œ¥'
    in  Œ¥‚äìŒ¥' , Œª tp mesh‚â§  ‚Üí
      isTrans‚â§<·µ£ _ _ _
        (isTrans‚â°‚â§·µ£ _ _ _
          (cong abs·µ£ (
            cong (_-·µ£ (s +·µ£ s')) (sym (riemannSum'+ (snd tp) f g))
            ‚àô Lùêë.lem--041))
          (abs·µ£-triangle _ _))
        (isTrans<‚â°·µ£ _ _ _
            (<·µ£Monotone+·µ£ _ _ _ _
              (X tp (Œª k ‚Üí isTrans‚â§·µ£ _ _ _ (mesh‚â§ k) (min‚â§·µ£ _ (rat (fst Œ¥')))))
              (X' tp (Œª k ‚Üí isTrans‚â§·µ£ _ _ _ (mesh‚â§ k)
               (min‚â§·µ£' (rat (fst Œ¥)) _))))
            (+·µ£-rat (fst (/2‚Çä Œµ)) _ ‚àô cong rat (‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst Œµ)))))
   (‚à´f (/2‚Çä Œµ)) (‚à´g (/2‚Çä Œµ))




IsUContinuousConst : ‚àÄ C ‚Üí IsUContinuous (Œª _ ‚Üí C)
IsUContinuousConst C Œµ = 1 , Œª _ _ _ ‚Üí refl‚àº _ _

opaque
 unfolding abs·µ£
 IsUContinuousAbs·µ£ : IsUContinuous abs·µ£
 IsUContinuousAbs·µ£ = Lipschitiz‚ÜíIsUContinuous 1 abs·µ£ (snd (abs·µ£L))

IsUContinuous+·µ£‚ÇÇ : ‚àÄ f g ‚Üí IsUContinuous f ‚Üí IsUContinuous g ‚Üí
   IsUContinuous Œª x ‚Üí f x +·µ£ g x
IsUContinuous+·µ£‚ÇÇ f g fC gC Œµ =
  let (Œ¥  , X) = fC (/2‚Çä Œµ)
      (Œ¥' , X') = gC (/2‚Çä Œµ)
      Œ¥‚äîŒ¥' = ‚Ñö.min‚Çä Œ¥ Œ¥'
  in Œ¥‚äîŒ¥' ,
   Œª u v u‚àºv ‚Üí
     invEq (‚àº‚âÉabs<Œµ _ _ _)
      (isTrans<‚â°·µ£ _ _ _
        (isTrans‚â§<·µ£ _ _ _
          (isTrans‚â°‚â§·µ£ _ _ _
            (cong abs·µ£ Lùêë.lem--041)
            (abs·µ£-triangle _ _))
          (<·µ£Monotone+·µ£ _ _ _ _
             (fst (‚àº‚âÉabs<Œµ _ _ _) (X u v (‚àº-monotone‚â§ (‚Ñö.min‚â§ (fst Œ¥) (fst Œ¥')) u‚àºv)))
             (fst (‚àº‚âÉabs<Œµ _ _ _) (X' u v (‚àº-monotone‚â§ (‚Ñö.min‚â§' (fst Œ¥) (fst Œ¥')) u‚àºv) ))))
        (+·µ£-rat _ _ ‚àô cong rat (‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst Œµ))) )

IsUContinuousC¬∑·µ£ : ‚àÄ f ‚Üí IsUContinuous f ‚Üí (C : ‚Ñö) ‚Üí
   IsUContinuous Œª x ‚Üí rat C ¬∑·µ£ f x
IsUContinuousC¬∑·µ£ f icf C =
  ‚äé.rec
    (Œª p ‚Üí
      subst IsUContinuous
        (funExt (Œª x ‚Üí sym (ùêë'.0LeftAnnihilates' _ _ (cong rat (sym p)))))
        (IsUContinuousConst 0))
   (Œª 0ÔºÉC Œµ ‚Üí
      let Z = 0ÔºÉ‚Üí0<abs (rat C) (invEq (ratÔºÉ 0 C) 0ÔºÉC)
          ‚à£C‚à£ = ‚Ñö.abs C , ‚Ñö.<‚Üí0< (‚Ñö.abs C) (<·µ£‚Üí<‚Ñö 0 (‚Ñö.abs C)
                 (isTrans<‚â°·µ£ _ _ _ Z (abs·µ£-rat C)))
          Œ¥ , X = icf (inv‚Ñö‚Çä ‚à£C‚à£ ‚Ñö‚Çä¬∑ Œµ)
      in Œ¥ , Œª u v u‚àºv ‚Üí
         let w = fst (‚àº‚âÉabs<Œµ _ _ _) (X u v u‚àºv)
         in invEq (‚àº‚âÉabs<Œµ _ _ _)
               (isTrans‚â°<·µ£ _ _ _
                 (cong abs·µ£ (sym (ùêë'.¬∑DistR- (rat C) _ _))
                   ‚àô ¬∑abs·µ£ _ _ ‚àô cong‚ÇÇ _¬∑·µ£_ (abs·µ£-rat C) refl )
                 (fst (z<x/y‚Çä‚âÉy‚Çä¬∑z<x _ _ (‚Ñö‚Çä‚Üí‚Ñù‚Çä ‚à£C‚à£))
                  (isTrans<‚â°·µ£ _ _ _ w
                   (rat¬∑·µ£rat (fst (inv‚Ñö‚Çä ‚à£C‚à£)) _ ‚àô ¬∑·µ£Comm _ _ ‚àô
                    cong (rat (fst Œµ) ¬∑·µ£_)
                    (sym (inv‚Ñù‚Çä-rat _) ))))))
    (‚Ñö.‚â°‚äé# 0 C)

IsUContinuous-·µ£‚ÇÇ : ‚àÄ f g ‚Üí IsUContinuous f ‚Üí IsUContinuous g ‚Üí
   IsUContinuous Œª x ‚Üí f x -·µ£ g x
IsUContinuous-·µ£‚ÇÇ f g fC gC =
  subst IsUContinuous
    (funExt Œª x ‚Üí cong (f x +·µ£_) (sym (-·µ£‚â°[-1¬∑·µ£] (g x))))
    (IsUContinuous+·µ£‚ÇÇ _ _ fC (IsUContinuousC¬∑·µ£ g gC -1))


lim-const : ‚àÄ x y ‚Üí lim (const x) y ‚â° x
lim-const = Elim‚Ñù-Prop.go w
 where
 w : Elim‚Ñù-Prop _
 w .Elim‚Ñù-Prop.ratA x _ =
   eq‚Ñù _ _ Œª Œµ ‚Üí
     lim-rat _ _ _ (/2‚Çä Œµ) _ _ (refl‚àº _ (‚Ñö.<‚Üí‚Ñö‚Çä (fst (/2‚Çä Œµ)) (fst Œµ) (‚Ñö.x/2<x Œµ)) )
 w .Elim‚Ñù-Prop.limA x p x‚ÇÅ y =
   eq‚Ñù _ _ Œª Œµ ‚Üí
     lim-lim _ _ _ (/2‚Çä (/2‚Çä Œµ)) (/2‚Çä (/2‚Çä Œµ)) _ _
       (subst 0<_
          (cong (‚Ñö._-_ (fst Œµ)) (sym (‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst (/2‚Çä Œµ)))))
          (snd (‚Ñö.<‚Üí‚Ñö‚Çä (fst (/2‚Çä Œµ)) (fst Œµ) (‚Ñö.x/2<x Œµ))))
       (sym‚àº _ _ _
        (ùï£-lim' _ _ _ (/2‚Çä (/2‚Çä Œµ)) _
        (snd ((‚Ñö.<‚Üí‚Ñö‚Çä (fst (/2‚Çä (/2‚Çä Œµ))) (fst Œµ ‚Ñö.- (fst (/2‚Çä (/2‚Çä Œµ)) ‚Ñö.+ fst (/2‚Çä (/2‚Çä Œµ))))
         ((subst {x = fst (/2‚Çä Œµ)} (fst (/2‚Çä (/2‚Çä Œµ)) ‚Ñö.<_)
           (sym (ùêê'.plusMinus _ _) ‚àô cong‚ÇÇ (‚Ñö._-_) (‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst Œµ)) (sym (‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst (/2‚Çä Œµ)))) )
            (‚Ñö.x/2<x (/2‚Çä Œµ)))))))
         (refl‚àº _ _)))
 w .Elim‚Ñù-Prop.isPropA _ = isPropŒ† Œª _ ‚Üí isSet‚Ñù _ _

‚äé-map-comm-ids : {A B A' B' : Type} (f : A ‚Üí A') (g : B ‚Üí B') ‚Üí
    ‚àÄ x ‚Üí ‚äé.map f (idfun _) (‚äé.map (idfun _) g x) ‚â°
            ‚äé.map (idfun _) g (‚äé.map f (idfun _) x)
‚äé-map-comm-ids f g (inl x) = refl
‚äé-map-comm-ids f g (inr x) = refl

concatTaggedPartition : ‚àÄ a b c ‚Üí a ‚â§·µ£ b ‚Üí b ‚â§·µ£ c
                ‚Üí (tp-ab : TaggedPartition[ a , b ])
                ‚Üí (tp-bc : TaggedPartition[ b , c ])
                ‚Üí Œ£[ tp-ac ‚àà TaggedPartition[ a , c ] ]
                  ((‚àÄ f ‚Üí riemannSum' (snd tp-ab) f +·µ£ riemannSum' (snd tp-bc) f ‚â°
                          riemannSum' (snd tp-ac) f)
                  √ó (‚àÄ Œ¥ ‚Üí mesh‚â§·µ£ (fst tp-ab) Œ¥ ‚Üí mesh‚â§·µ£ (fst tp-bc) Œ¥ ‚Üí mesh‚â§·µ£ (fst tp-ac) Œ¥ ))
concatTaggedPartition a b c a‚â§b b‚â§c (p-ab , s-ab) (p-bc , s-bc) =

  (w , w') , w'' , w'''

 where


 module ctp-hlp‚ÇÄ (n : ‚Ñï) where

  F‚Üí‚äé' = ‚äé.map (idfun _) (Fin+‚Üí‚äé 1 (suc (p-bc .len)))
  F‚Üí‚äé'' = Fin+‚Üí‚äé (suc n) (suc (suc (p-bc .len)))
  F‚Üí‚äé = F‚Üí‚äé' ‚àò F‚Üí‚äé''

  F‚Üí‚äé* = (compIso (Iso-Fin+‚äé _ _) (‚äé.‚äéIso' idIso (Iso-Fin+‚äé _ _)))

 F‚Üí‚äé‚â°iso : ‚àÄ n x ‚Üí ctp-hlp‚ÇÄ.F‚Üí‚äé n x
          ‚â° Iso.fun (ctp-hlp‚ÇÄ.F‚Üí‚äé* n) x
 F‚Üí‚äé‚â°iso zero (zero , l , p) = refl
 F‚Üí‚äé‚â°iso zero (suc k , l , p) = refl
 F‚Üí‚äé‚â°iso (suc n) (zero , l , p) = refl
 F‚Üí‚äé‚â°iso (suc n) (suc k , l , p) =
   let z = F‚Üí‚äé‚â°iso n (k , l , injSuc (sym (+-suc _ _) ‚àô p))
   in sym (‚äé-map-comm-ids _  _ _) ‚àô cong (‚äé.map fsuc (idfun _)) z
       ‚àô ‚äé-map-comm-ids _  _ _


 module ctp-hlp (n : ‚Ñï)
                (u : Fin (suc n) ‚Üí Œ£[ p ‚àà ‚Ñù ] (a ‚â§·µ£ p) √ó (p ‚â§·µ£ b))
                (u‚â§u : ‚àÄ (k : Fin n) ‚Üí fst (u (finj k)) ‚â§·µ£ fst (u (fsuc k)))
                  where
  open ctp-hlp‚ÇÄ n public
  pts‚äé : Fin (suc n) ‚äé (Fin 1 ‚äé Fin (suc (len p-bc))) ‚Üí
    Œ£[ p ‚àà ‚Ñù ] (a ‚â§·µ£ p) √ó (p ‚â§·µ£ c)
  pts‚äé = ‚äé.rec (map-snd (map-snd
    (flip (isTrans‚â§·µ£ _ _ _) b‚â§c)) ‚àò u)
    (‚äé.rec (Œª _ ‚Üí b , a‚â§b , b‚â§c)
     Œª x ‚Üí p-bc .pts x ,
       isTrans‚â§·µ£ _ _ _ a‚â§b (p-bc .a‚â§pts x) , p-bc .pts‚â§b x)




  -- isEquivF‚Üí‚äé : isEquiv F‚Üí‚äé
  -- isEquivF‚Üí‚äé = isoToIsEquiv
  --   (iso _ (‚äé.rec injectFin+' (injectFin+ {n = suc n} ‚àò ‚äé.rec (Œª _ ‚Üí fzero) fsuc))
  --     (‚äé.elim (Œª a ‚Üí {!!}) (‚äé.elim {!!} {!!}))
  --     {!!})

  pts* = pts‚äé ‚àò F‚Üí‚äé

  -- module ctp-hlp' (sa : Fin (suc (suc n)) ‚Üí  ‚Ñù) where
  --  sa‚äé : Fin (suc (suc n)) ‚äé Fin (suc (suc (len p-bc))) ‚Üí ‚Ñù
  --  sa‚äé = ‚äé
   -- (inl x) = sa x
   -- sa‚äé (inr x) = samples s-bc x


 -- F‚Üí‚äé-inl-N : ‚àÄ n u u‚â§u l p ‚Üí ctp-hlp.F‚Üí‚äé n u u‚â§u ({!!}) ‚â° inr (inl fzero)
 -- F‚Üí‚äé-inl-N n u u‚â§u l p = {!!}



 pts‚äé-suc' : ‚àÄ n u u‚â§u v ‚Üí fst (ctp-hlp.pts‚äé n (Œª z ‚Üí u (fsuc z))
         (subst2 (Œª k‚ÇÅ k' ‚Üí fst (u k‚ÇÅ) ‚â§·µ£ fst (u k')) (to‚Ñï-injective refl)
          (to‚Ñï-injective refl)
          ‚àò u‚â§u ‚àò fsuc) v)
      ‚â° fst (ctp-hlp.pts‚äé (suc n) u u‚â§u (‚äé.map fsuc (idfun (Fin 1 ‚äé Fin (suc (len p-bc)))) v))
 pts‚äé-suc' n u u‚â§u (inl x) = refl
 pts‚äé-suc' n u u‚â§u (inr (inl x)) = refl
 pts‚äé-suc' n u u‚â§u (inr (inr x)) = refl

 pts‚äé-suc : ‚àÄ n k u u‚â§u ‚Üí
    fst ((ctp-hlp.pts* n
       (u ‚àò fsuc)
       (subst2 (Œª k k' ‚Üí
      fst (u k) ‚â§·µ£ fst (u k'))
      (to‚Ñï-injective refl)
      (to‚Ñï-injective refl)
      ‚àò u‚â§u ‚àò fsuc)
      k)) ‚â° fst ((ctp-hlp.pts* (suc n) u u‚â§u (fsuc k)))

 pts‚äé-suc n k*@(k , l , p) u u‚â§u =
   pts‚äé-suc' n u u‚â§u (P.F‚Üí‚äé k*) ‚àô
     cong (fst ‚àò P'.pts‚äé)
      (‚äé-map-comm-ids _ _ _ ‚àô
        congS (Œª p ‚Üí ‚äé.map (Œª x ‚Üí x) (Fin+‚Üí‚äé 1 (suc (len p-bc)))
      (‚äé.map fsuc (Œª x ‚Üí x)
       (Fin+‚Üí‚äé (suc n) (suc (suc (len p-bc))) (k , l , p))))
       (isSet‚Ñï _ _ _ _))

  where

  module P = ctp-hlp n (Œª z ‚Üí u (fsuc z))
         (subst2 (Œª k‚ÇÅ k' ‚Üí fst (u k‚ÇÅ) ‚â§·µ£ fst (u k')) (to‚Ñï-injective refl)
          (to‚Ñï-injective refl)
          ‚àò u‚â§u ‚àò fsuc)

  module P' = ctp-hlp (suc n) u u‚â§u



 pts‚äé‚â§pts‚äé : ‚àÄ n u u‚â§u k ‚Üí fst (ctp-hlp.pts* n u u‚â§u (finj k))
     ‚â§·µ£ fst (ctp-hlp.pts* n u u‚â§u (fsuc k))
 pts‚äé‚â§pts‚äé zero u _ (zero , k) = snd (snd (u fzero))
 pts‚äé‚â§pts‚äé zero u _ (suc zero , fst‚ÇÇ , snd‚ÇÅ) = a‚â§pts p-bc _
 pts‚äé‚â§pts‚äé zero u _ k*@(suc (suc k) , l , p) =
  let k# : Fin (len p-bc)
      k# = (k , l
        ,  cong pred‚Ñï (sym (‚Ñï.+-suc l  (suc k))
           ‚àô cong pred‚Ñï ((sym (‚Ñï.+-suc l (suc (suc k)))) ‚àô p)))
  in subst2 (Œª k k' ‚Üí
      pts p-bc k ‚â§·µ£ pts p-bc k')
       (to‚Ñï-injective refl)
       (to‚Ñï-injective refl)
       (pts‚â§pts p-bc k#)
 pts‚äé‚â§pts‚äé (suc n) u u‚â§u (zero , l , p) =
   subst2 (Œª k k' ‚Üí
      fst (u k) ‚â§·µ£ fst (u k'))
      (to‚Ñï-injective refl)
      (to‚Ñï-injective refl)
       (u‚â§u fzero)
 pts‚äé‚â§pts‚äé (suc n) u u‚â§u (suc k , l , p) =
   subst2 _‚â§·µ£_
     (pts‚äé-suc n (finj k*) u u‚â§u
       ‚àô cong (fst ‚àò ctp-hlp.pts* (suc n) u u‚â§u)
          (to‚Ñï-injective {fj = fsuc (finj k*)} {finj (suc k , l , p)} refl))
       (pts‚äé-suc n (fsuc k*) u u‚â§u
       ‚àô cong (fst ‚àò ctp-hlp.pts* (suc n) u u‚â§u)
          (to‚Ñï-injective {fj = (fsuc (fsuc k*))} {(fsuc (suc k , l , p))} refl))
      w
  where
  k* : Fin ((n ‚Ñï.+ (suc (suc (len p-bc)))))
  k* = k , l , cong pred‚Ñï (sym (‚Ñï.+-suc l (suc k)) ‚àô p)

  w = pts‚äé‚â§pts‚äé n (u ‚àò fsuc)
    (subst2 (Œª k k' ‚Üí
      fst (u k) ‚â§·µ£ fst (u k'))
      (to‚Ñï-injective refl)
      (to‚Ñï-injective refl)
      ‚àò u‚â§u ‚àò fsuc) k*

 open ctp-hlp (p-ab .len) (Œª k ‚Üí p-ab .pts k , p-ab .a‚â§pts k , p-ab .pts‚â§b k)
       (pts‚â§pts p-ab)


 -- open ctp-hlp' (samples s-ab)

 w : Partition[ a , c ]
 w .len = (p-ab .len ‚Ñï.+ suc (suc (p-bc .len)))
 w .pts = fst ‚àò pts*
 w .a‚â§pts = fst ‚àò snd ‚àò pts*
 w .pts‚â§b = snd ‚àò snd ‚àò pts*
 w .pts‚â§pts = pts‚äé‚â§pts‚äé _ _ (p-ab .pts‚â§pts)


 pts'-inl* : ‚àÄ x ‚Üí pts p-ab x ‚â° pts w (injectFin+' x)
 pts'-inl* x = cong
   (fst ‚àò pts‚äé ‚àò F‚Üí‚äé')
   (Fin+‚Üí‚äé‚àòinjectFin+' _ _ x)


 pts'-inl : ‚àÄ (x : Fin (3 ‚Ñï.+ len p-ab)) ‚Üí pts' p-ab x ‚â° pts' w (injectFin+' x)
 pts'-inl (zero , zero , p) = ‚ä•.rec (‚Ñï.znots (cong pred‚Ñï p))
 pts'-inl (zero , suc l , p) = refl
 pts'-inl x@(suc k , zero , p) =
  cong {x = inr fzero}
        {y = F‚Üí‚äé'' pK}
        (fst ‚àò pts‚äé ‚àò F‚Üí‚äé')
          (injectFin+'-flast-S _ _ _ (snd (snd pK)))

  where

  pK = (k , suc (len p-bc) , _)

 pts'-inl (suc k , l@(suc _) , p) =
  let k' = injectFin+' (suc k , l , p)
    in (pts'-inl* _ ‚àô
     cong (Œª ll ‚Üí fst
      (pts‚äé
       (‚äé.map (Œª x ‚Üí x) (Fin+‚Üí‚äé 1 (suc (len p-bc)))
        (Fin+‚Üí‚äé (suc (len p-ab)) (suc (suc (len p-bc)))
         (k , ll)))))
         (cong snd (to‚Ñï-injective refl))) ‚àô
     cong (pts' w)
       (to‚Ñï-injective
        {fj = suc k , (suc (suc (len p-bc))) ‚Ñï.+ l ,
          (cong (‚Ñï._+ suc (suc k))
            (‚Ñï.+-comm (suc (suc (len p-bc))) l)) ‚àô snd (snd k')}
        {fk = k'}
         refl)

 pts'-inr : ‚àÄ (x : Fin (3 ‚Ñï.+ len p-bc)) x<' ‚Üí pts' p-bc x ‚â°
   pts' w (
     fst (injectFin+ {suc (suc (suc (len p-bc)))}
      {suc (suc (len p-ab))}
      x)
     , x<')

 pts'-inr (zero , zero , p) (zero , snd‚ÇÅ) = ‚ä•.rec (znots (injSuc p))
 pts'-inr (suc k , zero , p) (zero , snd‚ÇÅ) = refl
 pts'-inr (k , zero , p) (suc k' , p') =
   ‚ä•.rec (snotz (inj-+m {suc k'} {_} {zero} p''))
   where
   p'' = p' ‚àô
     cong (Œª x ‚Üí suc (suc (suc (len p-ab ‚Ñï.+ x))))
      (sym (injSuc p))
 pts'-inr (zero , suc l , p) (zero , p') =
   ‚ä•.rec (znots (inj-m+ {suc (suc (suc (len p-ab)))} {0} p'))
 pts'-inr (zero , suc l , p) (suc k' , p') =
   pts'-inl flast ‚àô
     cong (pts' w)
       (to‚Ñï-injective
         {_}
          {injectFin+' {suc (suc (len p-bc))}
           {n = suc (suc (suc (len p-ab)))} flast}
          {(fst (injectFin+ (zero , suc l , p)) , suc k' , p')}
         (injectFin+'-flast‚â°injectFin+-fzero
         (suc (suc (len p-ab))) (suc (suc (len p-bc)))))

 pts'-inr (suc k , suc l , p) (zero , p') =
   ‚ä•.rec (znots $
    inj-+m {0} {k} {suc l}
     (injSuc (p'' ‚àô (sym (injSuc p)) ‚àô +-suc l (suc k)) ‚àô +-suc l k))
   where
   p'' = inj-m+ {suc (suc (suc (len p-ab)))} p'
 pts'-inr (suc k , suc l , p) (suc k' , p') =
   cong {x = inr (inr _)}
     {F‚Üí‚äé (suc (len p-ab) ‚Ñï.+ suc k , k' , _)}
     (fst ‚àò pts‚äé)
     ((sym (Iso.rightInv F‚Üí‚äé* _) ‚àô
      cong (Iso.fun F‚Üí‚äé*) (to‚Ñï-injective refl))
        ‚àô sym (F‚Üí‚äé‚â°iso (len p-ab) _))

  where
  module H = Iso (compIso
      (Iso-Fin+‚äé (suc (len p-ab)) (suc (suc (len p-bc))))
      (‚äé.‚äéIso (idIso {A = Fin (suc (len p-ab))})
             (Iso-Fin+‚äé 1 (suc (len p-bc)))))

 <w' : ‚àÄ x ‚Üí pts' w (finj (Iso.inv (Iso-Fin+‚äé _ _) x)) ‚â§·µ£
      ‚äé.rec (samples s-ab) (samples s-bc)
       x
 <w' (inl x) = isTrans‚â°‚â§·µ£ _ _ _
   (cong (pts' w) (finj‚àòinj' x)
    ‚àô sym (pts'-inl (finj x)))
   (pts'‚â§samples s-ab x)
 <w' (inr x) = isTrans‚â°‚â§·µ£ _ _ _
     (cong (pts' w) (finj‚àòinj {2 ‚Ñï.+ len p-ab} x
      (snd (finj (injectFin+ {n = 2 ‚Ñï.+ len p-ab} x))))
       ‚àô sym (pts'-inr (finj x)
       ((snd (finj (injectFin+ {n = 2 ‚Ñï.+ len p-ab} x))))))
     (pts'‚â§samples s-bc x)


 w'< : ‚àÄ x ‚Üí ‚äé.rec (samples s-ab) (samples s-bc) x ‚â§·µ£
     pts' w (fsuc (Iso.inv (Iso-Fin+‚äé _ _) x))


 w'< (inl x) =
   isTrans‚â§‚â°·µ£ _ _ _
     (samples‚â§pts' s-ab x)
     (pts'-inl (fsuc x) ‚àô
       cong (pts'¬†w) (sym (fsuc‚àòinj' x)))
 w'< (inr x) = isTrans‚â§‚â°·µ£ _ _ _
   (samples‚â§pts' s-bc x)
     (pts'-inr (fsuc x) h ‚àô
       cong (pts' w) (sym (fsuc‚àòinj x
        h))  )
   where
    h =
       subst (‚Ñï._<
      suc (suc (suc (len p-ab ‚Ñï.+ suc (suc (len p-bc))))))
       (cong (suc ‚àò suc) (sym (+-suc _ _)))
        (snd (fsuc (injectFin+ {n = 2 ‚Ñï.+ len p-ab} x)))

 w' : Sample w
 w' .samples = ‚äé.rec (samples s-ab) (samples s-bc) ‚àò Fin+‚Üí‚äé _ _
 w' .pts'‚â§samples x =  isTrans‚â°‚â§·µ£ _ _ _
   (cong (pts' w ‚àò finj)
     (sym (Iso.leftInv (Iso-Fin+‚äé (suc (suc (p-ab .len))) _) x)))
     (<w' (Iso.fun (Iso-Fin+‚äé _ _) x))
 w' .samples‚â§pts' x =
   isTrans‚â§‚â°·µ£ _ _ _ (w'< (Iso.fun (Iso-Fin+‚äé _ _) x))
     ((cong (pts' w ‚àò fsuc)
     (Iso.leftInv (Iso-Fin+‚äé (suc (suc (p-ab .len))) _) x)))

 w'' : (f : ‚Ñù ‚Üí ‚Ñù) ‚Üí
        riemannSum' s-ab f +·µ£ riemannSum' s-bc f ‚â° riemannSum' w' f
 w'' f =
   cong‚ÇÇ _+·µ£_
     (riemannSum'-alt-lem s-ab f ‚àô
      congS {A = Fin (suc (suc ( len p-ab))) ‚Üí ‚Ñù}

        (Œª f ‚Üí foldlFin {n = suc (suc ( len p-ab))}
          (Œª S k ‚Üí
           S +·µ£ f k) (rat 0)
           (idfun _))
       (funExt Œª x ‚Üí cong‚ÇÇ _¬∑·µ£_
         (cong‚ÇÇ _-·µ£_
           (pts'-inl (fsuc x) ‚àô
             cong {x = (injectFin+' (fsuc x))}
                   {(fsuc (injectFin+' x))} (pts' w)
                   (to‚Ñï-injective refl))
           ((pts'-inl (finj x) ‚àô
             cong {x = (injectFin+' (finj x))}
                   {(finj (injectFin+' x))} (pts' w)
                   (to‚Ñï-injective refl))))
         (cong f (sym (rec‚äé-injectFin+' (fst ‚àò samplesŒ£ s-ab) _ x) ))))
     (riemannSum'-alt-lem s-bc f ‚àô
       congS {A = Fin (suc (suc ( len p-bc))) ‚Üí ‚Ñù}

        (Œª f ‚Üí foldlFin {n = suc (suc ( len p-bc))}
          (Œª S k ‚Üí
           S +·µ£ f k) (rat 0)
           (idfun _))
           (funExt Œª x ‚Üí cong‚ÇÇ _¬∑·µ£_
         (cong‚ÇÇ _-·µ£_
           (pts'-inr (fsuc x)
             (x< x)
             ‚àô sym (cong (pts' w) (fsuc‚àòinj x (x< x))))
           (pts'-inr (finj x) (x<' x) ‚àô
              sym (cong (pts' w)
                (finj‚àòinj {n = 2 ‚Ñï.+ len p-ab}  x (x<' x)))))
         (cong f (sym (rec‚äé-injectFin+ (fst ‚àò samplesŒ£ s-ab) _ x))))) ‚àô‚àô
     sym (foldFin-sum-concat
      (suc (suc (len p-ab)))
      (suc (suc (len p-bc))) _)
   ‚àô‚àô sym (riemannSum'-alt-lem w' f)
   where
   x< : (x : Fin (suc (suc (len p-bc)))) ‚Üí
         _ ‚Ñï.< _
   x< k =
     subst (suc (suc (len p-ab ‚Ñï.+ fst (fsuc k))) ‚Ñï.<_)
       (cong (suc ‚àò suc) (+-suc _ _))
       (‚Ñï.<-k+ {k = suc (suc (len p-ab))} (‚Ñï.<-k+ {k = 1} (snd k)))

   x<' : (x : Fin (suc (suc (len p-bc)))) ‚Üí
         _ ‚Ñï.< _
   x<' k = subst (suc (suc (len p-ab ‚Ñï.+ fst (finj k))) ‚Ñï.<_)
       (cong (suc ‚àò suc) (+-suc _ _))
       (‚Ñï.<-k+ {k = suc (suc (len p-ab))} (‚Ñï.‚â§-suc (snd k)))



 ‚äésuc ‚äéinj : Fin (suc (suc (len p-ab))) ‚äé (Fin 1 ‚äé Fin (suc (len p-bc)))
        ‚Üí Fin (suc (suc (suc (len p-ab)))) ‚äé (Fin (suc (suc (len p-bc))))
 ‚äésuc = ‚äé.rec (inl ‚àò fsuc) (inr ‚àò ‚äé.rec (Œª _ ‚Üí fzero) (fsuc))
 ‚äéinj = ‚äé.rec (inl ‚àò finj) (‚äé.rec (Œª _ ‚Üí inl flast) (inr ‚àò finj))
 -- ‚äé.rec (inl ‚àò finj)
 --   (‚äé.rec (Œª _ ‚Üí inl flast) (inr ‚àò Fin+‚Üí‚äé 1 (suc (len p-bc)) ‚àò finj))

 ‚äé‚ÜíF''' : Fin (suc (suc (suc (len p-ab)))) ‚äé Fin (suc (suc (len p-bc))) ‚Üí
           Fin (suc (suc (suc (len p-ab))) ‚Ñï.+ suc (suc (len p-bc)))
 ‚äé‚ÜíF''' = Iso.inv (Iso-Fin+‚äé (suc (suc (suc (len p-ab)))) _)
 w'''-‚äé : (Œ¥ : ‚Ñù) ‚Üí mesh‚â§·µ£ p-ab Œ¥ ‚Üí mesh‚â§·µ£ p-bc Œ¥ ‚Üí
         ‚àÄ k ‚Üí (pts' w
           (‚äé‚ÜíF''' (‚äésuc k) ))
            -·µ£ (pts' w (‚äé‚ÜíF''' (‚äéinj k))) ‚â§·µ£ Œ¥
 w'''-‚äé Œ¥ me me' (inl x) =
    isTrans‚â°‚â§·µ£ _ _ _
      (cong‚ÇÇ _-·µ£_
           (sym (pts'-inl (fsuc x)))
           (sym (pts'-inl (finj x))))
      (me x)
 w'''-‚äé Œ¥ me me' (inr (inl x)) =
    isTrans‚â°‚â§·µ£ _ _ _
      (cong‚ÇÇ _-·µ£_
           (cong {x = injectFin+ {n = suc (suc (suc (len p-ab)))} fzero}
                 {fst (injectFin+ {suc (suc (len p-bc))}
                  {n = suc (suc (len p-ab))} (fsuc fzero))
                  , h} (pts' w)
                   (to‚Ñï-injective (cong (2 ‚Ñï.+_) (sym (+-suc _ _))))
             ‚àô sym (pts'-inr (fsuc fzero)
            (h)))
           (sym (pts'-inl flast)))
      (me' fzero)
    where
    h : _
    h = snd $ finj (injectFin+ {suc (suc (len p-bc))} {n = suc (suc (len p-ab))}
         (fsuc fzero))

 w'''-‚äé Œ¥ me me' (inr (inr x)) =

    isTrans‚â°‚â§·µ£ _ _ _
      (cong‚ÇÇ _-·µ£_
           (cong (pts' w) p1 ‚àô sym (pts'-inr (fsuc (fsuc x))
             (subst (suc (suc (len p-ab ‚Ñï.+ fst (fsuc (fsuc x)))) ‚Ñï.<_)
       (cong (suc ‚àò suc) (+-suc _ _))
       (‚Ñï.<-k+ {k = suc (suc (len p-ab))} (‚Ñï.<-k+ {k = 2} (snd x))))))
           (cong (pts' w) p2
            ‚àô sym (pts'-inr (finj (fsuc x))
             (subst (suc (suc (len p-ab ‚Ñï.+ fst (finj (fsuc x)))) ‚Ñï.<_)
       (cong (suc ‚àò suc) (+-suc _ _))
       (‚Ñï.<-k+ {k = suc (suc (len p-ab))} (‚Ñï.‚â§-suc (snd (fsuc x))))))))
      (me' (fsuc x))
   where
    p1 : (‚äé‚ÜíF''' (‚äésuc (inr (inr x)))) ‚â°
        (fst (injectFin+ {suc (suc (suc (len p-bc)))} {suc (suc (len p-ab))}
         (fsuc (fsuc x))) ,
       subst (suc (suc (len p-ab ‚Ñï.+ fst (fsuc (fsuc x)))) ‚Ñï.<_)
       (Œª i ‚Üí suc (suc (+-suc (len p-ab) (suc (suc (len p-bc))) i)))
       (‚Ñï.<-k+ {2 ‚Ñï.+ x .fst} {k = suc (suc (len p-ab))}
          (‚Ñï.<-k+ {x .fst} (snd x))))
    p1 = to‚Ñï-injective (cong (suc ‚àò suc) (sym (+-suc _ _)))

    p2 :  (‚äé‚ÜíF''' (‚äéinj (inr (inr x)))) ‚â°

           (fst (injectFin+ {suc (suc (suc (len p-bc)))} {suc (suc (len p-ab))}
              (finj (fsuc x))) ,
            subst (suc (suc (len p-ab ‚Ñï.+ fst (finj (fsuc x)))) ‚Ñï.<_)
            (Œª i ‚Üí suc (suc (+-suc (len p-ab) (suc (suc (len p-bc))) i)))
            (‚Ñï.<-k+ {k = suc (suc (len p-ab))}
             (‚Ñï.‚â§-suc (snd (fsuc x)))))
    p2 = to‚Ñï-injective (cong (suc ‚àò suc) (sym (+-suc _ _)))

 module F‚Üí‚äé''' =
   Iso (compIso (Iso-Fin+‚äé (suc (suc (len p-ab))) (suc (suc (len p-bc))))
          (‚äé.‚äéIso idIso
             (Iso-Fin+‚äé 1 _)))

-- (Fin (suc (suc (len p-ab)) ‚Ñï.+ (suc (suc (len p-bc)))))
--         (Fin (suc (suc (len p-ab))) ‚äé (Fin 1 ‚äé Fin (suc (len p-bc))))

--  F‚Üí‚äé''' = {!!}


 w'''-F‚Üí‚äé‚ÜíF-fsuc : ‚àÄ k ‚Üí fsuc (F‚Üí‚äé'''.inv k) ‚â° ‚äé‚ÜíF''' (‚äésuc k)
 w'''-F‚Üí‚äé‚ÜíF-fsuc (inl x) = to‚Ñï-injective refl
 w'''-F‚Üí‚äé‚ÜíF-fsuc (inr (inl (k , l , p))) =
  to‚Ñï-injective
   (cong (Œª k ‚Üí suc (suc (suc (len p-ab ‚Ñï.+ k))))
    (snd (m+n‚â°0‚Üím‚â°0√ón‚â°0 {l} {k} (injSuc (sym (+-suc l k) ‚àô p)))))
 w'''-F‚Üí‚äé‚ÜíF-fsuc (inr (inr x)) = to‚Ñï-injective refl

 w'''-F‚Üí‚äé‚ÜíF-finj : ‚àÄ k ‚Üí finj (F‚Üí‚äé'''.inv k) ‚â° ‚äé‚ÜíF''' (‚äéinj k)
 w'''-F‚Üí‚äé‚ÜíF-finj (inl x) = to‚Ñï-injective refl
 w'''-F‚Üí‚äé‚ÜíF-finj (inr (inl (k , l , p))) =
  to‚Ñï-injective (cong (suc ‚àò suc)
   (cong (len p-ab ‚Ñï.+_) ((snd (m+n‚â°0‚Üím‚â°0√ón‚â°0 {l} {k}
    (injSuc (sym (+-suc l k) ‚àô p)))))
    ‚àô +-zero _))
 w'''-F‚Üí‚äé‚ÜíF-finj (inr (inr x)) = to‚Ñï-injective
  (cong (2 ‚Ñï.+_) (+-suc _ _))


 w''' : (Œ¥ : ‚Ñù) ‚Üí mesh‚â§·µ£ p-ab Œ¥ ‚Üí mesh‚â§·µ£ p-bc Œ¥ ‚Üí
         ‚àÄ k ‚Üí pts' w (fsuc k) -·µ£ pts' w (finj k) ‚â§·µ£ Œ¥
 w''' Œ¥ me me' k =
   isTrans‚â°‚â§·µ£ _ _ _
     (cong‚ÇÇ _-·µ£_
       (cong (pts' w) (cong fsuc (sym (F‚Üí‚äé'''.leftInv k))
        ‚àô w'''-F‚Üí‚äé‚ÜíF-fsuc (F‚Üí‚äé'''.fun k)))
       (cong (pts' w) (cong finj (sym (F‚Üí‚äé'''.leftInv k))
        ‚àô w'''-F‚Üí‚äé‚ÜíF-finj (F‚Üí‚äé'''.fun k))))
     (w'''-‚äé Œ¥ me me' (F‚Üí‚äé'''.fun k))


Integral'-additive : ‚àÄ a b c ‚Üí a ‚â§·µ£ b ‚Üí b ‚â§·µ£ c ‚Üí ‚àÄ f s s' s+s' ‚Üí
  on[ a , b ]IntegralOf f is' s ‚Üí
  on[ b , c ]IntegralOf f is' s' ‚Üí
  on[ a , c ]IntegralOf f is' s+s' ‚Üí
  s +·µ£ s' ‚â° s+s'


Integral'-additive a b c a‚â§b b‚â§c f s s' s+s' S S' S+S' =
  eq‚Ñù _ _ (invEq (‚àº‚âÉabs<Œµ _ _ _) ‚àò w)

 where
 w : (Œµ : ‚Ñö‚Çä) ‚Üí abs·µ£ (s +·µ£ s' +·µ£ -·µ£ s+s') <·µ£ rat (fst Œµ)
 w Œµ =
   PT.rec3
    (isProp<·µ£ _ _)
    (Œª (Œ¥ , X) (Œ¥' , X') (Œ¥'' , X'') ‚Üí
      PT.rec2 (isProp<·µ£ _ _)
        (Œª Y Y' ‚Üí
          let Œ¥‚äìŒ¥' = ‚Ñö.min‚Çä (‚Ñö.min‚Çä Œ¥ Œ¥') Œ¥''
              tp-ab , mesh-ab = RefinableTaggedPartition[_,_].tpTP  Y Œ¥‚äìŒ¥'
              tp-bc , mesh-bc = RefinableTaggedPartition[_,_].tpTP Y' Œ¥‚äìŒ¥'

              tp-ac , rs+ , mesh-ac  = concatTaggedPartition a b c a‚â§b b‚â§c
                     tp-ab tp-bc
              R = X'' tp-ac Œª k ‚Üí
                   isTrans‚â§·µ£ _ _ _
                     (mesh-ac (rat (fst Œ¥‚äìŒ¥')) mesh-ab mesh-bc k)
                     (‚â§‚Ñö‚Üí‚â§·µ£ _ _ ((‚Ñö.min‚â§' (fst (‚Ñö.min‚Çä Œ¥ Œ¥')) (fst Œ¥''))))
          in isTrans<·µ£ _ _ _
                (isTrans‚â§<·µ£ _ _ _
                  (isTrans‚â°‚â§·µ£ _ _ _
                   (cong abs·µ£
                     ( sym (ùêë'.+IdR' _ _ (ùêë'.+InvR' _ _ (sym (rs+ f))))
                      ‚àô Lùêë.lem--066
                     ‚àô cong‚ÇÇ _+·µ£_ Lùêë.lem--041 refl
                     ))
                  (isTrans‚â§·µ£ _ _ _
                   (abs·µ£-triangle _ _)
                   (‚â§·µ£-+o _ _ _ (abs·µ£-triangle _ _))))
                  (<·µ£Monotone+·µ£ _ _ _ _
                   (<·µ£Monotone+·µ£ _ _ _ _
                    (isTrans‚â°<·µ£ _ _ _
                     (minusComm-abs·µ£ _ _)
                     (X tp-ab (Œª k ‚Üí
                     isTrans‚â§·µ£ _ _ _ (mesh-ab k)
                       (‚â§‚Ñö‚Üí‚â§·µ£ _ _
                         ((‚Ñö.isTrans‚â§ (fst Œ¥‚äìŒ¥') _ (fst Œ¥)
                         (‚Ñö.min‚â§ (‚Ñö.min (fst Œ¥) (fst Œ¥')) (fst Œ¥''))
                         (‚Ñö.min‚â§ (fst Œ¥) (fst Œ¥'))))) )))
                    (isTrans‚â°<·µ£ _ _ _
                     (minusComm-abs·µ£ _ _)
                     (X' tp-bc (Œª k ‚Üí
                     isTrans‚â§·µ£ _ _ _ (mesh-bc k) (‚â§‚Ñö‚Üí‚â§·µ£ _ _
                       (‚Ñö.isTrans‚â§ (fst Œ¥‚äìŒ¥') _ (fst Œ¥')
                         (‚Ñö.min‚â§ (‚Ñö.min (fst Œ¥) (fst Œ¥')) (fst Œ¥''))
                         (‚Ñö.min‚â§' (fst Œ¥) (fst Œ¥')))) ))))
                   R
                   ))
                (isTrans<‚â°·µ£ _ _ _ (isTrans‚â°<·µ£ _ _ _
                  (cong‚ÇÇ _+·µ£_
                    (+·µ£-rat _ _ ‚àô cong rat (‚Ñö.Œµ/2+Œµ/2‚â°Œµ (fst (/2‚Çä Œµ))))
                    (cong rat (sym (‚Ñö.¬∑Assoc (fst Œµ) _ _)))
                    ‚àô +·µ£-rat _ _
                    ‚àô cong rat
                      (sym (‚Ñö.¬∑DistL+ (fst Œµ) _ _)))
                  (<‚Ñö‚Üí<·µ£ _ _
                    (‚Ñö.<-o¬∑ _ _ (fst Œµ) (‚Ñö.0<‚Ñö‚Çä Œµ)
                       (‚Ñö.dec‚Ñö<?
                        {[ pos 1 / 1+ 1 ]
                         ‚Ñö.+ [ pos 1 / 1+ 1 ] ‚Ñö.¬∑ [ pos 1 / 1+ 1 ]}
                         {1}) )))
                     (cong rat (‚Ñö.¬∑IdR (fst Œµ)))))
        (‚àÉRefinableTaggedPartition rtp-1/n a b a‚â§b )
        (‚àÉRefinableTaggedPartition rtp-1/n b c b‚â§c))
    (S (/2‚Çä (/2‚Çä Œµ))) (S' (/2‚Çä (/2‚Çä Œµ))) (S+S' (/2‚Çä (/2‚Çä Œµ)))

Integral'-empty : ‚àÄ a ‚Üí ‚àÄ f s ‚Üí
  on[ a , a ]IntegralOf f is' s ‚Üí
  s ‚â° 0
Integral'-empty a f s ‚à´f =
  sym (ùêë'.plusMinus s s)
   ‚àô‚àô cong (_-·µ£ s)
   (Integral'-additive a a a (‚â§·µ£-refl a) (‚â§·µ£-refl a) f s s s
    ‚à´f ‚à´f ‚à´f )
  ‚àô‚àô +-·µ£ s


module IntegrationUC
 (rtp‚Ñö : ‚àÄ (A B : ‚Ñö) ‚Üí A ‚Ñö.‚â§ B
    ‚Üí RefinableTaggedPartition[ rat A , rat B ] ) where


 module _ (a b : ‚Ñù) (a‚â§b : a ‚â§·µ£ b) where


  Integrate-UContinuous' : ‚àÄ f ‚Üí IsUContinuous f ‚Üí
   Œ£[ (A , B) ‚àà (‚Ñö √ó ‚Ñö) ] (rat A ‚â§·µ£ a) √ó (b ‚â§·µ£ rat B) ‚Üí Œ£ ‚Ñù Œª R ‚Üí on[ a , b ]IntegralOf f is' R
  Integrate-UContinuous' f ucf ((A , B) , A‚â§a , b‚â§B) =
        IntegralOfUContinuous , isIntegralOfUContinuous
   where
   clamped-pts =
    (clamp-RefinableTaggedPartition
             _ _ a b a‚â§b
              (A‚â§a , (isTrans‚â§·µ£ _ _ _ a‚â§b b‚â§B))
              (isTrans‚â§·µ£ _ _ _ A‚â§a a‚â§b , b‚â§B)
             (rtp‚Ñö A B
               (‚â§·µ£‚Üí‚â§‚Ñö _ _ (isTrans‚â§·µ£ _ _ _
                 (isTrans‚â§·µ£ _ _ _ A‚â§a a‚â§b)
                   b‚â§B))))
   open PreIntegration a b a‚â§b A B A‚â§a b‚â§B clamped-pts f ucf

  preIntegrate-UContinuous : ‚àÄ f ‚Üí IsUContinuous f
   ‚Üí ‚àÉ[ (A , B) ‚àà (‚Ñö √ó ‚Ñö) ] (rat A ‚â§·µ£ a) √ó (b ‚â§·µ£ rat B)
   ‚Üí Œ£ ‚Ñù Œª R ‚Üí on[ a , b ]IntegralOf f is' R
  preIntegrate-UContinuous f ucf =
    PT.rec {A = Œ£[ (A , B) ‚àà (‚Ñö √ó ‚Ñö) ] (rat A ‚â§·µ£ a) √ó (b ‚â§·µ£ rat B)}
     (IntegratedProp a b a‚â§b f)
     (Integrate-UContinuous' f ucf)

  opaque
   Integrate-UContinuous : ‚àÄ f ‚Üí IsUContinuous f ‚Üí
    Œ£ ‚Ñù Œª R ‚Üí on[ a , b ]IntegralOf f is' R
   Integrate-UContinuous f ucf = preIntegrate-UContinuous f ucf
      (‚àÉenclosing‚ÑöInterval a b)



   IntegralConst : ‚àÄ C fc
      ‚Üí fst (Integrate-UContinuous (Œª _ ‚Üí C) fc) ‚â° (C ¬∑·µ£ (b -·µ£ a))
   IntegralConst C fc =
    PT.elim
      (Œª q ‚Üí isSet‚Ñù
        (fst (PT.rec {A = Œ£[ (A , B) ‚àà (‚Ñö √ó ‚Ñö) ] (rat A ‚â§·µ£ a) √ó (b ‚â§·µ£ rat B)}
      (IntegratedProp a b a‚â§b (Œª _ ‚Üí C))
      (Integrate-UContinuous' (Œª _ ‚Üí C) fc) q))
        ((C ¬∑·µ£ (b -·µ£ a)) ))
        AA
      (‚àÉenclosing‚ÑöInterval a b)
    where
    AA : (x : Œ£[ (A , B) ‚àà (‚Ñö √ó ‚Ñö) ] (rat A ‚â§·µ£ a) √ó (b ‚â§·µ£ rat B)) ‚Üí
          fst
          (PT.rec (IntegratedProp a b a‚â§b (Œª _ ‚Üí C))
           (Integrate-UContinuous' (Œª _ ‚Üí C) fc) ‚à£ x ‚à£‚ÇÅ)
          ‚â° C ¬∑·µ£ (b -·µ£ a)
    AA ((A , B) , A‚â§a , b‚â§B) =
      congLim' _ _ _ (Œª Œµ ‚Üí
         Partition[_,_].riemannSum'Const
           (snd (tpSeq (suc _))) C) ‚àô lim-const _ _

     where

      rtp : RefinableTaggedPartition[ rat A , rat B ]
      rtp = (rtp‚Ñö A B ((‚â§·µ£‚Üí‚â§‚Ñö _ _ (isTrans‚â§·µ£ _ _ _
                 (isTrans‚â§·µ£ _ _ _ A‚â§a a‚â§b)
                   b‚â§B))))

      clamped-pts : RefinableTaggedPartition[ a , b ]
      clamped-pts = (clamp-RefinableTaggedPartition
             _ _ a b a‚â§b
              (A‚â§a , (isTrans‚â§·µ£ _ _ _ a‚â§b b‚â§B))
              (isTrans‚â§·µ£ _ _ _ A‚â§a a‚â§b , b‚â§B)
             (rtp‚Ñö A B
               (‚â§·µ£‚Üí‚â§‚Ñö _ _ (isTrans‚â§·µ£ _ _ _
                 (isTrans‚â§·µ£ _ _ _ A‚â§a a‚â§b)
                   b‚â§B))))
      open RefinableTaggedPartition[_,_] clamped-pts

      open PreIntegration a b a‚â§b A B A‚â§a b‚â§B clamped-pts
        (Œª _ ‚Üí C) (IsUContinuousConst C)


 IntegralConcat :
   ‚àÄ a b c (a‚â§b : a ‚â§·µ£ b) (b‚â§c : b ‚â§·µ£ c)
     (f : ‚Ñù ‚Üí ‚Ñù) (fc : IsUContinuous f) ‚Üí
     fst (Integrate-UContinuous a b a‚â§b f fc)
     +·µ£ fst (Integrate-UContinuous b c b‚â§c f fc)
     ‚â° fst (Integrate-UContinuous a c (isTrans‚â§·µ£ _ _ _ a‚â§b b‚â§c) f fc)
 IntegralConcat a b c a‚â§b b‚â§c f fc =
   Integral'-additive a b c a‚â§b b‚â§c f
        _ _ _
        (snd (Integrate-UContinuous a b a‚â§b f fc))
        (snd (Integrate-UContinuous b c b‚â§c f fc))
        (snd (Integrate-UContinuous a c (isTrans‚â§·µ£ _ _ _ a‚â§b b‚â§c) f fc))

 Integral+ : ‚àÄ a b (a‚â§b : a ‚â§·µ£ b) f g fc gc
    ‚Üí fst (Integrate-UContinuous a b a‚â§b f fc)
      +·µ£  fst (Integrate-UContinuous a b a‚â§b g gc)
       ‚â° fst (Integrate-UContinuous a b a‚â§b
         (Œª x ‚Üí f x +·µ£ g x) (IsUContinuous+·µ£‚ÇÇ f g fc gc))
 Integral+ a b a‚â§b f g fc gc =
   Integral'Uniq a b a‚â§b _ _ _
    (Integral'-+ a b a‚â§b f g
     _ _
     (snd (Integrate-UContinuous a b a‚â§b f fc))
     (snd (Integrate-UContinuous a b a‚â§b g gc)))
    (snd (Integrate-UContinuous a b a‚â§b
         (Œª x ‚Üí f x +·µ£ g x) (IsUContinuous+·µ£‚ÇÇ f g fc gc)))



 Integral-C¬∑ : ‚àÄ a b (a‚â§b : a ‚â§·µ£ b) C f fc fc'
    ‚Üí C ¬∑·µ£ fst (Integrate-UContinuous a b a‚â§b f fc)

       ‚â° fst (Integrate-UContinuous a b a‚â§b
         (Œª x ‚Üí C ¬∑·µ£ f x) fc')
 Integral-C¬∑ a b a‚â§b C f fc fc' =
   Integral'Uniq a b a‚â§b _ _ _
     (Integral'-C¬∑ a b a‚â§b C f _ (snd (Integrate-UContinuous a b a‚â§b f fc)) )
     (snd (Integrate-UContinuous a b a‚â§b
         (Œª x ‚Üí C ¬∑·µ£ f x) fc'))


 Integrate-UContinuous-‚â° : ‚àÄ a b (a‚â§b : a ‚â§·µ£ b) f g fc gc
    ‚Üí (‚àÄ x ‚Üí f x ‚â° g x)
    ‚Üí fst (Integrate-UContinuous a b a‚â§b f fc)
       ‚â° fst (Integrate-UContinuous a b a‚â§b g gc)
 Integrate-UContinuous-‚â° a b a‚â§b f g fc gc x =
   cong {A = Œ£ _ IsUContinuous}
         {x = f , fc} {g , subst IsUContinuous (funExt x) fc }
         (Œª (g , gc) ‚Üí fst (Integrate-UContinuous a b a‚â§b g gc))
          (Œ£PathP (funExt x , toPathP refl))
     ‚àô Integral'Uniq a b a‚â§b _ _ _
       (snd (Integrate-UContinuous a b a‚â§b g
          (subst IsUContinuous (funExt x) fc)))
        (snd (Integrate-UContinuous a b a‚â§b g gc))

 Integral- : ‚àÄ a b (a‚â§b : a ‚â§·µ£ b) f g fc gc
    ‚Üí fst (Integrate-UContinuous a b a‚â§b f fc)
      -·µ£  fst (Integrate-UContinuous a b a‚â§b g gc)
       ‚â° fst (Integrate-UContinuous a b a‚â§b
         (Œª x ‚Üí f x -·µ£ g x) (IsUContinuous-·µ£‚ÇÇ f g fc gc))
 Integral- a b a‚â§b f g fc gc = PT.rec
   (isSet‚Ñù _ _)
     (Œª icNeg ‚Üí
        let -1¬∑gc : IsUContinuous (Œª x ‚Üí (rat [ ‚Ñ§.negsuc zero / 1+ zero ]) ¬∑·µ£ g x)
            -1¬∑gc = subst IsUContinuous
                    (funExt (Œª _ ‚Üí ¬∑·µ£Comm _ _)) (IsUContinuous‚àò icNeg gc)
            -gc : IsUContinuous (Œª x ‚Üí -·µ£ (g x))
            -gc = subst IsUContinuous
                    (funExt Œª x ‚Üí sym (-·µ£‚â°[-1¬∑·µ£] (g x))) -1¬∑gc
        in   cong (fst (Integrate-UContinuous a b a‚â§b f fc) +·µ£_)
                   (-·µ£‚â°[-1¬∑·µ£] (fst (Integrate-UContinuous a b a‚â§b g gc))
                     ‚àô‚àô Integral-C¬∑ a b a‚â§b
                         (rat [ ‚Ñ§.negsuc zero / 1+ zero ]) g gc -1¬∑gc
                     ‚àô‚àô Integrate-UContinuous-‚â° a b a‚â§b
                         _ _ _ _
                          (Œª x ‚Üí sym (-·µ£‚â°[-1¬∑·µ£] (g x))))

                ‚àô Integral+ a b a‚â§b f (-·µ£_ ‚àò g) fc
                  -gc
                 ‚àô Integrate-UContinuous-‚â° a b a‚â§b _ _ _ _
                   (Œª x ‚Üí sym (x-·µ£y‚â°x+·µ£[-·µ£y] (f x) (g x))))
     (IsUContinuous¬∑·µ£R (rat [ ‚Ñ§.negsuc zero / 1+ zero ]) )

 Integral-abs·µ£‚â§ : ‚àÄ a b (a‚â§b : a ‚â§·µ£ b) f fc fc' ‚Üí
       abs·µ£ (fst (Integrate-UContinuous a b a‚â§b f fc))
         ‚â§·µ£ (fst (Integrate-UContinuous a b a‚â§b (abs·µ£ ‚àò f) fc'))
 Integral-abs·µ£‚â§ a b a‚â§b f fc fc' =
   Integral'-abs‚â§ a b a‚â§b f _ _
     (snd (Integrate-UContinuous a b a‚â§b f fc))
     (snd (Integrate-UContinuous a b a‚â§b (abs·µ£ ‚àò f) fc'))


 IntegralAbs : ‚àÄ a b (a‚â§b : a ‚â§·µ£ b) f fc
    ‚Üí ‚àÄ fc-sup ‚Üí (‚àÄ x ‚Üí x ‚àà interval‚Ñô a b ‚Üí abs·µ£ (f x) ‚â§·µ£ fc-sup)
    ‚Üí abs·µ£ (fst (Integrate-UContinuous a b a‚â§b f fc)) ‚â§·µ£ fc-sup ¬∑·µ£ (b -·µ£ a)
 IntegralAbs a b a‚â§b f fc fc-sup x =
  isTrans‚â§‚â°·µ£ _ _ _
    (isTrans‚â§·µ£ _ _ _
    (Integral-abs·µ£‚â§  a b a‚â§b _ _ _)
    (Integral'-‚â§ a b a‚â§b (abs·µ£ ‚àò f) (Œª _ ‚Üí fc-sup) _ _
      x
      (snd (Integrate-UContinuous a b a‚â§b (abs·µ£ ‚àò f)
        (IsUContinuous‚àò IsUContinuousAbs·µ£ fc)) )
      (snd (Integrate-UContinuous a b a‚â§b (Œª _ ‚Üí fc-sup)
        (IsUContinuousConst _)))))
    (IntegralConst a b a‚â§b fc-sup _)


 FTOC‚áí : ‚àÄ x‚ÇÄ (f : ‚Ñù ‚Üí ‚Ñù) ‚Üí (ucf : IsUContinuous f)
                 ‚Üí (uDerivativeOf‚Ñô (pred‚â• x‚ÇÄ) ,
                         (Œª x x‚ÇÄ‚â§x ‚Üí
                           fst (Integrate-UContinuous x‚ÇÄ x x‚ÇÄ‚â§x f ucf))
                         is (Œª x _ ‚Üí f x))
 FTOC‚áí x‚ÇÄ f ucf Œµ =
  PT.map (map-snd (ftoc _))
   (IsUContinuous-Œµ·µ£ f ucf
    (‚Ñö‚Çä‚Üí‚Ñù‚Çä ([ 1 / 2 ] , _ ) ‚Çä¬∑·µ£ (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ)))
  where
  ftoc : ‚àÄ Œ¥ ‚Üí ((u v : ‚Ñù) ‚Üí u ‚àº[ Œ¥ ] v ‚Üí abs·µ£ (f u -·µ£ f v) <·µ£ _)
   ‚Üí ‚àÄ x x‚ÇÄ‚â§x (r : ‚Ñù) (r‚àà : r ‚àà (Œª x‚ÇÅ ‚Üí pred‚â• x‚ÇÄ (x +·µ£ x‚ÇÅ)))
      (xÔºÉr : 0 ÔºÉ r) ‚Üí
      abs·µ£ r <·µ£ fst (‚Ñö‚Çä‚Üí‚Ñù‚Çä Œ¥) ‚Üí
      abs·µ£
      (f x -·µ£
       differenceAt‚Ñô (pred‚â• x‚ÇÄ)
       (Œª x‚ÇÅ x‚ÇÄ‚â§x‚ÇÅ ‚Üí fst (Integrate-UContinuous x‚ÇÄ x‚ÇÅ x‚ÇÄ‚â§x‚ÇÅ f ucf)) x r
       xÔºÉr x‚ÇÄ‚â§x r‚àà)
      <·µ£ rat (fst Œµ)
  ftoc Œ¥ X x x‚ÇÄ‚â§x h r‚àà 0ÔºÉh x‚ÇÅ =
    invEq (z<x‚âÉy‚Çä¬∑z<y‚Çä¬∑x _ _ h‚Çä)
     (isTrans‚â°<·µ£ _ _ _
       (cong‚ÇÇ _¬∑·µ£_ (sym (abs·µ£NonNeg (abs·µ£ h) (0‚â§abs·µ£ h))) refl ‚àô sym (¬∑abs·µ£ _ _) ‚àô
        cong abs·µ£ (ùêë'.¬∑DistR- (abs·µ£ h) _ _ ‚àô cong‚ÇÇ _-·µ£_ (¬∑·µ£Comm _ _ ‚àô fx-const-integral)
           (cong‚ÇÇ _¬∑·µ£_ (¬∑sign-flip‚â° h 0ÔºÉh) refl  ‚àô (¬∑·µ£Comm _ _) ‚àô
            ¬∑·µ£Assoc _ _ _ ‚àô
             cong‚ÇÇ _¬∑·µ£_ ([x/y]¬∑y·µ£ _ h 0ÔºÉh) refl
             ‚àô h-sidesCases-lem 0ÔºÉh) ‚àô
              Integral- x'* x* x*‚àà
                (Œª _ ‚Üí f x) f
                (IsUContinuousConst (f x)) ucf))
       (isTrans<‚â°·µ£ _ _ _
         (isTrans‚â§<·µ£ _ _ _ (IntegralAbs x'* x* x*‚àà
            (Œª x‚ÇÇ ‚Üí f x -·µ£ f x‚ÇÇ)
           (IsUContinuous-·µ£‚ÇÇ (Œª _ ‚Üí f x) f (IsUContinuousConst (f x)) ucf) (rat [ 1 / 2 ] ¬∑·µ£ rat (fst Œµ))
         X')
         (isTrans‚â°<·µ£ _ _ _
           (sym (¬∑·µ£Assoc _ _ _))
           (<·µ£-¬∑·µ£o  _ _ ((‚Ñö‚Çä‚Üí‚Ñù‚Çä Œµ) ‚Çä¬∑·µ£ (_ , 0<x*-x'*)) dec‚Ñö<·µ£? )))
         (¬∑IdL _ ‚àô cong (rat (fst Œµ) ¬∑·µ£_) x*-x'*‚â°‚à£h‚à£ ‚àô ¬∑·µ£Comm _ _)))


   where



   x* : ‚Ñù
   x* = max·µ£ x (x +·µ£ h)

   x'* : ‚Ñù
   x'* = min·µ£ x (x +·µ£ h)

   x*‚àà = (isTrans‚â§·µ£ x'* _ x* (min‚â§·µ£ x (x +·µ£ h)) (‚â§max·µ£ x (x +·µ£ h)) )


   x*-x'*‚â°‚à£h‚à£ : x* -·µ£ x'* ‚â° abs·µ£ h
   x*-x'*‚â°‚à£h‚à£ = ‚äé.rec
     (Œª 0<h ‚Üí
      let z = <·µ£Weaken‚â§·µ£ x (x +·µ£ h)
            (isTrans‚â°<·µ£ _ _ _ (sym (+IdR x)) (<·µ£-o+ 0 h x 0<h))

      in cong‚ÇÇ _-·µ£_ (‚â§‚Üímax·µ£ _ _ z) (‚â§‚Üímin·µ£ x (x +·µ£ h) z)
           ‚àô‚àô Lùêë.lem--063 {x} {h} ‚àô‚àô sym (abs·µ£Pos h 0<h))
     (Œª h<0 ‚Üí
      let z = <·µ£Weaken‚â§·µ£ (x +·µ£ h) x
             (isTrans<‚â°·µ£ _ _ _ (<·µ£-o+ h 0 x h<0) (+IdR x))

      in cong‚ÇÇ _-·µ£_
         (max·µ£Comm x (x +·µ£ h) ‚àô ‚â§‚Üímax·µ£ _ _ z)
         (min·µ£Comm x (x +·µ£ h) ‚àô ‚â§‚Üímin·µ£ _ _ z)
         ‚àô‚àô sym (Lùêë.lem--050 {h} {x}) ‚àô‚àô sym (abs·µ£Neg _ h<0))
    0ÔºÉh

   h‚Çä : ‚Ñù‚Çä
   h‚Çä = abs·µ£ h , 0ÔºÉ‚Üí0<abs h 0ÔºÉh

   0<x*-x'* : 0 <·µ£ x* -·µ£ x'*
   0<x*-x'* = isTrans<‚â°·µ£ _ _ _ (snd h‚Çä)
     (sym x*-x'*‚â°‚à£h‚à£)

   h-sidesCases-lem : ‚àÄ 0ÔºÉh ‚Üí
     (fst (Integrate-UContinuous x‚ÇÄ (x +·µ£ h) r‚àà f ucf) -·µ£
        fst (Integrate-UContinuous x‚ÇÄ x x‚ÇÄ‚â§x f ucf))
       ¬∑·µ£ sign·µ£ h 0ÔºÉh ‚â°
        fst (Integrate-UContinuous x'* x* x*‚àà f ucf)
   h-sidesCases-lem (inl u) =
       ¬∑IdR _
     ‚àô cong (_-·µ£ fst (Integrate-UContinuous x‚ÇÄ _ x‚ÇÄ‚â§x f ucf))
       ( cong (Œª r‚àà ‚Üí fst (Integrate-UContinuous x‚ÇÄ (x +·µ£ h) r‚àà f ucf))
              (isProp‚â§·µ£ _ _ _ _)
       ‚àô sym (IntegralConcat x‚ÇÄ x (x +·µ£ h) x‚ÇÄ‚â§x x‚â§x+h
            f ucf))
     ‚àô Lùêë.lem--063 ‚àô
        cong {A = Œ£ (‚Ñù √ó ‚Ñù) (uncurry _‚â§·µ£_)}
            {x = (x , x +·µ£ h) , _}
            {(x'* , x*) , _}
          ((Œª ((x'* ,  x*) , x*‚àà)  ‚Üí
             fst (Integrate-UContinuous x'* x* x*‚àà f ucf)))
          (Œ£‚â°Prop (uncurry isProp‚â§·µ£)
           (cong‚ÇÇ _,_
               (sym (‚â§‚Üímin·µ£ x (x +·µ£ h) (x‚â§x+h)))
               (sym (‚â§‚Üímax·µ£ x (x +·µ£ h) (x‚â§x+h)))))

      where
      x‚â§x+h : x ‚â§·µ£ x +·µ£ h
      x‚â§x+h = isTrans‚â°‚â§·µ£ _ _ _ (sym (+IdR x))
            (‚â§·µ£-o+ _ _ x (<·µ£Weaken‚â§·µ£ _ _ u))
   h-sidesCases-lem (inr u) =
      ¬∑·µ£Comm _ _
    ‚àô‚àô sym (-·µ£‚â°[-1¬∑·µ£] _)
    ‚àô‚àô -[x-y]‚â°y-x _ _
    ‚àô‚àô cong (_-·µ£ fst (Integrate-UContinuous x‚ÇÄ (x +·µ£ h) r‚àà f ucf))
            (cong (Œª r‚àà ‚Üí fst (Integrate-UContinuous x‚ÇÄ x r‚àà f ucf))
              (isProp‚â§·µ£ _ _ _ _)
           ‚àô sym (IntegralConcat x‚ÇÄ (x +·µ£ h) x r‚àà x+h‚â§x
              f ucf))
    ‚àô Lùêë.lem--063
    ‚àô‚àô cong {A = Œ£ (‚Ñù √ó ‚Ñù) (uncurry _‚â§·µ£_)}
            {x = (x +·µ£ h , x) , _}
            {(x'* , x*) , _}
          ((Œª ((x'* ,  x*) , x*‚àà)  ‚Üí
             fst (Integrate-UContinuous x'* x* x*‚àà f ucf)))
          (Œ£‚â°Prop (uncurry isProp‚â§·µ£)
           (cong‚ÇÇ _,_
               (sym (‚â§‚Üímin·µ£ (x +·µ£ h) x (x+h‚â§x)) ‚àô min·µ£Comm _ x)
               (sym (‚â§‚Üímax·µ£ (x +·µ£ h) x (x+h‚â§x)) ‚àô max·µ£Comm _ x)))
      where
      x+h‚â§x : x +·µ£ h ‚â§·µ£ x
      x+h‚â§x = isTrans‚â§‚â°·µ£ _ _ _
            (‚â§·µ£-o+ _ _ x (<·µ£Weaken‚â§·µ£ _ _ u))
            (+IdR x)

   fx-const-integral : f x ¬∑·µ£ abs·µ£ h ‚â°
        fst (Integrate-UContinuous x'* x* x*‚àà (Œª _ ‚Üí f x) (IsUContinuousConst _))
   fx-const-integral =
       cong (f x ¬∑·µ£_) (sym x*-x'*‚â°‚à£h‚à£)
     ‚àô sym (IntegralConst x'* x* x*‚àà (f x) (IsUContinuousConst _))


   X' : (x' : ‚Ñù) ‚Üí
         x' ‚àà interval‚Ñô x'* x* ‚Üí
         abs·µ£ (f x -·µ£ f x') ‚â§·µ£ rat [ 1 / 2 ] ¬∑·µ£ rat (fst Œµ)
   X' x' (‚â§x' , x'‚â§) =
     <·µ£Weaken‚â§·µ£ _ _ (X x x' (invEq (‚àº‚âÉabs<Œµ _ _ _)
      ((isTrans‚â§<·µ£ _ _ _
       (isTrans‚â§‚â°·µ£ _ _ _
        (hh 0ÔºÉh)
         (x*-x'*‚â°‚à£h‚à£)) x‚ÇÅ))))

     where
      hh : rat [ pos 0 / 1+ 0 ] ÔºÉ h ‚Üí  abs·µ£ (x +·µ£ -·µ£ x') ‚â§·µ£ x* -·µ£ x'*
      hh (inl 0<h) = isTrans‚â°‚â§·µ£ _ _ _
        (minusComm-abs·µ£ _ _ )
        (isTrans‚â°‚â§·µ£ _ _ _
          (abs·µ£NonNeg _ (x‚â§y‚Üí0‚â§y-x _ _
            (isTrans‚â°‚â§·µ£ _ _ _ (sym (‚â§‚Üímin·µ£ x (x +·µ£ h) (x‚â§x+h))) ‚â§x')))
          (‚â§·µ£Monotone+·µ£ _ _ _ _ x'‚â§ (-·µ£‚â§·µ£ _ _ (min‚â§·µ£ x (x +·µ£ h)))))
         where
          x‚â§x+h : x ‚â§·µ£ x +·µ£ h
          x‚â§x+h = isTrans‚â°‚â§·µ£ _ _ _ (sym (+IdR x))
                (‚â§·µ£-o+ _ _ x (<·µ£Weaken‚â§·µ£ _ _ 0<h))
      hh (inr h<0) =
        (isTrans‚â°‚â§·µ£ _ _ _
          (abs·µ£NonNeg _ ((x‚â§y‚Üí0‚â§y-x _ _
            (isTrans‚â§‚â°·µ£ _ _ _ x'‚â§ (max·µ£Comm x (x +·µ£ h) ‚àô
             (‚â§‚Üímax·µ£ (x +·µ£ h) x (x+h‚â§x)))))))
           (‚â§·µ£Monotone+·µ£ _ _ _ _ (‚â§max·µ£ x (x +·µ£ h))
            (-·µ£‚â§·µ£ _ _ ‚â§x'))
          )


       where
       x+h‚â§x : x +·µ£ h ‚â§·µ£ x
       x+h‚â§x = isTrans‚â§‚â°·µ£ _ _ _
             (‚â§·µ£-o+ _ _ x (<·µ£Weaken‚â§·µ£ _ _ h<0))
             (+IdR x)




 FTOC‚áê : ‚àÄ a b (a<b : a <·µ£ b) (f F : ‚Ñù ‚Üí ‚Ñù) ‚Üí ‚àÄ ucf
           ‚Üí uDerivativeOf‚Ñô (interval‚Ñô a b) , (Œª x _ ‚Üí F x) is (Œª x _ ‚Üí f x)
           ‚Üí fst (Integrate-UContinuous a b (<·µ£Weaken‚â§·µ£ _ _ a<b) f ucf)
               ‚â° F b -·µ£ F a
 FTOC‚áê a b a<b f F ucf udc =
   let a‚â§b = <·µ£Weaken‚â§·µ£ _ _ a<b
       z =
           subst2 (uDerivativeOf‚Ñô (pred‚â• a) ,_is_)
             (funExt‚ÇÇ Œª _ _ ‚Üí sym (-·µ£‚â°[-1¬∑·µ£] _))
             (funExt‚ÇÇ Œª _ _ ‚Üí sym (-·µ£‚â°[-1¬∑·µ£] _))
             (C¬∑uDerivative‚Ñô (pred‚â• a) -1 _ _ (FTOC‚áí a f ucf))


       f* : (r : ‚Ñù) ‚Üí r ‚àà interval‚Ñô a b ‚Üí ‚Ñù
       f* r r‚àà = -·µ£ (fst (Integrate-UContinuous a r (fst r‚àà) f ucf))
       zD : _
       zD = +uDerivative‚Ñô (interval‚Ñô a b) _ _
                f* (Œª x _ ‚Üí -·µ£ (f x))
              udc Œª Œµ ‚Üí
                PT.map (map-snd
                  (Œª X ‚Üí
                    Œª x x‚àà h h‚àà 0ÔºÉh x‚ÇÅ ‚Üí
                     X x (fst x‚àà) h (fst h‚àà) 0ÔºÉh x‚ÇÅ
                     ))
                  (z Œµ)
       b‚àà = a‚â§b , ‚â§·µ£-refl _
       a‚àà = ‚â§·µ£-refl _ , a‚â§b
       z' : F a ‚â° F b +·µ£ f* b b‚àà
       z' = sym (ùêë'.+IdR' _ _
             (cong -·µ£_
               (Integral'-empty a f _
                (snd (Integrate-UContinuous a a (‚â§·µ£-refl a) f ucf)))
               ‚àô -·µ£-rat 0))
             ‚àô nullDerivative‚Üíconst a b
                a‚àà b‚àà
                a<b (Œª r r‚àà ‚Üí F r +·µ£ f* r r‚àà)
                 (subst (uDerivativeOf‚Ñô (interval‚Ñô a b) ,
                   (Œª r r‚àà ‚Üí F r +·µ£ f* r r‚àà) is_)
                   (funExt‚ÇÇ (Œª _ _ ‚Üí +-·µ£ _)) zD)
   in sym Lùêë.lem--079
       ‚àô cong‚ÇÇ _-·µ£_ refl (sym z')

