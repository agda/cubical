module Cubical.Algebra.CommAlgebraAlt.Univalence where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Function
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.Structure using (‚ü®_‚ü©)
open import Cubical.Foundations.HLevels

open import Cubical.Data.Sigma

open import Cubical.Algebra.CommRing
open import Cubical.Algebra.CommRing.Univalence
open import Cubical.Algebra.CommAlgebraAlt.Base

private
  variable
    ‚Ñì ‚Ñì' ‚Ñì'' : Level

CommAlgebraPath : (R : CommRing ‚Ñì) ‚Üí (A B : CommAlgebra R ‚Ñì') ‚Üí (CommAlgebraEquiv A B) ‚âÉ (A ‚â° B)
CommAlgebraPath R A B = isoToEquiv (iso to {!!} {!!} {!!})
  where
    to : CommAlgebraEquiv A B ‚Üí A ‚â° B
    to e = Œ£‚â°Prop {!!} (CommRingPath (A .fst) (B .fst) .fst (e .fst))

{-
CommAlgebraPath : (R : CommRing ‚Ñì) ‚Üí (A B : CommAlgebra R ‚Ñì') ‚Üí (CommAlgebraEquiv A B) ‚âÉ (A ‚â° B)
CommAlgebraPath R = ‚à´ (ùíÆ·¥∞-CommAlgebra R) .UARel.ua

uaCommAlgebra : {R : CommRing ‚Ñì} {A B : CommAlgebra R ‚Ñì'} ‚Üí CommAlgebraEquiv A B ‚Üí A ‚â° B
uaCommAlgebra {R = R} {A = A} {B = B} = equivFun (CommAlgebraPath R A B)

isGroupoidCommAlgebra : {R : CommRing ‚Ñì} ‚Üí isGroupoid (CommAlgebra R ‚Ñì')
isGroupoidCommAlgebra A B = isOfHLevelRespectEquiv 2 (CommAlgebraPath _ _ _) (isSetAlgebraEquiv _ _)
-}
