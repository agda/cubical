module Cubical.Algebra.CommAlgebraAlt.Univalence where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Function
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.Structure using (‚ü®_‚ü©)
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Univalence

open import Cubical.Data.Sigma

open import Cubical.Algebra.CommRing
open import Cubical.Algebra.CommRing.Univalence
open import Cubical.Algebra.CommAlgebraAlt.Base

private
  variable
    ‚Ñì ‚Ñì' ‚Ñì'' : Level


module _ (R : CommRing ‚Ñì) where
  private
    to : (A B : CommAlgebra R ‚Ñì') ‚Üí CommAlgebraEquiv A B ‚Üí A ‚â° B
    to A B e = CommAlgebra‚â°
             r‚â°
             ((pathToEquiv $ cong fst r‚â°) .fst ‚àò A .snd .fst
                ‚â°‚ü® cong (_‚àò A .snd .fst) (cong fst $ pathToEquiv-ua (e .fst .fst) )  ‚ü©
              CommAlgebraEquiv‚ÜíCommRingHom e .fst ‚àò A .snd .fst
                ‚â°‚ü® cong fst (e .snd) ‚ü©
              B .snd .fst ‚àé)
           where r‚â° : (A .fst) ‚â° (B .fst)
                 r‚â° = CommRingPath (A .fst) (B .fst) .fst (e .fst)

    test : (A : CommAlgebra R ‚Ñì') ‚Üí to A A (idCAlgEquiv A) ‚â° refl
    test A = {!to A A (idCAlgEquiv A)!} ‚â°‚ü® {!!} ‚ü© ? ‚â°‚ü® {!!} ‚ü© refl ‚àé

    toIsEquiv : (A : CommAlgebra R ‚Ñì') {B' : CommAlgebra R ‚Ñì'} ‚Üí (p : A ‚â° B') ‚Üí isContr (fiber (to A B') p)
    toIsEquiv A =
      J (Œª B' A‚â°B' ‚Üí isContr (fiber (to A B') A‚â°B'))
        ((idCAlgEquiv A , {!test A!}) ,
          Œª {(e , toe‚â°refl) ‚Üí {!!}})

  CommAlgebraPath : (A B : CommAlgebra R ‚Ñì') ‚Üí (CommAlgebraEquiv A B) ‚âÉ (A ‚â° B)
  CommAlgebraPath {‚Ñì' = ‚Ñì'} A B = to A B , {!!}

{-
CommAlgebraPath : (R : CommRing ‚Ñì) ‚Üí (A B : CommAlgebra R ‚Ñì') ‚Üí (CommAlgebraEquiv A B) ‚âÉ (A ‚â° B)
CommAlgebraPath R = ‚à´ (ùíÆ·¥∞-CommAlgebra R) .UARel.ua

uaCommAlgebra : {R : CommRing ‚Ñì} {A B : CommAlgebra R ‚Ñì'} ‚Üí CommAlgebraEquiv A B ‚Üí A ‚â° B
uaCommAlgebra {R = R} {A = A} {B = B} = equivFun (CommAlgebraPath R A B)

isGroupoidCommAlgebra : {R : CommRing ‚Ñì} ‚Üí isGroupoid (CommAlgebra R ‚Ñì')
isGroupoidCommAlgebra A B = isOfHLevelRespectEquiv 2 (CommAlgebraPath _ _ _) (isSetAlgebraEquiv _ _)
-}
