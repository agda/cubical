module Cubical.Algebra.Ring.Instances.Int where

open import Cubical.Algebra.Ring.Instances.BiInvInt
open import Cubical.Foundations.Prelude

open import Cubical.Data.Int
import Cubical.Data.Int.MoreInts.BiInvInt as B
open import Cubical.Data.Nat
  hiding   (+-assoc ; +-comm ; ¬∑-comm)
  renaming (_¬∑_ to _¬∑‚Ñï_; _+_ to _+‚Ñï_ ; ¬∑-assoc to ¬∑‚Ñï-assoc)

open import Cubical.Algebra.CommRing.Base
open import Cubical.Algebra.Ring.Base
open import Cubical.Displayed.Base

private
  variable
    ‚Ñì ‚Ñì' : Level

‚Ñ§RawRingStr : RawRingStr ‚Ñ§
RawRingStr.0r ‚Ñ§RawRingStr = pos zero
RawRingStr.1r ‚Ñ§RawRingStr = pos (suc zero)
RawRingStr._+_ ‚Ñ§RawRingStr = _+_
RawRingStr._¬∑_ ‚Ñ§RawRingStr = _¬∑_
RawRingStr.- ‚Ñ§RawRingStr = -_

‚Ñ§RawRing : RawRing _
‚Ñ§RawRing = ‚Ñ§ ,  ‚Ñ§RawRingStr

‚Ñ§‚âÉBiInv‚Ñ§Hom : IsRawRingHom ‚Ñ§RawRingStr (B.‚Ñ§‚âÉBiInv‚Ñ§ .fst) BiInv‚Ñ§RawRingStr
IsRawRingHom.pres0 ‚Ñ§‚âÉBiInv‚Ñ§Hom = refl
IsRawRingHom.pres1 ‚Ñ§‚âÉBiInv‚Ñ§Hom = refl
IsRawRingHom.pres+ ‚Ñ§‚âÉBiInv‚Ñ§Hom x y = l x y where
  l1 : (n : ‚Ñï) ‚Üí (y : ‚Ñ§) ‚Üí B.‚Ñ§‚âÉBiInv‚Ñ§ .fst ((‚Ñ§RawRingStr RawRingStr.+ pos n) y) ‚â°
                           B.‚Ñ§‚âÉBiInv‚Ñ§ .fst (pos n) B.+ B.‚Ñ§‚âÉBiInv‚Ñ§ .fst y
  l1 zero y =  cong B.fwd (sym (pos0+ _))
  l1 (suc n) y =   cong B.fwd (sym (suc‚Ñ§+ (pos n) y))
                 ‚àô B.fwd-suc‚Ñ§ _
                 ‚àô cong B.suc (l1 n y)

  l2 : (n : ‚Ñï) ‚Üí (y : ‚Ñ§) ‚Üí B.‚Ñ§‚âÉBiInv‚Ñ§ .fst ((‚Ñ§RawRingStr RawRingStr.+ negsuc n) y) ‚â°
                          (BiInv‚Ñ§RawRingStr RawRingStr.+ B.‚Ñ§‚âÉBiInv‚Ñ§ .fst (negsuc n))
                          (B.‚Ñ§‚âÉBiInv‚Ñ§ .fst y)
  l2 zero y =   cong B.fwd (sym (pred‚Ñ§+ (pos zero) y))
              ‚àô B.fwd-pred‚Ñ§ (pos zero + y)
              ‚àô cong (Œª x ‚Üí B.predl (B.fwd x)) (sym (pos0+ _))
  l2 (suc n) y =   cong B.fwd (sym (pred‚Ñ§+ (negsuc n) y))
                 ‚àô B.fwd-pred‚Ñ§ (negsuc n + y)
                 ‚àô cong B.predl (l2 n y)

  l : ‚àÄ x ‚Üí ‚àÄ y ‚Üí B.‚Ñ§‚âÉBiInv‚Ñ§ .fst ((‚Ñ§RawRingStr RawRingStr.+ x) y) ‚â°
                    B.‚Ñ§‚âÉBiInv‚Ñ§ .fst x B.+ B.‚Ñ§‚âÉBiInv‚Ñ§ .fst y
  l (pos n) y = l1 n y
  l (negsuc n) y = l2 n y
IsRawRingHom.pres¬∑ ‚Ñ§‚âÉBiInv‚Ñ§Hom (pos n) y = l1 n y where
  l1 : ‚àÄ n ‚Üí ‚àÄ y ‚Üí  B.‚Ñ§‚âÉBiInv‚Ñ§ .fst ((‚Ñ§RawRingStr RawRingStr.¬∑ pos n) y) ‚â°
             B.‚Ñ§‚âÉBiInv‚Ñ§ .fst (pos n) B.¬∑ B.‚Ñ§‚âÉBiInv‚Ñ§ .fst y
  l1 zero y = refl
  l1 (suc n) y@(pos _) =   IsRawRingHom.pres+ ‚Ñ§‚âÉBiInv‚Ñ§Hom y (pos n ¬∑ y)
                          ‚àô cong (Œª x ‚Üí B.fwd y B.+ x) (l1 n y)
  l1 (suc n) y@(negsuc _) =   IsRawRingHom.pres+ ‚Ñ§‚âÉBiInv‚Ñ§Hom y (pos n ¬∑ y)
                             ‚àô cong (Œª x ‚Üí B.fwd y B.+ x) (l1 n y)
IsRawRingHom.pres¬∑ ‚Ñ§‚âÉBiInv‚Ñ§Hom (negsuc n) y = l1 n y where
   l1 : ‚àÄ n ‚Üí ‚àÄ y ‚Üí B.‚Ñ§‚âÉBiInv‚Ñ§ .fst ((‚Ñ§RawRingStr RawRingStr.¬∑ negsuc n) y) ‚â°
                    B.‚Ñ§‚âÉBiInv‚Ñ§ .fst (negsuc n) B.¬∑ B.‚Ñ§‚âÉBiInv‚Ñ§ .fst y
   l1 zero y@(pos _)    = IsRawRingHom.pres- ‚Ñ§‚âÉBiInv‚Ñ§Hom y ‚àô sym (B.+-zero ((B.-_ (B.fwd y))))
   l1 zero y@(negsuc _) = IsRawRingHom.pres- ‚Ñ§‚âÉBiInv‚Ñ§Hom y ‚àô sym (B.+-zero ((B.-_ (B.fwd y))))
   l1 (suc n) y@(pos _)    =   IsRawRingHom.pres+ ‚Ñ§‚âÉBiInv‚Ñ§Hom (- y) ((negsuc n) ¬∑ y)
                             ‚àô cong‚ÇÇ (Œª a b ‚Üí a B.+ b)
                                 (IsRawRingHom.pres- ‚Ñ§‚âÉBiInv‚Ñ§Hom y)
                                 (l1 n y)
   l1 (suc n) y@(negsuc _) =   IsRawRingHom.pres+ ‚Ñ§‚âÉBiInv‚Ñ§Hom (- y) ((negsuc n) ¬∑ y)
                             ‚àô cong‚ÇÇ (Œª a b ‚Üí a B.+ b)
                                 (IsRawRingHom.pres- ‚Ñ§‚âÉBiInv‚Ñ§Hom y)
                                 (l1 n y)
IsRawRingHom.pres- ‚Ñ§‚âÉBiInv‚Ñ§Hom (pos n) = l1 n where
  l1 : ‚àÄ n ‚Üí B.‚Ñ§‚âÉBiInv‚Ñ§ .fst ((RawRingStr.- ‚Ñ§RawRingStr) (pos n)) ‚â°
      (      B.- B.‚Ñ§‚âÉBiInv‚Ñ§ .fst (pos n))
  l1 zero = refl
  l1 (suc zero) = refl
  l1 (suc (suc n)) = cong B.pred (l1 (suc n))
IsRawRingHom.pres- ‚Ñ§‚âÉBiInv‚Ñ§Hom (negsuc n) = l1 n where
  l1 : ‚àÄ n ‚Üí B.‚Ñ§‚âÉBiInv‚Ñ§ .fst ((RawRingStr.- ‚Ñ§RawRingStr) (negsuc n)) ‚â°
             (B.- B.‚Ñ§‚âÉBiInv‚Ñ§ .fst (negsuc n))
  l1 zero = refl
  l1 (suc n) = cong B.suc (l1 n)

‚Ñ§RawRing‚â°BiInv‚Ñ§RawRing : ‚Ñ§RawRing ‚â° BiInv‚Ñ§RawRing
‚Ñ§RawRing‚â°BiInv‚Ñ§RawRing = UARel.ua (‚à´ ùíÆ·¥∞-RawRing) _ _ .fst (B.‚Ñ§‚âÉBiInv‚Ñ§  , ‚Ñ§‚âÉBiInv‚Ñ§Hom)

‚Ñ§RingStr : RingStr ‚Ñ§
RingStr.rawRingStr ‚Ñ§RingStr = ‚Ñ§RawRingStr 
RingStr.isRing ‚Ñ§RingStr = subst (Œª (_ , y) ‚Üí IsRing y) (sym ‚Ñ§RawRing‚â°BiInv‚Ñ§RawRing) BiInv‚Ñ§IsRing

‚Ñ§Ring : Ring _
‚Ñ§Ring = ‚Ñ§ , ‚Ñ§RingStr

‚Ñ§Ring‚â°BiInv‚Ñ§Ring : ‚Ñ§Ring ‚â° BiInv‚Ñ§Ring
‚Ñ§Ring‚â°BiInv‚Ñ§Ring = UARel.ua (‚à´ ùíÆ·¥∞-Ring) _ _ .fst (B.‚Ñ§‚âÉBiInv‚Ñ§  , isringhom ‚Ñ§‚âÉBiInv‚Ñ§Hom)

‚Ñ§CommRingStr : CommRingStr ‚Ñ§
CommRingStr.ringStr ‚Ñ§CommRingStr = ‚Ñ§RingStr
CommRingStr.isCommRing ‚Ñ§CommRingStr = subst (Œª (_ , y) ‚Üí IsCommRing y) (sym ‚Ñ§Ring‚â°BiInv‚Ñ§Ring) BiInv‚Ñ§IsCommRing

‚Ñ§CommRing : CommRing _
‚Ñ§CommRing = _ , ‚Ñ§CommRingStr

‚Ñ§CommRing‚â°BiInv‚Ñ§CommRing : ‚Ñ§CommRing ‚â° BiInv‚Ñ§CommRing
‚Ñ§CommRing‚â°BiInv‚Ñ§CommRing = UARel.ua (‚à´ ùíÆ·¥∞-CommRing) _ _ .fst (B.‚Ñ§‚âÉBiInv‚Ñ§  , iscommringhom (isringhom ‚Ñ§‚âÉBiInv‚Ñ§Hom))
