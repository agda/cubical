{-# OPTIONS --cubical #-}

-- PolynomialRingZ.agda
module PolynomialRingZ where

open import Agda.Primitive.Cubical
open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Algebra.Polynomials.UnivariateList.Properties 
open import Cubical.Algebra.Polynomials.UnivariateList.Base
open import Cubical.Data.Int.Properties
open import Cubical.Algebra.CommRing 
open import Cubical.Data.Int.Base renaming ( _+_ to _+‚Ñ§_ ; _¬∑_ to _¬∑‚Ñ§_; -_ to -‚Ñ§_)
open import Cubical.Data.Nat renaming (_+_ to _+‚Ñï_ ; _¬∑_ to _¬∑‚Ñï_ ; isZero to isZero‚Ñï ; isEven to isEven‚Ñï ; isOdd to isOdd‚Ñï)
open import Cubical.Data.Prod
open import Cubical.Data.Sum
open import Cubical.Data.Bool
open import Cubical.Data.Empty renaming (rec to ‚ä•-elim)
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Prelude
open import Cubical.Algebra.CommRing.Base
open import Cubical.Algebra.CommRing.Instances.Polynomials.UnivariatePolyList
open import Cubical.Data.Bool
open import Cubical.Data.Empty
open import Cubical.Tactics.CommRingSolver
open import Cubical.HITs.PropositionalTruncation.Base
open import ExplMaxIdeal

{- record Inspect {A : Set} (x : A) : Set where
  constructor what
  field
      it : A
      it-eq : x ‚â° it

inspect : ‚àÄ {A : Set} (x : A) ‚Üí Inspect x
inspect x = what x refl -}
  
-- ‚Ñ§ is a commutative ring --

isCommRing‚Ñ§ : IsCommRing (pos 0) (pos 1) _+‚Ñ§_ _¬∑‚Ñ§_ -‚Ñ§_
isCommRing‚Ñ§ = makeIsCommRing
  isSet‚Ñ§
  +Assoc     
  (Œª x ‚Üí refl)     
  -Cancel     
  +Comm      
  ¬∑Assoc     
  ¬∑IdR
  ¬∑DistR+
  ¬∑Comm

‚Ñ§CommRingStr : CommRingStr ‚Ñ§
‚Ñ§CommRingStr = record
  { 0r = pos 0
  ; 1r = pos 1
  ; _+_ = _+‚Ñ§_
  ; _¬∑_ = _¬∑‚Ñ§_
  ; -_ = -‚Ñ§_
  ; isCommRing = isCommRing‚Ñ§
  }

‚Ñ§CommRing : CommRing Agda.Primitive.lzero
‚Ñ§CommRing = ‚Ñ§ , ‚Ñ§CommRingStr

isZero : ‚Ñ§ ‚Üí Bool
isZero (pos n) = isZero‚Ñï n
isZero (‚Ñ§.negsuc n) = false

-- Polynomial ring over ‚Ñ§ is a commutative ring --

module PolyRing‚Ñ§ = PolyModTheory ‚Ñ§CommRing renaming (_Poly+_ to _+P_; Poly- to -P_; _Poly*_ to _¬∑P_)
module PolyMod‚Ñ§ = PolyMod ‚Ñ§CommRing
open PolyMod ‚Ñ§CommRing

‚Ñ§[X] : Type
‚Ñ§[X] = Poly ‚Ñ§CommRing

TestPolynom1 : ‚Ñ§[X]
TestPolynom1 = pos 3 ‚à∑ pos 1 ‚à∑ pos 1 ‚à∑ []

isCommRing‚Ñ§[X] : IsCommRing [] (pos 1 ‚à∑ []) PolyRing‚Ñ§._+P_ PolyRing‚Ñ§._¬∑P_ PolyRing‚Ñ§.-P_
isCommRing‚Ñ§[X] = makeIsCommRing
  PolyMod‚Ñ§.isSetPoly
  PolyRing‚Ñ§.Poly+Assoc
  (Œª x ‚Üí refl)     
  PolyRing‚Ñ§.Poly+Inverses     
  PolyRing‚Ñ§.Poly+Comm      
  PolyRing‚Ñ§.Poly*Associative     
  PolyRing‚Ñ§.Poly*Rid
  PolyRing‚Ñ§.Poly*LDistrPoly+
  PolyRing‚Ñ§.Poly*Commutative 

‚Ñ§[X]CommRingStr : CommRingStr (Poly ‚Ñ§CommRing)
‚Ñ§[X]CommRingStr = record
  { 0r = []
  ; 1r =  pos 1 ‚à∑ []
  ; _+_ = PolyRing‚Ñ§._+P_
  ; _¬∑_ = PolyRing‚Ñ§._¬∑P_
  ; -_ =  PolyRing‚Ñ§.-P_
  ; isCommRing = isCommRing‚Ñ§[X]
  }

‚Ñ§[X]CommRing : CommRing Agda.Primitive.lzero
‚Ñ§[X]CommRing = record
  { fst = Poly ‚Ñ§CommRing
  ; snd = ‚Ñ§[X]CommRingStr
  }

open ExplMaxIdeal.ExplMaxIdeal ‚Ñì-zero ‚Ñ§[X]CommRing


data ùïå : Set where
  u : ùïå

X : ‚Ñ§[X]
X = pos 0 ‚à∑ pos 1 ‚à∑ []

isPos : ‚Ñï ‚Üí Bool
isPos (suc n) = true
isPos zero = false

suc‚â¢zero : {n : ‚Ñï} ‚Üí  suc n ‚â° 0 ‚Üí ‚ä•
suc‚â¢zero eq = true‚â¢false (cong isPos eq)

possuc‚â¢poszero : {n : ‚Ñï} ‚Üí  (pos (suc n)) ‚â° (pos 0) ‚Üí ‚ä•
possuc‚â¢poszero {n} eq = true‚â¢false (cong isPosSuc eq)
  where 
  isPosSuc : ‚Ñ§ ‚Üí Bool
  isPosSuc (pos zero) = false
  isPosSuc (pos (suc n)) = true
  isPosSuc (negsuc n) = true

negsuc‚â¢poszero : {n : ‚Ñï} ‚Üí  negsuc n  ‚â° (pos 0) ‚Üí ‚ä•
negsuc‚â¢poszero {n} eq = true‚â¢false (cong isPosSuc eq)
  where 
  isPosSuc : ‚Ñ§ ‚Üí Bool
  isPosSuc (pos zero) = false
  isPosSuc (pos (suc n)) = true
  isPosSuc (negsuc n) = true
  
degSeq : (‚Ñï ‚Üí ‚Ñ§) ‚Üí ‚Ñï ‚Üí ‚Ñ§
degSeq f m with (f m)
degSeq f zero | pos zero = negsuc 0
degSeq f (suc m) | pos zero = degSeq f m
degSeq f m | pos (suc n) = pos m
degSeq f m | negsuc n = pos m

_‚â§‚Ñï_ : ‚Ñï ‚Üí ‚Ñï ‚Üí Bool
zero ‚â§‚Ñï m = true
suc n ‚â§‚Ñï zero = false
suc n ‚â§‚Ñï suc m = n ‚â§‚Ñï m

{- lemma1 : {m : ‚Ñï} ‚Üí (m ‚â§‚Ñï 0) ‚â° true ‚Üí m ‚â° 0
lemma1 {zero} le = refl
lemma1 {suc m} le = ‚ä•-elim (true‚â¢false (sym le))-}

degAux1 : (m : ‚Ñï) ‚Üí (p : ‚Ñ§[X]) ‚Üí
       ((m‚ÇÅ : ‚Ñï) ‚Üí true ‚â° true ‚Üí PolyMod.Poly‚ÜíFun (‚Ñ§ , ‚Ñ§CommRingStr) p m‚ÇÅ ‚â° pos 0) ‚Üí
       (if isZero‚Ñï m then pos zero else  PolyMod.Poly‚ÜíFun (‚Ñ§ , ‚Ñ§CommRingStr) p (pred‚Ñï m)) ‚â° pos 0
degAux1 zero p x = refl
degAux1 (suc m) p x = x m refl

degAux : (p : ‚Ñ§[X]) ‚Üí Œ£ ‚Ñï (Œª n ‚Üí ((m : ‚Ñï) ‚Üí (n ‚â§‚Ñï m ‚â° true) ‚Üí (Poly‚ÜíFun p m ‚â° pos 0)) √ó ((n ‚â° 0) ‚äé (Poly‚ÜíFun p (pred‚Ñï n) ‚â° pos 0 ‚Üí ‚ä•)))
degAux [] = 0 , (Œª m le ‚Üí refl) , inl refl
degAux (a ‚à∑ p) with (degAux p)
degAux (pos zero ‚à∑ p) | zero , (x , x‚ÇÅ) = 0 , ((Œª m x‚ÇÇ ‚Üí degAux1 m p x)  , inl refl)
degAux (pos (suc n) ‚à∑ p) | zero , (x , inl x‚ÇÅ) = 1 , ((Œª m x‚ÇÇ ‚Üí lemma m x‚ÇÇ) , (inr possuc‚â¢poszero))
  where
  lemma : (m : ‚Ñï) ‚Üí (1 ‚â§‚Ñï m) ‚â° true ‚Üí (if isZero‚Ñï m then pos (suc n) else PolyMod.Poly‚ÜíFun (‚Ñ§ , ‚Ñ§CommRingStr) p (pred‚Ñï m)) ‚â° pos 0
  lemma zero x‚ÇÇ = ‚ä•-elim (true‚â¢false (sym x‚ÇÇ))
  lemma (suc n) x‚ÇÇ = x n refl
degAux (pos (suc n) ‚à∑ p) | zero , (x , inr x‚ÇÅ) = 0 , ((Œª m x‚ÇÇ ‚Üí ‚ä•-elim (x‚ÇÅ (x zero refl))) , inl refl)
degAux (negsuc n ‚à∑ p) | zero , (x , inl x‚ÇÅ) = 1 , ((Œª m x‚ÇÇ ‚Üí lemma m x‚ÇÇ) , inr negsuc‚â¢poszero)
 where
  lemma : (m : ‚Ñï) ‚Üí (1 ‚â§‚Ñï m) ‚â° true ‚Üí (if isZero‚Ñï m then (negsuc n) else PolyMod.Poly‚ÜíFun (‚Ñ§ , ‚Ñ§CommRingStr) p (pred‚Ñï m)) ‚â° pos 0
  lemma zero x‚ÇÇ = ‚ä•-elim (true‚â¢false (sym x‚ÇÇ))
  lemma (suc n) x‚ÇÇ = x n refl
degAux (negsuc n ‚à∑ p) | zero , (x , inr x‚ÇÅ) = 0 , ((Œª m x‚ÇÇ ‚Üí ‚ä•-elim (x‚ÇÅ (x zero refl))) , inl refl)
degAux (a ‚à∑ p)            | suc fst‚ÇÅ , (eq , inl x‚ÇÅ) = ‚ä•-elim (suc‚â¢zero x‚ÇÅ)
degAux (pos n ‚à∑ p)        | suc fst‚ÇÅ , (eq , inr x‚ÇÅ) = suc (suc fst‚ÇÅ) , ((Œª m x ‚Üí lemma m x) , (inr x‚ÇÅ))
  where
  lemma : (m : ‚Ñï) ‚Üí ((suc (suc fst‚ÇÅ) ‚â§‚Ñï m) ‚â° true) ‚Üí (if isZero‚Ñï m then pos n else PolyMod.Poly‚ÜíFun (‚Ñ§ , ‚Ñ§CommRingStr) p (pred‚Ñï m)) ‚â° pos 0
  lemma zero x = ‚ä•-elim (true‚â¢false (sym x))
  lemma (suc m) x = eq m x
degAux (negsuc n ‚à∑ p)     | suc fst‚ÇÅ , (eq , inr x‚ÇÅ) = suc (suc fst‚ÇÅ) , ((Œª m x ‚Üí lemma m x) , (inr x‚ÇÅ))
  where
  lemma : (m : ‚Ñï) ‚Üí ((suc (suc fst‚ÇÅ) ‚â§‚Ñï m) ‚â° true) ‚Üí (if isZero‚Ñï m then (negsuc n) else PolyMod.Poly‚ÜíFun (‚Ñ§ , ‚Ñ§CommRingStr) p (pred‚Ñï m)) ‚â° pos 0
  lemma zero x = ‚ä•-elim (true‚â¢false (sym x))
  lemma (suc m) x = eq m x
degAux (drop0 i) = 0 , lemma i 
  where
  lemma : (i : I) ‚Üí ((m : ‚Ñï) ‚Üí (0 ‚â§‚Ñï m ‚â° true) ‚Üí (Poly‚ÜíFun (drop0 i) m ‚â° pos 0)) √ó ((0 ‚â° 0) ‚äé (Poly‚ÜíFun (drop0 i) 0 ‚â° pos 0 ‚Üí ‚ä•))
  lemma i = (Œª m x i‚ÇÅ ‚Üí subLemma i zero) , inl refl
    where
    subLemma : (Œª n ‚Üí if isZero n then pos 0 else pos 0) ‚â° (Œª _ ‚Üí pos 0)
    subLemma i n = pos 0
    subLemma i n = pos 0

deg : ‚Ñ§[X] ‚Üí ‚Ñï
deg p = {!!}

_+P_ = PolyRing‚Ñ§._+P_
_¬∑P_ = PolyRing‚Ñ§._¬∑P_
-P_ = PolyRing‚Ñ§.-P_

LC : ‚Ñ§[X] ‚Üí ‚Ñ§
LC [] = pos 0
LC (a ‚à∑ p) = if isZero (LC p) then a else LC p  
LC (drop0 i) = pos 0

{- LCnegZero : (p : ‚Ñ§[X]) ‚Üí (n : ‚Ñï) ‚Üí (deg p ‚â° pos n) ‚Üí Poly‚ÜíFun p n ‚â° pos 0 ‚Üí ‚ä•
LCnegZero [] n eq eq0r =  pos‚â¢neg (sym eq)
LCnegZero (a ‚à∑ p) zero eq eq0r = {!!}
LCnegZero (a ‚à∑ p) (suc n) eq eq0r = {!!}
LCnegZero (drop0 i) n eq eq0r = {!!} -}

{- degToZero : (f : ‚Ñ§[X]) ‚Üí deg f ‚â° negsuc 0 ‚Üí f ‚â° []
degToZero [] eq = refl
degToZero (a ‚à∑ f) eq with inspect (deg (a ‚à∑ f)) 
... | what (pos zero) it-eq = {!!}
... | what (pos (suc n)) it-eq = {!!}
... | what (negsuc n) it-eq = {!!}
degToZero (drop0 i) eq = (Œª i‚ÇÅ ‚Üí  (drop0 (primIMax i i‚ÇÅ))) -}

_‚â§‚Ñ§_ : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí Bool
pos n ‚â§‚Ñ§ pos m = n ‚â§‚Ñï m
pos n ‚â§‚Ñ§ negsuc m = false
negsuc n ‚â§‚Ñ§ pos m = true
negsuc n ‚â§‚Ñ§ negsuc m = m ‚â§‚Ñï n

{- Lemma5a : (f : ‚Ñ§[X]) ‚Üí pos 0 ‚â§‚Ñ§ deg ((X ¬∑P f) +P (-P (pos 1 ‚à∑ []))) ‚â° true
Lemma5a [] = refl
Lemma5a (a ‚à∑ f) = {!!}
Lemma5a (drop0 i) = {!!}

Lemma5 : (M : ‚Ñ§[X] ‚Üí Bool) ‚Üí (ŒΩ : R ‚Üí R) ‚Üí  WitnessNotMaximalIdeal M ŒΩ ‚äé Œ£ ‚Ñ§[X] (Œª f ‚Üí ((pos 0 ‚â§‚Ñ§ deg f) ‚â° true) √ó (M f ‚â° true))
Lemma5 M ŒΩ with inspect (M X)
... | what true it-eq = inr (X , (refl , it-eq))
... | what false it-eq with inspect (M ((X ¬∑P (ŒΩ X)) +P (-P (pos 1 ‚à∑ []))) )
... | what false it-eq‚ÇÅ = inl (notMax X it-eq it-eq‚ÇÅ)
... | what true it-eq‚ÇÅ = inr (((X ¬∑P (ŒΩ X)) +P (-P (pos 1 ‚à∑ []))) , ({!!} , it-eq‚ÇÅ)) -}

