{-# OPTIONS --safe --experimental-lossy-unification #-}

module Cubical.ZCohomology.CohomologyRings.KleinBottle where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Function
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.Transport
open import Cubical.Foundations.HLevels

open import Cubical.Relation.Nullary

open import Cubical.Data.Empty as ‚ä•
open import Cubical.Data.Unit
open import Cubical.Data.Bool
open import Cubical.Data.Nat using (‚Ñï ; zero ; suc ; discrete‚Ñï ; suc-pred‚Ñï ; +-comm)
open import Cubical.Data.Int
open import Cubical.Data.Int.IsEven
open import Cubical.Data.Sigma
open import Cubical.Data.Sum
open import Cubical.Data.Vec
open import Cubical.Data.FinData

open import Cubical.Algebra.Group
open import Cubical.Algebra.Group.Morphisms
open import Cubical.Algebra.Group.MorphismProperties
open import Cubical.Algebra.AbGroup
open import Cubical.Algebra.Group.Instances.Unit
open import Cubical.Algebra.Group.Instances.Bool
open import Cubical.Algebra.Group.Instances.Int
open import Cubical.Algebra.DirectSum.DirectSumHIT.Base
open import Cubical.Algebra.Ring

open import Cubical.Algebra.CommRing
open import Cubical.Algebra.CommRing.FGIdeal
open import Cubical.Algebra.CommRing.QuotientRing
open import Cubical.Algebra.CommRing.Instances.Int renaming (‚Ñ§CommRing to ‚Ñ§CR)
open import Cubical.Algebra.CommRing.Instances.Polynomials.MultivariatePoly
open import Cubical.Algebra.CommRing.Instances.Polynomials.MultivariatePoly-Quotient
open import Cubical.Algebra.CommRing.Instances.Polynomials.MultivariatePoly-notationZ

open import Cubical.HITs.Truncation
open import Cubical.HITs.SetTruncation as ST
open import Cubical.HITs.PropositionalTruncation as PT
open import Cubical.HITs.SetQuotients as SQ renaming (_/_ to _/sq_)
open import Cubical.HITs.KleinBottle

open import Cubical.ZCohomology.Base
open import Cubical.ZCohomology.GroupStructure
open import Cubical.ZCohomology.RingStructure.CupProduct
open import Cubical.ZCohomology.RingStructure.RingLaws
open import Cubical.ZCohomology.RingStructure.CohomologyRing
open import Cubical.ZCohomology.Groups.KleinBottle
open import Cubical.ZCohomology.CohomologyRings.CupProductProperties

open Iso


{- Convention over ‚Ñ§[X,Y]
   X : (1,0)
   Y : (0,1)
-}

module Equiv-K¬≤-Properties
  (e‚ÇÅ : GroupIso ‚Ñ§Group (coHomGr 1 KleinBottle))
  (e‚ÇÇ : GroupIso BoolGroup (coHomGr 2 KleinBottle))
  where


-----------------------------------------------------------------------------
-- Definitions, Import with notations, Partition

  -- Definition
  private
    ‚Ñ§AG = Ring‚ÜíAbGroup (CommRing‚ÜíRing ‚Ñ§CR)

  <X¬≤,XY,2Y,Y¬≤> : FinVec ‚Ñ§[x,y] 4
  <X¬≤,XY,2Y,Y¬≤> zero  = base (2 ‚à∑ 0 ‚à∑ []) 1
  <X¬≤,XY,2Y,Y¬≤> one   = base (1 ‚à∑ 1 ‚à∑ []) 1
  <X¬≤,XY,2Y,Y¬≤> two   = base (0 ‚à∑ 1 ‚à∑ []) 2
  <X¬≤,XY,2Y,Y¬≤> three = base (0 ‚à∑ 2 ‚à∑ []) 1

  ‚Ñ§[X,Y]/<X¬≤,XY,2Y,Y¬≤> : CommRing ‚Ñì-zero
  ‚Ñ§[X,Y]/<X¬≤,XY,2Y,Y¬≤> = PolyCommRing-Quotient ‚Ñ§CR <X¬≤,XY,2Y,Y¬≤>

  ‚Ñ§[x,y]/<x¬≤,xy,2y,y¬≤> : Type ‚Ñì-zero
  ‚Ñ§[x,y]/<x¬≤,xy,2y,y¬≤> = fst ‚Ñ§[X,Y]/<X¬≤,XY,2Y,Y¬≤>

  -- Import with notation
  open IsGroupHom
  open gradedRingProperties

  open CommRingStr (snd ‚Ñ§CR) using ()
    renaming
    ( 0r        to 0‚Ñ§
    ; 1r        to 1‚Ñ§
    ; _+_       to _+‚Ñ§_
    ; -_        to -‚Ñ§_
    ; _¬∑_       to _¬∑‚Ñ§_
    ; +Assoc    to +‚Ñ§Assoc
    ; +IdL      to +‚Ñ§IdL
    ; +IdR      to +‚Ñ§IdR
    ; +Comm     to +‚Ñ§Comm
    ; ¬∑Assoc    to ¬∑‚Ñ§Assoc
    ; ¬∑IdL      to ¬∑‚Ñ§IdL
    ; ¬∑IdR      to ¬∑‚Ñ§IdR
    ; ¬∑DistR+   to ¬∑‚Ñ§DistR+
    ; ¬∑Comm     to ¬∑‚Ñ§Comm
    ; is-set    to isSet‚Ñ§     )

  open RingStr (snd (H*R KleinBottle)) using ()
    renaming
    ( 0r        to 0H*
    ; 1r        to 1H*
    ; _+_       to _+H*_
    ; -_        to -H*_
    ; _¬∑_       to _cup_
    ; +Assoc    to +H*Assoc
    ; +IdL      to +H*IdL
    ; +IdR      to +H*IdR
    ; +Comm     to +H*Comm
    ; ¬∑Assoc    to ¬∑H*Assoc
    ; ¬∑IdL      to ¬∑H*IdL
    ; ¬∑IdR      to ¬∑H*IdR
    ; ¬∑DistR+   to ¬∑H*DistR+
    ; is-set    to isSetH*     )

  open CommRingStr (snd ‚Ñ§[X,Y]) using ()
    renaming
    ( 0r        to 0P‚Ñ§
    ; 1r        to 1P‚Ñ§
    ; _+_       to _+P‚Ñ§_
    ; -_        to -P‚Ñ§_
    ; _¬∑_       to _¬∑P‚Ñ§_
    ; +Assoc    to +P‚Ñ§Assoc
    ; +IdL      to +P‚Ñ§IdL
    ; +IdR      to +P‚Ñ§IdR
    ; +Comm     to +P‚Ñ§Comm
    ; ¬∑Assoc    to ¬∑P‚Ñ§Assoc
    ; ¬∑IdL      to ¬∑P‚Ñ§IdL
    ; ¬∑IdR      to ¬∑P‚Ñ§IdR
    ; ¬∑Comm     to ¬∑P‚Ñ§Comm
    ; ¬∑DistR+   to ¬∑P‚Ñ§DistR+
    ; is-set    to isSetP‚Ñ§     )

  open CommRingStr (snd ‚Ñ§[X,Y]/<X¬≤,XY,2Y,Y¬≤>) using ()
    renaming
    ( 0r        to 0P‚Ñ§I
    ; 1r        to 1P‚Ñ§I
    ; _+_       to _+P‚Ñ§I_
    ; -_        to -P‚Ñ§I_
    ; _¬∑_       to _¬∑P‚Ñ§I_
    ; +Assoc    to +P‚Ñ§IAssoc
    ; +IdL      to +P‚Ñ§IIdL
    ; +IdR      to +P‚Ñ§IIdR
    ; +Comm     to +P‚Ñ§IComm
    ; ¬∑Assoc    to ¬∑P‚Ñ§IAssoc
    ; ¬∑IdL      to ¬∑P‚Ñ§IIdL
    ; ¬∑IdR      to ¬∑P‚Ñ§IIdR
    ; ¬∑DistR+   to ¬∑P‚Ñ§IDistR+
    ; is-set    to isSetP‚Ñ§I     )


  e‚ÇÄ = invGroupIso H‚Å∞-ùïÇ¬≤‚âÖ‚Ñ§
  œï‚ÇÄ = fun (fst e‚ÇÄ)
  œï‚ÇÄstr = snd e‚ÇÄ
  œï‚ÇÄ‚Åª¬π = inv (fst e‚ÇÄ)
  œï‚ÇÄ‚Åª¬πstr = snd (invGroupIso e‚ÇÄ)
  œï‚ÇÄ-sect = rightInv (fst e‚ÇÄ)
  œï‚ÇÄ-retr = leftInv (fst e‚ÇÄ)

  œï‚ÇÅ = fun (fst e‚ÇÅ)
  œï‚ÇÅstr = snd e‚ÇÅ
  œï‚ÇÅ‚Åª¬π = inv (fst e‚ÇÅ)
  œï‚ÇÅ‚Åª¬πstr = snd (invGroupIso e‚ÇÅ)
  œï‚ÇÅ-sect = rightInv (fst e‚ÇÅ)
  œï‚ÇÅ-retr = leftInv (fst e‚ÇÅ)

  œï‚ÇÇ = fun (fst e‚ÇÇ)
  œï‚ÇÇstr = snd e‚ÇÇ
  œï‚ÇÇ‚Åª¬π = inv (fst e‚ÇÇ)
  œï‚ÇÇ‚Åª¬πstr = snd (invGroupIso e‚ÇÇ)
  œï‚ÇÇ-sect = rightInv (fst e‚ÇÇ)
  œï‚ÇÇ-retr = leftInv (fst e‚ÇÇ)

  module PblComp
    (null-H¬π  : (a b : ‚Ñ§) ‚Üí (œï‚ÇÅ a) ‚å£  (œï‚ÇÅ b) ‚â° 0‚Çï 2)
    where

  -----------------------------------------------------------------------------
  -- Direct Sens on ‚Ñ§[x,y]

    œà‚ÇÇ : ‚Ñ§ ‚Üí Bool
    œà‚ÇÇ = isEven

    œï‚ÇÇ‚àòœà‚ÇÇstr : IsGroupHom (snd ‚Ñ§Group) (œï‚ÇÇ ‚àò œà‚ÇÇ) (snd (coHomGr 2 KleinBottle))
    œï‚ÇÇ‚àòœà‚ÇÇstr = isGroupHomComp (œà‚ÇÇ , isEven-GroupMorphism) (œï‚ÇÇ , œï‚ÇÇstr)

    ‚Ñ§[x,y]‚ÜíH*-ùïÇ¬≤ : ‚Ñ§[x,y] ‚Üí H* KleinBottle
    ‚Ñ§[x,y]‚ÜíH*-ùïÇ¬≤ = DS-Rec-Set.f _ _ _ _ isSetH*
                        0H*
                        œï
                        _+H*_
                        +H*Assoc
                        +H*IdR
                        +H*Comm
                        base-neutral-eq
                        base-add-eq
     where
     œï : _
     œï (zero        ‚à∑ zero        ‚à∑ []) a = base 0 (œï‚ÇÄ a)
     œï (zero        ‚à∑ one         ‚à∑ []) a = base 2 ((œï‚ÇÇ ‚àò œà‚ÇÇ) a)
     œï (zero        ‚à∑ suc (suc m) ‚à∑ []) a = 0H*
     œï (one         ‚à∑ zero        ‚à∑ []) a = base 1 (œï‚ÇÅ a)
     œï (one         ‚à∑ suc m       ‚à∑ []) a = 0H*
     œï (suc (suc n) ‚à∑ m           ‚à∑ []) a = 0H*

     base-neutral-eq : _
     base-neutral-eq (zero        ‚à∑ zero        ‚à∑ []) = cong (base 0) (pres1 œï‚ÇÄstr) ‚àô base-neutral _
     base-neutral-eq (zero        ‚à∑ one         ‚à∑ []) = cong (base 2) (pres1 œï‚ÇÇ‚àòœà‚ÇÇstr) ‚àô base-neutral _
     base-neutral-eq (zero        ‚à∑ suc (suc m) ‚à∑ []) = refl
     base-neutral-eq (one         ‚à∑ zero        ‚à∑ []) = cong (base 1) (pres1 œï‚ÇÅstr) ‚àô base-neutral _
     base-neutral-eq (one         ‚à∑ suc m       ‚à∑ []) = refl
     base-neutral-eq (suc (suc n) ‚à∑ m           ‚à∑ []) = refl

     base-add-eq : _
     base-add-eq (zero        ‚à∑ zero        ‚à∑ []) a b = base-add _ _ _ ‚àô cong (base 0) (sym (pres¬∑ œï‚ÇÄstr _ _))
     base-add-eq (zero        ‚à∑ one         ‚à∑ []) a b = base-add _ _ _ ‚àô cong (base 2) (sym (pres¬∑ œï‚ÇÇ‚àòœà‚ÇÇstr _ _))
     base-add-eq (zero        ‚à∑ suc (suc m) ‚à∑ []) a b = +H*IdR _
     base-add-eq (one         ‚à∑ zero        ‚à∑ []) a b = base-add _ _ _ ‚àô cong (base 1) (sym (pres¬∑ œï‚ÇÅstr _ _))
     base-add-eq (one         ‚à∑ suc m       ‚à∑ []) a b = +H*IdR _
     base-add-eq (suc (suc n) ‚à∑ m           ‚à∑ []) a b = +H*IdR _

  -----------------------------------------------------------------------------
  -- Morphism on ‚Ñ§[x]

    ‚Ñ§[x,y]‚ÜíH*-ùïÇ¬≤-pres1 : ‚Ñ§[x,y]‚ÜíH*-ùïÇ¬≤ (1P‚Ñ§) ‚â° 1H*
    ‚Ñ§[x,y]‚ÜíH*-ùïÇ¬≤-pres1 = refl

    ‚Ñ§[x,y]‚ÜíH*-ùïÇ¬≤-pres+ : (x y : ‚Ñ§[x,y]) ‚Üí ‚Ñ§[x,y]‚ÜíH*-ùïÇ¬≤ (x +P‚Ñ§ y) ‚â° ‚Ñ§[x,y]‚ÜíH*-ùïÇ¬≤ x +H* ‚Ñ§[x,y]‚ÜíH*-ùïÇ¬≤ y
    ‚Ñ§[x,y]‚ÜíH*-ùïÇ¬≤-pres+ x y = refl

    --           Explanation of the product proof
    --
    --           -------------------------------------------------------
    --           | (0,0) | (0,1) | (0,m+2) | (1,0) | (1,m+1) | (n+2,m) |
    -- -----------------------------------------------------------------
    -- | (0,0)   |   H‚Å∞  |   H‚Å∞  |    0    |   H‚Å∞  |    0    |    0    |
    -- -----------------------------------------------------------------
    -- | (0,1)   |  Sym  |   0‚ÇÑ  |    0    |   0‚ÇÉ  |    0    |    0    |
    -- -----------------------------------------------------------------
    -- | (0,m+2) | ==========================================> triv    |
    -- -----------------------------------------------------------------
    -- | (1,0)   |  Sym  |  Sym  |    0    |   ‚òÖ  |    0    |    0    |
    -- -----------------------------------------------------------------
    -- | (1,m+1) | ==========================================> triv    |
    -- -----------------------------------------------------------------
    -- | (n+2,m) | ==========================================> triv    |
    -- -----------------------------------------------------------------

    -- ‚òÖ : prove that œï‚ÇÅ(1) ‚å£ œï‚ÇÅ(1) ‚â° 0

    open pres‚å£


    œï‚ÇÄ-gen : (n : ‚Ñï) ‚Üí (f : coHom n KleinBottle) ‚Üí œï‚ÇÄ (pos 1) ‚å£ f ‚â° f
    œï‚ÇÄ-gen n = ST.elim (Œª _ ‚Üí isProp‚ÜíisSet (GroupStr.is-set (snd (coHomGr n KleinBottle)) _ _))
                       (Œª f ‚Üí cong ‚à£_‚à£‚ÇÇ (funExt (Œª x ‚Üí rUnit‚Çñ n (f x))))

    -- note that the proof might be simpliale by adding a second partition on T
    -- side, though it might complicated a bunch of things
    pres¬∑-int : (n m : ‚Ñï) ‚Üí (a : ‚Ñ§) ‚Üí (k l : ‚Ñï) ‚Üí (b : ‚Ñ§) ‚Üí
                   ‚Ñ§[x,y]‚ÜíH*-ùïÇ¬≤ (base (n ‚à∑ m ‚à∑ []) a ¬∑P‚Ñ§ base (k ‚à∑ l ‚à∑ []) b)
                ‚â° ‚Ñ§[x,y]‚ÜíH*-ùïÇ¬≤ (base (n ‚à∑ m ‚à∑ []) a) cup ‚Ñ§[x,y]‚ÜíH*-ùïÇ¬≤ (base (k ‚à∑ l ‚à∑ []) b)

      -- non trivial case (0,0)
    pres¬∑-int zero zero a zero zero          b = cong (base 0) (œï‚Çô‚å£œï‚Çò _ œï‚ÇÄstr _ œï‚ÇÄstr _ œï‚ÇÄstr (œï‚ÇÄ-gen _ _) _ _)
    pres¬∑-int zero zero a zero one           b = cong (base 2) (œï‚Çô‚å£œï‚Çò _ œï‚ÇÄstr _ œï‚ÇÇ‚àòœà‚ÇÇstr _ œï‚ÇÇ‚àòœà‚ÇÇstr (œï‚ÇÄ-gen _ _) _ _)
    pres¬∑-int zero zero a zero (suc (suc l)) b = refl
    pres¬∑-int zero zero a one zero           b = cong (base 1) (œï‚Çô‚å£œï‚Çò _ œï‚ÇÄstr _ œï‚ÇÅstr _ œï‚ÇÅstr (œï‚ÇÄ-gen _ _) _ _)
    pres¬∑-int zero zero a one (suc l)        b = refl
    pres¬∑-int zero zero a (suc (suc k)) l    b = refl
      -- non trivial case (0,1)
    pres¬∑-int zero one a zero  zero         b = cong ‚Ñ§[x,y]‚ÜíH*-ùïÇ¬≤ (¬∑P‚Ñ§Comm (base (0 ‚à∑ 1 ‚à∑ []) a) (base (0 ‚à∑ 0 ‚à∑ []) b))
                                                ‚àô pres¬∑-int 0 0 b 0 1 a
                                                ‚àô gradCommRing KleinBottle _ _ _ _
    pres¬∑-int zero one a zero  one          b = sym (base-neutral 4)
                                                ‚àô cong (base 4) (trivialGroupEq (H‚Åø‚Å∫¬≥-ùïÇ¬≤‚âÖ0 1) _ _)
    pres¬∑-int zero one a zero (suc (suc l)) b = refl
    pres¬∑-int zero one a one zero           b = sym (base-neutral 3)
                                                ‚àô cong (base 3) (trivialGroupEq (H‚Åø‚Å∫¬≥-ùïÇ¬≤‚âÖ0 0) _ _)
    pres¬∑-int zero one a one (suc l)        b = refl
    pres¬∑-int zero one a (suc (suc k)) l    b = refl
      -- trivial case (0, m+2)
    pres¬∑-int zero (suc (suc m)) a  zero         l b = refl
    pres¬∑-int zero (suc (suc m)) a  one          l b = refl
    pres¬∑-int zero (suc (suc m)) a (suc (suc k)) l b = refl
      -- non trivial case (1,0)
    pres¬∑-int one zero a zero zero          b = cong ‚Ñ§[x,y]‚ÜíH*-ùïÇ¬≤ (¬∑P‚Ñ§Comm (base (1 ‚à∑ 0 ‚à∑ []) a) (base (0 ‚à∑ 0 ‚à∑ []) b))
                                                ‚àô pres¬∑-int 0 0 b 1 0 a
                                                ‚àô gradCommRing KleinBottle _ _ _ _
    pres¬∑-int one zero a zero one           b = cong ‚Ñ§[x,y]‚ÜíH*-ùïÇ¬≤ (¬∑P‚Ñ§Comm (base (1 ‚à∑ 0 ‚à∑ []) a) (base (0 ‚à∑ 1 ‚à∑ []) b))
                                                ‚àô pres¬∑-int 0 1 b 1 0 a
                                                ‚àô gradCommRing KleinBottle _ _ _ _
    pres¬∑-int one zero a zero (suc (suc l)) b = refl
    pres¬∑-int one zero a one zero           b = sym (base-neutral 2)
                                                ‚àô cong (base 2) (sym (null-H¬π _ _))
    pres¬∑-int one zero a one (suc l)        b = refl
    pres¬∑-int one zero a (suc (suc k)) l    b = refl
      -- trivial case (1,m+1)
    pres¬∑-int one (suc m) a  zero   l b = refl
    pres¬∑-int one (suc m) a (suc k) l b = refl
      -- trivial case (n+2,m)
    pres¬∑-int (suc (suc n)) m a k l b = refl



    pres¬∑-base-case-vec : (v : Vec ‚Ñï 2) ‚Üí (a : ‚Ñ§) ‚Üí (v' : Vec ‚Ñï 2) ‚Üí (b : ‚Ñ§) ‚Üí
                             ‚Ñ§[x,y]‚ÜíH*-ùïÇ¬≤ (base v a ¬∑P‚Ñ§ base v' b)
                          ‚â° ‚Ñ§[x,y]‚ÜíH*-ùïÇ¬≤ (base v a) cup ‚Ñ§[x,y]‚ÜíH*-ùïÇ¬≤ (base v' b)
    pres¬∑-base-case-vec (n ‚à∑ m ‚à∑ []) a (k ‚à∑ l ‚à∑ []) b = pres¬∑-int n m a k l b

    -- proof of the morphism
    ‚Ñ§[x,y]‚ÜíH*-ùïÇ¬≤-pres¬∑ : (x y : ‚Ñ§[x,y]) ‚Üí ‚Ñ§[x,y]‚ÜíH*-ùïÇ¬≤ (x ¬∑P‚Ñ§ y) ‚â° ‚Ñ§[x,y]‚ÜíH*-ùïÇ¬≤ x cup ‚Ñ§[x,y]‚ÜíH*-ùïÇ¬≤ y
    ‚Ñ§[x,y]‚ÜíH*-ùïÇ¬≤-pres¬∑ = DS-Ind-Prop.f _ _ _ _
                           (Œª x p q i y j ‚Üí isSetH* _ _ (p y) (q y) i j)
                           (Œª y ‚Üí refl)
                           base-case
                           Œª {U V} ind-U ind-V y ‚Üí cong‚ÇÇ _+H*_ (ind-U y) (ind-V y)
      where
      base-case : _
      base-case v a = DS-Ind-Prop.f _ _ _ _ (Œª _ ‚Üí isSetH* _ _)
                             (sym (RingTheory.0RightAnnihilates (H*R KleinBottle) _))
                             (Œª v' b ‚Üí pres¬∑-base-case-vec v a v' b )
                             Œª {U V} ind-U ind-V ‚Üí (cong‚ÇÇ _+H*_ ind-U ind-V) ‚àô sym (¬∑H*DistR+ _ _ _)


  -----------------------------------------------------------------------------
  -- Function on ‚Ñ§[x]/x + morphism

    -- not a trivial cancel ?
    ‚Ñ§[x,y]‚ÜíH*-ùïÇ¬≤-cancel : (x : Fin 4) ‚Üí ‚Ñ§[x,y]‚ÜíH*-ùïÇ¬≤ (<X¬≤,XY,2Y,Y¬≤> x) ‚â° 0H*
    ‚Ñ§[x,y]‚ÜíH*-ùïÇ¬≤-cancel zero = refl
    ‚Ñ§[x,y]‚ÜíH*-ùïÇ¬≤-cancel one = refl
    ‚Ñ§[x,y]‚ÜíH*-ùïÇ¬≤-cancel two = cong (base 2) (pres1 œï‚ÇÇstr) ‚àô base-neutral _
    ‚Ñ§[x,y]‚ÜíH*-ùïÇ¬≤-cancel three = refl


    ‚Ñ§[X,Y]‚ÜíH*-ùïÇ¬≤ : RingHom (CommRing‚ÜíRing ‚Ñ§[X,Y]) (H*R KleinBottle)
    fst ‚Ñ§[X,Y]‚ÜíH*-ùïÇ¬≤ = ‚Ñ§[x,y]‚ÜíH*-ùïÇ¬≤
    snd ‚Ñ§[X,Y]‚ÜíH*-ùïÇ¬≤ = makeIsRingHom ‚Ñ§[x,y]‚ÜíH*-ùïÇ¬≤-pres1
                                       ‚Ñ§[x,y]‚ÜíH*-ùïÇ¬≤-pres+
                                       ‚Ñ§[x,y]‚ÜíH*-ùïÇ¬≤-pres¬∑

    -- hence not a trivial pres+, yet pres0 still is
    ‚Ñ§[X,Y]/<X¬≤,XY,2Y,Y¬≤>‚ÜíH*R-ùïÇ¬≤ : RingHom (CommRing‚ÜíRing ‚Ñ§[X,Y]/<X¬≤,XY,2Y,Y¬≤>) (H*R KleinBottle)
    ‚Ñ§[X,Y]/<X¬≤,XY,2Y,Y¬≤>‚ÜíH*R-ùïÇ¬≤ = Quotient-FGideal-CommRing-Ring.inducedHom
                                    ‚Ñ§[X,Y] (H*R KleinBottle) ‚Ñ§[X,Y]‚ÜíH*-ùïÇ¬≤
                                    <X¬≤,XY,2Y,Y¬≤> ‚Ñ§[x,y]‚ÜíH*-ùïÇ¬≤-cancel

    ‚Ñ§[x,y]/<x¬≤,xy,2y,y¬≤>‚ÜíH*-ùïÇ¬≤ : ‚Ñ§[x,y]/<x¬≤,xy,2y,y¬≤> ‚Üí H* KleinBottle
    ‚Ñ§[x,y]/<x¬≤,xy,2y,y¬≤>‚ÜíH*-ùïÇ¬≤ = fst ‚Ñ§[X,Y]/<X¬≤,XY,2Y,Y¬≤>‚ÜíH*R-ùïÇ¬≤

    ‚Ñ§[x,y]/<x¬≤,xy,2y,y¬≤>‚ÜíH*-ùïÇ¬≤-pres0 : ‚Ñ§[x,y]/<x¬≤,xy,2y,y¬≤>‚ÜíH*-ùïÇ¬≤ 0P‚Ñ§I ‚â° 0H*
    ‚Ñ§[x,y]/<x¬≤,xy,2y,y¬≤>‚ÜíH*-ùïÇ¬≤-pres0 = refl

    ‚Ñ§[x,y]/<x¬≤,xy,2y,y¬≤>‚ÜíH*-ùïÇ¬≤-pres+ : (x y : ‚Ñ§[x,y]/<x¬≤,xy,2y,y¬≤>) ‚Üí
                                             ‚Ñ§[x,y]/<x¬≤,xy,2y,y¬≤>‚ÜíH*-ùïÇ¬≤ ( x +P‚Ñ§I y)
                                          ‚â° ‚Ñ§[x,y]/<x¬≤,xy,2y,y¬≤>‚ÜíH*-ùïÇ¬≤ x +H* ‚Ñ§[x,y]/<x¬≤,xy,2y,y¬≤>‚ÜíH*-ùïÇ¬≤ y
    ‚Ñ§[x,y]/<x¬≤,xy,2y,y¬≤>‚ÜíH*-ùïÇ¬≤-pres+ x y = IsRingHom.pres+ (snd ‚Ñ§[X,Y]/<X¬≤,XY,2Y,Y¬≤>‚ÜíH*R-ùïÇ¬≤) x y


  -----------------------------------------------------------------------------
  -- Converse Sens on H* ‚Üí ‚Ñ§[X,Y]

--     œï‚Åª¬π : (k : ‚Ñï) ‚Üí (a : coHom k ùïÇ¬≤) ‚Üí (x : part‚Ñï k) ‚Üí ‚Ñ§[x,y]
--     œï‚Åª¬π k a (is0 x) = base (0 ‚à∑ 0 ‚à∑ []) (œï‚ÇÄ‚Åª¬π (substG x a))
--     œï‚Åª¬π k a (is2 x) = base (1 ‚à∑ 0 ‚à∑ []) (œï‚ÇÇ‚Åª¬π (substG x a))
--     œï‚Åª¬π k a (is4 x) = base (0 ‚à∑ 1 ‚à∑ []) (œï‚ÇÑ‚Åª¬π (substG x a))
--     œï‚Åª¬π k a (else x) = 0P‚Ñ§

--     H*-ùïÇ¬≤‚Üí‚Ñ§[x,y] : H* ùïÇ¬≤ ‚Üí ‚Ñ§[x,y]
--     H*-ùïÇ¬≤‚Üí‚Ñ§[x,y] = DS-Rec-Set.f _ _ _ _ isSetP‚Ñ§
--          0P‚Ñ§
--          (Œª k a ‚Üí œï‚Åª¬π k a (part k))
--          _+P‚Ñ§_
--          +P‚Ñ§Assoc
--          +P‚Ñ§IdR
--          +P‚Ñ§Comm
--          (Œª k ‚Üí base-neutral-eq k (part k))
--          Œª k a b ‚Üí base-add-eq k a b (part k)
--       where

--       base-neutral-eq : (k : ‚Ñï) ‚Üí (x : part‚Ñï k) ‚Üí œï‚Åª¬π k (0‚Çï k) x ‚â° 0P‚Ñ§
--       base-neutral-eq k (is0 x) = cong (base (0 ‚à∑ 0 ‚à∑ [])) (cong œï‚ÇÄ‚Åª¬π (subst0g x))
--                                   ‚àô cong (base (0 ‚à∑ 0 ‚à∑ [])) (pres1 œï‚ÇÄ‚Åª¬πstr)
--                                   ‚àô base-neutral (0 ‚à∑ 0 ‚à∑ [])
--       base-neutral-eq k (is2 x) = cong (base (1 ‚à∑ 0 ‚à∑ [])) (cong œï‚ÇÇ‚Åª¬π (subst0g x))
--                                   ‚àô cong (base (1 ‚à∑ 0 ‚à∑ [])) (pres1 œï‚ÇÇ‚Åª¬πstr)
--                                   ‚àô base-neutral (1 ‚à∑ 0 ‚à∑ [])
--       base-neutral-eq k (is4 x) = cong (base (0 ‚à∑ 1 ‚à∑ [])) (cong œï‚ÇÑ‚Åª¬π (subst0g x))
--                                   ‚àô cong (base (0 ‚à∑ 1 ‚à∑ [])) (pres1 œï‚ÇÑ‚Åª¬πstr)
--                                   ‚àô base-neutral (0 ‚à∑ 1 ‚à∑ [])
--       base-neutral-eq k (else x) = refl

--       base-add-eq : (k : ‚Ñï) ‚Üí (a b : coHom k ùïÇ¬≤) ‚Üí (x : part‚Ñï k)
--                     ‚Üí œï‚Åª¬π k a x +P‚Ñ§ œï‚Åª¬π k b x ‚â° œï‚Åª¬π k (a +‚Çï b) x
--       base-add-eq k a b (is0 x) = base-add _ _ _
--                                   ‚àô cong (base (0 ‚à∑ 0 ‚à∑ [])) (sym (pres¬∑ œï‚ÇÄ‚Åª¬πstr _ _) ‚àô cong œï‚ÇÄ‚Åª¬π (subst+ a b x))
--       base-add-eq k a b (is2 x) = base-add _ _ _
--                                   ‚àô cong (base (1 ‚à∑ 0 ‚à∑ [])) (sym (pres¬∑ œï‚ÇÇ‚Åª¬πstr _ _) ‚àô cong œï‚ÇÇ‚Åª¬π (subst+ a b x))
--       base-add-eq k a b (is4 x) = base-add _ _ _
--                                   ‚àô cong (base (0 ‚à∑ 1 ‚à∑ [])) (sym (pres¬∑ œï‚ÇÑ‚Åª¬πstr _ _) ‚àô cong œï‚ÇÑ‚Åª¬π (subst+ a b x))
--       base-add-eq k a b (else x) = +P‚Ñ§IdR _


--     H*-ùïÇ¬≤‚Üí‚Ñ§[x,y]/<x¬≤,xy,2y,y¬≤> : H* ùïÇ¬≤ ‚Üí ‚Ñ§[x,y]/<x¬≤,xy,2y,y¬≤>
--     H*-ùïÇ¬≤‚Üí‚Ñ§[x,y]/<x¬≤,xy,2y,y¬≤> = [_] ‚àò H*-ùïÇ¬≤‚Üí‚Ñ§[x,y]

--     H*-ùïÇ¬≤‚Üí‚Ñ§[x,y]/<x¬≤,xy,2y,y¬≤>-pres0 : H*-ùïÇ¬≤‚Üí‚Ñ§[x,y]/<x¬≤,xy,2y,y¬≤> 0H* ‚â° 0P‚Ñ§I
--     H*-ùïÇ¬≤‚Üí‚Ñ§[x,y]/<x¬≤,xy,2y,y¬≤>-pres0 = refl

--     H*-ùïÇ¬≤‚Üí‚Ñ§[x,y]/<x¬≤,xy,2y,y¬≤>-pres+ : (x y : H* ùïÇ¬≤) ‚Üí
--                                                H*-ùïÇ¬≤‚Üí‚Ñ§[x,y]/<x¬≤,xy,2y,y¬≤> (x +H* y)
--                                            ‚â° (H*-ùïÇ¬≤‚Üí‚Ñ§[x,y]/<x¬≤,xy,2y,y¬≤> x) +P‚Ñ§I (H*-ùïÇ¬≤‚Üí‚Ñ§[x,y]/<x¬≤,xy,2y,y¬≤> y)
--     H*-ùïÇ¬≤‚Üí‚Ñ§[x,y]/<x¬≤,xy,2y,y¬≤>-pres+ x y = refl



--   -----------------------------------------------------------------------------
--   -- Section

--     e-sect-base : (k : ‚Ñï) ‚Üí (a : coHom k ùïÇ¬≤) ‚Üí (x : part‚Ñï k) ‚Üí
--                   ‚Ñ§[x,y]‚ÜíH*-ùïÇ¬≤ (œï‚Åª¬π k a x) ‚â° base k a
--     e-sect-base k a (is0 x) = cong (base 0) (œï‚ÇÄ-sect (substG x a))
--                               ‚àô sym (constSubstCommSlice _ _ base x a)
--     e-sect-base k a (is2 x) = cong (base 2) (œï‚ÇÇ-sect _)
--                               ‚àô sym (constSubstCommSlice _ _ base x a)
--     e-sect-base k a (is4 x) = cong (base 4) (œï‚ÇÑ-sect _)
--                               ‚àô sym (constSubstCommSlice _ _ base x a)
--     e-sect-base k a (else x) = sym (base-neutral k)
--                                ‚àô cong (base k) (trivialGroupEq (H‚Åø-ùïÇ¬≤‚âÖ0-bis k x) _ _)

--     e-sect : (x : H* ùïÇ¬≤) ‚Üí ‚Ñ§[x,y]/<x¬≤,xy,2y,y¬≤>‚ÜíH*-ùïÇ¬≤ (H*-ùïÇ¬≤‚Üí‚Ñ§[x,y]/<x¬≤,xy,2y,y¬≤> x) ‚â° x
--     e-sect = DS-Ind-Prop.f _ _ _ _ (Œª _ ‚Üí isSetH* _ _)
--              refl
--              (Œª k a ‚Üí e-sect-base k a (part k))
--              Œª {U V} ind-U ind-V ‚Üí ‚Ñ§[x,y]/<x¬≤,xy,2y,y¬≤>‚ÜíH*-ùïÇ¬≤-pres+ _ _ ‚àô cong‚ÇÇ _+H*_ ind-U ind-V



--   -----------------------------------------------------------------------------
--   -- Retraction

--     e-retr-base : (v : Vec ‚Ñï 2) ‚Üí (a : ‚Ñ§) ‚Üí
--                   H*-ùïÇ¬≤‚Üí‚Ñ§[x,y]/<x¬≤,xy,2y,y¬≤> (‚Ñ§[x,y]/<x¬≤,xy,2y,y¬≤>‚ÜíH*-ùïÇ¬≤ [ base v a ]) ‚â° [ base v a ]
--     e-retr-base (zero        ‚à∑ zero        ‚à∑ []) a = cong [_] (cong (base (0 ‚à∑ 0 ‚à∑ [])) (cong œï‚ÇÄ‚Åª¬π (transportRefl (œï‚ÇÄ a))))
--                                                       ‚àô cong [_] (cong (base (0 ‚à∑ 0 ‚à∑ [])) (œï‚ÇÄ-retr a))
--     e-retr-base (zero        ‚à∑ one         ‚à∑ []) a = cong [_] (cong (base (0 ‚à∑ 1 ‚à∑ [])) (cong œï‚ÇÑ‚Åª¬π (transportRefl (œï‚ÇÑ a))))
--                                                       ‚àô cong [_] (cong (base (0 ‚à∑ 1 ‚à∑ [])) (œï‚ÇÑ-retr a))
--     e-retr-base (zero        ‚à∑ suc (suc m) ‚à∑ []) a = eq/ 0P‚Ñ§ (base (zero ‚à∑ suc (suc m) ‚à∑ []) a) ‚à£ (v , helper) ‚à£‚ÇÅ
--                 where
--                 v = Œª { zero ‚Üí 0P‚Ñ§ ; one ‚Üí 0P‚Ñ§ ; two ‚Üí base (0 ‚à∑ m ‚à∑ []) (-‚Ñ§ a) }
--                 helper : _
--                 helper = +P‚Ñ§IdL _ ‚àô sym (+P‚Ñ§IdL _ ‚àô +P‚Ñ§IdL _ ‚àô +P‚Ñ§IdR _
--                          ‚àô cong‚ÇÇ base (cong (Œª X ‚Üí 0 ‚à∑ X ‚à∑ []) (+-comm _ _)) (¬∑‚Ñ§IdR _))
--     e-retr-base (one         ‚à∑ zero        ‚à∑ []) a = cong [_] (cong (base (1 ‚à∑ 0 ‚à∑ [])) (cong œï‚ÇÇ‚Åª¬π (transportRefl (œï‚ÇÇ a))))
--                                                       ‚àô cong [_] (cong (base (1 ‚à∑ 0 ‚à∑ [])) (œï‚ÇÇ-retr a))
--     e-retr-base (one         ‚à∑ suc m       ‚à∑ []) a = eq/ 0P‚Ñ§ (base (one ‚à∑ suc m ‚à∑ []) a) ‚à£ (v , helper) ‚à£‚ÇÅ
--                 where
--                 v = Œª { zero ‚Üí base (0 ‚à∑ m ‚à∑ []) (-‚Ñ§ a) ; one ‚Üí 0P‚Ñ§ ; two ‚Üí 0P‚Ñ§ }
--                 helper : _
--                 helper = +P‚Ñ§IdL _ ‚àô sym (cong‚ÇÇ _+P‚Ñ§_ (cong‚ÇÇ base (cong (Œª X ‚Üí 1 ‚à∑ X ‚à∑ []) (+-comm _ _)) (¬∑‚Ñ§IdR _))
--                          (+P‚Ñ§IdL _ ‚àô +P‚Ñ§IdL _) ‚àô +P‚Ñ§IdR _)
--     e-retr-base (suc (suc n) ‚à∑ m           ‚à∑ []) a = eq/ 0P‚Ñ§ (base (suc (suc n) ‚à∑ m ‚à∑ []) a) ‚à£ (v , helper) ‚à£‚ÇÅ
--                 where
--                 v = Œª {zero ‚Üí 0P‚Ñ§ ; one ‚Üí base (n ‚à∑ m ‚à∑ []) (-‚Ñ§ a) ; two ‚Üí 0P‚Ñ§ }
--                 helper : _
--                 helper = +P‚Ñ§IdL _ ‚àô sym (+P‚Ñ§IdL _ ‚àô
--                          cong‚ÇÇ _+P‚Ñ§_ (cong‚ÇÇ base  (cong‚ÇÇ (Œª X ‚Üí Œª Y ‚Üí X ‚à∑ Y ‚à∑ []) (+-comm _ _) (+-comm _ _)) (¬∑‚Ñ§IdR _))
--                          (+P‚Ñ§IdL _) ‚àô +P‚Ñ§IdR _)
--     e-retr : (x : ‚Ñ§[x,y]/<x¬≤,xy,2y,y¬≤>) ‚Üí H*-ùïÇ¬≤‚Üí‚Ñ§[x,y]/<x¬≤,xy,2y,y¬≤> (‚Ñ§[x,y]/<x¬≤,xy,2y,y¬≤>‚ÜíH*-ùïÇ¬≤ x) ‚â° x
--     e-retr = SQ.elimProp (Œª _ ‚Üí isSetP‚Ñ§I _ _)
--              (DS-Ind-Prop.f _ _ _ _ (Œª _ ‚Üí isSetP‚Ñ§I _ _)
--              refl
--              e-retr-base
--              Œª {U V} ind-U ind-V ‚Üí cong‚ÇÇ _+P‚Ñ§I_ ind-U ind-V)

-- -----------------------------------------------------------------------------
-- -- Computation of the Cohomology Ring

-- module _ where

--   open Equiv-RP2-Properties
--   open WhyWontYouWork (invGroupIso H‚Å¥-ùïÇ¬≤‚âÖ‚Ñ§)

--   ùïÇ¬≤-CohomologyRing : RingEquiv (CommRing‚ÜíRing ‚Ñ§[X,Y]/<X¬≤,XY,2Y,Y¬≤>) (H*R ùïÇ¬≤)
--   fst ùïÇ¬≤-CohomologyRing = isoToEquiv is
--     where
--     is : Iso ‚Ñ§[x,y]/<x¬≤,xy,2y,y¬≤> (H* ùïÇ¬≤)
--     fun is = ‚Ñ§[x,y]/<x¬≤,xy,2y,y¬≤>‚ÜíH*-ùïÇ¬≤
--     inv is = H*-ùïÇ¬≤‚Üí‚Ñ§[x,y]/<x¬≤,xy,2y,y¬≤>
--     rightInv is = e-sect
--     leftInv is = e-retr
--   snd ùïÇ¬≤-CohomologyRing = snd ‚Ñ§[X,Y]/<X¬≤,XY,2Y,Y¬≤>‚ÜíH*R-ùïÇ¬≤

--   CohomologyRing-ùïÇ¬≤ : RingEquiv (H*R ùïÇ¬≤) (CommRing‚ÜíRing ‚Ñ§[X,Y]/<X¬≤,XY,2Y,Y¬≤>)
--   CohomologyRing-ùïÇ¬≤ = RingEquivs.invRingEquiv ùïÇ¬≤-CohomologyRing
