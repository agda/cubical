{-# OPTIONS --safe --lossy-unification #-}
module Cubical.Categories.Instances.FPAlgebrasSmall where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.Function
open import Cubical.Foundations.Powerset
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Structure

open import Cubical.Functions.FunExtEquiv

open import Cubical.Data.Unit
open import Cubical.Data.Sigma
open import Cubical.Data.Nat
open import Cubical.Data.FinData

open import Cubical.Algebra.Ring
open import Cubical.Algebra.CommRing
open import Cubical.Algebra.Algebra
open import Cubical.Algebra.CommAlgebra
open import Cubical.Algebra.CommAlgebra.FPAlgebra
open import Cubical.Algebra.CommAlgebra.FPAlgebra.Instances
open import Cubical.Algebra.CommAlgebra.Instances.Unit
open import Cubical.Algebra.Semilattice
open import Cubical.Algebra.Lattice
open import Cubical.Algebra.DistLattice
open import Cubical.Algebra.DistLattice.BigOps
open import Cubical.Algebra.ZariskiLattice.Base
open import Cubical.Algebra.ZariskiLattice.UniversalProperty

open import Cubical.Categories.Category
open import Cubical.Categories.Functor
-- open import Cubical.Categories.Limits.Terminal
-- open import Cubical.Categories.Limits.Pullback
-- open import Cubical.Categories.Limits.Limits
open import Cubical.Categories.Instances.Sets
open import Cubical.Categories.Instances.CommRings
open import Cubical.Categories.Instances.CommAlgebras
open import Cubical.Categories.Instances.DistLattices
open import Cubical.Categories.Instances.Functors
open import Cubical.Categories.NaturalTransformation
open import Cubical.Categories.Presheaf.Base
open import Cubical.Categories.Yoneda

open import Cubical.Relation.Binary.Order.Poset

open import Cubical.HITs.PropositionalTruncation as PT
open import Cubical.HITs.SetQuotients as SQ

open Category hiding (_‚àò_) renaming (_‚ãÜ_ to _‚ãÜc_)
open CommAlgebraHoms
-- open Cospan
-- open Pullback

private
 variable
  ‚Ñì ‚Ñì' ‚Ñì'' : Level


module _ (R : CommRing ‚Ñì) where
  open Category

  -- type living in the same universe as the base ring R
  record SmallFPAlgebra : Type ‚Ñì where
    field
      n : ‚Ñï
      m : ‚Ñï
      relations : FinVec ‚ü® Polynomials {R = R} n ‚ü© m

  open SmallFPAlgebra
  private
    indFPAlg : SmallFPAlgebra ‚Üí CommAlgebra R ‚Ñì
    indFPAlg A = FPAlgebra (A .n) (A .relations)

  FPAlgebrasSmallCategory : Category ‚Ñì ‚Ñì
  ob FPAlgebrasSmallCategory = SmallFPAlgebra
  Hom[_,_] FPAlgebrasSmallCategory A B =
    CommAlgebraHom (indFPAlg A) (indFPAlg B)
  id FPAlgebrasSmallCategory = idCommAlgebraHom _
  _‚ãÜ_ FPAlgebrasSmallCategory = compCommAlgebraHom _ _ _
  ‚ãÜIdL FPAlgebrasSmallCategory = compIdCommAlgebraHom
  ‚ãÜIdR FPAlgebrasSmallCategory = idCompCommAlgebraHom
  ‚ãÜAssoc FPAlgebrasSmallCategory = compAssocCommAlgebraHom
  isSetHom FPAlgebrasSmallCategory = isSetAlgebraHom _ _


  -- "parsimonious" presheaf categories
  fpAlgFunctor = Functor FPAlgebrasSmallCategory (SET ‚Ñì)
  fpAlgFUNCTOR = FUNCTOR FPAlgebrasSmallCategory (SET ‚Ñì)

  -- yoneda in the notation of Demazure-Gabriel
  -- uses Œ∑-equality of Categories
  Sp : Functor (FPAlgebrasSmallCategory ^op) fpAlgFUNCTOR
  Sp = YO {C = (FPAlgebrasSmallCategory ^op)}

  open Iso
  open Functor
  open NatTrans
  open DistLatticeStr ‚¶É...‚¶Ñ
  open CommRingStr ‚¶É...‚¶Ñ
  open IsRingHom
  open IsLatticeHom
  open ZarLat
  open ZarLatUniversalProp


  -- the Zariski lattice (classifying compact open subobjects)
  private forget = ForgetfulCommAlgebra‚ÜíCommRing R
  open ZarLat
  ùìõ : fpAlgFunctor
  F-ob ùìõ A = ZL (forget .F-ob (indFPAlg A)) , SQ.squash/
  F-hom ùìõ  œÜ = inducedZarLatHom (forget .F-hom œÜ) .fst
  F-id ùìõ = cong (Œª x ‚Üí inducedZarLatHom x .fst) (forget .F-id)
          ‚àô cong fst (inducedZarLatHomId _)
  F-seq ùìõ _ _ = cong (Œª x ‚Üí inducedZarLatHom x .fst) (forget .F-seq _ _)
               ‚àô cong fst (inducedZarLatHomSeq _ _)

  CompactOpen : fpAlgFunctor ‚Üí Type ‚Ñì
  CompactOpen X = X ‚áí ùìõ

  isAffine : fpAlgFunctor ‚Üí Type ‚Ñì
  isAffine X = ‚àÉ[ A ‚àà SmallFPAlgebra ] (Sp .F-ob A) ‚âÖ·∂ú X

  -- the induced subfunctor
  ‚ü¶_‚üß·∂ú·µí : {X : fpAlgFunctor} (U : CompactOpen X) ‚Üí fpAlgFunctor
  F-ob (‚ü¶_‚üß·∂ú·µí {X = X} U) A = (Œ£[ x ‚àà X .F-ob A .fst  ] U .N-ob A x ‚â° D _ 1r)
                                , isSetŒ£SndProp (X .F-ob A .snd) Œª _ ‚Üí squash/ _ _
   where instance _ = snd (forget .F-ob (indFPAlg A))
  F-hom (‚ü¶_‚üß·∂ú·µí {X = X} U) {x = A} {y = B} œÜ (x , Ux‚â°D1) = (X .F-hom œÜ x) , path
    where
    instance
      _ = (forget .F-ob (indFPAlg A)) .snd
      _ = (forget .F-ob (indFPAlg B)) .snd
    open IsLatticeHom
    path : U .N-ob B (X .F-hom œÜ x) ‚â° D _ 1r
    path = U .N-ob B (X .F-hom œÜ x) ‚â°‚ü® funExt‚Åª (U .N-hom œÜ) x ‚ü©
           ùìõ .F-hom œÜ (U .N-ob A x) ‚â°‚ü® cong (ùìõ .F-hom œÜ) Ux‚â°D1 ‚ü©
           ùìõ .F-hom œÜ (D _ 1r)      ‚â°‚ü® inducedZarLatHom (forget .F-hom œÜ) .snd .pres1 ‚ü©
           D _ 1r ‚àé
  F-id (‚ü¶_‚üß·∂ú·µí {X = X} U) = funExt (Œª x ‚Üí Œ£‚â°Prop (Œª _ ‚Üí squash/ _ _)
                                     (funExt‚Åª (X .F-id) (x .fst)))
  F-seq (‚ü¶_‚üß·∂ú·µí {X = X} U) œÜ œà = funExt (Œª x ‚Üí Œ£‚â°Prop (Œª _ ‚Üí squash/ _ _)
                                          (funExt‚Åª (X .F-seq œÜ œà) (x .fst)))

  isAffineCompactOpen : {X : fpAlgFunctor} (U : CompactOpen X) ‚Üí Type ‚Ñì
  isAffineCompactOpen U = isAffine ‚ü¶ U ‚üß·∂ú·µí

  -- the dist. lattice of compact opens
  CompOpenDistLattice : Functor fpAlgFUNCTOR (DistLatticesCategory {‚Ñì} ^op)
  fst (F-ob CompOpenDistLattice X) = CompactOpen X

  -- lattice structure induce by internal lattice object ùìõ
  N-ob (DistLatticeStr.0l (snd (F-ob CompOpenDistLattice X))) A _ = 0l
    where instance _ = ZariskiLattice (forget .F-ob (indFPAlg A)) .snd
  N-hom (DistLatticeStr.0l (snd (F-ob CompOpenDistLattice X))) _ = funExt Œª _ ‚Üí refl

  N-ob (DistLatticeStr.1l (snd (F-ob CompOpenDistLattice X))) A _ = 1l
    where instance _ = ZariskiLattice (forget .F-ob (indFPAlg A)) .snd
  N-hom (DistLatticeStr.1l (snd (F-ob CompOpenDistLattice X))) {x = A} {y = B} œÜ = funExt Œª _ ‚Üí path
    where
    instance
      _ = (forget .F-ob (indFPAlg A)) .snd
      _ = (forget .F-ob (indFPAlg B)) .snd
      _ = ZariskiLattice (forget .F-ob (indFPAlg B)) .snd
    path : D _ 1r ‚â° D _ (œÜ .fst 1r) ‚à®l 0l
    path = cong (D (forget .F-ob (indFPAlg B))) (sym (forget .F-hom œÜ .snd .pres1))
         ‚àô sym (‚à®lRid _)

  N-ob ((snd (F-ob CompOpenDistLattice X) DistLatticeStr.‚à®l U) V) A x =
    U .N-ob A x ‚à®l V .N-ob A x
    where instance _ = ZariskiLattice (forget .F-ob (indFPAlg A)) .snd
  N-hom ((snd (F-ob CompOpenDistLattice X) DistLatticeStr.‚à®l U) V)  {x = A} {y = B} œÜ =
    funExt path
    where
    instance
      _ = ZariskiLattice (forget .F-ob (indFPAlg A)) .snd
      _ = ZariskiLattice (forget .F-ob (indFPAlg B)) .snd
    path : ‚àÄ x ‚Üí U .N-ob B (X .F-hom œÜ x) ‚à®l V .N-ob B (X .F-hom œÜ x)
               ‚â° ùìõ .F-hom œÜ (U .N-ob A x ‚à®l V .N-ob A x)
    path x = U .N-ob B (X .F-hom œÜ x) ‚à®l V .N-ob B (X .F-hom œÜ x)
           ‚â°‚ü® cong‚ÇÇ _‚à®l_ (funExt‚Åª (U .N-hom œÜ) x) (funExt‚Åª (V .N-hom œÜ) x) ‚ü©
             ùìõ .F-hom œÜ (U .N-ob A x) ‚à®l ùìõ .F-hom œÜ (V .N-ob A x)
           ‚â°‚ü® sym (inducedZarLatHom (forget .F-hom œÜ) .snd .pres‚à®l _ _) ‚ü©
             ùìõ .F-hom œÜ (U .N-ob A x ‚à®l V .N-ob A x) ‚àé

  N-ob ((snd (F-ob CompOpenDistLattice X) DistLatticeStr.‚àßl U) V) A x =
    U .N-ob A x ‚àßl V .N-ob A x
    where instance _ = ZariskiLattice (forget .F-ob (indFPAlg A)) .snd
  N-hom ((snd (F-ob CompOpenDistLattice X) DistLatticeStr.‚àßl U) V) {x = A} {y = B} œÜ =
    funExt path
    where
    instance
      _ = ZariskiLattice (forget .F-ob (indFPAlg A)) .snd
      _ = ZariskiLattice (forget .F-ob (indFPAlg B)) .snd
    path : ‚àÄ x ‚Üí U .N-ob B (X .F-hom œÜ x) ‚àßl V .N-ob B (X .F-hom œÜ x)
               ‚â° ùìõ .F-hom œÜ (U .N-ob A x ‚àßl V .N-ob A x)
    path x = U .N-ob B (X .F-hom œÜ x) ‚àßl V .N-ob B (X .F-hom œÜ x)
           ‚â°‚ü® cong‚ÇÇ _‚àßl_ (funExt‚Åª (U .N-hom œÜ) x) (funExt‚Åª (V .N-hom œÜ) x) ‚ü©
             ùìõ .F-hom œÜ (U .N-ob A x) ‚àßl ùìõ .F-hom œÜ (V .N-ob A x)
           ‚â°‚ü® sym (inducedZarLatHom (forget .F-hom œÜ) .snd .pres‚àßl _ _) ‚ü©
             ùìõ .F-hom œÜ (U .N-ob A x ‚àßl V .N-ob A x) ‚àé

  DistLatticeStr.isDistLattice (snd (F-ob CompOpenDistLattice X)) =
    makeIsDistLattice‚àßlOver‚à®l
      isSetNatTrans
      (Œª _ _ _ ‚Üí makeNatTransPath (funExt‚ÇÇ
                   (Œª A _ ‚Üí ZariskiLattice (forget .F-ob (indFPAlg A)) .snd
                              .DistLatticeStr.‚à®lAssoc _ _ _)))
      (Œª _ ‚Üí     makeNatTransPath (funExt‚ÇÇ
                   (Œª A _ ‚Üí ZariskiLattice (forget .F-ob (indFPAlg A)) .snd
                              .DistLatticeStr.‚à®lRid _)))
      (Œª _ _ ‚Üí   makeNatTransPath (funExt‚ÇÇ
                   (Œª A _ ‚Üí ZariskiLattice (forget .F-ob (indFPAlg A)) .snd
                              .DistLatticeStr.‚à®lComm _ _)))
      (Œª _ _ _ ‚Üí makeNatTransPath (funExt‚ÇÇ
                   (Œª A _ ‚Üí ZariskiLattice (forget .F-ob (indFPAlg A)) .snd
                              .DistLatticeStr.‚àßlAssoc _ _ _)))
      (Œª _ ‚Üí     makeNatTransPath (funExt‚ÇÇ
                   (Œª A _ ‚Üí ZariskiLattice (forget .F-ob (indFPAlg A)) .snd
                              .DistLatticeStr.‚àßlRid _)))
      (Œª _ _ ‚Üí   makeNatTransPath (funExt‚ÇÇ
                   (Œª A _ ‚Üí ZariskiLattice (forget .F-ob (indFPAlg A)) .snd
                             .DistLatticeStr.‚àßlComm _ _)))
      (Œª _ _ ‚Üí   makeNatTransPath (funExt‚ÇÇ -- don't know why ‚àßlAbsorb‚à®l doesn't work
                   (Œª A _ ‚Üí ZariskiLattice (forget .F-ob (indFPAlg A)) .snd
                              .DistLatticeStr.absorb _ _ .snd)))
      (Œª _ _ _ ‚Üí makeNatTransPath (funExt‚ÇÇ -- same here
                   (Œª A _ ‚Üí ZariskiLattice (forget .F-ob (indFPAlg A)) .snd
                              .DistLatticeStr.‚àßl-dist-‚à®l _ _ _ .fst)))

  -- (contravariant) action on morphisms
  fst (F-hom CompOpenDistLattice Œ±) = Œ± ‚óè·µõ_
  pres0 (snd (F-hom CompOpenDistLattice Œ±)) = makeNatTransPath (funExt‚ÇÇ Œª _ _ ‚Üí refl)
  pres1 (snd (F-hom CompOpenDistLattice Œ±)) = makeNatTransPath (funExt‚ÇÇ Œª _ _ ‚Üí refl)
  pres‚à®l (snd (F-hom CompOpenDistLattice Œ±)) _ _ = makeNatTransPath (funExt‚ÇÇ Œª _ _ ‚Üí refl)
  pres‚àßl (snd (F-hom CompOpenDistLattice Œ±)) _ _ = makeNatTransPath (funExt‚ÇÇ Œª _ _ ‚Üí refl)

  -- functoriality
  F-id CompOpenDistLattice = LatticeHom‚â°f _ _
                               (funExt Œª _ ‚Üí makeNatTransPath (funExt‚ÇÇ Œª _ _ ‚Üí refl))
  F-seq CompOpenDistLattice _ _ = LatticeHom‚â°f _ _
                                    (funExt Œª _ ‚Üí makeNatTransPath (funExt‚ÇÇ Œª _ _ ‚Üí refl))


  module _ (X : fpAlgFunctor) where
    open Join (CompOpenDistLattice .F-ob X)
    private instance _ = (CompOpenDistLattice .F-ob X) .snd

    record AffineCover : Type ‚Ñì where
      field
        n : ‚Ñï
        U : FinVec (CompactOpen X) n
        covers : ‚ãÅ U ‚â° 1l -- TODO: equivalent to X ‚â° ‚ü¶ ‚ãÅ U ‚üß·∂ú·µí
        isAffineU : ‚àÄ i ‚Üí isAffineCompactOpen (U i)

    hasAffineCover : Type ‚Ñì
    hasAffineCover = ‚à• AffineCover ‚à•‚ÇÅ
    -- TODO: A fp-alg-functor is a scheme of finite presentation (over R)
    -- if it is a Zariski sheaf and has an affine cover
