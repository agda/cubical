{-# OPTIONS --safe --experimental-lossy-unification #-}
module Cubical.Categories.Instances.CommAlgebras where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Function
open import Cubical.Foundations.Powerset
open import Cubical.Foundations.HLevels

open import Cubical.Data.Sigma

open import Cubical.Algebra.Ring
open import Cubical.Algebra.CommRing
open import Cubical.Algebra.Algebra
open import Cubical.Algebra.CommAlgebra

open import Cubical.Categories.Category
open import Cubical.Categories.Functor.Base
open import Cubical.Categories.Limits.Pullback
open import Cubical.Categories.Instances.CommRings

open import Cubical.HITs.PropositionalTruncation

open Category
open CommAlgebraHoms
open Cospan
open Pullback

private
 variable
  ‚Ñì ‚Ñì' ‚Ñì'' : Level

module _ (R : CommRing ‚Ñì) where
  CommAlgebrasCategory : Category (‚Ñì-suc (‚Ñì-max ‚Ñì ‚Ñì')) (‚Ñì-max ‚Ñì ‚Ñì')
  ob CommAlgebrasCategory       = CommAlgebra R _
  Hom[_,_] CommAlgebrasCategory = CommAlgebraHom
  id CommAlgebrasCategory {A}   = idCommAlgebraHom A
  _‚ãÜ_ CommAlgebrasCategory {A} {B} {C}     = compCommAlgebraHom A B C
  ‚ãÜIdL CommAlgebrasCategory {A} {B}           = compIdCommAlgebraHom {A = A} {B}
  ‚ãÜIdR CommAlgebrasCategory {A} {B}           = idCompCommAlgebraHom {A = A} {B}
  ‚ãÜAssoc CommAlgebrasCategory {A} {B} {C} {D} = compAssocCommAlgebraHom {A = A} {B} {C} {D}
  isSetHom CommAlgebrasCategory               = isSetAlgebraHom _ _


module PullbackFromCommRing (R : CommRing ‚Ñì)
                            (commRingCospan : Cospan (CommRingsCategory {‚Ñì = ‚Ñì}))
                            (commRingPB : Pullback _ commRingCospan)
                            (f‚ÇÅ : CommRingHom R (commRingPB .pbOb))
                            (f‚ÇÇ : CommRingHom R (commRingCospan .r))
                            (f‚ÇÉ : CommRingHom R (commRingCospan .l))
                            (f‚ÇÑ : CommRingHom R (commRingCospan .m))
                            where

 open CommAlgChar R
 private
  CommAlgCat = CommAlgebrasCategory {‚Ñì = ‚Ñì} R {‚Ñì' = ‚Ñì}

  A = commRingPB .pbOb
  B = commRingCospan .r
  C = commRingCospan .l
  D = commRingCospan .m

  g‚ÇÅ = commRingPB .pbPr‚ÇÇ
  g‚ÇÇ = commRingPB .pbPr‚ÇÅ
  g‚ÇÉ = commRingCospan .s‚ÇÇ
  g‚ÇÑ = commRingCospan .s‚ÇÅ

  {-
              g‚ÇÅ
           A  ‚Üí  B
             ‚åü
        g‚ÇÇ ‚Üì     ‚Üì g‚ÇÉ

           C  ‚Üí  D
              g‚ÇÑ
  -}


 algCospan : (isRHom‚ÇÅ : isCommRingWithHomHom (A , f‚ÇÅ) (B , f‚ÇÇ) g‚ÇÅ)
             (isRHom‚ÇÇ : isCommRingWithHomHom (A , f‚ÇÅ) (C , f‚ÇÉ) g‚ÇÇ)
             (isRHom‚ÇÉ : isCommRingWithHomHom (B , f‚ÇÇ) (D , f‚ÇÑ) g‚ÇÉ)
             (isRHom‚ÇÑ : isCommRingWithHomHom (C , f‚ÇÉ) (D , f‚ÇÑ) g‚ÇÑ)
           ‚Üí Cospan CommAlgCat
 l (algCospan isRHom‚ÇÅ isRHom‚ÇÇ isRHom‚ÇÉ isRHom‚ÇÑ) = toCommAlg (C , f‚ÇÉ)
 m (algCospan isRHom‚ÇÅ isRHom‚ÇÇ isRHom‚ÇÉ isRHom‚ÇÑ) = toCommAlg (D , f‚ÇÑ)
 r (algCospan isRHom‚ÇÅ isRHom‚ÇÇ isRHom‚ÇÉ isRHom‚ÇÑ) = toCommAlg (B , f‚ÇÇ)
 s‚ÇÅ (algCospan isRHom‚ÇÅ isRHom‚ÇÇ isRHom‚ÇÉ isRHom‚ÇÑ) = toCommAlgebraHom _ _ g‚ÇÑ isRHom‚ÇÑ
 s‚ÇÇ (algCospan isRHom‚ÇÅ isRHom‚ÇÇ isRHom‚ÇÉ isRHom‚ÇÑ) = toCommAlgebraHom _ _ g‚ÇÉ isRHom‚ÇÉ


 algPullback : (isRHom‚ÇÅ : isCommRingWithHomHom (A , f‚ÇÅ) (B , f‚ÇÇ) g‚ÇÅ)
               (isRHom‚ÇÇ : isCommRingWithHomHom (A , f‚ÇÅ) (C , f‚ÇÉ) g‚ÇÇ)
               (isRHom‚ÇÉ : isCommRingWithHomHom (B , f‚ÇÇ) (D , f‚ÇÑ) g‚ÇÉ)
               (isRHom‚ÇÑ : isCommRingWithHomHom (C , f‚ÇÉ) (D , f‚ÇÑ) g‚ÇÑ)
             ‚Üí Pullback CommAlgCat (algCospan isRHom‚ÇÅ isRHom‚ÇÇ isRHom‚ÇÉ isRHom‚ÇÑ)
 pbOb (algPullback isRHom‚ÇÅ isRHom‚ÇÇ isRHom‚ÇÉ isRHom‚ÇÑ) = toCommAlg (A , f‚ÇÅ)
 pbPr‚ÇÅ (algPullback isRHom‚ÇÅ isRHom‚ÇÇ isRHom‚ÇÉ isRHom‚ÇÑ) = toCommAlgebraHom _ _ g‚ÇÇ isRHom‚ÇÇ
 pbPr‚ÇÇ (algPullback isRHom‚ÇÅ isRHom‚ÇÇ isRHom‚ÇÉ isRHom‚ÇÑ) = toCommAlgebraHom _ _ g‚ÇÅ isRHom‚ÇÅ
 pbCommutes (algPullback isRHom‚ÇÅ isRHom‚ÇÇ isRHom‚ÇÉ isRHom‚ÇÑ) =
               AlgebraHom‚â° (cong fst (pbCommutes commRingPB))
 univProp (algPullback isRHom‚ÇÅ isRHom‚ÇÇ isRHom‚ÇÉ isRHom‚ÇÑ) {d = F} h‚ÇÇ h‚ÇÅ g‚ÇÑ‚àòh‚ÇÇ‚â°g‚ÇÉ‚àòh‚ÇÅ = (k , {!!}) , {!!}
  where
  open RingHoms
  univPropCommRingWithHomHom : (E,f‚ÇÖ : CommRingWithHom)
                               (h‚ÇÇ : CommRingWithHomHom E,f‚ÇÖ (C , f‚ÇÉ))
                               (h‚ÇÅ : CommRingWithHomHom E,f‚ÇÖ (B , f‚ÇÇ))
                             ‚Üí g‚ÇÑ ‚àòr fst h‚ÇÇ ‚â° g‚ÇÉ ‚àòr fst h‚ÇÅ
                             ‚Üí ‚àÉ![ h‚ÇÉ ‚àà CommRingWithHomHom E,f‚ÇÖ (A , f‚ÇÅ) ]
                                  (fst h‚ÇÇ ‚â° g‚ÇÇ ‚àòr fst h‚ÇÉ) √ó (fst h‚ÇÅ ‚â° g‚ÇÅ ‚àòr fst h‚ÇÉ)
  univPropCommRingWithHomHom (E , f‚ÇÖ) (h‚ÇÇ , comm‚ÇÇ) (h‚ÇÅ , comm‚ÇÅ) squareComm =
   ((h‚ÇÉ , h‚ÇÉ‚àòf‚ÇÖ‚â°f‚ÇÅ) , h‚ÇÇ‚â°g‚ÇÇ‚àòh‚ÇÉ , h‚ÇÅ‚â°g‚ÇÅ‚àòh‚ÇÉ) , Œª h‚ÇÉ' ‚Üí Œ£‚â°Prop (Œª _ ‚Üí isProp√ó (isSetRingHom _ _ _ _) (isSetRingHom _ _ _ _))
                                                       (Œ£‚â°Prop (Œª _ ‚Üí isSetRingHom _ _ _ _)
                                                         (cong fst (commRingPB .univProp h‚ÇÇ h‚ÇÅ squareComm .snd
                                                           (h‚ÇÉ' .fst .fst , h‚ÇÉ' .snd .fst , h‚ÇÉ' .snd .snd))))
   where
   h‚ÇÉ : CommRingHom E A
   h‚ÇÉ = commRingPB .univProp h‚ÇÇ h‚ÇÅ squareComm .fst .fst
   h‚ÇÇ‚â°g‚ÇÇ‚àòh‚ÇÉ : h‚ÇÇ ‚â° g‚ÇÇ ‚àòr h‚ÇÉ
   h‚ÇÇ‚â°g‚ÇÇ‚àòh‚ÇÉ = commRingPB .univProp h‚ÇÇ h‚ÇÅ squareComm .fst .snd .fst
   h‚ÇÅ‚â°g‚ÇÅ‚àòh‚ÇÉ : h‚ÇÅ ‚â° g‚ÇÅ ‚àòr h‚ÇÉ
   h‚ÇÅ‚â°g‚ÇÅ‚àòh‚ÇÉ = commRingPB .univProp h‚ÇÇ h‚ÇÅ squareComm .fst .snd .snd

   -- the crucial obervation:
   -- we can apply the universal property to maps R ‚Üí A
   fgSquare : g‚ÇÑ ‚àòr f‚ÇÉ ‚â° g‚ÇÉ ‚àòr f‚ÇÇ
   fgSquare = isRHom‚ÇÑ ‚àô sym isRHom‚ÇÉ

   h‚ÇÉ‚àòf‚ÇÖ‚â°f‚ÇÅ : h‚ÇÉ ‚àòr f‚ÇÖ ‚â° f‚ÇÅ
   h‚ÇÉ‚àòf‚ÇÖ‚â°f‚ÇÅ = cong fst (isContr‚ÜíisProp (commRingPB .univProp f‚ÇÉ f‚ÇÇ fgSquare)
                         (h‚ÇÉ ‚àòr f‚ÇÖ , triangle1 , triangle2) (f‚ÇÅ , (sym isRHom‚ÇÇ) , sym isRHom‚ÇÅ))
     where
     triangle1 : f‚ÇÉ ‚â° g‚ÇÇ ‚àòr (h‚ÇÉ ‚àòr f‚ÇÖ)
     triangle1 = sym comm‚ÇÇ ‚àô‚àô cong (compRingHom f‚ÇÖ) h‚ÇÇ‚â°g‚ÇÇ‚àòh‚ÇÉ ‚àô‚àô sym (compAssocRingHom f‚ÇÖ h‚ÇÉ g‚ÇÇ)

     triangle2 : f‚ÇÇ ‚â° g‚ÇÅ ‚àòr (h‚ÇÉ ‚àòr f‚ÇÖ)
     triangle2 = sym comm‚ÇÅ ‚àô‚àô cong (compRingHom f‚ÇÖ) h‚ÇÅ‚â°g‚ÇÅ‚àòh‚ÇÉ ‚àô‚àô sym (compAssocRingHom f‚ÇÖ h‚ÇÉ g‚ÇÅ)


  E = fromCommAlg F .fst
  f‚ÇÖ = fromCommAlg F .snd

  k : CommAlgebraHom F (toCommAlg (A , f‚ÇÅ))
  k = {!!}




module PreSheafFromUniversalProp (C : Category ‚Ñì ‚Ñì') (P : ob C ‚Üí Type ‚Ñì)
         {R : CommRing ‚Ñì''} (ùìï : Œ£ (ob C) P ‚Üí CommAlgebra R ‚Ñì'')
         (uniqueHom : ‚àÄ x y ‚Üí C [ fst x , fst y ] ‚Üí isContr (CommAlgebraHom (ùìï y) (ùìï x)))
         where

 private
  ‚à•P‚à• : ‚Ñô (ob C)
  ‚à•P‚à• x  = ‚à• P x ‚à• , isPropPropTrunc
  Œ£C‚à•P‚à•Cat = Œ£PropCat C ‚à•P‚à•
  CommAlgCat = CommAlgebrasCategory {‚Ñì = ‚Ñì''} R {‚Ñì' = ‚Ñì''}

 ùìïUniqueEquiv : (x : ob C) (p q : P x) ‚Üí isContr (CommAlgebraEquiv (ùìï (x , p)) (ùìï (x , q)))
 ùìïUniqueEquiv x = contrCommAlgebraHom‚ÜícontrCommAlgebraEquiv (curry ùìï x) Œª p q ‚Üí uniqueHom _ _ (id C)

 theMap : (x : ob C) ‚Üí ‚à• P x ‚à• ‚Üí CommAlgebra R ‚Ñì''
 theMap x = recPT‚ÜíCommAlgebra (curry ùìï x) (Œª p q ‚Üí ùìïUniqueEquiv x p q .fst)
                                         Œª p q r ‚Üí ùìïUniqueEquiv x p r .snd _

 theAction : (x y : ob C) ‚Üí C [ x , y ]
           ‚Üí (p : ‚à• P x ‚à•) (q : ‚à• P y ‚à•) ‚Üí isContr (CommAlgebraHom (theMap y q) (theMap x p))
 theAction _ _ f = elim2 (Œª _ _ ‚Üí isPropIsContr) Œª _ _ ‚Üí uniqueHom _ _ f

 open Functor
 universalPShf : Functor (Œ£C‚à•P‚à•Cat ^op) CommAlgCat
 F-ob universalPShf = uncurry theMap
 F-hom universalPShf {x = x} {y = y} f = theAction _ _ f (y .snd) (x. snd) .fst
 F-id universalPShf {x = x} = theAction (x .fst) (x .fst) (id C) (x .snd) (x .snd) .snd _
 F-seq universalPShf {x = x} {z = z} f g = theAction _ _ (g ‚ãÜ‚ü® C ‚ü© f) (z .snd) (x .snd) .snd _


 -- a big transport to help verifying the sheaf property
 module toSheaf {x y u v : ob Œ£C‚à•P‚à•Cat}
                {f : C [ v .fst , y . fst ]} {g : C [ v .fst , u .fst ]}
                {h : C [ u .fst , x . fst ]} {k : C [ y .fst , x .fst ]}
                (Csquare : f ‚ãÜ‚ü® C ‚ü© k ‚â° g ‚ãÜ‚ü® C ‚ü© h)
                {-
                    v ‚Üí y
                    ‚Üì   ‚Üì
                    u ‚Üí x
                -}
                (AlgCospan : Cospan CommAlgCat)
                (AlgPB : Pullback _ AlgCospan)
                (p‚ÇÅ : AlgPB .pbOb ‚â° F-ob universalPShf x) (p‚ÇÇ : AlgCospan .l ‚â° F-ob universalPShf y)
                (p‚ÇÉ : AlgCospan .r ‚â° F-ob universalPShf u) (p‚ÇÑ : AlgCospan .m ‚â° F-ob universalPShf v)
                where

  private
   -- just: ùìï k ‚ãÜ ùìï f ‚â° ùìï h ‚ãÜ ùìï g
   inducedSquare : seq' CommAlgCat {x = F-ob universalPShf x}
                                   {y = F-ob universalPShf y}
                                   {z = F-ob universalPShf v}
                                   (F-hom universalPShf k) (F-hom universalPShf f)
                 ‚â° seq' CommAlgCat {x = F-ob universalPShf x}
                                   {y = F-ob universalPShf u}
                                   {z = F-ob universalPShf v}
                                   (F-hom universalPShf h) (F-hom universalPShf g)
   inducedSquare = F-square universalPShf Csquare

   f' = F-hom universalPShf {x = y} {y = v} f
   g' = F-hom universalPShf {x = u} {y = v} g
   h' = F-hom universalPShf {x = x} {y = u} h
   k' = F-hom universalPShf {x = x} {y = y} k

   fPathP : PathP (Œª i ‚Üí CommAlgCat [ p‚ÇÇ i , p‚ÇÑ i ]) (AlgCospan .s‚ÇÅ) f'
   fPathP = toPathP (sym (theAction _ _ f (v .snd) (y .snd) .snd _))

   gPathP : PathP (Œª i ‚Üí CommAlgCat [ p‚ÇÉ i , p‚ÇÑ i ]) (AlgCospan .s‚ÇÇ) g'
   gPathP = toPathP (sym (theAction _ _ g (v .snd) (u .snd) .snd _))

   hPathP : PathP (Œª i ‚Üí CommAlgCat [ p‚ÇÅ i , p‚ÇÉ i ]) (AlgPB .pbPr‚ÇÇ) h'
   hPathP = toPathP (sym (theAction _ _ h (u .snd) (x .snd) .snd _))

   kPathP : PathP (Œª i ‚Üí CommAlgCat [ p‚ÇÅ i , p‚ÇÇ i ]) (AlgPB .pbPr‚ÇÅ) k'
   kPathP = toPathP (sym (theAction _ _ k (y .snd) (x .snd) .snd _))

   fgCospan : Cospan CommAlgCat
   l fgCospan = F-ob universalPShf y
   m fgCospan = F-ob universalPShf v
   r fgCospan = F-ob universalPShf u
   s‚ÇÅ fgCospan = f'
   s‚ÇÇ fgCospan = g'

   cospanPath : AlgCospan ‚â° fgCospan
   l (cospanPath i) = p‚ÇÇ i
   m (cospanPath i) = p‚ÇÑ i
   r (cospanPath i) = p‚ÇÉ i
   s‚ÇÅ (cospanPath i) = fPathP i
   s‚ÇÇ (cospanPath i) = gPathP i

   squarePathP : PathP (Œª i ‚Üí kPathP i ‚ãÜ‚ü® CommAlgCat ‚ü© fPathP i ‚â° hPathP i ‚ãÜ‚ü® CommAlgCat ‚ü© gPathP i)
                      (AlgPB .pbCommutes) inducedSquare
   squarePathP = toPathP (CommAlgCat .isSetHom _ _ _ _)

  lemma : isPullback CommAlgCat fgCospan {c = F-ob universalPShf x} k' h' inducedSquare
  lemma = transport (Œª i ‚Üí isPullback CommAlgCat (cospanPath i) {c = p‚ÇÅ i}
                                                 (kPathP i) (hPathP i) (squarePathP i))
                    (AlgPB .univProp)
