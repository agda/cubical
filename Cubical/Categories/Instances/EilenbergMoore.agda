{-# OPTIONS --safe #-}
module Cubical.Categories.Instances.EilenbergMoore where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Function
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Isomorphism renaming (Iso to _‚âÖ_)
open import Cubical.Foundations.Univalence

open import Cubical.Categories.Category
open import Cubical.Categories.Functor renaming (ùüô‚ü®_‚ü© to funcId)
open import Cubical.Categories.NaturalTransformation.Base
open import Cubical.Categories.Monad.Base
open import Cubical.Categories.Instances.FunctorAlgebras
open import Cubical.Categories.Constructions.FullSubcategory
open import Cubical.Categories.Adjoint

private
  variable
    ‚ÑìC ‚ÑìC' : Level

module _ {C : Category ‚ÑìC ‚ÑìC'} (monadM : Monad C) where

  M : Functor C C
  M = fst monadM

  --open Category
  private
    module C = Category C
  open Functor
  open NatTrans

  open IsMonad (snd monadM)

  record IsEMAlgebra (algA : Algebra M) : Type ‚ÑìC' where
    constructor proveEMAlgebra
    open Algebra algA
    field
      str-Œ∑ : str C.‚àò N-ob Œ∑ carrier ‚â° C.id
      str-Œº : str C.‚àò N-ob Œº carrier ‚â° str C.‚àò F-hom M str

  open IsEMAlgebra

  isPropIsEMAlgebra : ‚àÄ {algA} ‚Üí isProp (IsEMAlgebra algA)
  isPropIsEMAlgebra {algA} isalg isalg' = cong‚ÇÇ proveEMAlgebra
    (C.isSetHom _ _ (str-Œ∑ isalg) (str-Œ∑ isalg'))
    (C.isSetHom _ _ (str-Œº isalg) (str-Œº isalg'))

  EMAlgebra : Type (‚Ñì-max ‚ÑìC ‚ÑìC')
  EMAlgebra = Œ£[ algA ‚àà Algebra M ] IsEMAlgebra algA

  EMCategory : Category (‚Ñì-max ‚ÑìC ‚ÑìC') ‚ÑìC'
  EMCategory = FullSubcategory (AlgebrasCategory M) IsEMAlgebra

  ForgetEM : Functor EMCategory (AlgebrasCategory M)
  ForgetEM = FullInclusion (AlgebrasCategory M) IsEMAlgebra

  ForgetEMAlgebra : Functor EMCategory C
  ForgetEMAlgebra = funcComp (ForgetAlgebra M) ForgetEM

  open Algebra
  freeEMAlgebra : C.ob ‚Üí EMAlgebra
  carrier (fst (freeEMAlgebra x)) = F-ob M x
  str (fst (freeEMAlgebra x)) = N-ob Œº x
  str-Œ∑ (snd (freeEMAlgebra x)) = lemma
    where lemma : N-ob Œ∑ (F-ob M x) C.‚ãÜ N-ob Œº x ‚â° C.id
          lemma = funExt‚Åª (congP (Œª i ‚Üí N-ob) idl-Œº) x
  str-Œº (snd (freeEMAlgebra x)) = lemma
    where lemma : N-ob Œº (F-ob M x) C.‚ãÜ N-ob Œº x ‚â° F-hom M (N-ob Œº x) C.‚ãÜ N-ob Œº x
          lemma = funExt‚Åª (congP (Œª i ‚Üí N-ob) (symP-fromGoal assoc-Œº)) x

  open AlgebraHom
  FreeEMAlgebra : Functor C EMCategory
  F-ob FreeEMAlgebra x = freeEMAlgebra x
  carrierHom (F-hom FreeEMAlgebra {x} {y} œÜ) = F-hom M œÜ
  strHom (F-hom FreeEMAlgebra {x} {y} œÜ) = sym (N-hom Œº œÜ)
  F-id FreeEMAlgebra = AlgebraHom‚â° M (F-id M)
  F-seq FreeEMAlgebra {x} {y} {z} œÜ œà = AlgebraHom‚â° M (F-seq M œÜ œà)

  ForgetFreeEMAlgebra : funcComp ForgetEMAlgebra FreeEMAlgebra ‚â° M
  ForgetFreeEMAlgebra = Functor‚â° (Œª x ‚Üí refl) (Œª f ‚Üí refl)

  emCounit : NatTrans (funcComp FreeEMAlgebra ForgetEMAlgebra) (funcId EMCategory)
  carrierHom (N-ob emCounit (algebra A Œ± , isEMA)) = Œ±
  strHom (N-ob emCounit (algebra A Œ± , isEMA)) = str-Œº isEMA
  N-hom emCounit {algebra A Œ± , isEMA} {algebra B Œ≤ , isEMB} (algebraHom f isalgF) =
    AlgebraHom‚â° M (sym (isalgF))

  open NaturalBijection
  open _‚ä£_
  open _‚âÖ_

  emBijection : ‚àÄ a emB ‚Üí
    (EMCategory [ FreeEMAlgebra ‚üÖ a ‚üÜ , emB ]) ‚âÖ (C [ a , ForgetEMAlgebra ‚üÖ emB ‚üÜ ])
  fun (emBijection a (algebra b Œ≤ , isEMB)) (algebraHom f isalgF) = f C.‚àò N-ob Œ∑ a
  carrierHom (inv (emBijection a (algebra b Œ≤ , isEMB)) f) = Œ≤ C.‚àò F-hom M f
  strHom (inv (emBijection a (algebra b Œ≤ , isEMB)) f) =
    (N-ob Œº a C.‚ãÜ (F-hom M f C.‚ãÜ Œ≤))
      ‚â°‚ü® sym (C.‚ãÜAssoc _ _ _) ‚ü©
    ((N-ob Œº a C.‚ãÜ F-hom M f) C.‚ãÜ Œ≤)
      ‚â°‚ü® cong (C._‚ãÜ Œ≤) (sym (N-hom Œº f)) ‚ü©
    ((F-hom M (F-hom M f) C.‚ãÜ N-ob Œº b) C.‚ãÜ Œ≤)
      ‚â°‚ü® C.‚ãÜAssoc _ _ _ ‚ü©
    (F-hom M (F-hom M f) C.‚ãÜ (N-ob Œº b C.‚ãÜ Œ≤))
      ‚â°‚ü® cong (F-hom M (F-hom M f) C.‚ãÜ_) (str-Œº isEMB) ‚ü©
    (F-hom M (F-hom M f) C.‚ãÜ (F-hom M Œ≤ C.‚ãÜ Œ≤))
      ‚â°‚ü® sym (C.‚ãÜAssoc _ _ _) ‚ü©
    ((F-hom M (F-hom M f) C.‚ãÜ F-hom M Œ≤) C.‚ãÜ Œ≤)
      ‚â°‚ü® cong (C._‚ãÜ Œ≤) (sym (F-seq M _ _)) ‚ü©
    (F-hom M (F-hom M f C.‚ãÜ Œ≤) C.‚ãÜ Œ≤) ‚àé
  rightInv (emBijection a (algebra b Œ≤ , isEMB)) f =
    (N-ob Œ∑ a C.‚ãÜ (F-hom M f C.‚ãÜ Œ≤))
      ‚â°‚ü® sym (C.‚ãÜAssoc _ _ _) ‚ü©
    ((N-ob Œ∑ a C.‚ãÜ F-hom M f) C.‚ãÜ Œ≤)
      ‚â°‚ü® cong (C._‚ãÜ Œ≤) (sym (N-hom Œ∑ f)) ‚ü©
    ((f C.‚ãÜ N-ob Œ∑ b) C.‚ãÜ Œ≤)
      ‚â°‚ü® C.‚ãÜAssoc _ _ _ ‚ü©
    (f C.‚ãÜ (N-ob Œ∑ b C.‚ãÜ Œ≤))
      ‚â°‚ü® cong (f C.‚ãÜ_) (str-Œ∑ isEMB) ‚ü©
    (f C.‚ãÜ C.id)
      ‚â°‚ü® C.‚ãÜIdR _ ‚ü©
    f ‚àé
  leftInv (emBijection a (algebra b Œ≤ , isEMB)) (algebraHom f isalgF) = AlgebraHom‚â° M (
    (F-hom M (N-ob Œ∑ a C.‚ãÜ f) C.‚ãÜ Œ≤)
      ‚â°‚ü® cong (C._‚ãÜ Œ≤) (F-seq M _ _) ‚ü©
    ((F-hom M (N-ob Œ∑ a) C.‚ãÜ F-hom M f) C.‚ãÜ Œ≤)
      ‚â°‚ü® C.‚ãÜAssoc _ _ _ ‚ü©
    (F-hom M (N-ob Œ∑ a) C.‚ãÜ (F-hom M f C.‚ãÜ Œ≤))
      ‚â°‚ü® cong (F-hom M (N-ob Œ∑ a) C.‚ãÜ_) (sym isalgF) ‚ü©
    (F-hom M (N-ob Œ∑ a) C.‚ãÜ (N-ob Œº a C.‚ãÜ f))
      ‚â°‚ü® sym (C.‚ãÜAssoc _ _ _) ‚ü©
    ((F-hom M (N-ob Œ∑ a) C.‚ãÜ N-ob Œº a) C.‚ãÜ f)
      ‚â°‚ü® cong (C._‚ãÜ f) (funExt‚Åª (congP (Œª i ‚Üí N-ob) idr-Œº) a) ‚ü©
    (C.id C.‚ãÜ f)
      ‚â°‚ü® C.‚ãÜIdL f ‚ü©
    f ‚àé
    )

  emAdjunction : FreeEMAlgebra ‚ä£ ForgetEMAlgebra
  adjIso emAdjunction {a} {algebra b Œ≤ , isEMB} = emBijection a (algebra b Œ≤ , isEMB)
  adjNatInD emAdjunction {a} {algebra b Œ≤ , isEMB} {algebra c Œ≥ , isEMC}
    (algebraHom f isalgF) (algebraHom g isalgG) =
    sym (C.‚ãÜAssoc _ _ _)
  adjNatInC emAdjunction {a} {b} {algebra c Œ≥ , isEMC} f g = AlgebraHom‚â° M (
    (F-hom M (g C.‚ãÜ f) C.‚ãÜ Œ≥)
      ‚â°‚ü® cong (C._‚ãÜ Œ≥) (F-seq M _ _) ‚ü©
    ((F-hom M g C.‚ãÜ F-hom M f) C.‚ãÜ Œ≥)
      ‚â°‚ü® C.‚ãÜAssoc _ _ _ ‚ü©
    (F-hom M g C.‚ãÜ (F-hom M f C.‚ãÜ Œ≥)) ‚àé
    )
