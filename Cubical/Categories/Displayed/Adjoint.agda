{-
  Definition of an adjoint pair displayed over another adjoint pair
-}
{-# OPTIONS --safe #-}
module Cubical.Categories.Displayed.Adjoint where

open import Cubical.Foundations.Prelude
open import Cubical.Categories.Category.Base
open import Cubical.Categories.Functor.Base
open import Cubical.Categories.Adjoint
open import Cubical.Categories.Displayed.Base
open import Cubical.Categories.Displayed.Functor
open import Cubical.Categories.Displayed.NaturalTransformation

private
  variable
    ‚ÑìC ‚ÑìC' ‚ÑìC·¥∞ ‚ÑìC·¥∞' ‚ÑìD ‚ÑìD' ‚ÑìD·¥∞ ‚ÑìD·¥∞' : Level

module UnitCounit·¥∞ where

  -- Adjoint definition 1: unit-counit
  record _‚ä£[_]_ {C : Category ‚ÑìC ‚ÑìC'} {D : Category ‚ÑìD ‚ÑìD'}
    {F : Functor C D} {G : Functor D C}

    {C·¥∞ : Category·¥∞ C ‚ÑìC·¥∞ ‚ÑìC·¥∞'} {D·¥∞ : Category·¥∞ D ‚ÑìD·¥∞ ‚ÑìD·¥∞'}
    (F·¥∞ : Functor·¥∞ F C·¥∞ D·¥∞) (A : F UnitCounit.‚ä£ G) (G·¥∞ : Functor·¥∞ G D·¥∞ C·¥∞)
    : Type (‚Ñì-max (‚Ñì-max (‚Ñì-max ‚ÑìC ‚ÑìC') (‚Ñì-max ‚ÑìC·¥∞ ‚ÑìC·¥∞')) (‚Ñì-max (‚Ñì-max ‚ÑìD ‚ÑìD') (‚Ñì-max ‚ÑìD·¥∞ ‚ÑìD·¥∞'))) where

    open Category
    open NatTrans·¥∞
    private
      module A = UnitCounit._‚ä£_ A
      module C·¥∞ = Category·¥∞ C·¥∞
      module D·¥∞ = Category·¥∞ D·¥∞
      module F·¥∞ = Functor·¥∞ F·¥∞
      module G·¥∞ = Functor·¥∞ G·¥∞

    field
      -- unit
      Œ∑·¥∞ : NatTrans·¥∞ A.Œ∑ ùüô·¥∞‚ü® C·¥∞ ‚ü© (funcComp·¥∞ G·¥∞ F·¥∞)
      -- counit
      Œµ·¥∞ : NatTrans·¥∞ A.Œµ (funcComp·¥∞ F·¥∞ G·¥∞) ùüô·¥∞‚ü® D·¥∞ ‚ü©
      -- triangle identities
      Œî‚ÇÅ·¥∞ : {x : C .ob} (x·¥∞ : C·¥∞.ob[ x ])
        ‚Üí PathP (Œª i ‚Üí D·¥∞ [ A.Œî‚ÇÅ x i ][ F·¥∞.F-ob·¥∞ x·¥∞ , F·¥∞.F-ob·¥∞ x·¥∞ ])
            (F·¥∞.F-hom·¥∞ (Œ∑·¥∞ .N-ob·¥∞ x·¥∞) D·¥∞.‚ãÜ·¥∞ Œµ·¥∞ .N-ob·¥∞ (F·¥∞.F-ob·¥∞ x·¥∞))
            D·¥∞.id·¥∞
      Œî‚ÇÇ·¥∞ : {y : D .ob} (y·¥∞ : D·¥∞.ob[ y ])
        ‚Üí PathP (Œª i ‚Üí C·¥∞ [ A.Œî‚ÇÇ y i ][ G·¥∞.F-ob·¥∞ y·¥∞ , G·¥∞.F-ob·¥∞ y·¥∞ ])
            (Œ∑·¥∞ .N-ob·¥∞ (G·¥∞.F-ob·¥∞ y·¥∞) C·¥∞.‚ãÜ·¥∞ G·¥∞.F-hom·¥∞ (Œµ·¥∞ .N-ob·¥∞ y·¥∞))
            C·¥∞.id·¥∞
