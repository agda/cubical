{-
  Definition of a functor displayed over another functor.
  Some definitions were guided by those at https://1lab.dev
-}
{-# OPTIONS --safe #-}
module Cubical.Categories.Displayed.Functor where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Function
open import Cubical.Foundations.GroupoidLaws
open import Cubical.Foundations.HLevels
open import Cubical.Data.Sigma
open import Cubical.Categories.Category.Base
open import Cubical.Categories.Functor
open import Cubical.Categories.Displayed.Base

private
  variable
    ‚ÑìB ‚ÑìB' ‚ÑìB·¥∞ ‚ÑìB·¥∞' ‚ÑìC ‚ÑìC' ‚ÑìC·¥∞ ‚ÑìC·¥∞' ‚ÑìD ‚ÑìD' ‚ÑìD·¥∞ ‚ÑìD·¥∞' ‚ÑìE ‚ÑìE' ‚ÑìE·¥∞ ‚ÑìE·¥∞' : Level

record Functor·¥∞ {C : Category ‚ÑìC ‚ÑìC'} {D : Category ‚ÑìD ‚ÑìD'}
  (F : Functor C D) (C·¥∞ : Category·¥∞ C ‚ÑìC·¥∞ ‚ÑìC·¥∞') (D·¥∞ : Category·¥∞ D ‚ÑìD·¥∞ ‚ÑìD·¥∞')
  : Type (‚Ñì-max (‚Ñì-max (‚Ñì-max ‚ÑìC ‚ÑìC') (‚Ñì-max ‚ÑìD ‚ÑìD')) (‚Ñì-max (‚Ñì-max ‚ÑìC·¥∞ ‚ÑìC·¥∞') (‚Ñì-max ‚ÑìD·¥∞ ‚ÑìD·¥∞'))) where
  no-eta-equality

  open Category
  open Functor F
  private
    module C·¥∞ = Category·¥∞ C·¥∞
    module D·¥∞ = Category·¥∞ D·¥∞

  field
    F-ob·¥∞  : {x : C .ob} ‚Üí C·¥∞.ob[ x ] ‚Üí D·¥∞.ob[ F-ob x ]
    F-hom·¥∞ : {x y : C .ob} {f : C [ x , y ]} {x·¥∞ : C·¥∞.ob[ x ]} {y·¥∞ : C·¥∞.ob[ y ]}
      ‚Üí C·¥∞ [ f ][ x·¥∞ , y·¥∞ ] ‚Üí D·¥∞ [ F-hom f ][ F-ob·¥∞ x·¥∞ , F-ob·¥∞ y·¥∞ ]
    F-id·¥∞ : {x : C .ob} {x·¥∞ : C·¥∞.ob[ x ]}
      ‚Üí PathP (Œª i ‚Üí D·¥∞ [ F-id i ][ F-ob·¥∞ x·¥∞ , F-ob·¥∞ x·¥∞ ] ) (F-hom·¥∞ C·¥∞.id·¥∞) D·¥∞.id·¥∞
    F-seq·¥∞ : {x y z : C .ob} {f : C [ x , y ]} {g : C [ y , z ]}
      {x·¥∞ : C·¥∞.ob[ x ]} {y·¥∞ : C·¥∞.ob[ y ]} {z·¥∞ : C·¥∞.ob[ z ]}
      (f·¥∞ : C·¥∞ [ f ][ x·¥∞ , y·¥∞ ]) (g·¥∞ : C·¥∞ [ g ][ y·¥∞ , z·¥∞ ])
      ‚Üí PathP (Œª i ‚Üí D·¥∞ [ F-seq f g i ][ F-ob·¥∞ x·¥∞ , F-ob·¥∞ z·¥∞ ]) (F-hom·¥∞ (f·¥∞ C·¥∞.‚ãÜ·¥∞ g·¥∞)) (F-hom·¥∞ f·¥∞ D·¥∞.‚ãÜ·¥∞ F-hom·¥∞ g·¥∞)

module _ {C : Category ‚ÑìC ‚ÑìC'} {D : Category ‚ÑìD ‚ÑìD'} {F G : Functor C D} {H : F ‚â° G}
  {C·¥∞ : Category·¥∞ C ‚ÑìC·¥∞ ‚ÑìC·¥∞'} {D·¥∞ : Category·¥∞ D ‚ÑìD·¥∞ ‚ÑìD·¥∞'}
  {F·¥∞ : Functor·¥∞ F C·¥∞ D·¥∞} {G·¥∞ : Functor·¥∞ G C·¥∞ D·¥∞}
  where

  open Category
  open Functor
  open Functor·¥∞
  private
    module C·¥∞ = Category·¥∞ C·¥∞
    module D·¥∞ = Category·¥∞ D·¥∞
    module F·¥∞ = Functor·¥∞ F·¥∞
    module G·¥∞ = Functor·¥∞ G·¥∞

  Functor·¥∞‚â° :
    (H·¥∞ : {x : C .ob} (x·¥∞ : C·¥∞.ob[ x ]) ‚Üí PathP (Œª i ‚Üí D·¥∞.ob[ H i ‚üÖ x ‚üÜ ]) (F·¥∞.F-ob·¥∞ x·¥∞) (G·¥∞.F-ob·¥∞ x·¥∞))
    ‚Üí ({x y : C .ob} {f : C [ x , y ]} {x·¥∞ : C·¥∞.ob[ x ]} {y·¥∞ : C·¥∞.ob[ y ]} (f·¥∞ : C·¥∞ [ f ][ x·¥∞ , y·¥∞ ])
        ‚Üí PathP (Œª i ‚Üí D·¥∞ [ H i ‚ü™ f ‚ü´ ][ H·¥∞ x·¥∞ i , H·¥∞ y·¥∞ i ]) (F·¥∞.F-hom·¥∞ f·¥∞) (G·¥∞.F-hom·¥∞ f·¥∞))
    ‚Üí PathP (Œª i ‚Üí Functor·¥∞ (H i) C·¥∞ D·¥∞) F·¥∞ G·¥∞
  Functor·¥∞‚â° H·¥∞ Œ± i .F-ob·¥∞ x·¥∞ = H·¥∞ x·¥∞ i
  Functor·¥∞‚â° H·¥∞ Œ± i .F-hom·¥∞ f·¥∞ = Œ± f·¥∞ i
  Functor·¥∞‚â° H·¥∞ Œ± i .F-id·¥∞ {x·¥∞ = x·¥∞} =
    isProp‚ÜíPathP
      {B = Œª i ‚Üí PathP (Œª j ‚Üí D·¥∞ [ H i .F-id j ][ H·¥∞ x·¥∞ i , H·¥∞ x·¥∞ i ]) (Œ± (C·¥∞.id·¥∞) i) D·¥∞.id·¥∞}
      (Œª i ‚Üí isOfHLevelPathP' 1 D·¥∞.isSetHom·¥∞ _ _)
      F·¥∞.F-id·¥∞
      G·¥∞.F-id·¥∞
      i
  Functor·¥∞‚â° H·¥∞ Œ± i .F-seq·¥∞ {f = f} {g = g} {x·¥∞ = x·¥∞} {z·¥∞ = z·¥∞} f·¥∞ g·¥∞ =
    isProp‚ÜíPathP
      {B = Œª i ‚Üí
        PathP (Œª j ‚Üí D·¥∞ [ H i .F-seq f g j ][ H·¥∞ x·¥∞ i , H·¥∞ z·¥∞ i ])
          (Œ± (f·¥∞ C·¥∞.‚ãÜ·¥∞ g·¥∞) i) (Œ± f·¥∞ i D·¥∞.‚ãÜ·¥∞ Œ± g·¥∞ i)}
      (Œª i ‚Üí isOfHLevelPathP' 1 D·¥∞.isSetHom·¥∞ _ _)
      (F·¥∞.F-seq·¥∞ f·¥∞ g·¥∞)
      (G·¥∞.F-seq·¥∞ f·¥∞ g·¥∞)
      i

-- Displayed identity functor

module _ where
  open Functor·¥∞

  ùüô·¥∞‚ü®_‚ü© : {C : Category ‚ÑìC ‚ÑìC'} (C·¥∞ : Category·¥∞ C ‚ÑìC·¥∞ ‚ÑìC·¥∞') ‚Üí Functor·¥∞ ùüô‚ü® C ‚ü© C·¥∞ C·¥∞
  ùüô·¥∞‚ü® C·¥∞ ‚ü© .F-ob·¥∞ x    = x
  ùüô·¥∞‚ü® C·¥∞ ‚ü© .F-hom·¥∞ f   = f
  ùüô·¥∞‚ü® C·¥∞ ‚ü© .F-id·¥∞      = refl
  ùüô·¥∞‚ü® C·¥∞ ‚ü© .F-seq·¥∞ _ _ = refl

-- Displayed functor composition

module _ {C : Category ‚ÑìC ‚ÑìC'} {D : Category ‚ÑìD ‚ÑìD'} {E : Category ‚ÑìE ‚ÑìE'}
  {F : Functor C D} {G : Functor D E}
  {C·¥∞ : Category·¥∞ C ‚ÑìC·¥∞ ‚ÑìC·¥∞'} {D·¥∞ : Category·¥∞ D ‚ÑìD·¥∞ ‚ÑìD·¥∞'} {E·¥∞ : Category·¥∞ E ‚ÑìE·¥∞ ‚ÑìE·¥∞'}
  (G·¥∞ : Functor·¥∞ G D·¥∞ E·¥∞) (F·¥∞ : Functor·¥∞ F C·¥∞ D·¥∞)
  where

  open Functor·¥∞
  private
    module F·¥∞ = Functor·¥∞ F·¥∞
    module G·¥∞ = Functor·¥∞ G·¥∞

  funcComp·¥∞ : Functor·¥∞ (funcComp G F) C·¥∞ E·¥∞
  funcComp·¥∞ .F-ob·¥∞ = G·¥∞.F-ob·¥∞ ‚àò F·¥∞.F-ob·¥∞
  funcComp·¥∞ .F-hom·¥∞ = G·¥∞.F-hom·¥∞ ‚àò F·¥∞.F-hom·¥∞
  funcComp·¥∞ .F-id·¥∞ = compPathP' {B = E·¥∞ [_][ _ , _ ]} (congP (Œª _ ‚Üí G·¥∞.F-hom·¥∞) F·¥∞.F-id·¥∞) G·¥∞.F-id·¥∞
  funcComp·¥∞ .F-seq·¥∞ _ _ =
    compPathP' {B = E·¥∞ [_][ _ , _ ]} (congP (Œª _ ‚Üí G·¥∞.F-hom·¥∞) (F·¥∞.F-seq·¥∞ _ _) ) (G·¥∞.F-seq·¥∞ _ _)

_‚àòF·¥∞_ = funcComp·¥∞

-- Displayed functor associativity

F-assoc·¥∞ : {B : Category ‚ÑìB ‚ÑìB'} {C : Category ‚ÑìC ‚ÑìC'} {D : Category ‚ÑìD ‚ÑìD'} {E : Category ‚ÑìE ‚ÑìE'}
  {F : Functor B C} {G : Functor C D} {H : Functor D E}
  {B·¥∞ : Category·¥∞ B ‚ÑìB·¥∞ ‚ÑìB·¥∞'} {C·¥∞ : Category·¥∞ C ‚ÑìC·¥∞ ‚ÑìC·¥∞'}
  {D·¥∞ : Category·¥∞ D ‚ÑìD·¥∞ ‚ÑìD·¥∞'} {E·¥∞ : Category·¥∞ E ‚ÑìE·¥∞ ‚ÑìE·¥∞'}
  {F·¥∞ : Functor·¥∞ F B·¥∞ C·¥∞} {G·¥∞ : Functor·¥∞ G C·¥∞ D·¥∞} {H·¥∞ : Functor·¥∞ H D·¥∞ E·¥∞}
  ‚Üí PathP (Œª i ‚Üí Functor·¥∞ (F-assoc {F = F} {G = G} {H = H} i) B·¥∞ E·¥∞) (H·¥∞ ‚àòF·¥∞ (G·¥∞ ‚àòF·¥∞ F·¥∞)) ((H·¥∞ ‚àòF·¥∞ G·¥∞) ‚àòF·¥∞ F·¥∞)
F-assoc·¥∞ = Functor·¥∞‚â° (Œª _ ‚Üí refl) (Œª _ ‚Üí refl)

-- Displayed functor unit laws

module _ {C : Category ‚ÑìC ‚ÑìC'} {D : Category ‚ÑìD ‚ÑìD'} {F : Functor C D}
  {C·¥∞ : Category·¥∞ C ‚ÑìC·¥∞ ‚ÑìC·¥∞'} {D·¥∞ : Category·¥∞ D ‚ÑìD·¥∞ ‚ÑìD·¥∞'} {F·¥∞ : Functor·¥∞ F C·¥∞ D·¥∞} where

  open Functor·¥∞
  private
    module F·¥∞ = Functor·¥∞ F·¥∞

  F-lUnit·¥∞ : PathP (Œª i ‚Üí Functor·¥∞ (F-lUnit {F = F} i) C·¥∞ D·¥∞) (F·¥∞ ‚àòF·¥∞ ùüô·¥∞‚ü® C·¥∞ ‚ü©) F·¥∞
  F-lUnit·¥∞ i .F-ob·¥∞ x = F·¥∞.F-ob·¥∞ x
  F-lUnit·¥∞ i .F-hom·¥∞ f = F·¥∞.F-hom·¥∞ f
  F-lUnit·¥∞ i .F-id·¥∞ {x} =  lUnitP' (D·¥∞ [_][ _ , _ ]) F·¥∞.F-id·¥∞ (~ i)
  F-lUnit·¥∞ i .F-seq·¥∞ f g = lUnitP' (D·¥∞ [_][ _ , _ ]) (F·¥∞.F-seq·¥∞ _ _) (~ i)

  F-rUnit·¥∞ : PathP (Œª i ‚Üí Functor·¥∞ (F-rUnit {F = F} i) C·¥∞ D·¥∞) (ùüô·¥∞‚ü® D·¥∞ ‚ü© ‚àòF·¥∞ F·¥∞) F·¥∞
  F-rUnit·¥∞ i .F-ob·¥∞ x = F·¥∞.F-ob·¥∞ x
  F-rUnit·¥∞ i .F-hom·¥∞ f = F·¥∞.F-hom·¥∞ f
  F-rUnit·¥∞ i .F-id·¥∞ {x} = rUnitP' (D·¥∞ [_][ _ , _ ]) F·¥∞.F-id·¥∞ (~ i)
  F-rUnit·¥∞ i .F-seq·¥∞ _ _ = rUnitP' (D·¥∞ [_][ _ , _ ]) (F·¥∞.F-seq·¥∞ _ _) (~ i)

-- Total functor of a displayed functor
module _ {C : Category ‚ÑìC ‚ÑìC'} {D : Category ‚ÑìD ‚ÑìD'}
  {F : Functor C D} {C·¥∞ : Category·¥∞ C ‚ÑìC·¥∞ ‚ÑìC·¥∞'} {D·¥∞ : Category·¥∞ D ‚ÑìD·¥∞ ‚ÑìD·¥∞'}
  (F·¥∞ : Functor·¥∞ F C·¥∞ D·¥∞)
  where

  open Functor
  private
    module F·¥∞ = Functor·¥∞ F·¥∞

  ‚à´F : Functor (‚à´C C·¥∞) (‚à´C D·¥∞)
  ‚à´F .F-ob (x , x·¥∞) = _ , F·¥∞.F-ob·¥∞ x·¥∞
  ‚à´F .F-hom (_ , f·¥∞) = _ , F·¥∞.F-hom·¥∞ f·¥∞
  ‚à´F .F-id = Œ£PathP (_ , F·¥∞.F-id·¥∞)
  ‚à´F .F-seq _ _ = Œ£PathP (_ , (F·¥∞.F-seq·¥∞ _ _))
