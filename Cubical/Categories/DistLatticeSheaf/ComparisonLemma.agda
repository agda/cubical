{-# OPTIONS --safe --lossy-unification #-}
module Cubical.Categories.DistLatticeSheaf.ComparisonLemma where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Function
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Structure
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Powerset
open import Cubical.Data.Sigma
open import Cubical.Data.Nat using (‚Ñï ; _+_)
open import Cubical.Data.Nat.Order hiding (_‚â§_)
open import Cubical.Data.FinData
open import Cubical.Data.FinData.Order
open import Cubical.Data.Sum

open import Cubical.Relation.Binary.Poset
open import Cubical.HITs.PropositionalTruncation

open import Cubical.Algebra.Semilattice
open import Cubical.Algebra.Lattice
open import Cubical.Algebra.DistLattice
open import Cubical.Algebra.DistLattice.Basis
open import Cubical.Algebra.DistLattice.BigOps

open import Cubical.Categories.Category.Base
open import Cubical.Categories.Morphism
open import Cubical.Categories.Functor
open import Cubical.Categories.NaturalTransformation
open import Cubical.Categories.Equivalence
open import Cubical.Categories.Limits.Limits
open import Cubical.Categories.Limits.Pullback
open import Cubical.Categories.Limits.Terminal
open import Cubical.Categories.Limits.RightKan
open import Cubical.Categories.Instances.Poset
open import Cubical.Categories.Instances.Semilattice
open import Cubical.Categories.Instances.Lattice
open import Cubical.Categories.Instances.DistLattice
open import Cubical.Categories.Instances.Functors

open import Cubical.Categories.DistLatticeSheaf.Diagram
open import Cubical.Categories.DistLatticeSheaf.Base
open import Cubical.Categories.DistLatticeSheaf.Extension


private
  variable
    ‚Ñì ‚Ñì' ‚Ñì'' : Level

module _ (L : DistLattice ‚Ñì) (C : Category ‚Ñì' ‚Ñì'') (limitC : Limits {‚Ñì} {‚Ñì} C)
         (B : ‚Ñô (fst L)) (isBasisB : IsBasis L B) where


 open Category hiding (_‚àò_)
 open Functor
 open NatTrans
 open Cone
 open LimCone
 open SheafOnBasis L C B isBasisB
 open PreSheafExtension L C limitC B

 open DistLatticeStr ‚¶É...‚¶Ñ
 open JoinSemilattice (Lattice‚ÜíJoinSemilattice (DistLattice‚ÜíLattice L))
 open PosetStr (IndPoset .snd) hiding (_‚â§_)
 open Join L


 private
  instance
   _ = snd L

  L·µí·µñ = DistLatticeCategory L ^op
  B·µí·µñ = Œ£PropCat (DistLatticeCategory L) B ^op

  ShB = Œ£PropCat (FUNCTOR B·µí·µñ C) isDLBasisSheafProp
  ShL = Œ£PropCat (FUNCTOR L·µí·µñ C) (isDLSheafProp L C)

  i = baseIncl ^opF

 restPresSheafProp : ‚àÄ (F : Functor L·µí·µñ C) ‚Üí isDLSheaf L C F ‚Üí isDLBasisSheaf (F ‚àòF i)
 restPresSheafProp F isSheafF Œ± ‚ãÅŒ±‚ààB =
   transport (Œª i ‚Üí isLimCone (diagPath i) (F .F-ob (‚ãÅ Œ±')) (limConesPathP i)) (isSheafF _ Œ±')
   where
   open condCone Œ±

   Œ±' : FinVec (fst L) _
   Œ±' i = Œ± i .fst

   diagPath : F ‚àòF (FinVec‚ÜíDiag L Œ±') ‚â° (F ‚àòF i) ‚àòF BDiag
   diagPath = Functor‚â° diagPathOb diagPathHom
     where
     diagPathOb : ‚àÄ c ‚Üí (F ‚àòF (FinVec‚ÜíDiag L Œ±')) .F-ob c ‚â° ((F ‚àòF i) ‚àòF BDiag) .F-ob c
     diagPathOb (sing i) = refl
     diagPathOb (pair i j i<j) = cong (F .F-ob) (‚àßlComm _ _)

     diagPathHom : ‚àÄ {c} {d} f ‚Üí PathP (Œª i ‚Üí C [ diagPathOb c i , diagPathOb d i ])
                                       ((F ‚àòF (FinVec‚ÜíDiag L Œ±')) .F-hom f)
                                       (((F ‚àòF i) ‚àòF BDiag) .F-hom f)
     diagPathHom {sing i} idAr = refl
     diagPathHom {pair i j i<j} idAr = functorCongP {F = F} (toPathP (is-prop-valued _ _ _ _))
     diagPathHom singPairL = functorCongP {F = F} (toPathP (is-prop-valued _ _ _ _))
     diagPathHom singPairR = functorCongP {F = F} (toPathP (is-prop-valued _ _ _ _))

   limConesPathP : PathP (Œª i ‚Üí Cone (diagPath i) (F .F-ob (‚ãÅ Œ±')))
                         (F-cone F (‚ãÅCone L Œ±')) (F-cone (F ‚àòF i) (B‚ãÅCone ‚ãÅŒ±‚ààB))
   limConesPathP = conePathP limConesPathPOb
     where
     limConesPathPOb : ‚àÄ c ‚Üí PathP (Œª i ‚Üí C [ F .F-ob (‚ãÅ Œ±') , diagPath i .F-ob c ])
                                   (F-cone F (‚ãÅCone L Œ±') .coneOut c)
                                   (F-cone (F ‚àòF i) (B‚ãÅCone ‚ãÅŒ±‚ààB) .coneOut c)
     limConesPathPOb (sing i) = refl
     limConesPathPOb (pair i j i<j) = functorCongP {F = F} (toPathP (is-prop-valued _ _ _ _))


 --restriction to basis as functor
 restSh : Functor ShL ShB
 restSh = Œ£PropCatFunc (precomposeF C i) restPresSheafProp


 -- notation
 private module _ {F G : Functor B·µí·µñ C} (Œ± : NatTrans F G) (x : ob L·µí·µñ) where
  theDiag = (_‚ÜìDiag limitC i F x)
  -- note that (_‚ÜìDiag limitC i F x) = (_‚ÜìDiag limitC i G x) definitionally
  FLimCone = limitC (_‚ÜìDiag limitC i F x) (T* limitC i F x)
  GLimCone = limitC (_‚ÜìDiag limitC i G x) (T* limitC i G x)

  ‚Üìnt : NatTrans (T* limitC i F x) (T* limitC i G x)
  N-ob ‚Üìnt u = Œ± .N-ob (u .fst)
  N-hom ‚Üìnt e = Œ± .N-hom (e .fst)

  module _ (y : ob L·µí·µñ) (x‚â•y : L·µí·µñ [ x , y ]) where
   GYLimCone = limitC (_‚ÜìDiag limitC i G y) (T* limitC i G y)
   FYLimCone = limitC (_‚ÜìDiag limitC i F y) (T* limitC i F y)

   diagCone : Cone (T* limitC i G y) (RanOb limitC i F x)
   coneOut diagCone (u , y‚â•u) = limOut FLimCone (u , is-trans _ _ _ y‚â•u x‚â•y)
                                  ‚ãÜ‚ü® C ‚ü© Œ± .N-ob u
   coneOutCommutes diagCone {u = (u , y‚â•u)} {v = (v , y‚â•v)} (u‚â•v , _) =
       (limOut FLimCone (u , is-trans _ _ _ y‚â•u x‚â•y) ‚ãÜ‚ü® C ‚ü© Œ± .N-ob u) ‚ãÜ‚ü® C ‚ü© G .F-hom u‚â•v
     ‚â°‚ü® ‚ãÜAssoc C _ _ _ ‚ü©
       limOut FLimCone (u , is-trans _ _ _ y‚â•u x‚â•y) ‚ãÜ‚ü® C ‚ü© (Œ± .N-ob u ‚ãÜ‚ü® C ‚ü© G .F-hom u‚â•v)
     ‚â°‚ü® cong (seq' C (limOut FLimCone (u , is-trans _ _ _ y‚â•u x‚â•y))) (sym (Œ± .N-hom u‚â•v)) ‚ü©
       limOut FLimCone (u , is-trans _ _ _ y‚â•u x‚â•y) ‚ãÜ‚ü® C ‚ü© (F .F-hom u‚â•v ‚ãÜ‚ü® C ‚ü© Œ± .N-ob v)
     ‚â°‚ü® sym (‚ãÜAssoc C _ _ _) ‚ü©
       (limOut FLimCone (u , is-trans _ _ _ y‚â•u x‚â•y) ‚ãÜ‚ü® C ‚ü© F .F-hom u‚â•v) ‚ãÜ‚ü® C ‚ü© Œ± .N-ob v
     ‚â°‚ü® cong (Œª x ‚Üí x ‚ãÜ‚ü® C ‚ü© Œ± .N-ob v) (limOutCommutes FLimCone (u‚â•v , is-prop-valued _ _ _ _)) ‚ü©
       limOut FLimCone (v , is-trans _ _ _ y‚â•v x‚â•y) ‚ãÜ‚ü® C ‚ü© Œ± .N-ob v ‚àé
   diagArrow : C [ RanOb limitC i F x , RanOb limitC i G y ]
   diagArrow = limArrow GYLimCone _ diagCone



 DLRanFun : Functor (FUNCTOR B·µí·µñ C) (FUNCTOR L·µí·µñ C)
 F-ob DLRanFun = DLRan
 N-ob (F-hom DLRanFun Œ±) x = limOfArrows (FLimCone Œ± _) (GLimCone Œ± _) (‚Üìnt Œ± x)
 N-hom (F-hom DLRanFun {x = F} {y = G} Œ±) {x = x} {y = y} x‚â•y =
   sym (limArrowUnique (GLimCone Œ± y) _ (diagCone Œ± x y x‚â•y) _ isConeMorL)
     ‚àô (limArrowUnique (GLimCone Œ± y) _ _ _ isConeMorR)
   where
   l = limArrow (FLimCone Œ± y) _ (RanCone limitC i F x‚â•y)
           ‚ãÜ‚ü® C ‚ü© limOfArrows (FLimCone Œ± _) (GLimCone Œ± _) (‚Üìnt Œ± y)

   isConeMorL : isConeMor (diagCone Œ± x y x‚â•y) (limCone (GLimCone Œ± y)) l
   isConeMorL (u , y‚â•u) =
       l ‚ãÜ‚ü® C ‚ü© (limOut (GLimCone Œ± y) (u , y‚â•u))
     ‚â°‚ü® ‚ãÜAssoc C _ _ _ ‚ü©
       limArrow (FLimCone Œ± y) _ (RanCone limitC i F x‚â•y)
         ‚ãÜ‚ü® C ‚ü© (limOfArrows (FLimCone Œ± _) (GLimCone Œ± _) (‚Üìnt Œ± y)
                   ‚ãÜ‚ü® C ‚ü© (limOut (GLimCone Œ± y) (u , y‚â•u)))
     ‚â°‚ü® cong (seq' C (limArrow (FLimCone Œ± y) _ (RanCone limitC i F x‚â•y)))
             (limOfArrowsOut (FLimCone Œ± _) (GLimCone Œ± _) _ _) ‚ü©
       limArrow (FLimCone Œ± y) _ (RanCone limitC i F x‚â•y)
         ‚ãÜ‚ü® C ‚ü© (limOut (FLimCone Œ± _) (u , y‚â•u) ‚ãÜ‚ü® C ‚ü© Œ± .N-ob u)
     ‚â°‚ü® sym (‚ãÜAssoc C _ _ _) ‚ü©
       (limArrow (FLimCone Œ± y) _ (RanCone limitC i F x‚â•y)
         ‚ãÜ‚ü® C ‚ü© (limOut (FLimCone Œ± _) (u , y‚â•u))) ‚ãÜ‚ü® C ‚ü© Œ± .N-ob u
     ‚â°‚ü® cong (Œª x ‚Üí x ‚ãÜ‚ü® C ‚ü© (Œ± .N-ob u)) (limArrowCommutes (FLimCone Œ± _) _ _ _) ‚ü©
       limOut (FLimCone Œ± x) (u , is-trans _ _ _ y‚â•u x‚â•y) ‚ãÜ‚ü® C ‚ü© Œ± .N-ob u ‚àé

   r = limOfArrows (FLimCone Œ± _) (GLimCone Œ± _) (‚Üìnt Œ± x)
           ‚ãÜ‚ü® C ‚ü© limArrow (GLimCone Œ± y) _ (RanCone limitC i G x‚â•y)

   isConeMorR : isConeMor (diagCone Œ± x y x‚â•y) (limCone (GLimCone Œ± y)) r
   isConeMorR (u , y‚â•u) =
       r ‚ãÜ‚ü® C ‚ü© (limOut (GLimCone Œ± y) (u , y‚â•u))
     ‚â°‚ü® ‚ãÜAssoc C _ _ _ ‚ü©
       limOfArrows (FLimCone Œ± _) (GLimCone Œ± _) (‚Üìnt Œ± x)
         ‚ãÜ‚ü® C ‚ü© (limArrow (GLimCone Œ± y) _ (RanCone limitC i G x‚â•y)
                 ‚ãÜ‚ü® C ‚ü© (limOut (GLimCone Œ± y) (u , y‚â•u)))
     ‚â°‚ü® cong (seq' C (limOfArrows (FLimCone Œ± _) (GLimCone Œ± _) (‚Üìnt Œ± x)))
          (limArrowCommutes (GLimCone Œ± _) _ _ _) ‚ü©
       limOfArrows (FLimCone Œ± _) (GLimCone Œ± _) (‚Üìnt Œ± x)
         ‚ãÜ‚ü® C ‚ü© limOut (GLimCone Œ± x) (u , is-trans _ _ _ y‚â•u x‚â•y)
     ‚â°‚ü® limOfArrowsOut (FLimCone Œ± x) (GLimCone Œ± x) _ _ ‚ü©
       limOut (FLimCone Œ± x) (u , is-trans _ _ _ y‚â•u x‚â•y) ‚ãÜ‚ü® C ‚ü© Œ± .N-ob u ‚àé


 F-id DLRanFun {x = F} = makeNatTransPath
                           (funExt Œª x ‚Üí limOfArrowsId (FLimCone (idTrans F) x))
 F-seq DLRanFun Œ± Œ≤ = makeNatTransPath
                        (funExt Œª x ‚Üí limOfArrowsSeq (FLimCone Œ± x) (GLimCone Œ± x)
                                                     (GLimCone Œ≤ x) (‚Üìnt Œ± x) (‚Üìnt Œ≤ x))



 --extension of sheaves as functor
 extSh : Functor ShB ShL
 extSh = Œ£PropCatFunc DLRanFun (isDLSheafDLRan isBasisB)

 open _‚âÉ·∂ú_ renaming (isEquiv to isEquivC)
 open isEquivalence
 open NatIso
 open isIso

 DLPshfEquiv : (FUNCTOR B·µí·µñ C) ‚âÉ·∂ú (FUNCTOR L·µí·µñ C)
 func DLPshfEquiv = DLRanFun
 invFunc (isEquivC DLPshfEquiv) = precomposeF C i
 -- the unit
 Œ∑ (isEquivC DLPshfEquiv) = symNatIso Œ∑‚Åª¬π
   where
   Œ∑‚Åª¬π : NatIso ((precomposeF C i) ‚àòF DLRanFun) ùüô‚ü® FUNCTOR B·µí·µñ C ‚ü©
   N-ob (trans Œ∑‚Åª¬π) = DLRanNatTrans
   N-hom (trans Œ∑‚Åª¬π) {x = F} {y = G} Œ± = -- DLRanNatTrans F is functorial in F
     makeNatTransPath (funExt (Œª u ‚Üí limOfArrowsOut (FLimCone Œ± (u .fst)) (GLimCone Œ± (u .fst)) _ _))
   nIso Œ∑‚Åª¬π F = NatIso‚ÜíFUNCTORIso _ _ (DLRanNatIso F) .snd

 -- the counit
 Œµ (isEquivC DLPshfEquiv) = symNatIso Œµ‚Åª¬π
   where
   Œµ‚Åª¬π : NatIso ùüô‚ü® FUNCTOR L·µí·µñ C ‚ü© (DLRanFun ‚àòF (precomposeF C i))
   N-ob (trans Œµ‚Åª¬π) F = DLRanUnivProp (F ‚àòF i) F (idTrans _) .fst .fst
   N-hom (trans Œµ‚Åª¬π) {x = F} {y = G} Œ± = makeNatTransPath (funExt goal)
     where
     œÉ·∂† = DLRanUnivProp (F ‚àòF i) F (idTrans _) .fst .fst
     œÉ·µç = DLRanUnivProp (G ‚àòF i) G (idTrans _) .fst .fst
     goal : ‚àÄ (x : ob L·µí·µñ)
          ‚Üí Œ± .N-ob x ‚ãÜ‚ü® C ‚ü© œÉ·µç .N-ob x
          ‚â° œÉ·∂† .N-ob x ‚ãÜ‚ü® C ‚ü© limOfArrows (FLimCone (Œ± ‚àòÀ° i) _) (GLimCone (Œ± ‚àòÀ° i) _) (‚Üìnt (Œ± ‚àòÀ° i) x)
     goal = {!!}
   nIso Œµ‚Åª¬π = {!!}



 -- useful corollary
 -- if two natural transformations between sheaves agree on the basis they are identical
 makeNatTransPathRest : {F G : Functor L·µí·µñ C} (Œ± Œ≤ : NatTrans F G)
                      ‚Üí (‚àÄ (u : ob B·µí·µñ) ‚Üí (Œ± ‚àòÀ° i) .N-ob u ‚â° (Œ≤ ‚àòÀ° i) .N-ob u)
                      ‚Üí Œ± ‚â° Œ≤
 makeNatTransPathRest _ _ basePaths = isFaithfulRest _ _ _ _ (makeNatTransPath (funExt basePaths))
   where
   isFaithfulRest = isEquiv‚ÜíFaithful (symEquiv (DLPshfEquiv .isEquivC))

 -- putting it all together: our main result
 DLComparisonLemma : ShB ‚âÉ·∂ú ShL
 DLComparisonLemma = Œ£PropCatEquiv DLPshfEquiv (isDLSheafDLRan isBasisB) restPresSheafProp
