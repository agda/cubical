{-

  This file contains a proof of the following fact:
  Given a distributive lattice L with a basis B ‚äÜ L,
  then the category of sheaves on B is equivalent to
  the category of sheaves on L.

  This is a special case of the comparison lemma as stated in e.g.
  https://ncatlab.org/nlab/show/comparison+lemma

-}

{-# OPTIONS --safe --lossy-unification #-}
module Cubical.Categories.DistLatticeSheaf.ComparisonLemma where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Function
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Structure
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Powerset
open import Cubical.Data.Sigma
open import Cubical.Data.Nat using (‚Ñï ; _+_)
open import Cubical.Data.Nat.Order hiding (_‚â§_)
open import Cubical.Data.FinData
open import Cubical.Data.FinData.Order
open import Cubical.Data.Sum

open import Cubical.Relation.Binary.Poset
open import Cubical.HITs.PropositionalTruncation as PT

open import Cubical.Algebra.Semilattice
open import Cubical.Algebra.Lattice
open import Cubical.Algebra.DistLattice
open import Cubical.Algebra.DistLattice.Basis
open import Cubical.Algebra.DistLattice.BigOps

open import Cubical.Categories.Category.Base
open import Cubical.Categories.Morphism
open import Cubical.Categories.Functor
open import Cubical.Categories.NaturalTransformation
open import Cubical.Categories.Adjoint
open import Cubical.Categories.Equivalence
open import Cubical.Categories.Limits.Limits
open import Cubical.Categories.Limits.Pullback
open import Cubical.Categories.Limits.Terminal
open import Cubical.Categories.Limits.RightKan
open import Cubical.Categories.Instances.Poset
open import Cubical.Categories.Instances.Semilattice
open import Cubical.Categories.Instances.Lattice
open import Cubical.Categories.Instances.DistLattice
open import Cubical.Categories.Instances.Functors

open import Cubical.Categories.DistLatticeSheaf.Diagram
open import Cubical.Categories.DistLatticeSheaf.Base
open import Cubical.Categories.DistLatticeSheaf.Extension


private
  variable
    ‚Ñì ‚Ñì' ‚Ñì'' : Level

module _ (L : DistLattice ‚Ñì) (C : Category ‚Ñì' ‚Ñì'') (limitC : Limits {‚Ñì} {‚Ñì} C)
         (B : ‚Ñô (fst L)) (isBasisB : IsBasis L B) where


 open Category hiding (_‚àò_)
 open Functor
 open NatTrans
 open Cone
 open LimCone
 open SheafOnBasis L C B isBasisB
 open PreSheafExtension L C limitC B

 open DistLatticeStr ‚¶É...‚¶Ñ
 open JoinSemilattice (Lattice‚ÜíJoinSemilattice (DistLattice‚ÜíLattice L))
 open PosetStr (IndPoset .snd) hiding (_‚â§_)
 open Join L
 open Order (DistLattice‚ÜíLattice L)
 open MeetSemilattice (Lattice‚ÜíMeetSemilattice (DistLattice‚ÜíLattice L))
      using (‚àß‚â§RCancel ; ‚àß‚â§LCancel)
 private
  instance
   _ = snd L

  L·µí·µñ = DistLatticeCategory L ^op
  B·µí·µñ = Œ£PropCat (DistLatticeCategory L) B ^op

  SheafB = Œ£PropCat (FUNCTOR B·µí·µñ C) isDLBasisSheafProp
  SheafL = Œ£PropCat (FUNCTOR L·µí·µñ C) (isDLSheafProp L C)

  i = baseIncl ^opF

 restPresSheafProp : ‚àÄ (F : Functor L·µí·µñ C) ‚Üí isDLSheaf L C F ‚Üí isDLBasisSheaf (F ‚àòF i)
 restPresSheafProp F isSheafF Œ± ‚ãÅŒ±‚ààB =
   transport (Œª i ‚Üí isLimCone (diagPath i) (F .F-ob (‚ãÅ Œ±')) (limConesPathP i)) (isSheafF _ Œ±')
   where
   open condCone Œ±

   Œ±' : FinVec (fst L) _
   Œ±' i = Œ± i .fst

   diagPath : F ‚àòF (FinVec‚ÜíDiag L Œ±') ‚â° (F ‚àòF i) ‚àòF BDiag
   diagPath = Functor‚â° diagPathOb diagPathHom
     where
     diagPathOb : ‚àÄ c ‚Üí (F ‚àòF (FinVec‚ÜíDiag L Œ±')) .F-ob c ‚â° ((F ‚àòF i) ‚àòF BDiag) .F-ob c
     diagPathOb (sing i) = refl
     diagPathOb (pair i j i<j) = cong (F .F-ob) (‚àßlComm _ _)

     diagPathHom : ‚àÄ {c} {d} f ‚Üí PathP (Œª i ‚Üí C [ diagPathOb c i , diagPathOb d i ])
                                       ((F ‚àòF (FinVec‚ÜíDiag L Œ±')) .F-hom f)
                                       (((F ‚àòF i) ‚àòF BDiag) .F-hom f)
     diagPathHom {sing i} idAr = refl
     diagPathHom {pair i j i<j} idAr = functorCongP {F = F} (toPathP (is-prop-valued _ _ _ _))
     diagPathHom singPairL = functorCongP {F = F} (toPathP (is-prop-valued _ _ _ _))
     diagPathHom singPairR = functorCongP {F = F} (toPathP (is-prop-valued _ _ _ _))

   limConesPathP : PathP (Œª i ‚Üí Cone (diagPath i) (F .F-ob (‚ãÅ Œ±')))
                         (F-cone F (‚ãÅCone L Œ±')) (F-cone (F ‚àòF i) (B‚ãÅCone ‚ãÅŒ±‚ààB))
   limConesPathP = conePathP limConesPathPOb
     where
     limConesPathPOb : ‚àÄ c ‚Üí PathP (Œª i ‚Üí C [ F .F-ob (‚ãÅ Œ±') , diagPath i .F-ob c ])
                                   (F-cone F (‚ãÅCone L Œ±') .coneOut c)
                                   (F-cone (F ‚àòF i) (B‚ãÅCone ‚ãÅŒ±‚ààB) .coneOut c)
     limConesPathPOb (sing i) = refl
     limConesPathPOb (pair i j i<j) = functorCongP {F = F} (toPathP (is-prop-valued _ _ _ _))


 --restriction to basis as functor
 sheafRestriction : Functor SheafL SheafB
 sheafRestriction = Œ£PropCatFunc (precomposeF C i) restPresSheafProp

 -- important lemma: a natural transformation between sheaves on L is an
 -- iso if the restriction to B is an iso. This will give us that
 -- that the unit of the comparison lemma is an iso and thus that
 -- restriction of sheaves is fully-faithful
 restIsoLemma : (F G : ob SheafL) (Œ± : NatTrans (F .fst) (G .fst))
              ‚Üí (‚àÄ (u : ob B·µí·µñ) ‚Üí isIso C ((Œ± ‚àòÀ° i) .N-ob u))
              ‚Üí  ‚àÄ (x : ob L·µí·µñ) ‚Üí isIso C (Œ± .N-ob x)
 restIsoLemma (F , isSheafF) (G , isSheafG) Œ± Œ±iIso x =
   PT.rec (isPropIsIso _) basisHyp (isBasisB .‚ãÅBasis x)
   where
   Fi = F ‚àòF i
   Gi = G ‚àòF i
   open NatIso
   Œ±iNatIso : NatIso Fi Gi
   trans Œ±iNatIso = Œ± ‚àòÀ° i
   nIso Œ±iNatIso = Œ±iIso

   open IsBasis
   basisHyp : Œ£[ n ‚àà ‚Ñï ] Œ£[ u ‚àà FinVec (L .fst) n ] (‚àÄ j ‚Üí u j ‚àà B) √ó (‚ãÅ u ‚â° x)
            ‚Üí isIso C (Œ± .N-ob x)
   basisHyp (n , u , u‚ààB , ‚ãÅu‚â°x) = transport (Œª i ‚Üí isIso C (q i)) (subst (isIso C) p Œ±·µ§'IsIso)
     where
     open isIso

     FLimCone = isDLSheafLimCone L C F isSheafF n u
     GLimCone = isDLSheafLimCone L C G isSheafG n u

     u·¥Æ : FinVec (B·µí·µñ .ob) n
     u·¥Æ i = u i , u‚ààB i

     u·¥ÆDiag = condCone.BDiag u·¥Æ

     Œ±i‚Åª¬π : (v : ob B·µí·µñ) ‚Üí C [ Gi .F-ob v , Fi .F-ob v ]
     Œ±i‚Åª¬π v = Œ±iIso v .inv

     œÉ : NatTrans (F ‚àòF (FinVec‚ÜíDiag L u)) (G ‚àòF (FinVec‚ÜíDiag L u))
     N-ob œÉ = Œ± .N-ob ‚àò FinVec‚ÜíDiag L u .F-ob
     N-hom œÉ = Œ± .N-hom ‚àò FinVec‚ÜíDiag L u .F-hom

     open SemilatticeStr ‚¶É...‚¶Ñ
     instance _ = snd (Basis‚ÜíMeetSemilattice L B isBasisB)

     œÉ‚Åª¬π : NatTrans (G ‚àòF (FinVec‚ÜíDiag L u)) (F ‚àòF (FinVec‚ÜíDiag L u))
     N-ob œÉ‚Åª¬π (sing i) = Œ±i‚Åª¬π (u·¥ÆDiag .F-ob (sing i))
     N-ob œÉ‚Åª¬π (pair i j i<j) = Œ±i‚Åª¬π ((u j , u‚ààB j) ¬∑ (u i , u‚ààB i))
                               -- (u·¥ÆDiag .F-ob (pair i j i<j)) modulo swapping i and j
     N-hom œÉ‚Åª¬π (idAr {x = v}) =
       G .F-hom (id L·µí·µñ) ‚ãÜ‚ü® C ‚ü© œÉ‚Åª¬π .N-ob v ‚â°‚ü® cong (Œª f ‚Üí f ‚ãÜ‚ü® C ‚ü© œÉ‚Åª¬π .N-ob v) (G .F-id) ‚ü©
       id C ‚ãÜ‚ü® C ‚ü© œÉ‚Åª¬π .N-ob v              ‚â°‚ü® ‚ãÜIdL C _ ‚ü©
       œÉ‚Åª¬π .N-ob v                          ‚â°‚ü® sym (‚ãÜIdR C _) ‚ü©
       œÉ‚Åª¬π .N-ob v ‚ãÜ‚ü® C ‚ü© id C              ‚â°‚ü® cong (Œª f ‚Üí œÉ‚Åª¬π .N-ob v ‚ãÜ‚ü® C ‚ü© f) (sym (F .F-id)) ‚ü©
       œÉ‚Åª¬π .N-ob v ‚ãÜ‚ü® C ‚ü© F .F-hom (id L·µí·µñ) ‚àé
     N-hom œÉ‚Åª¬π (singPairL {i} {j} {i<j})  = transport (Œª ùïö ‚Üí p ùïö ‚â° r ùïö) q
       where
       p : PathP (Œª ùïö ‚Üí C [ G .F-ob (u i) , F .F-ob (fst (¬∑Comm (u i , u‚ààB i) (u j , u‚ààB j) ùïö)) ])
                 (G .F-hom (‚â§m‚Üí‚â§j _ _ (‚àß‚â§RCancel _ _)) ‚ãÜ‚ü® C ‚ü© Œ±i‚Åª¬π (u·¥ÆDiag .F-ob (pair i j i<j)))
                 (G .F-hom (‚â§m‚Üí‚â§j _ _ (‚àß‚â§LCancel _ _)) ‚ãÜ‚ü® C ‚ü© Œ±i‚Åª¬π ((u j , u‚ààB j) ¬∑ (u i , u‚ààB i)))
       p ùïö = G .F-hom (isProp‚ÜíPathP (Œª ùïö' ‚Üí is-prop-valued (‚àßlComm (u i) (u j) ùïö') (u i))
                      (‚â§m‚Üí‚â§j _ _ (‚àß‚â§RCancel _ _)) (‚â§m‚Üí‚â§j _ _ (‚àß‚â§LCancel _ _)) ùïö)
               ‚ãÜ‚ü® C ‚ü© Œ±i‚Åª¬π (¬∑Comm (u i , u‚ààB i) (u j , u‚ààB j) ùïö)

       q : G .F-hom (‚â§m‚Üí‚â§j _ _ (‚àß‚â§RCancel _ _)) ‚ãÜ‚ü® C ‚ü© Œ±i‚Åª¬π (u·¥ÆDiag .F-ob (pair i j i<j))
         ‚â° Œ±i‚Åª¬π (u i , u‚ààB i) ‚ãÜ‚ü® C ‚ü© F .F-hom (‚â§m‚Üí‚â§j _ _ (‚àß‚â§RCancel _ _))
       q = sqLL Œ±iNatIso

       r : PathP (Œª ùïö ‚Üí C [ G .F-ob (u i) , F .F-ob (fst (¬∑Comm (u i , u‚ààB i) (u j , u‚ààB j) ùïö)) ])
                 (Œ±i‚Åª¬π (u i , u‚ààB i) ‚ãÜ‚ü® C ‚ü© F .F-hom (‚â§m‚Üí‚â§j _ _ (‚àß‚â§RCancel _ _)))
                 (Œ±i‚Åª¬π (u i , u‚ààB i) ‚ãÜ‚ü® C ‚ü© F .F-hom (‚â§m‚Üí‚â§j _ _ (‚àß‚â§LCancel _ _)))
       r ùïö = Œ±i‚Åª¬π (u i , u‚ààB i)
               ‚ãÜ‚ü® C ‚ü© F .F-hom (isProp‚ÜíPathP (Œª ùïö' ‚Üí is-prop-valued (‚àßlComm (u i) (u j) ùïö') (u i))
                               (‚â§m‚Üí‚â§j _ _ (‚àß‚â§RCancel _ _)) (‚â§m‚Üí‚â§j _ _ (‚àß‚â§LCancel _ _)) ùïö)

     N-hom œÉ‚Åª¬π (singPairR {i} {j} {i<j}) =  transport (Œª ùïö ‚Üí p ùïö ‚â° r ùïö) q
       where
       p : PathP (Œª ùïö ‚Üí C [ G .F-ob (u j) , F .F-ob (fst (¬∑Comm (u i , u‚ààB i) (u j , u‚ààB j) ùïö)) ])
                 (G .F-hom (‚â§m‚Üí‚â§j _ _ (‚àß‚â§LCancel _ _)) ‚ãÜ‚ü® C ‚ü© Œ±i‚Åª¬π (u·¥ÆDiag .F-ob (pair i j i<j)))
                 (G .F-hom (‚â§m‚Üí‚â§j _ _ (‚àß‚â§RCancel _ _)) ‚ãÜ‚ü® C ‚ü© Œ±i‚Åª¬π ((u j , u‚ààB j) ¬∑ (u i , u‚ààB i)))
       p ùïö = G .F-hom (isProp‚ÜíPathP (Œª ùïö' ‚Üí is-prop-valued (‚àßlComm (u i) (u j) ùïö') (u j))
                      (‚â§m‚Üí‚â§j _ _ (‚àß‚â§LCancel _ _)) (‚â§m‚Üí‚â§j _ _ (‚àß‚â§RCancel _ _)) ùïö)
               ‚ãÜ‚ü® C ‚ü© Œ±i‚Åª¬π (¬∑Comm (u i , u‚ààB i) (u j , u‚ààB j) ùïö)

       q : G .F-hom (‚â§m‚Üí‚â§j _ _ (‚àß‚â§LCancel _ _)) ‚ãÜ‚ü® C ‚ü© Œ±i‚Åª¬π (u·¥ÆDiag .F-ob (pair i j i<j))
         ‚â° Œ±i‚Åª¬π (u j , u‚ààB j) ‚ãÜ‚ü® C ‚ü© F .F-hom (‚â§m‚Üí‚â§j _ _ (‚àß‚â§LCancel _ _))
       q = sqLL Œ±iNatIso

       r : PathP (Œª ùïö ‚Üí C [ G .F-ob (u j) , F .F-ob (fst (¬∑Comm (u i , u‚ààB i) (u j , u‚ààB j) ùïö)) ])
                 (Œ±i‚Åª¬π (u j , u‚ààB j) ‚ãÜ‚ü® C ‚ü© F .F-hom (‚â§m‚Üí‚â§j _ _ (‚àß‚â§LCancel _ _)))
                 (Œ±i‚Åª¬π (u j , u‚ààB j) ‚ãÜ‚ü® C ‚ü© F .F-hom (‚â§m‚Üí‚â§j _ _ (‚àß‚â§RCancel _ _)))
       r ùïö = Œ±i‚Åª¬π (u j , u‚ààB j)
               ‚ãÜ‚ü® C ‚ü© F .F-hom (isProp‚ÜíPathP (Œª ùïö' ‚Üí is-prop-valued (‚àßlComm (u i) (u j) ùïö') (u j))
                               (‚â§m‚Üí‚â§j _ _ (‚àß‚â§LCancel _ _)) (‚â§m‚Üí‚â§j _ _ (‚àß‚â§RCancel _ _)) ùïö)

     -- œÉ and œÉ‚Åª¬π are inverse:
     œÉœÉ‚Åª¬π‚â°id : œÉ ‚óè·µõ œÉ‚Åª¬π ‚â° idTrans _
     œÉœÉ‚Åª¬π‚â°id = makeNatTransPath (funExt œÉœÉ‚Åª¬π‚â°idOb)
       where
       œÉœÉ‚Åª¬π‚â°idOb : ‚àÄ x ‚Üí œÉ .N-ob x ‚ãÜ‚ü® C ‚ü© œÉ‚Åª¬π .N-ob x ‚â° id C
       œÉœÉ‚Åª¬π‚â°idOb (sing i) = Œ±iIso (u i , u‚ààB i) .ret
       œÉœÉ‚Åª¬π‚â°idOb (pair i j i<j) = Œ±iIso ((u j , u‚ààB j) ¬∑ (u i , u‚ààB i)) .ret

     œÉ‚Åª¬πœÉ‚â°id : œÉ‚Åª¬π ‚óè·µõ œÉ ‚â° idTrans _
     œÉ‚Åª¬πœÉ‚â°id = makeNatTransPath (funExt œÉ‚Åª¬πœÉ‚â°idOb)
       where
       œÉ‚Åª¬πœÉ‚â°idOb : ‚àÄ x ‚Üí œÉ‚Åª¬π .N-ob x ‚ãÜ‚ü® C ‚ü© œÉ .N-ob x ‚â° id C
       œÉ‚Åª¬πœÉ‚â°idOb (sing i) = Œ±iIso (u i , u‚ààB i) .sec
       œÉ‚Åª¬πœÉ‚â°idOb (pair i j i<j) = Œ±iIso ((u j , u‚ààB j) ¬∑ (u i , u‚ààB i)) .sec


     Œ±·µ§' = limOfArrows FLimCone GLimCone œÉ
     Œ±·µ§'‚Åª¬π = limOfArrows GLimCone FLimCone œÉ‚Åª¬π

     Œ±·µ§'IsIso : isIso C Œ±·µ§'
     inv Œ±·µ§'IsIso = Œ±·µ§'‚Åª¬π
     sec Œ±·µ§'IsIso = sym (limOfArrowsSeq GLimCone FLimCone GLimCone œÉ‚Åª¬π œÉ)
                  ‚àô‚àô cong (limOfArrows GLimCone GLimCone) œÉ‚Åª¬πœÉ‚â°id
                  ‚àô‚àô limOfArrowsId GLimCone
     ret Œ±·µ§'IsIso = sym (limOfArrowsSeq FLimCone GLimCone FLimCone œÉ œÉ‚Åª¬π)
                  ‚àô‚àô cong (limOfArrows FLimCone FLimCone) œÉœÉ‚Åª¬π‚â°id
                  ‚àô‚àô limOfArrowsId FLimCone


     p : Œ±·µ§' ‚â° (Œ± .N-ob (‚ãÅ u))
     p = limArrowUnique GLimCone _ _ _
           (isConeMorSingLemma (limOfArrowsCone FLimCone œÉ) (F-cone G (‚ãÅCone L u))
             Œª i ‚Üí sym (Œ± .N-hom (ind‚â§‚ãÅ u i)))

     q : PathP (Œª i ‚Üí C [ F .F-ob (‚ãÅu‚â°x i) , G .F-ob (‚ãÅu‚â°x i) ]) (Œ± .N-ob (‚ãÅ u)) (Œ± .N-ob x)
     q = cong (Œ± .N-ob) ‚ãÅu‚â°x


 -- notation
 private module _ {F G : Functor B·µí·µñ C} (Œ± : NatTrans F G) (x : ob L·µí·µñ) where
  theDiag = (_‚ÜìDiag limitC i F x)
  -- note that (_‚ÜìDiag limitC i F x) = (_‚ÜìDiag limitC i G x) definitionally
  FLimCone = limitC (_‚ÜìDiag limitC i F x) (T* limitC i F x)
  GLimCone = limitC (_‚ÜìDiag limitC i G x) (T* limitC i G x)

  ‚Üìnt : NatTrans (T* limitC i F x) (T* limitC i G x)
  N-ob ‚Üìnt u = Œ± .N-ob (u .fst)
  N-hom ‚Üìnt e = Œ± .N-hom (e .fst)

  module _ (y : ob L·µí·µñ) (x‚â•y : L·µí·µñ [ x , y ]) where
   GYLimCone = limitC (_‚ÜìDiag limitC i G y) (T* limitC i G y)
   FYLimCone = limitC (_‚ÜìDiag limitC i F y) (T* limitC i F y)

   diagCone : Cone (T* limitC i G y) (RanOb limitC i F x)
   coneOut diagCone (u , y‚â•u) = limOut FLimCone (u , is-trans _ _ _ y‚â•u x‚â•y)
                                  ‚ãÜ‚ü® C ‚ü© Œ± .N-ob u
   coneOutCommutes diagCone {u = (u , y‚â•u)} {v = (v , y‚â•v)} (u‚â•v , _) =
       (limOut FLimCone (u , is-trans _ _ _ y‚â•u x‚â•y) ‚ãÜ‚ü® C ‚ü© Œ± .N-ob u) ‚ãÜ‚ü® C ‚ü© G .F-hom u‚â•v
     ‚â°‚ü® ‚ãÜAssoc C _ _ _ ‚ü©
       limOut FLimCone (u , is-trans _ _ _ y‚â•u x‚â•y) ‚ãÜ‚ü® C ‚ü© (Œ± .N-ob u ‚ãÜ‚ü® C ‚ü© G .F-hom u‚â•v)
     ‚â°‚ü® cong (seq' C (limOut FLimCone (u , is-trans _ _ _ y‚â•u x‚â•y))) (sym (Œ± .N-hom u‚â•v)) ‚ü©
       limOut FLimCone (u , is-trans _ _ _ y‚â•u x‚â•y) ‚ãÜ‚ü® C ‚ü© (F .F-hom u‚â•v ‚ãÜ‚ü® C ‚ü© Œ± .N-ob v)
     ‚â°‚ü® sym (‚ãÜAssoc C _ _ _) ‚ü©
       (limOut FLimCone (u , is-trans _ _ _ y‚â•u x‚â•y) ‚ãÜ‚ü® C ‚ü© F .F-hom u‚â•v) ‚ãÜ‚ü® C ‚ü© Œ± .N-ob v
     ‚â°‚ü® cong (Œª x ‚Üí x ‚ãÜ‚ü® C ‚ü© Œ± .N-ob v) (limOutCommutes FLimCone (u‚â•v , is-prop-valued _ _ _ _)) ‚ü©
       limOut FLimCone (v , is-trans _ _ _ y‚â•v x‚â•y) ‚ãÜ‚ü® C ‚ü© Œ± .N-ob v ‚àé
   diagArrow : C [ RanOb limitC i F x , RanOb limitC i G y ]
   diagArrow = limArrow GYLimCone _ diagCone



 DLRanFun : Functor (FUNCTOR B·µí·µñ C) (FUNCTOR L·µí·µñ C)
 F-ob DLRanFun = DLRan
 N-ob (F-hom DLRanFun Œ±) x = limOfArrows (FLimCone Œ± _) (GLimCone Œ± _) (‚Üìnt Œ± x)
 N-hom (F-hom DLRanFun {x = F} {y = G} Œ±) {x = x} {y = y} x‚â•y =
   sym (limArrowUnique (GLimCone Œ± y) _ (diagCone Œ± x y x‚â•y) _ isConeMorL)
     ‚àô (limArrowUnique (GLimCone Œ± y) _ _ _ isConeMorR)
   where
   l = limArrow (FLimCone Œ± y) _ (RanCone limitC i F x‚â•y)
           ‚ãÜ‚ü® C ‚ü© limOfArrows (FLimCone Œ± _) (GLimCone Œ± _) (‚Üìnt Œ± y)

   isConeMorL : isConeMor (diagCone Œ± x y x‚â•y) (limCone (GLimCone Œ± y)) l
   isConeMorL (u , y‚â•u) =
       l ‚ãÜ‚ü® C ‚ü© (limOut (GLimCone Œ± y) (u , y‚â•u))
     ‚â°‚ü® ‚ãÜAssoc C _ _ _ ‚ü©
       limArrow (FLimCone Œ± y) _ (RanCone limitC i F x‚â•y)
         ‚ãÜ‚ü® C ‚ü© (limOfArrows (FLimCone Œ± _) (GLimCone Œ± _) (‚Üìnt Œ± y)
                   ‚ãÜ‚ü® C ‚ü© (limOut (GLimCone Œ± y) (u , y‚â•u)))
     ‚â°‚ü® cong (seq' C (limArrow (FLimCone Œ± y) _ (RanCone limitC i F x‚â•y)))
             (limOfArrowsOut (FLimCone Œ± _) (GLimCone Œ± _) _ _) ‚ü©
       limArrow (FLimCone Œ± y) _ (RanCone limitC i F x‚â•y)
         ‚ãÜ‚ü® C ‚ü© (limOut (FLimCone Œ± _) (u , y‚â•u) ‚ãÜ‚ü® C ‚ü© Œ± .N-ob u)
     ‚â°‚ü® sym (‚ãÜAssoc C _ _ _) ‚ü©
       (limArrow (FLimCone Œ± y) _ (RanCone limitC i F x‚â•y)
         ‚ãÜ‚ü® C ‚ü© (limOut (FLimCone Œ± _) (u , y‚â•u))) ‚ãÜ‚ü® C ‚ü© Œ± .N-ob u
     ‚â°‚ü® cong (Œª x ‚Üí x ‚ãÜ‚ü® C ‚ü© (Œ± .N-ob u)) (limArrowCommutes (FLimCone Œ± _) _ _ _) ‚ü©
       limOut (FLimCone Œ± x) (u , is-trans _ _ _ y‚â•u x‚â•y) ‚ãÜ‚ü® C ‚ü© Œ± .N-ob u ‚àé

   r = limOfArrows (FLimCone Œ± _) (GLimCone Œ± _) (‚Üìnt Œ± x)
           ‚ãÜ‚ü® C ‚ü© limArrow (GLimCone Œ± y) _ (RanCone limitC i G x‚â•y)

   isConeMorR : isConeMor (diagCone Œ± x y x‚â•y) (limCone (GLimCone Œ± y)) r
   isConeMorR (u , y‚â•u) =
       r ‚ãÜ‚ü® C ‚ü© (limOut (GLimCone Œ± y) (u , y‚â•u))
     ‚â°‚ü® ‚ãÜAssoc C _ _ _ ‚ü©
       limOfArrows (FLimCone Œ± _) (GLimCone Œ± _) (‚Üìnt Œ± x)
         ‚ãÜ‚ü® C ‚ü© (limArrow (GLimCone Œ± y) _ (RanCone limitC i G x‚â•y)
                 ‚ãÜ‚ü® C ‚ü© (limOut (GLimCone Œ± y) (u , y‚â•u)))
     ‚â°‚ü® cong (seq' C (limOfArrows (FLimCone Œ± _) (GLimCone Œ± _) (‚Üìnt Œ± x)))
          (limArrowCommutes (GLimCone Œ± _) _ _ _) ‚ü©
       limOfArrows (FLimCone Œ± _) (GLimCone Œ± _) (‚Üìnt Œ± x)
         ‚ãÜ‚ü® C ‚ü© limOut (GLimCone Œ± x) (u , is-trans _ _ _ y‚â•u x‚â•y)
     ‚â°‚ü® limOfArrowsOut (FLimCone Œ± x) (GLimCone Œ± x) _ _ ‚ü©
       limOut (FLimCone Œ± x) (u , is-trans _ _ _ y‚â•u x‚â•y) ‚ãÜ‚ü® C ‚ü© Œ± .N-ob u ‚àé


 F-id DLRanFun {x = F} = makeNatTransPath
                           (funExt Œª x ‚Üí limOfArrowsId (FLimCone (idTrans F) x))
 F-seq DLRanFun Œ± Œ≤ = makeNatTransPath
                        (funExt Œª x ‚Üí limOfArrowsSeq (FLimCone Œ± x) (GLimCone Œ± x)
                                                     (GLimCone Œ≤ x) (‚Üìnt Œ± x) (‚Üìnt Œ≤ x))



 --extension of sheaves as functor
 sheafExtension : Functor SheafB SheafL
 sheafExtension = Œ£PropCatFunc DLRanFun (isDLSheafDLRan isBasisB)



 open _‚âÉ·∂ú_ renaming (isEquiv to isEquivC)
 open isEquivalence
 open NatIso
 open isIso

 DLComparisonLemma : SheafL ‚âÉ·∂ú SheafB
 func DLComparisonLemma = sheafRestriction
 invFunc (isEquivC DLComparisonLemma) = sheafExtension

 -- the unit is induced by the universal property
 N-ob (trans (Œ∑ (isEquivC DLComparisonLemma))) (F , _ ) =
   DLRanUnivProp (F ‚àòF i) F (idTrans _) .fst .fst
 N-hom (trans (Œ∑ (isEquivC DLComparisonLemma))) {x = (F , _)} {y = (G , _)} Œ± =
   makeNatTransPath (funExt goal)
     where
     isConeMorComp : ‚àÄ (x : ob L·µí·µñ)
                   ‚Üí isConeMor
                       ((NatTransCone _ _ _ F (idTrans _) x) ‚òÖ‚Çô‚Çú (‚Üìnt (Œ± ‚àòÀ° i) x))
                         (GLimCone (Œ± ‚àòÀ° i) _ .limCone)
                           (Œ± .N-ob x
                             ‚ãÜ‚ü® C ‚ü© limArrow (GLimCone (Œ± ‚àòÀ° i) _) _
                                             (NatTransCone _ _ _ G (idTrans _) x))
     isConeMorComp x u‚áÇ@((u , u‚ààB) , u‚â§x) =
         Œ± .N-ob x ‚ãÜ‚ü® C ‚ü© limArrow (GLimCone (Œ± ‚àòÀ° i) _) _
                                   (NatTransCone _ _ _ G (idTrans _) x)
                   ‚ãÜ‚ü® C ‚ü© limOut (GLimCone (Œ± ‚àòÀ° i) _) u‚áÇ
       ‚â°‚ü® ‚ãÜAssoc C _ _ _ ‚ü©
         Œ± .N-ob x ‚ãÜ‚ü® C ‚ü© (limArrow (GLimCone (Œ± ‚àòÀ° i) _) _
                                    (NatTransCone _ _ _ G (idTrans _) x)
                            ‚ãÜ‚ü® C ‚ü© limOut (GLimCone (Œ± ‚àòÀ° i) _) u‚áÇ)
       ‚â°‚ü® cong (Œª y ‚Üí Œ± .N-ob x ‚ãÜ‚ü® C ‚ü© y) (limArrowCommutes (GLimCone (Œ± ‚àòÀ° i) _) _ _ _) ‚ü©
         Œ± .N-ob x ‚ãÜ‚ü® C ‚ü© (G .F-hom u‚â§x ‚ãÜ‚ü® C ‚ü© id C)
       ‚â°‚ü® cong (Œª y ‚Üí Œ± .N-ob x ‚ãÜ‚ü® C ‚ü© y) (‚ãÜIdR C _) ‚ü©
         Œ± .N-ob x ‚ãÜ‚ü® C ‚ü© G .F-hom u‚â§x
       ‚â°‚ü® sym (Œ± .N-hom u‚â§x) ‚ü©
         F .F-hom u‚â§x ‚ãÜ‚ü® C ‚ü© Œ± .N-ob u
       ‚â°‚ü® cong (Œª x ‚Üí x ‚ãÜ‚ü® C ‚ü© Œ± .N-ob u) (sym (‚ãÜIdR C _)) ‚ü©
         F .F-hom u‚â§x ‚ãÜ‚ü® C ‚ü© id C ‚ãÜ‚ü® C ‚ü© Œ± .N-ob u ‚àé

     goal : ‚àÄ (x : ob L·µí·µñ)
          ‚Üí Œ± .N-ob x ‚ãÜ‚ü® C ‚ü© limArrow (GLimCone (Œ± ‚àòÀ° i) _) _
                                      (NatTransCone _ _ _ G (idTrans _) x)
          ‚â° limArrow (FLimCone (Œ± ‚àòÀ° i) _) _
                     (NatTransCone _ _ _ F (idTrans _) x)
               ‚ãÜ‚ü® C ‚ü© limOfArrows (FLimCone (Œ± ‚àòÀ° i) _) (GLimCone (Œ± ‚àòÀ° i) _)
                                  (‚Üìnt (Œ± ‚àòÀ° i) x)
     goal x = sym (limArrowUnique _ _ _ _ (isConeMorComp x))
            ‚àô limArrowCompLimOfArrows _ _ _ _ _

 nIso (Œ∑ (isEquivC DLComparisonLemma)) (F , isSheafF) = isIsoŒ£PropCat _ _ _
   (NatIso‚ÜíFUNCTORIso _ _ œÉNatIso .snd)
   where
   œÉ = DLRanUnivProp (F ‚àòF i) F (idTrans _) .fst .fst

   œÉRestIso : isIso (FUNCTOR B·µí·µñ C) (œÉ ‚àòÀ° i)
   inv œÉRestIso = DLRanNatTrans (F ‚àòF i)
   sec œÉRestIso = let Œµ = DLRanNatTrans (F ‚àòF i)
                      Œµ‚Åª¬π = NatIso‚ÜíFUNCTORIso _ _ (DLRanNatIso (F ‚àòF i)) .snd .inv
     in Œµ ‚óè·µõ (œÉ ‚àòÀ° i)
      ‚â°‚ü® cong (Œª x ‚Üí Œµ ‚óè·µõ x) (sym (‚ãÜIdR (FUNCTOR B·µí·µñ C) _)) ‚ü©
        Œµ ‚óè·µõ ((œÉ ‚àòÀ° i) ‚óè·µõ idTrans _)
      ‚â°‚ü® cong (Œª x ‚Üí Œµ ‚óè·µõ ((œÉ ‚àòÀ° i) ‚óè·µõ x))
              (sym (NatIso‚ÜíFUNCTORIso _ _ (DLRanNatIso (F ‚àòF i)) .snd .ret)) ‚ü©
        Œµ ‚óè·µõ ((œÉ ‚àòÀ° i) ‚óè·µõ (Œµ ‚óè·µõ Œµ‚Åª¬π))
      ‚â°‚ü® cong (Œª x ‚Üí Œµ ‚óè·µõ x) (sym (‚ãÜAssoc (FUNCTOR B·µí·µñ C) _ _ _)) ‚ü©
        Œµ ‚óè·µõ ((œÉ ‚àòÀ° i) ‚óè·µõ Œµ ‚óè·µõ Œµ‚Åª¬π)
      ‚â°‚ü® cong (Œª x ‚Üí Œµ ‚óè·µõ (x ‚óè·µõ Œµ‚Åª¬π))
              (sym (DLRanUnivProp (F ‚àòF i) F (idTrans _) .fst .snd)) ‚ü©
        Œµ ‚óè·µõ (idTrans _ ‚óè·µõ Œµ‚Åª¬π)
      ‚â°‚ü® cong (Œª x ‚Üí Œµ ‚óè·µõ x) (‚ãÜIdL (FUNCTOR B·µí·µñ C) _) ‚ü©
        Œµ ‚óè·µõ Œµ‚Åª¬π
      ‚â°‚ü® NatIso‚ÜíFUNCTORIso _ _ (DLRanNatIso (F ‚àòF i)) .snd .ret ‚ü©
        idTrans _ ‚àé
   ret œÉRestIso = sym (DLRanUnivProp (F ‚àòF i) F (idTrans _) .fst .snd)

   œÉNatIso : NatIso F (DLRan (F ‚àòF i))
   trans œÉNatIso = œÉ
   nIso œÉNatIso = restIsoLemma
                    (F , isSheafF)
                      (_ , isDLSheafDLRan isBasisB _ (restPresSheafProp _ isSheafF))
                        œÉ
                          (FUNCTORIso‚ÜíNatIso _ _ (_ , œÉRestIso) .nIso)

 -- the counit is easy
 N-ob (trans (Œµ (isEquivC DLComparisonLemma))) (F , _) = DLRanNatTrans F
 N-hom (trans (Œµ (isEquivC DLComparisonLemma))) Œ± = -- DLRanNatTrans F is functorial in F
   makeNatTransPath (funExt (Œª u ‚Üí limOfArrowsOut (FLimCone Œ± (u .fst))
                                                  (GLimCone Œ± (u .fst)) _ _))
 nIso (Œµ (isEquivC DLComparisonLemma)) (F , isSheafF) = isIsoŒ£PropCat _ _ _
   (NatIso‚ÜíFUNCTORIso _ _ (DLRanNatIso F) .snd)


 -- useful corollary:
 -- if two natural transformations between sheaves agree on the basis they are identical
 makeNatTransPathRest : (F G : ob SheafL) (Œ± Œ≤ : NatTrans (F .fst) (G .fst))
                      ‚Üí (‚àÄ (u : ob B·µí·µñ) ‚Üí (Œ± ‚àòÀ° i) .N-ob u ‚â° (Œ≤ ‚àòÀ° i) .N-ob u)
                      ‚Üí Œ± ‚â° Œ≤
 makeNatTransPathRest F G _ _ basePaths = isFaithfulSheafRestriction F G _ _
                                            (makeNatTransPath (funExt basePaths))
   where
   isFaithfulSheafRestriction = isEquiv‚ÜíFaithful (DLComparisonLemma .isEquivC)
